{
    "doc": {
        "description": "Half ORM half DB management, the simplest class for data queries.\n\nHello world!\n",
        "tags": {
            "category": "Database",
            "package": "Bbn",
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT",
            "version": "Release: <package_version>",
            "link": "https:\/\/bbn.io\/bbn-php\/doc\/class\/db",
            "since": "Apr 4, 2011, 23:23:55 +0000",
            "todo": "Check for the tables and column names legality in _treat_arguments"
        }
    },
    "name": "bbn\\Db",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\Cache",
        "bbn\\Models\\Tts\\Retriever"
    ],
    "interfaces": {
        "bbn\\Db\\Actions": {
            "name": "bbn\\Db\\Actions"
        },
        "Stringable": {
            "name": "Stringable"
        }
    },
    "fileName": "\/Db.php",
    "startLine": 20,
    "endLine": 3368,
    "numMethods": 157,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 3,
    "interfaceNames": [
        "bbn\\Db\\Actions",
        "Stringable"
    ],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\Cache",
        "bbn\\Models\\Tts\\Retriever"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "engines": {
            "mysql": "nf nf-dev-mysql",
            "pgsql": "nf nf-dev-postgresql",
            "sqlite": "nf nf-dev-sqllite"
        },
        "retriever_instance": null,
        "retriever_exists": false,
        "language": null,
        "engine": null,
        "_cache_prefix": null,
        "cache_engine": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn",
    "shortName": "Db",
    "contentConstructor": {
        "file": "bbn\\Db",
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Constructor",
            "description": "```php\n$dbtest = new bbn\\Db(['db_user' => 'test','db_engine' => 'mysql','db_host' => 'host','db_pass' => 't6pZDwRdfp4IM']);\n \/\/ (void)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$dbtest = new bbn\\Db(['db_user' => 'test','db_engine' => 'mysql','db_host' => 'host','db_pass' => 't6pZDwRdfp4IM']);\n \/\/ (void)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg = [])\n  {\n    if (!isset($cfg['engine']) && \\defined('BBN_DB_ENGINE')) {\n      $cfg['engine'] = BBN_DB_ENGINE;\n    }\n\n    if (isset($cfg['engine'])) {\n      if ($cfg['engine'] instanceof Engines) {\n        $this->language = $cfg['engine'];\n      }\n      else {\n        $engine = $cfg['engine'];\n        $cls    = '\\\\bbn\\\\Db\\\\Languages\\\\'.ucwords($engine);\n\n        if (!class_exists($cls)) {\n          throw new \\Exception(X::_(\"The database engine %s is not recognized\", $engine));\n        }\n\n        $this->language = new $cls($cfg);\n      }\n\n      self::retrieverInit($this);\n      $this->cacheInit();\n\n      if ($cfg = $this->getCfg()) {\n        $this->postCreation();\n        $this->engine = (string)$cfg['engine'];\n        $this->startFancyStuff();\n      }\n    }\n\n    if (!$this->engine) {\n      $connection  = $cfg['engine'] ?? 'No engine';\n      $connection .= '\/'.($cfg['db'] ?? 'No DB');\n      $this->log(X::_(\"Impossible to create the connection for\").' '.$connection);\n      throw new \\Exception(X::_(\"Impossible to create the connection for\").' '.$connection);\n    }\n  }",
            "startLine": 57,
            "endLine": 94,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Mandatory db_user db_engine db_host db_pass"
                }
            ]
        },
        "close": {
            "name": "close",
            "summary": "Closes the connection making the object unusable.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->language) {\n      $this->language->close();\n      $this->setErrorMode('continue');\n    }\n  }",
            "startLine": 102,
            "endLine": 108,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": []
        },
        "isEngineSupported": {
            "name": "isEngineSupported",
            "summary": "Says if the given database engine is supported or not",
            "description": "```php\nX::adump(\n  $db->isEngineSupported(\"mysql\"), \/\/ true\n  $db->isEngineSupported(\"postgre\"), \/\/ false\n  $db->isEngineSupported(\"sqlite\"), \/\/ true\n  $db->isEngineSupported(\"mssql\"), \/\/ false\n  $db->isEngineSupported(\"test\") \/\/ false\n);\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump(\n  $db->isEngineSupported(\"mysql\"), \/\/ true\n  $db->isEngineSupported(\"postgre\"), \/\/ false\n  $db->isEngineSupported(\"sqlite\"), \/\/ true\n  $db->isEngineSupported(\"mssql\"), \/\/ false\n  $db->isEngineSupported(\"test\") \/\/ false\n);"
                }
            ],
            "file": "bbn\\Db",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $engine)\n  {\n    return isset(self::$engines[$engine]);\n  }",
            "startLine": 128,
            "endLine": 131,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "engine",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getEngineIcon": {
            "name": "getEngineIcon",
            "summary": "Returns the icon (CSS class from nerd fonts) for the given db engine",
            "description": "```php\necho '<i class=\"'.$ctrl->db->getEngineIcon(\"mysql\").'\"><\/i>'; \/\/ nf nf-dev-mysql\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "echo '<i class=\"'.$ctrl->db->getEngineIcon(\"mysql\").'\"><\/i>'; \/\/ nf nf-dev-mysql"
                }
            ],
            "file": "bbn\\Db",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $engine)\n  {\n    return self::$engines[$engine] ?? null;\n  }",
            "startLine": 145,
            "endLine": 148,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "engine",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Name of the engine"
                }
            ]
        },
        "getCfg": {
            "name": "getCfg",
            "summary": "Return the config of the language",
            "description": "```php\nadump($ctrl->db->getCfg(\"mysql\"));\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "adump($ctrl->db->getCfg(\"mysql\"));"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getCfg();\n  }",
            "startLine": 159,
            "endLine": 162,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getEngine": {
            "name": "getEngine",
            "summary": "Returns the engine used by the current connection.",
            "description": "```php\nX::adump($ctrl->db->getEngine()); \/\/ mysql\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->getEngine()); \/\/ mysql"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->engine;\n  }",
            "startLine": 173,
            "endLine": 176,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getHost": {
            "name": "getHost",
            "summary": "Returns the host of the current connection.",
            "description": "```php\nX::adump($ctrl->db->getHost()); \/\/ db.m3l.co\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->getHost()); \/\/ db.m3l.co"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getHost();\n  }",
            "startLine": 188,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getCurrent": {
            "name": "getCurrent",
            "summary": "Returns the current database selected by the current connection.",
            "description": "```php\nX::adump($ctrl->db->getCurrent()); \/\/ dev_mk\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->getCurrent()); \/\/ dev_mk"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getCurrent();\n  }",
            "startLine": 203,
            "endLine": 206,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getLastError": {
            "name": "getLastError",
            "summary": "Returns the last error, return null if there is no last error.",
            "description": "```php\nX::adump($ctrl->db->getLastError()); \/\/ null\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->getLastError()); \/\/ null"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getLastError();\n  }",
            "startLine": 218,
            "endLine": 221,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "isAggregateFunction": {
            "name": "isAggregateFunction",
            "summary": "Returns true if the column name is an aggregate function",
            "description": "```php\nX::adump($ctrl->db->isAggregateFunction(\"name\")); \/\/ false\nX::adump($ctrl->db->isAggregateFunction(\"ID\")); \/\/ true\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->isAggregateFunction(\"name\")); \/\/ false\nX::adump($ctrl->db->isAggregateFunction(\"ID\")); \/\/ true"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $f)\n  {\n    $cls = '\\\\bbn\\\\Db\\\\languages\\\\'.$this->engine;\n    return $cls::isAggregateFunction($f);\n  }",
            "startLine": 235,
            "endLine": 239,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "f",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to check"
                }
            ]
        },
        "__toString": {
            "name": "__toString",
            "summary": "Makes that echoing the connection shows its engine and host.",
            "description": "```php\nX::adump($ctrl->db->__toString()); \/\/ Connection mysql to db.m3l.co\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->__toString()); \/\/ Connection mysql to db.m3l.co"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return \"Connection {$this->engine} to \" . $this->getHost();\n  }",
            "startLine": 251,
            "endLine": 254,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getConnectionCode": {
            "name": "getConnectionCode",
            "summary": "Returns the connection code",
            "description": "```php\nX::adump($ctrl->db->getConnectionCode()); \/\/ dev_mk@db.m3l.co\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->getConnectionCode()); \/\/ dev_mk@db.m3l.co"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getConnectionCode();\n  }",
            "startLine": 266,
            "endLine": 269,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getLastCfg": {
            "name": "getLastCfg",
            "summary": "Returns the last config for this connection.",
            "description": "```php\nX::dump($db->getLastCfg());\n\/\/ (array) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getLastCfg());\n\/\/ (array) INSERT INTO `db_example.table_user` (`name`) VALUES (?)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getLastCfg();\n  }",
            "startLine": 281,
            "endLine": 284,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getConnection": {
            "name": "getConnection",
            "summary": "```php",
            "description": "X::adump($ctrl->db->getConnection());\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>X::adump($ctrl-&gt;db-&gt;getConnection());<\/p>\n<pre><code><\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg = [])\n  {\n    return $this->language->getConnection($cfg);\n  }",
            "startLine": 295,
            "endLine": 298,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The user's options"
                }
            ]
        },
        "getHash": {
            "name": "getHash",
            "summary": "Gets the created hash.",
            "description": "```php\nX::dump($db->getHash());\n\/\/ (string) 3819056v431b210daf45f9b5dc2\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getHash());\n\/\/ (string) 3819056v431b210daf45f9b5dc2"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getHash();\n  }",
            "startLine": 318,
            "endLine": 321,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "replaceTableInConditions": {
            "name": "replaceTableInConditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $conditions, $old_name, $new_name)\n  {\n    return X::map(\n      function ($a) use ($old_name, $new_name) {\n        if (!empty($a['field'])) {\n          $a['field'] = preg_replace(\"\/(\\\\W|^)$old_name([\\\\`\\\\']*\\\\s*)\\\\.\/\", '$1'.$new_name.'$2.', $a['field']);\n        }\n\n        if (!empty($a['exp'])) {\n          $a['exp'] = preg_replace(\"\/(\\\\W|^)$old_name([\\\\`\\\\']*\\\\s*)\\\\.\/\", '$1'.$new_name.'$2.', $a['exp']);\n        }\n\n        return $a;\n      }, $conditions, 'conditions'\n    );\n  }",
            "startLine": 330,
            "endLine": 345,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "conditions",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "old_name",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "new_name",
                    "position": 2,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "treatConditions": {
            "name": "treatConditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $where, bool $full = true)\n  {\n    return $this->language->treatConditions($where, $full);\n  }",
            "startLine": 353,
            "endLine": 356,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "reprocessCfg": {
            "name": "reprocessCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->language->reprocessCfg($cfg);\n  }",
            "startLine": 363,
            "endLine": 366,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "processCfg": {
            "name": "processCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $args, bool $force = false)\n  {\n    return $this->language->processCfg($args, $force);\n  }",
            "startLine": 374,
            "endLine": 377,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "check": {
            "name": "check",
            "summary": "Checks if the database is ready to process a query.",
            "description": "```php\nX::dump($db->check());\n\/\/ (bool)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->check());\n\/\/ (bool)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->check();\n  }",
            "startLine": 389,
            "endLine": 392,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "Writes in data\/logs\/db.log.",
            "description": "```php\n$db->$db->log('test');\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->$db->log('test');"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    $args = \\func_get_args();\n    foreach ($args as $a){\n      X::log($a, 'db');\n    }\n\n    return $this;\n  }",
            "startLine": 404,
            "endLine": 412,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setErrorMode": {
            "name": "setErrorMode",
            "summary": "Sets the error mode.",
            "description": "```php\n$db->setErrorMode('continue'|'die'|'stop_all|'stop');\n\/\/ (self)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->setErrorMode('continue'|'die'|'stop_all|'stop');\n\/\/ (self)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $mode)\n  {\n    $this->language->setErrorMode($mode);\n    return $this;\n  }",
            "startLine": 426,
            "endLine": 430,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "mode",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The error mode: \"continue\", \"die\", \"stop\", \"stop_all\"."
                }
            ]
        },
        "getErrorMode": {
            "name": "getErrorMode",
            "summary": "Gets the error mode.",
            "description": "```php\nX::dump($db->getErrorMode());\n\/\/ (string) stop_all\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getErrorMode());\n\/\/ (string) stop_all"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getErrorMode();\n  }",
            "startLine": 443,
            "endLine": 446,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "clearCache": {
            "name": "clearCache",
            "summary": "Deletes a specific item from the cache.",
            "description": "```php\nX::dump($db->clearCache('db_example','tables'));\n\/\/ (db)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->clearCache('db_example','tables'));\n\/\/ (db)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $item, string $mode)\n  {\n    if ($this->cacheHas($item, $mode)) {\n      $this->cacheDelete($item, $mode);\n    }\n\n    return $this;\n  }",
            "startLine": 461,
            "endLine": 468,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "'db_name' or 'table_name'"
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "'columns','tables' or 'databases'"
                }
            ]
        },
        "clearAllCache": {
            "name": "clearAllCache",
            "summary": "Clears the cache.",
            "description": "```php\nX::dump($db->clearAllCache());\n\/\/ (db)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->clearAllCache());\n\/\/ (db)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->cacheDeleteAll();\n    return $this;\n  }",
            "startLine": 481,
            "endLine": 485,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "stopFancyStuff": {
            "name": "stopFancyStuff",
            "summary": "Stops fancy stuff.",
            "description": "```php\n $db->stopFancyStuff();\n\/\/ (self)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->stopFancyStuff();\n\/\/ (self)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->language) {\n      $this->language->stopFancyStuff();\n    }\n\n    return $this;\n  }",
            "startLine": 498,
            "endLine": 505,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "startFancyStuff": {
            "name": "startFancyStuff",
            "summary": "Starts fancy stuff.",
            "description": "```php\n$db->startFancyStuff();\n\/\/ (self)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->startFancyStuff();\n\/\/ (self)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->language) {\n      $this->language->startFancyStuff();\n    }\n\n    return $this;\n  }",
            "startLine": 518,
            "endLine": 525,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "enableTrigger": {
            "name": "enableTrigger",
            "summary": "Enable the triggers' functions",
            "description": "```php\nX::adump($ctrl->db->enableTrigger()); \/\/ bbn\\Db Object\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->enableTrigger()); \/\/ bbn\\Db Object"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->language->enableTrigger();\n    return $this;\n  }",
            "startLine": 546,
            "endLine": 550,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "disableTrigger": {
            "name": "disableTrigger",
            "summary": "Disable the triggers' functions",
            "description": "```php\nX::adump($ctrl->db->disableTrigger());\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->disableTrigger());"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->language->disableTrigger();\n    return $this;\n  }",
            "startLine": 562,
            "endLine": 566,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "isTriggerEnabled": {
            "name": "isTriggerEnabled",
            "summary": "Checks if the triggers' functions are enable",
            "description": "```php\nX::adump($ctrl->db->isTriggerEnabled()); \/\/ true\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->isTriggerEnabled()); \/\/ true"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->isTriggerEnabled();\n  }",
            "startLine": 577,
            "endLine": 580,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "isTriggerDisabled": {
            "name": "isTriggerDisabled",
            "summary": "Checks if the triggers' functions are disable",
            "description": "```php\nX::adump($ctrl->db->isTriggerEnabled()); \/\/ false\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->isTriggerEnabled()); \/\/ false"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->isTriggerDisabled();\n  }",
            "startLine": 591,
            "endLine": 594,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "setTrigger": {
            "name": "setTrigger",
            "summary": "Apply a function each time the methods $kind are used",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(callable $function, $kind = NULL, $moment = NULL, $tables = '*')\n  {\n    $this->language->setTrigger($function, $kind, $moment, $tables);\n\n    return $this;\n  }",
            "startLine": 606,
            "endLine": 611,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "function",
                    "position": 0,
                    "type": "callable",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "kind",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "select|insert|update|delete"
                },
                {
                    "name": "moment",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "before|after"
                },
                {
                    "name": "tables",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "*",
                    "default_name": "",
                    "description": "database's table(s) name(s)"
                }
            ]
        },
        "getTriggers": {
            "name": "getTriggers",
            "summary": "Returns an array",
            "description": "```php\nX::adump($ctrl->db->getTriggers());\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->getTriggers());"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getTriggers();\n  }",
            "startLine": 622,
            "endLine": 625,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getFieldsList": {
            "name": "getFieldsList",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($tables)\n  {\n    return $this->language->getFieldsList($tables);\n  }",
            "startLine": 642,
            "endLine": 645,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "tables",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getForeignKeys": {
            "name": "getForeignKeys",
            "summary": "Return an array with tables and fields related to the searched foreign key.",
            "description": "```php\nX::dump($db->getForeignKeys('id', 'table_users', 'db_example'));\n\/\/ (Array)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getForeignKeys('id', 'table_users', 'db_example'));\n\/\/ (Array)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $col, string $table, string $db = NULL)\n  {\n    return $this->language->getForeignKeys($col, $table, $db);\n  }",
            "startLine": 661,
            "endLine": 664,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The database name if different from the current one"
                }
            ]
        },
        "hasIdIncrement": {
            "name": "hasIdIncrement",
            "summary": "Return true if in the table there are fields with auto-increment.",
            "description": "Working only on mysql.\n\n```php\nX::dump($db->hasIdIncrement('table_users'));\n\/\/ (bool) 1\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Working only on mysql.<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->hasIdIncrement('table_users'));\n\/\/ (bool) 1"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n    if (method_exists($this->language, 'hasIdIncrement')) {\n      return $this->language->hasIdIncrement($table);\n    }\n\n    return false;\n  }",
            "startLine": 679,
            "endLine": 686,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "modelize": {
            "name": "modelize",
            "summary": "Return the table's structure as an indexed array.",
            "description": "X::hdump($ctrl->db->modelize('my_date_2')); \/*\n\"fields\": {\n    \"ID\": {\n        \"position\": 1,\n        \"type\": \"int\",\n        \"null\": 0,\n        \"key\": null,\n        \"extra\": \"\",\n        \"signed\": true,\n        \"virtual\": false,\n        \"generation\": \"\",\n        \"maxlength\": 10,\n    },",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>X::hdump($ctrl-&gt;db-&gt;modelize('my_date_2')); \/*\n&quot;fields&quot;: {\n&quot;ID&quot;: {\n&quot;position&quot;: 1,\n&quot;type&quot;: &quot;int&quot;,\n&quot;null&quot;: 0,\n&quot;key&quot;: null,\n&quot;extra&quot;: &quot;&quot;,\n&quot;signed&quot;: true,\n&quot;virtual&quot;: false,\n&quot;generation&quot;: &quot;&quot;,\n&quot;maxlength&quot;: 10,\n},<\/p>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table = NULL, bool $force = false)\n  {\n    return $this->language->modelize($table, $force);\n  }",
            "startLine": 711,
            "endLine": 714,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true will force the modernization to re-perform even if the cache exists"
                }
            ]
        },
        "fmodelize": {
            "name": "fmodelize",
            "summary": "Return the table's structure as an indexed array.",
            "description": "```php\nX::hdump($ctrl->db->fmodelize('my_date_2'));\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump($ctrl->db->fmodelize('my_date_2'));"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table = '', bool $force = false)\n  {\n    if (method_exists($this->language, 'fmodelize')) {\n      return $this->language->fmodelize($table, $force);\n    }\n\n    return null;\n  }",
            "startLine": 728,
            "endLine": 735,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "findReferences": {
            "name": "findReferences",
            "summary": "find_references",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($column, string $db = '')\n  {\n    if (method_exists($this->language, 'findReferences')) {\n      return $this->language->findReferences($column, $db);\n    }\n\n    return [];\n  }",
            "startLine": 746,
            "endLine": 753,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "findRelations": {
            "name": "findRelations",
            "summary": "find_relations",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($column, string $db = '')\n  {\n    return $this->language->findRelations($column, $db);\n  }",
            "startLine": 763,
            "endLine": 766,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPrimary": {
            "name": "getPrimary",
            "summary": "Return primary keys of a table as a numeric array.",
            "description": "```php\nX::dump($db-> get_primary('table_users'));\n\/\/ (array) [\"id\"]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db-> get_primary('table_users'));\n\/\/ (array) [\"id\"]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n    return $this->language->getPrimary($table);\n  }",
            "startLine": 780,
            "endLine": 783,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "getUniquePrimary": {
            "name": "getUniquePrimary",
            "summary": "Return the unique primary key of the given table.",
            "description": "```php\nX::dump($db->getUniquePrimary('table_users'));\n\/\/ (string) id\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getUniquePrimary('table_users'));\n\/\/ (string) id"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n    if (method_exists($this->language, 'getUniquePrimary')) {\n      return $this->language->getUniquePrimary($table);\n    }\n\n    return null;\n  }",
            "startLine": 797,
            "endLine": 804,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "getUniqueKeys": {
            "name": "getUniqueKeys",
            "summary": "Return the unique keys of a table as a numeric array.",
            "description": "```php\nX::dump($db->getUniqueKeys('table_users'));\n\/\/ (array) [\"userid\", \"userdataid\"]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getUniqueKeys('table_users'));\n\/\/ (array) [\"userid\", \"userdataid\"]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n    if (method_exists($this->language, 'getUniqueKeys')) {\n      return $this->language->getUniqueKeys($table);\n    }\n\n    return [];\n  }",
            "startLine": 818,
            "endLine": 825,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "escapeValue": {
            "name": "escapeValue",
            "summary": "Return a string with quotes and percent escaped.",
            "description": "```php\nX::dump($db->escapeValue(\"My father's job is interesting\");\n\/\/ (string) My  father\\'s  job  is  interesting\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->escapeValue(\"My father's job is interesting\");\n\/\/ (string) My  father\\'s  job  is  interesting"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $value, $esc = '\\'')\n  {\n    return str_replace(\n      '%', '\\\\%', $esc === '\"' ? Str::escapeDquotes($value) : Str::escapeSquotes($value)\n    );\n  }",
            "startLine": 850,
            "endLine": 855,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "value",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                },
                {
                    "name": "esc",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "'",
                    "default_name": ""
                }
            ]
        },
        "setLastInsertId": {
            "name": "setLastInsertId",
            "summary": "Changes the value of last_insert_id (used by history).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id = '')\n  {\n    $this->language->setLastInsertId($id);\n\n    return $this;\n  }",
            "startLine": 869,
            "endLine": 874,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The last inserted id"
                }
            ]
        },
        "last": {
            "name": "last",
            "summary": "Return the last query for this connection.",
            "description": "```php\nX::dump($db->last());\n\/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->last());\n\/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->last();\n  }",
            "startLine": 886,
            "endLine": 889,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "lastId": {
            "name": "lastId",
            "summary": "Return the last inserted ID.",
            "description": "```php\nX::dump($db->lastId());\n\/\/ (int) 26\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->lastId());\n\/\/ (int) 26"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->lastId();\n  }",
            "startLine": 901,
            "endLine": 904,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "flush": {
            "name": "flush",
            "summary": "Deletes all the queries recorded and returns their (ex) number.",
            "description": "```php\nX::hdump($ctrl->db->flush()); \/\/ 9\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump($ctrl->db->flush()); \/\/ 9"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->flush();\n  }",
            "startLine": 915,
            "endLine": 918,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": []
        },
        "newId": {
            "name": "newId",
            "summary": "Generate a new casual id based on the max number of characters of id's column structure in the given table",
            "description": "```php\nX::dump($db->newId('table_users', 18));\n\/\/ (int) 69991701\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->newId('table_users', 18));\n\/\/ (int) 69991701"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, int $min = 1)\n  {\n    $tab = $this->modelize($table);\n    if (\\count($tab['keys']['PRIMARY']['columns']) !== 1) {\n      die(\"Error! Unique numeric primary key doesn't exist\");\n    }\n\n    if (($id_field = $tab['keys']['PRIMARY']['columns'][0])\n        && ($maxlength = $tab['fields'][$id_field]['maxlength'] )\n        && ($maxlength > 1)\n    ) {\n      $max = (10 ** $maxlength) - 1;\n      if ($max >= mt_getrandmax()) {\n        $max = mt_getrandmax();\n      }\n\n      if (($max > $min) && ($table = $this->tfn($table, true))) {\n        $i = 0;\n        do {\n          $id = random_int($min, $max);\n          \/** @todo *\/\n          \/*\n          if ( strpos($tab['fields'][$id_field]['type'], 'char') !== false ){\n            $id = substr(md5('bbn'.$id), 0, random_int(1, 10 ** $maxlength));\n          }\n          *\/\n          $i++;\n        }\n        while (($i < 100) && $this->select($table, [$id_field], [$id_field => $id]));\n        return $id;\n      }\n    }\n\n    return null;\n  }",
            "startLine": 934,
            "endLine": 968,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name."
                },
                {
                    "name": "min",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ]
        },
        "rselectRandom": {
            "name": "rselectRandom",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $fields = [], array $where = [])\n  {\n    if ($this->check() && ($num = $this->count($table, $where))) {\n      $args = $this->_add_kind($this->_set_start($this->_set_limit_1(\\func_get_args()), random_int(0, $num - 1)));\n      if ($r = $this->_exec(...$args)) {\n        return $r->getRow();\n      }\n    }\n\n    return null;\n  }",
            "startLine": 971,
            "endLine": 981,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "selectRandom": {
            "name": "selectRandom",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $fields = [], array $where = [])\n  {\n    if ($this->check() && ($num = $this->count($table, $where))) {\n      $args = $this->_add_kind($this->_set_start($this->_set_limit_1(\\func_get_args()), random_int(0, $num - 1)));\n      if ($r = $this->_exec(...$args)) {\n        return $r->getObj();\n      }\n    }\n\n    return null;\n  }",
            "startLine": 984,
            "endLine": 994,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "stdClass"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "randomValue": {
            "name": "randomValue",
            "summary": "Returns a random value fitting the requested column's type",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col, $table)\n  {\n    $val = null;\n    if (($tab = $this->modelize($table)) && isset($tab['fields'][$col])) {\n      foreach ($tab['keys'] as $key => $cfg){\n        if ($cfg['unique']\n            && !empty($cfg['ref_column'])\n            && (\\count($cfg['columns']) === 1)\n            && ($col === $cfg['columns'][0])\n        ) {\n          return ($num = $this->count($cfg['ref_column'])) ? $this->selectOne(\n            [\n            'tables' [$cfg['ref_table']],\n            'fields' => [$cfg['ref_column']],\n            'start' => random_int(0, $num - 1)\n            ]\n          ) : null;\n        }\n      }\n\n      switch ($tab['fields'][$col]['type']){\n        case 'int':\n          if (($tab['fields'][$col]['maxlength'] === 1) && !$tab['fields'][$col]['signed']) {\n            $val = microtime(true) % 2 === 0 ? 1 : 0;\n          }\n          else {\n            $max = 10 ** $tab['fields'][$col]['maxlength'] - 1;\n            if ($max > mt_getrandmax()) {\n              $max = mt_getrandmax();\n            }\n\n            if ($tab['fields'][$col]['signed']) {\n              $max \/= 2;\n            }\n\n            $min = $tab['fields'][$col]['signed'] ? -$max : 0;\n            $val = random_int($min, $max);\n          }\n          break;\n        case 'float':\n        case 'double':\n        case 'decimal':\n          break;\n        case 'varchar':\n          break;\n        case 'text':\n          break;\n        case 'date':\n          break;\n        case 'datetime':\n          break;\n        case 'timestamp':\n          break;\n        case 'time':\n          break;\n        case 'year':\n          break;\n        case 'blob':\n          break;\n        case 'binary':\n          break;\n        case 'varbinary':\n          break;\n        case 'enum':\n          break;\n      }\n    }\n\n    return $val;\n  }",
            "startLine": 1006,
            "endLine": 1075,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "countQueries": {
            "name": "countQueries",
            "summary": "Returns the number of queries",
            "description": "```php\nX::hdump($ctrl->db->countQueries()); \/\/ 10\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump($ctrl->db->countQueries()); \/\/ 10"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->countQueries();\n  }",
            "startLine": 1086,
            "endLine": 1089,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": []
        },
        "getOne": {
            "name": "getOne",
            "summary": "Executes the given query with given vars, and extracts the first cell's result.",
            "description": "```php\nX::dump($db->getOne(\"SELECT name FROM table_users WHERE id>?\", 138));\n\/\/ (string) John\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getOne(\"SELECT name FROM table_users WHERE id>?\", 138));\n\/\/ (string) John"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n   return $this->language->getOne(...\\func_get_args());\n  }",
            "startLine": 1113,
            "endLine": 1116,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getVar": {
            "name": "getVar",
            "summary": "Execute the given query with given vars, and extract the first cell's result.",
            "description": "(similar to {@link get_one()})\n\n```php\nX::dump($db->getVar(\"SELECT telephone FROM table_users WHERE id>?\", 1));\n\/\/ (int) 123554154\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>(similar to {@link get_one()})<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->getVar(\"SELECT telephone FROM table_users WHERE id>?\", 1));\n\/\/ (int) 123554154"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->getOne(...\\func_get_args());\n  }",
            "startLine": 1132,
            "endLine": 1135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getKeyVal": {
            "name": "getKeyVal",
            "summary": "Return an array indexed on the first field of the request.",
            "description": "The value will be an array if the request has more than two fields.\n\n```php\nX::dump($db->getKeyVal(\"SELECT name,id_group FROM table_users\"));\n\/*\n(array)[\n     \"John\" => 1,\n     \"Michael\" => 1,\n     \"Barbara\" => 1\n       ]\n\nX::dump($db->getKeyVal(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n\/*\n(array)[\n        \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n        ],\n        \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n        ]\n       ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>The value will be an array if the request has more than two fields.<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->getKeyVal(\"SELECT name,id_group FROM table_users\"));\n\/*\n(array)[\n     \"John\" => 1,\n     \"Michael\" => 1,\n     \"Barbara\" => 1\n       ]\n\nX::dump($db->getKeyVal(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n\/*\n(array)[\n        \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n        ],\n        \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n        ]\n       ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getKeyVal(...\\func_get_args());\n  }",
            "startLine": 1169,
            "endLine": 1172,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getColArray": {
            "name": "getColArray",
            "summary": "Return an array with the values of single field resulting from the query.",
            "description": "```php\nX::dump($db->getColArray(\"SELECT id FROM table_users\"));\n\/*\n(array)[1, 2, 3, 4]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getColArray(\"SELECT id FROM table_users\"));\n\/*\n(array)[1, 2, 3, 4]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getColArray(...\\func_get_args());\n  }",
            "startLine": 1188,
            "endLine": 1191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "select": {
            "name": "select",
            "summary": "Returns the first row resulting from the query as an object.",
            "description": "```php\nX::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n\/*\n(object){\n  \"name\": \"John\",\n  \"surname\": \"Smith\",\n}\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n\/*\n(object){\n  \"name\": \"John\",\n  \"surname\": \"Smith\",\n}"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], int $start = 0)\n  {\n    return $this->language->select($table, $fields, $where, $order, $start);\n  }",
            "startLine": 1222,
            "endLine": 1225,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "stdClass"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "selectAll": {
            "name": "selectAll",
            "summary": "Return table's rows resulting from the query as an array of objects.",
            "description": "```php\nX::dump($db->selectAll(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n       Object stdClass: df {\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         },\n       Object stdClass: df {\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n        }\n       ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->selectAll(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n       Object stdClass: df {\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         },\n       Object stdClass: df {\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n        }\n       ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], int $limit = 0, int $start = 0)\n  {\n    return $this->language->selectAll($table, $fields, $where, $order, $limit, $start);\n  }",
            "startLine": 1256,
            "endLine": 1259,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "iselect": {
            "name": "iselect",
            "summary": "Return the first row resulting from the query as a numeric array.",
            "description": "```php\nX::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n         4,\n        \"Jack\",\n         \"Stewart\"\n       ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n         4,\n        \"Jack\",\n         \"Stewart\"\n       ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], int $start = 0)\n  {\n    return $this->language->iselect($table, $fields, $where, $order, $start);\n  }",
            "startLine": 1282,
            "endLine": 1285,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "iselectAll": {
            "name": "iselectAll",
            "summary": "Return the searched rows as an array of numeric arrays.",
            "description": "```php\nX::dump($db->iselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n\/*\n(array)[\n         [\n           2,\n           \"John\",\n           \"Smith\",\n         ],\n         [\n           3,\n           \"Thomas\",\n           \"Jones\",\n         ]\n       ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->iselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n\/*\n(array)[\n         [\n           2,\n           \"John\",\n           \"Smith\",\n         ],\n         [\n           3,\n           \"Thomas\",\n           \"Jones\",\n         ]\n       ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], int $limit = 0, int $start = 0)\n  {\n    return $this->language->iselectAll($table, $fields, $where, $order, $limit, $start);\n  }",
            "startLine": 1316,
            "endLine": 1319,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "rselect": {
            "name": "rselect",
            "summary": "Return the first row resulting from the query as an indexed array.",
            "description": "```php\nX::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         \"id\" => 4,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\"\n        ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         \"id\" => 4,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\"\n        ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], int $start = 0)\n  {\n    return $this->language->rselect($table, $fields, $where, $order, $start);\n  }",
            "startLine": 1342,
            "endLine": 1345,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "rselectAll": {
            "name": "rselectAll",
            "summary": "Return table's rows as an array of indexed arrays.",
            "description": "```php\nX::dump($db->rselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         [\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         ],\n         [\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n         ]\n       ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->rselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         [\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         ],\n         [\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n         ]\n       ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0)\n  {\n    return $this->language->rselectAll($table, $fields, $where, $order, $limit, $start);\n  }",
            "startLine": 1376,
            "endLine": 1379,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "condition, default: false"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "selectOne": {
            "name": "selectOne",
            "summary": "Return a single value",
            "description": "```php\nX::dump($db->selectOne(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n (string) 'Michael'\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->selectOne(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n (string) 'Michael'"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $field = NULL, array $where = [], array $order = [], int $start = 0)\n  {\n    return $this->language->selectOne($table, $field, $where, $order, $start);\n  }",
            "startLine": 1397,
            "endLine": 1400,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "selectUnion": {
            "name": "selectUnion",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $union, array $fields = [], array $where = [], array $order = [], int $start = 0)\n  {\n    $cfgs = [];\n    $sql  = 'SELECT ';\n    if (empty($fields)) {\n      $sql .= '* ';\n    }\n    else{\n      foreach ($fields as $i => $f){\n        if ($i) {\n          $sql .= ', ';\n        }\n\n        $sql .= $this->csn($f, true);\n      }\n    }\n\n    $sql .= ' FROM (('.PHP_EOL;\n    $vals = [];\n    $i    = 0;\n    foreach ($union as $u){\n      $cfg = $this->processCfg($this->_add_kind([$u]));\n      if ($cfg && $cfg['sql']) {\n        \/** @todo From here needs to analyze the where array to the light of the tables' config *\/\n        if (!empty($where)) {\n          if (empty($fields)) {\n            $fields = $cfg['fields'];\n          }\n\n          foreach ($fields as $k => $f){\n            if (isset($cfg['available_fields'][$f])) {\n              if ($cfg['available_fields'][$f] && ($t = $cfg['models'][$cfg['available_fields'][$f]])\n              ) {\n                throw new \\Exception(\"Impossible to create the where in union for the following request: \".PHP_EOL.$cfg['sql']);\n                \/\/die(var_dump($t['fields'][$cfg['fields'][$f] ?? $this->csn($f)]));\n              }\n            }\n          }\n        }\n\n        if ($i) {\n          $sql .= PHP_EOL.') UNION ('.PHP_EOL;\n        }\n\n        $sql .= $cfg['sql'];\n        foreach ($cfg['values'] as $v){\n          $vals[] = $v;\n        }\n\n        $i++;\n      }\n    }\n\n    $sql .= PHP_EOL.')) AS t';\n    return $this->getRows($sql, ...$vals);\n    \/\/echo nl2br($sql);\n    return [];\n  }",
            "startLine": 1403,
            "endLine": 1460,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "union",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "count": {
            "name": "count",
            "summary": "Return the number of records in the table corresponding to the $where condition (non mandatory).",
            "description": "```php\nX::dump($db->count('table_users', ['name' => 'John']));\n\/\/ (int) 2\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->count('table_users', ['name' => 'John']));\n\/\/ (int) 2"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $where = [])\n  {\n    return $this->language->count($table, $where);\n  }",
            "startLine": 1475,
            "endLine": 1478,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                }
            ]
        },
        "selectAllByKeys": {
            "name": "selectAllByKeys",
            "summary": "Return an array indexed on the first field of the request.",
            "description": "The value will be an array if the request has more than two fields.\nReturn the same value as \"get_key_val\".\n\n```php\nX::dump($db->selectAllByKeys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n\/*\n(array)[\n       \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n         ],\n       \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n       ]\n     ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>The value will be an array if the request has more than two fields.\nReturn the same value as &quot;get_key_val&quot;.<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->selectAllByKeys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n\/*\n(array)[\n       \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n         ],\n       \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n       ]\n     ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $fields = [], array $where = [], array $order = [], int $limit = 0, int $start = 0)\n  {\n    return $this->language->selectAllByKeys($table, $fields, $where, $order, $limit, $start);\n  }",
            "startLine": 1509,
            "endLine": 1512,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The $limit condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The $limit condition, default: 0"
                }
            ]
        },
        "stat": {
            "name": "stat",
            "summary": "Return an array with the count of values corresponding to the where conditions.",
            "description": "```php\nX::dump($db->stat('table_user', 'name', ['name' => '%n']));\n\/* (array)\n[\n [\n     \"num\" => 1,\n     \"name\" => \"alan\",\n ], [\n     \"num\" => 1,\n     \"name\" => \"karen\",\n ],\n]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->stat('table_user', 'name', ['name' => '%n']));\n\/* (array)\n[\n [\n     \"num\" => 1,\n     \"name\" => \"alan\",\n ], [\n     \"num\" => 1,\n     \"name\" => \"karen\",\n ],\n]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $column, array $where = [], array $order = [])\n  {\n    return $this->language->stat($table, $column, $where, $order);\n  }",
            "startLine": 1538,
            "endLine": 1541,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array."
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The field's name."
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition."
                }
            ]
        },
        "getFieldValues": {
            "name": "getFieldValues",
            "summary": "Return the unique values of a column of a table as a numeric indexed array.",
            "description": "```php\nX::dump($db->getFieldValues(\"table_users\", \"surname\", [['id', '>', '2']]));\n\/\/ (array) [\"Smiths\", \"White\"]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getFieldValues(\"table_users\", \"surname\", [['id', '>', '2']]));\n\/\/ (array) [\"Smiths\", \"White\"]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, string $field = NULL, array $where = [], array $order = [])\n  {\n    return $this->getColumnValues($table, $field, $where, $order);\n  }",
            "startLine": 1558,
            "endLine": 1561,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                }
            ]
        },
        "countFieldValues": {
            "name": "countFieldValues",
            "summary": "Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.",
            "description": "```php\nX::dump($db->countFieldValues('table_users','surname',[['name','=','John']]));\n\/\/ (array) [\"num\" => 2, \"val\" => \"John\"]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->countFieldValues('table_users','surname',[['name','=','John']]));\n\/\/ (array) [\"num\" => 2, \"val\" => \"John\"]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, string $field = NULL, array $where = [], array $order = [])\n  {\n    return $this->language->countFieldValues($table, $field, $where, $order);\n  }",
            "startLine": 1578,
            "endLine": 1581,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                }
            ]
        },
        "getColumnValues": {
            "name": "getColumnValues",
            "summary": "Return a numeric indexed array with the values of the unique column ($field) from the selected $table",
            "description": "```php\nX::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n\/*\narray [\n   \"Smith\",\n   \"Jones\",\n   \"Williams\",\n   \"Taylor\"\n]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n\/*\narray [\n   \"Smith\",\n   \"Jones\",\n   \"Williams\",\n   \"Taylor\"\n]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, string $field = NULL, array $where = [], array $order = [], int $limit = 0, int $start = 0)\n  {\n    return $this->language->getColumnValues($table, $field, $where, $order, $limit, $start);\n  }",
            "startLine": 1606,
            "endLine": 1609,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getValuesCount": {
            "name": "getValuesCount",
            "summary": "Return a string with the sql query to count equal values in a field of the table.",
            "description": "```php\nX::dump($db->getValuesCount('table_users','name',['surname','=','smith']));\n\/*\n(string)\n  SELECT COUNT(*) AS num, `name` AS val FROM `db_example`.`table_users`\n    GROUP BY `name`\n    ORDER BY `name`\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getValuesCount('table_users','name',['surname','=','smith']));\n\/*\n(string)\n  SELECT COUNT(*) AS num, `name` AS val FROM `db_example`.`table_users`\n    GROUP BY `name`\n    ORDER BY `name`"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, string $field = NULL, array $where = [], array $order = [])\n  {\n    return $this->countFieldValues($table, $field, $where, $order);\n  }",
            "startLine": 1631,
            "endLine": 1634,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                }
            ]
        },
        "insert": {
            "name": "insert",
            "summary": "Inserts row(s) in a table.",
            "description": "<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"Ted\"],\n   [\"surname\" => \"McLow\"]\n ]);\n<\/code>\n\n<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"July\"],\n   [\"surname\" => \"O'neill\"]\n ], [\n   [\"name\" => \"Peter\"],\n   [\"surname\" => \"Griffin\"]\n ], [\n   [\"name\" => \"Marge\"],\n   [\"surname\" => \"Simpson\"]\n ]);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p><code>\n$db-&gt;insert(&quot;table_users&quot;, [\n[&quot;name&quot; =&gt; &quot;Ted&quot;],\n[&quot;surname&quot; =&gt; &quot;McLow&quot;]\n]);\n<\/code><\/p>\n<p><code>\n$db-&gt;insert(&quot;table_users&quot;, [\n[&quot;name&quot; =&gt; &quot;July&quot;],\n[&quot;surname&quot; =&gt; &quot;O'neill&quot;]\n], [\n[&quot;name&quot; =&gt; &quot;Peter&quot;],\n[&quot;surname&quot; =&gt; &quot;Griffin&quot;]\n], [\n[&quot;name&quot; =&gt; &quot;Marge&quot;],\n[&quot;surname&quot; =&gt; &quot;Simpson&quot;]\n]);\n<\/code><\/p>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $values = NULL, bool $ignore = false)\n  {\n    return $this->language->insert($table, $values, $ignore);\n  }",
            "startLine": 1675,
            "endLine": 1678,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The values to insert."
                },
                {
                    "name": "ignore",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If true, controls if the row is already existing and ignores it."
                }
            ]
        },
        "insertUpdate": {
            "name": "insertUpdate",
            "summary": "If not exist inserts row(s) in a table, else update.",
            "description": "<code>\n$db->insertUpdate(\n \"table_users\",\n [\n   'id' => '12',\n   'name' => 'Frank'\n ]\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p><code>\n$db-&gt;insertUpdate(\n&quot;table_users&quot;,\n[\n'id' =&gt; '12',\n'name' =&gt; 'Frank'\n]\n);\n<\/code><\/p>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $values = NULL)\n  {\n    return $this->language->insertUpdate($table, $values);\n  }",
            "startLine": 1699,
            "endLine": 1702,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The values to insert."
                }
            ]
        },
        "update": {
            "name": "update",
            "summary": "Updates row(s) in a table.",
            "description": "<code>\n$db->update(\n \"table_users\",\n [\n   ['name' => 'Frank'],\n   ['surname' => 'Red']\n ],\n ['id' => '127']\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p><code>\n$db-&gt;update(\n&quot;table_users&quot;,\n[\n['name' =&gt; 'Frank'],\n['surname' =&gt; 'Red']\n],\n['id' =&gt; '127']\n);\n<\/code><\/p>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $values = NULL, array $where = NULL, bool $ignore = false)\n  {\n    return $this->language->update($table, $values, $where, $ignore);\n  }",
            "startLine": 1726,
            "endLine": 1729,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The new value(s)."
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "ignore",
                    "position": 3,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If IGNORE should be added to the statement"
                }
            ]
        },
        "updateIgnore": {
            "name": "updateIgnore",
            "summary": "If exist updates row(s) in a table, else ignore.",
            "description": "<code>\n$db->updateIgnore(\n  \"table_users\",\n  [\n    ['name' => 'Frank'],\n    ['surname' => 'Red']\n  ],\n  ['id' => '20']\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p><code>\n$db-&gt;updateIgnore(\n&quot;table_users&quot;,\n[\n['name' =&gt; 'Frank'],\n['surname' =&gt; 'Red']\n],\n['id' =&gt; '20']\n);\n<\/code><\/p>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $values = NULL, array $where = NULL)\n  {\n    return $this->update($table, $values, $where, true);\n  }",
            "startLine": 1752,
            "endLine": 1755,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition."
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes row(s) in a table.",
            "description": "<code>\n$db->delete(\"table_users\", ['id' => '32']);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p><code>\n$db-&gt;delete(&quot;table_users&quot;, ['id' =&gt; '32']);\n<\/code><\/p>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $where = NULL, bool $ignore = false)\n  {\n    return $this->language->delete($table, $where, $ignore);\n  }",
            "startLine": 1771,
            "endLine": 1774,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "ignore",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "default: false."
                }
            ]
        },
        "deleteIgnore": {
            "name": "deleteIgnore",
            "summary": "If exist deletes row(s) in a table, else ignore.",
            "description": "<code>\n$db->deleteIgnore(\n \"table_users\",\n ['id' => '20']\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p><code>\n$db-&gt;deleteIgnore(\n&quot;table_users&quot;,\n['id' =&gt; '20']\n);\n<\/code><\/p>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $where = NULL)\n  {\n    return $this->delete(\\is_array($table) ? array_merge($table, ['ignore' => true]) : $table, $where, true);\n  }",
            "startLine": 1792,
            "endLine": 1795,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition."
                }
            ]
        },
        "insertIgnore": {
            "name": "insertIgnore",
            "summary": "If not exist inserts row(s) in a table, else ignore.",
            "description": "<code>\n$db->insertIgnore(\n \"table_users\",\n [\n   ['id' => '19', 'name' => 'Frank'],\n   ['id' => '20', 'name' => 'Ted'],\n ]\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p><code>\n$db-&gt;insertIgnore(\n&quot;table_users&quot;,\n[\n['id' =&gt; '19', 'name' =&gt; 'Frank'],\n['id' =&gt; '20', 'name' =&gt; 'Ted'],\n]\n);\n<\/code><\/p>"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $values = NULL)\n  {\n    return $this->insert(\\is_array($table) ? array_merge($table, ['ignore' => true]) : $table, $values, true);\n  }",
            "startLine": 1816,
            "endLine": 1819,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The row(s) values."
                }
            ]
        },
        "truncate": {
            "name": "truncate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    return $this->delete($table, []);\n  }",
            "startLine": 1826,
            "endLine": 1829,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fetch": {
            "name": "fetch",
            "summary": "Return an indexed array with the first result of the query or false if there are no results.",
            "description": "```php\nX::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n\/* (array)\n[\n \"name\" => \"john\",\n 0 => \"john\",\n]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n\/* (array)\n[\n \"name\" => \"john\",\n 0 => \"john\",\n]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $query)\n  {\n    return $this->language->fetch(...\\func_get_args());\n  }",
            "startLine": 1856,
            "endLine": 1859,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fetchAll": {
            "name": "fetchAll",
            "summary": "Return an array of indexed array with all results of the query or false if there are no results.",
            "description": "```php\nX::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n\/* (array)\n [\n   [\n   \"surname\" => \"White\",\n   0 => \"White\",\n   \"name\" => \"Michael\",\n   1 => \"Michael\",\n   \"id\"  => 1,\n   2 => 1,\n   ],\n   [\n   \"surname\" => \"Smith\",\n   0 => \"Smith\",\n   \"name\" => \"John\",\n   1  =>  \"John\",\n   \"id\" => 2,\n   2 => 2,\n   ],\n ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n\/* (array)\n [\n   [\n   \"surname\" => \"White\",\n   0 => \"White\",\n   \"name\" => \"Michael\",\n   1 => \"Michael\",\n   \"id\"  => 1,\n   2 => 1,\n   ],\n   [\n   \"surname\" => \"Smith\",\n   0 => \"Smith\",\n   \"name\" => \"John\",\n   1  =>  \"John\",\n   \"id\" => 2,\n   2 => 2,\n   ],\n ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $query)\n  {\n    return $this->language->fetchAll(...\\func_get_args());\n  }",
            "startLine": 1891,
            "endLine": 1894,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fetchColumn": {
            "name": "fetchColumn",
            "summary": "Transposition of the original fetchColumn method, but with the query included. Return an array or false if no result",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($query, int $num = 0)\n  {\n    return $this->language->fetchColumn(...\\func_get_args());\n  }",
            "startLine": 1905,
            "endLine": 1908,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "fetchObject": {
            "name": "fetchObject",
            "summary": "Return stdClass object or false if no result.",
            "description": "```php\nX::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n\/\/ stdClass Object {\n                   \"id\"  =>  1,\n                   \"name\"  =>  \"John\",\n                   \"surname\"  =>  \"Smith\",\n                   }\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n\/\/ stdClass Object {\n                   \"id\"  =>  1,\n                   \"name\"  =>  \"John\",\n                   \"surname\"  =>  \"Smith\",\n                   }"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($query)\n  {\n    return $this->language->fetchObject(...\\func_get_args());\n  }",
            "startLine": 1926,
            "endLine": 1929,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "query": {
            "name": "query",
            "summary": "Executes a writing statement and return the number of affected rows or return a query object for the reading * statement",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($statement)\n  {\n    if ($this->check()) {\n      return $this->language->query(...\\func_get_args());\n    }\n  }",
            "startLine": 1946,
            "endLine": 1951,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "statement",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "tfn": {
            "name": "tfn",
            "summary": "Return table's full name.",
            "description": "(similar to {@link table_full_name()})\n\n```php\nX::dump($db->tfn(\"table_users\"));\n\/\/ (string) work_db.table_users\nX::dump($db->tfn(\"table_users\", true));\n\/\/ (string) `work_db`.`table_users`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>(similar to {@link table_full_name()})<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->tfn(\"table_users\"));\n\/\/ (string) work_db.table_users\nX::dump($db->tfn(\"table_users\", true));\n\/\/ (string) `work_db`.`table_users`"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, bool $escaped = false)\n  {\n    return $this->tableFullName($table, $escaped);\n  }",
            "startLine": 1978,
            "endLine": 1981,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                }
            ]
        },
        "tsn": {
            "name": "tsn",
            "summary": "Return table's simple name.",
            "description": "(similar to {@link table_simple_name()})\n\n```php\nX::dump($db->tsn(\"work_db.table_users\"));\n\/\/ (string) table_users\nX::dump($db->tsn(\"work_db.table_users\", true));\n\/\/ (string) `table_users`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>(similar to {@link table_simple_name()})<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->tsn(\"work_db.table_users\"));\n\/\/ (string) table_users\nX::dump($db->tsn(\"work_db.table_users\", true));\n\/\/ (string) `table_users`"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, bool $escaped = false)\n  {\n    return $this->tableSimpleName($table, $escaped);\n  }",
            "startLine": 1999,
            "endLine": 2002,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                }
            ]
        },
        "cfn": {
            "name": "cfn",
            "summary": "Return column's full name.",
            "description": "(similar to {@link col_full_name()})\n\n```php\nX::dump($db->cfn(\"name\", \"table_users\"));\n\/\/ (string)  table_users.name\nX::dump($db->cfn(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>(similar to {@link col_full_name()})<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->cfn(\"name\", \"table_users\"));\n\/\/ (string)  table_users.name\nX::dump($db->cfn(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $col, string $table = NULL, bool $escaped = false)\n  {\n    return $this->colFullName($col, $table, $escaped);\n  }",
            "startLine": 2021,
            "endLine": 2024,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name (escaped or not)."
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table's name (escaped or not)."
                },
                {
                    "name": "escaped",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                }
            ]
        },
        "csn": {
            "name": "csn",
            "summary": "Return the column's simple name.",
            "description": "(similar to {@link col_simple_name()})\n\n```php\nX::dump($db->csn(\"table_users.name\"));\n\/\/ (string) name\nX::dump($db->csn(\"table_users.name\", true));\n\/\/ (string) `name`\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>(similar to {@link col_simple_name()})<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->csn(\"table_users.name\"));\n\/\/ (string) name\nX::dump($db->csn(\"table_users.name\", true));\n\/\/ (string) `name`"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $col, bool $escaped = false)\n  {\n    return $this->colSimpleName($col, $escaped);\n  }",
            "startLine": 2042,
            "endLine": 2045,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's complete name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                }
            ]
        },
        "postCreation": {
            "name": "postCreation",
            "summary": "Actions to do once the PDO object has been created",
            "description": "```php\nX::hdump($ctrl->db->postCreation()); \/\/ null\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump($ctrl->db->postCreation()); \/\/ null"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->language && !$this->engine) {\n      $this->language->postCreation();\n    }\n  }",
            "startLine": 2065,
            "endLine": 2070,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "change": {
            "name": "change",
            "summary": "Changes the database used to the given one.",
            "description": "```php\n$db = new Db();\nX::dump($db->change('db_example'));\n\/\/ (db)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db = new Db();\nX::dump($db->change('db_example'));\n\/\/ (db)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $db)\n  {\n    $this->language->change($db);\n\n    return $this;\n  }",
            "startLine": 2085,
            "endLine": 2090,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                }
            ]
        },
        "escape": {
            "name": "escape",
            "summary": "Escapes names with the appropriate quotes (db, tables, columns, keys...)",
            "description": "```php\nX::dump($db->escape(\"table_users\"));\n\/\/ (string) `table_users`\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->escape(\"table_users\"));\n\/\/ (string) `table_users`"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $item)\n  {\n    return $this->language->escape($item);\n  }",
            "startLine": 2104,
            "endLine": 2107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name to escape."
                }
            ]
        },
        "tableFullName": {
            "name": "tableFullName",
            "summary": "Return table's full name.",
            "description": "```php\nX::dump($db->tableFullName(\"table_users\"));\n\/\/ (String) db_example.table_users\nX::dump($db->tableFullName(\"table_users\", true));\n\/\/ (String) `db_example`.`table_users`\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->tableFullName(\"table_users\"));\n\/\/ (String) db_example.table_users\nX::dump($db->tableFullName(\"table_users\", true));\n\/\/ (String) `db_example`.`table_users`"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, bool $escaped = false)\n  {\n    return $this->language->tableFullName($table, $escaped);\n  }",
            "startLine": 2124,
            "endLine": 2127,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name (escaped or not)."
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                }
            ]
        },
        "isTableFullName": {
            "name": "isTableFullName",
            "summary": "Returns true if the given string is the full name of a table ('database.table').",
            "description": "```php\nX::hdump($ctrl->db->isTableFullName(\"table_users\")); \/\/ true or false\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump($ctrl->db->isTableFullName(\"table_users\")); \/\/ true or false"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n    return $this->language->isTableFullName($table);\n  }",
            "startLine": 2140,
            "endLine": 2143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "isColFullName": {
            "name": "isColFullName",
            "summary": "Returns true if the given string is the full name of a column ('table.column').",
            "description": "```php\nX::hdump($ctrl->db->isColFullName(\"column_users\")); \/\/ true or false\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump($ctrl->db->isColFullName(\"column_users\")); \/\/ true or false"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $col)\n  {\n    return $this->language->isColFullName($col);\n  }",
            "startLine": 2156,
            "endLine": 2159,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "tableSimpleName": {
            "name": "tableSimpleName",
            "summary": "Return table's simple name.",
            "description": "```php\nX::dump($db->tableSimpleName(\"example_db.table_users\"));\n\/\/ (string) table_users\nX::dump($db->tableSimpleName(\"example.table_users\", true));\n\/\/ (string) `table_users`\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->tableSimpleName(\"example_db.table_users\"));\n\/\/ (string) table_users\nX::dump($db->tableSimpleName(\"example.table_users\", true));\n\/\/ (string) `table_users`"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, bool $escaped = false)\n  {\n    return $this->language->tableSimpleName($table, $escaped);\n  }",
            "startLine": 2176,
            "endLine": 2179,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                }
            ]
        },
        "colFullName": {
            "name": "colFullName",
            "summary": "Return column's full name.",
            "description": "```php\nX::dump($db->colFullName(\"name\", \"table_users\"));\n\/\/ (string)  table_users.name Hello Ohohoho!!\nX::dump($db->colFullName(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->colFullName(\"name\", \"table_users\"));\n\/\/ (string)  table_users.name Hello Ohohoho!!\nX::dump($db->colFullName(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $col, string $table = NULL, bool $escaped = false)\n  {\n    return $this->language->colFullName($col, $table, $escaped);\n  }",
            "startLine": 2197,
            "endLine": 2200,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name (escaped or not)"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table's name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                }
            ]
        },
        "colSimpleName": {
            "name": "colSimpleName",
            "summary": "Return the column's simple name.",
            "description": "```php\nX::dump($db->colSimpleName(\"table_users.name\"));\n\/\/ (string) name\nX::dump($db->colSimpleName(\"table_users.name\", true));\n\/\/ (string) `name`\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->colSimpleName(\"table_users.name\"));\n\/\/ (string) name\nX::dump($db->colSimpleName(\"table_users.name\", true));\n\/\/ (string) `name`"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $col, bool $escaped = false)\n  {\n    return $this->language->colSimpleName($col, $escaped);\n  }",
            "startLine": 2217,
            "endLine": 2220,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's complete name (escaped or not)."
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                }
            ]
        },
        "disableKeys": {
            "name": "disableKeys",
            "summary": "Disables foreign keys constraints.",
            "description": "```php\nX::dump($db->disableKeys());\n\/\/ (self)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->disableKeys());\n\/\/ (self)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->language->disableKeys();\n    return $this;\n  }",
            "startLine": 2233,
            "endLine": 2237,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "enableKeys": {
            "name": "enableKeys",
            "summary": "Enables foreign keys constraints.",
            "description": "```php\nX::dump($db->enableKeys());\n\/\/ (db)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->enableKeys());\n\/\/ (db)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->language->enableKeys();\n    return $this;\n  }",
            "startLine": 2250,
            "endLine": 2254,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "getDatabases": {
            "name": "getDatabases",
            "summary": "Return databases' names as an array.",
            "description": "```php\nX::dump($db->getDatabases());\n\/*\n(array)[\n     \"db_customers\",\n     \"db_clients\",\n     \"db_empty\",\n     \"db_example\",\n     \"db_mail\"\n     ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getDatabases());\n\/*\n(array)[\n     \"db_customers\",\n     \"db_clients\",\n     \"db_empty\",\n     \"db_example\",\n     \"db_mail\"\n     ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getDatabases();\n  }",
            "startLine": 2273,
            "endLine": 2276,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getTables": {
            "name": "getTables",
            "summary": "Return tables' names of a database as an array.",
            "description": "```php\nX::dump($db->getTables('db_example'));\n\/*\n(array) [\n       \"clients\",\n       \"columns\",\n       \"cron\",\n       \"journal\",\n       \"dbs\",\n       \"examples\",\n       \"history\",\n       \"hosts\",\n       \"keys\",\n       \"mails\",\n       \"medias\",\n       \"notes\",\n       \"medias\",\n       \"versions\"\n       ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getTables('db_example'));\n\/*\n(array) [\n       \"clients\",\n       \"columns\",\n       \"cron\",\n       \"journal\",\n       \"dbs\",\n       \"examples\",\n       \"history\",\n       \"hosts\",\n       \"keys\",\n       \"mails\",\n       \"medias\",\n       \"notes\",\n       \"medias\",\n       \"versions\"\n       ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $database = '')\n  {\n    return $this->language->getTables($database);\n  }",
            "startLine": 2306,
            "endLine": 2309,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "Database name"
                }
            ]
        },
        "getColumns": {
            "name": "getColumns",
            "summary": "Return columns' structure of a table as an array indexed with the fields names.",
            "description": "* ```php\nX::dump($db->getColumns('table_users'));\n\/* (array)[\n           \"id\" => [\n             \"position\" => 1,\n             \"null\" => 0,\n             \"key\" => \"PRI\",\n             \"default\" => null,\n             \"extra\" => \"auto_increment\",\n             \"signed\" => 0,\n             \"maxlength\" => \"8\",\n             \"type\" => \"int\",\n           ],\n          \"name\" => [\n             \"position\" => 2,\n             \"null\" => 0,\n             \"key\" => null,\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n           \"surname\" => [\n             \"position\" => 3,\n             \"null\" => 0,\n             \"key\" => null,\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n           \"address\" => [\n             \"position\" => 4,\n             \"null\" => 0,\n             \"key\" => \"UNI\",\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n         ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->getColumns('table_users'));\n\/* (array)[\n           \"id\" => [\n             \"position\" => 1,\n             \"null\" => 0,\n             \"key\" => \"PRI\",\n             \"default\" => null,\n             \"extra\" => \"auto_increment\",\n             \"signed\" => 0,\n             \"maxlength\" => \"8\",\n             \"type\" => \"int\",\n           ],\n          \"name\" => [\n             \"position\" => 2,\n             \"null\" => 0,\n             \"key\" => null,\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n           \"surname\" => [\n             \"position\" => 3,\n             \"null\" => 0,\n             \"key\" => null,\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n           \"address\" => [\n             \"position\" => 4,\n             \"null\" => 0,\n             \"key\" => \"UNI\",\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n         ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n    return $this->language->getColumns($table);\n  }",
            "startLine": 2364,
            "endLine": 2367,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "getKeys": {
            "name": "getKeys",
            "summary": "Return the table's keys as an array indexed with the fields names.",
            "description": "```php\nX::dump($db->getKeys(\"table_users\"));\n\/*\n(array)[\n     \"keys\" => [\n       \"PRIMARY\" => [\n         \"columns\" => [\n           \"id\",\n         ],\n         \"ref_db\" => null,\n         \"ref_table\" => null,\n         \"ref_column\" => null,\n         \"unique\" => 1,\n       ],\n       \"number\" => [\n         \"columns\" => [\n           \"number\",\n         ],\n         \"ref_db\" => null,\n         \"ref_table\" => null,\n         \"ref_column\" => null,\n        \"unique\" => 1,\n       ],\n     ],\n     \"cols\" => [\n       \"id\" => [\n         \"PRIMARY\",\n       ],\n       \"number\" => [\n         \"number\",\n       ],\n     ],\n]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getKeys(\"table_users\"));\n\/*\n(array)[\n     \"keys\" => [\n       \"PRIMARY\" => [\n         \"columns\" => [\n           \"id\",\n         ],\n         \"ref_db\" => null,\n         \"ref_table\" => null,\n         \"ref_column\" => null,\n         \"unique\" => 1,\n       ],\n       \"number\" => [\n         \"columns\" => [\n           \"number\",\n         ],\n         \"ref_db\" => null,\n         \"ref_table\" => null,\n         \"ref_column\" => null,\n        \"unique\" => 1,\n       ],\n     ],\n     \"cols\" => [\n       \"id\" => [\n         \"PRIMARY\",\n       ],\n       \"number\" => [\n         \"number\",\n       ],\n     ],\n]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n    return $this->language->getKeys($table);\n  }",
            "startLine": 2411,
            "endLine": 2414,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "getConditions": {
            "name": "getConditions",
            "summary": "Returns a string with the conditions for any filter clause.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0)\n  {\n    return $this->language->getConditions($conditions, $cfg, $is_having, $indent);\n  }",
            "startLine": 2426,
            "endLine": 2429,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "conditions",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "is_having",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "having"
                },
                {
                    "name": "indent",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getSelect": {
            "name": "getSelect",
            "summary": "Return SQL code for row(s) SELECT.",
            "description": "```php\nX::dump($db->getSelect(['tables' => ['users'],'fields' => ['id', 'name']]));\n\/*\n(string)\n  SELECT\n   `table_users`.`name`,\n   `table_users`.`surname`\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getSelect(['tables' => ['users'],'fields' => ['id', 'name']]));\n\/*\n(string)\n  SELECT\n   `table_users`.`name`,\n   `table_users`.`surname`"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getSelect($cfg);\n  }",
            "startLine": 2448,
            "endLine": 2453,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ]
        },
        "getInsert": {
            "name": "getInsert",
            "summary": "Returns the SQL code for an INSERT statement.",
            "description": "```php\nX::dump($db->getInsert([\n  'tables' => ['table_users'],\n  'fields' => ['name','surname']\n]));\n\/*\n(string)\n INSERT INTO `db_example`.`table_users` (\n             `name`, `surname`)\n             VALUES (?, ?)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getInsert([\n  'tables' => ['table_users'],\n  'fields' => ['name','surname']\n]));\n\/*\n(string)\n INSERT INTO `db_example`.`table_users` (\n             `name`, `surname`)\n             VALUES (?, ?)"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    $cfg['kind'] = 'INSERT';\n    return $this->language->getInsert($this->processCfg($cfg));\n  }",
            "startLine": 2475,
            "endLine": 2481,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ]
        },
        "getUpdate": {
            "name": "getUpdate",
            "summary": "Returns the SQL code for an UPDATE statement.",
            "description": "```php\nX::dump($db->getUpdate([\n  'tables' => ['table_users'],\n  'fields' => ['name','surname']\n]));\n\/*\n(string)\n   UPDATE `db_example`.`table_users`\n   SET `table_users`.`name` = ?,\n       `table_users`.`surname` = ?\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getUpdate([\n  'tables' => ['table_users'],\n  'fields' => ['name','surname']\n]));\n\/*\n(string)\n   UPDATE `db_example`.`table_users`\n   SET `table_users`.`name` = ?,\n       `table_users`.`surname` = ?"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    $cfg['kind'] = 'UPDATE';\n    return $this->language->getUpdate($this->processCfg($cfg));\n  }",
            "startLine": 2503,
            "endLine": 2509,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ]
        },
        "getDelete": {
            "name": "getDelete",
            "summary": "Returns the SQL code for a DELETE statement.",
            "description": "```php\nX::dump($db->getDelete(['tables' => ['table_users']]));\n\/\/ (string) DELETE FROM `db_example`.`table_users` * WHERE 1 AND `table_users`.`id` = ?\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getDelete(['tables' => ['table_users']]));\n\/\/ (string) DELETE FROM `db_example`.`table_users` * WHERE 1 AND `table_users`.`id` = ?"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    $cfg['kind'] = 'DELETE';\n    return $this->language->getDelete($this->processCfg($cfg));\n  }",
            "startLine": 2524,
            "endLine": 2530,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ]
        },
        "getJoin": {
            "name": "getJoin",
            "summary": "Returns a string with the JOIN part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getJoin($cfg);\n  }",
            "startLine": 2540,
            "endLine": 2545,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getWhere": {
            "name": "getWhere",
            "summary": "Return a string with 'where' conditions.",
            "description": "```php\nX::dump($db->getWhere(['id' => 9], 'table_users'));\n\/\/ (string) WHERE 1 AND `table_users`.`id` = ?\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getWhere(['id' => 9], 'table_users'));\n\/\/ (string) WHERE 1 AND `table_users`.`id` = ?"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getWhere($cfg);\n  }",
            "startLine": 2560,
            "endLine": 2565,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getGroupBy": {
            "name": "getGroupBy",
            "summary": "Returns a string with the GROUP BY part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getGroupBy($cfg);\n  }",
            "startLine": 2575,
            "endLine": 2580,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getHaving": {
            "name": "getHaving",
            "summary": "Returns a string with the HAVING part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getHaving($cfg);\n  }",
            "startLine": 2590,
            "endLine": 2595,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOrder": {
            "name": "getOrder",
            "summary": "Get a string starting with ORDER BY with corresponding parameters to $order.",
            "description": "```php\nX::dump($db->getOrder(['name' => 'DESC' ],'table_users'));\n\/\/ (string) ORDER BY `name` DESC\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getOrder(['name' => 'DESC' ],'table_users'));\n\/\/ (string) ORDER BY `name` DESC"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getOrder($cfg);\n  }",
            "startLine": 2610,
            "endLine": 2615,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLimit": {
            "name": "getLimit",
            "summary": "Get a string starting with LIMIT with corresponding parameters to $limit.",
            "description": "```php\nX::dump($db->getLimit(['limit' => 3, 'start'  => 1]));\n\/\/ (string) LIMIT 1, 3\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getLimit(['limit' => 3, 'start'  => 1]));\n\/\/ (string) LIMIT 1, 3"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getLimit($cfg);\n  }",
            "startLine": 2630,
            "endLine": 2635,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCreate": {
            "name": "getCreate",
            "summary": "Return SQL code for table creation.",
            "description": "```php\nX::dump($db->getCreate(\"table_users\"));\n\/*\n(string)\n   CREATE TABLE `table_users` (\n     `userid` int(11) NOT NULL,\n     `userdataid` int(11) NOT NULL,\n     `info` char(200) DEFAULT NULL,\n      PRIMARY KEY (`userid`,`userdataid`),\n      KEY `table_users_userId_userdataId_info` (`userid`,`userdataid`,`info`)\n   ) ENGINE=InnoDB DEFAULT CHARSET=utf8\n\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getCreate(\"table_users\"));\n\/*\n(string)\n   CREATE TABLE `table_users` (\n     `userid` int(11) NOT NULL,\n     `userdataid` int(11) NOT NULL,\n     `info` char(200) DEFAULT NULL,\n      PRIMARY KEY (`userid`,`userdataid`),\n      KEY `table_users_userId_userdataId_info` (`userid`,`userdataid`,`info`)\n   ) ENGINE=InnoDB DEFAULT CHARSET=utf8"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, array $model = NULL)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getCreate($table, $model);\n  }",
            "startLine": 2659,
            "endLine": 2664,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getCreateTable": {
            "name": "getCreateTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, array $model = NULL)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getCreateTable($table, $model);\n  }",
            "startLine": 2673,
            "endLine": 2678,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getCreateKeys": {
            "name": "getCreateKeys",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, array $model = NULL)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getCreateKeys($table, $model);\n  }",
            "startLine": 2687,
            "endLine": 2692,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getCreateConstraints": {
            "name": "getCreateConstraints",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, array $model = NULL)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getCreateConstraints($table, $model);\n  }",
            "startLine": 2701,
            "endLine": 2706,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "createIndex": {
            "name": "createIndex",
            "summary": "Creates an index on one or more column(s) of the table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, $column, bool $unique = false, $length = NULL)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->createIndex($table, $column, $unique, $length);\n  }",
            "startLine": 2725,
            "endLine": 2730,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "unique",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "length",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "deleteIndex": {
            "name": "deleteIndex",
            "summary": "Deletes index on a column of the table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $key)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->deleteIndex($table, $key);\n  }",
            "startLine": 2748,
            "endLine": 2753,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name."
                },
                {
                    "name": "key",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The key's name."
                }
            ]
        },
        "getAlterTable": {
            "name": "getAlterTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, array $cfg)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getAlterTable($table, $cfg);\n  }",
            "startLine": 2762,
            "endLine": 2767,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getAlterColumn": {
            "name": "getAlterColumn",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, array $cfg)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getAlterColumn($table, $cfg);\n  }",
            "startLine": 2776,
            "endLine": 2781,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getAlterKey": {
            "name": "getAlterKey",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, array $cfg)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getAlterKey($table, $cfg);\n  }",
            "startLine": 2790,
            "endLine": 2795,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "alter": {
            "name": "alter",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, array $cfg)\n  {\n    if (method_exists($this->language, 'alter')) {\n      return $this->language->alter($table, $cfg);\n    }\n\n    if ($st = $this->language->getAlterTable($table, $cfg)) {\n      return (int)$this->language->rawQuery($st);\n    }\n\n    return 0;\n  }",
            "startLine": 2804,
            "endLine": 2815,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "moveColumn": {
            "name": "moveColumn",
            "summary": "Moves the given column's position within a table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $column, array $cfg, string $after = NULL)\n  {\n    $this->ensureLanguageMethodExists('getMoveColumn');\n\n    if ($st = $this->language->getMoveColumn($table, $column, $cfg, $after)) {\n      return (int)$this->language->rawQuery($st);\n    }\n\n    return 0;\n  }",
            "startLine": 2827,
            "endLine": 2836,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 2,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "after",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "createUser": {
            "name": "createUser",
            "summary": "Creates a user for a specific db.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $user = NULL, string $pass = NULL, string $db = NULL)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->createUser($user, $pass, $db);\n  }",
            "startLine": 2854,
            "endLine": 2859,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "pass",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "deleteUser": {
            "name": "deleteUser",
            "summary": "Deletes a db user.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $user)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->deleteUser($user);\n  }",
            "startLine": 2876,
            "endLine": 2881,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUsers": {
            "name": "getUsers",
            "summary": "Return an array including privileges of a specific db_user or all db_users.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $user = '', string $host = '')\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getUsers($user, $host);\n  }",
            "startLine": 2901,
            "endLine": 2906,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": ". The user's name, without params will return all privileges of all db_users"
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": ". The host"
                }
            ]
        },
        "renameTable": {
            "name": "renameTable",
            "summary": "Renames the given table to the new given name.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $newName)\n  {\n    return $this->language->renameTable($table, $newName);\n  }",
            "startLine": 2916,
            "endLine": 2919,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The current table's name"
                },
                {
                    "name": "newName",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame The new name."
                }
            ]
        },
        "getTableComment": {
            "name": "getTableComment",
            "summary": "Returns the comment (or an empty string if none) for a given table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n    return $this->language->getTableComment($table);\n  }",
            "startLine": 2928,
            "endLine": 2931,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "dbSize": {
            "name": "dbSize",
            "summary": "Gets the size of a database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $database = '', string $type = '')\n  {\n    return $this->language->dbSize($database, $type);\n  }",
            "startLine": 2940,
            "endLine": 2943,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "tableSize": {
            "name": "tableSize",
            "summary": "Gets the size of a table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $type = '')\n  {\n    return $this->language->tableSize($table, $type);\n  }",
            "startLine": 2953,
            "endLine": 2956,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "status": {
            "name": "status",
            "summary": "Gets the status of a table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table = '', string $database = '')\n  {\n    return $this->language->status($table, $database);\n  }",
            "startLine": 2966,
            "endLine": 2969,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUid": {
            "name": "getUid",
            "summary": "Returns a UUID",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getUid();\n  }",
            "startLine": 2977,
            "endLine": 2980,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getRow": {
            "name": "getRow",
            "summary": "Return the first row resulting from the query as an array indexed with the fields' name.",
            "description": "```php\nX::dump($db->getRow(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n\n\/* (array)[\n       \"id\" => 3,\n       \"name\" => \"thomas\",\n       ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getRow(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n\n\/* (array)[\n       \"id\" => 3,\n       \"name\" => \"thomas\",\n       ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getRow(...\\func_get_args());\n  }",
            "startLine": 3009,
            "endLine": 3012,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getRows": {
            "name": "getRows",
            "summary": "Return an array that includes indexed arrays for every row resultant from the query.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getRows(...\\func_get_args());\n  }",
            "startLine": 3022,
            "endLine": 3025,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getIrow": {
            "name": "getIrow",
            "summary": "Return a row as a numeric indexed array.",
            "description": "```php\nX::dump($db->getIrow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n\/* (array) [\n             3,\n             \"john\",\n             \"brown\",\n            ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getIrow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n\/* (array) [\n             3,\n             \"john\",\n             \"brown\",\n            ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getIrow(...\\func_get_args());\n  }",
            "startLine": 3044,
            "endLine": 3047,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getIrows": {
            "name": "getIrows",
            "summary": "Return an array of numeric indexed rows.",
            "description": "```php\nX::dump($db->getIrows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n\/*\n(array)[\n        [\n         3,\n        \"john\"\n        ],\n        [\n        4,\n        \"barbara\"\n       ]\n      ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getIrows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n\/*\n(array)[\n        [\n         3,\n        \"john\"\n        ],\n        [\n        4,\n        \"barbara\"\n       ]\n      ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getIrows(...\\func_get_args());\n  }",
            "startLine": 3070,
            "endLine": 3073,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getByColumns": {
            "name": "getByColumns",
            "summary": "Return an array indexed on the searched field's in which there are all the values of the column.",
            "description": "```php\nX::dump($db->getByColumns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n\/*\n(array) [\n     \"name\" => [\n      \"John\",\n      \"Michael\"\n     ],\n     \"surname\" => [\n       \"Brown\",\n       \"Smith\"\n     ]\n    ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getByColumns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n\/*\n(array) [\n     \"name\" => [\n      \"John\",\n      \"Michael\"\n     ],\n     \"surname\" => [\n       \"Brown\",\n       \"Smith\"\n     ]\n    ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getByColumns(...\\func_get_args());\n  }",
            "startLine": 3097,
            "endLine": 3100,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getObj": {
            "name": "getObj",
            "summary": "Return the first row resulting from the query as an object (similar to {@link getObject()}).",
            "description": "```php\nX::dump($db->getObj(\"SELECT surname FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"Smith\"\n      }\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getObj(\"SELECT surname FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"Smith\"\n      }"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->getObject(...\\func_get_args());\n  }",
            "startLine": 3116,
            "endLine": 3119,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "stdClass"
            ],
            "parent": false,
            "arguments": []
        },
        "getObject": {
            "name": "getObject",
            "summary": "Return the first row resulting from the query as an object.",
            "description": "Synonym of get_obj.\n\n```php\nX::dump($db->getObject(\"SELECT name FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"John\"\n      }\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Synonym of get_obj.<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->getObject(\"SELECT name FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"John\"\n      }"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getObject(...\\func_get_args());\n  }",
            "startLine": 3136,
            "endLine": 3139,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "stdClass"
            ],
            "parent": false,
            "arguments": []
        },
        "getObjects": {
            "name": "getObjects",
            "summary": "Return an array of stdClass objects.",
            "description": "```php\nX::dump($db->getObjects(\"SELECT name FROM table_users\"));\n\n\/*\n(array) [\n         Object stdClass: df {\n           \"name\" => \"John\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Michael\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Thomas\",\n         },\n         Object stdClass: df {\n           \"name\" => \"William\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Jake\",\n         },\n        ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getObjects(\"SELECT name FROM table_users\"));\n\n\/*\n(array) [\n         Object stdClass: df {\n           \"name\" => \"John\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Michael\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Thomas\",\n         },\n         Object stdClass: df {\n           \"name\" => \"William\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Jake\",\n         },\n        ]"
                }
            ],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->language->getObjects(...\\func_get_args());\n  }",
            "startLine": 3170,
            "endLine": 3173,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "createDatabase": {
            "name": "createDatabase",
            "summary": "Creates a database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $database)\n  {\n    return $this->language->createDatabase(...\\func_get_args());\n  }",
            "startLine": 3182,
            "endLine": 3185,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "tableExists": {
            "name": "tableExists",
            "summary": "Returns true if the given table exists",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $database = '')\n  {\n    return $this->language->tableExists($table, $database);\n  }",
            "startLine": 3195,
            "endLine": 3198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "or currently selected if none"
                }
            ]
        },
        "dropDatabase": {
            "name": "dropDatabase",
            "summary": "Drops the given database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $database)\n  {\n    return $this->language->dropDatabase($database);\n  }",
            "startLine": 3207,
            "endLine": 3210,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dropTable": {
            "name": "dropTable",
            "summary": "Drops the given table, in the current database if none given",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $database = '')\n  {\n    return $this->language->dropTable($table, $database);\n  }",
            "startLine": 3219,
            "endLine": 3222,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "enableLast": {
            "name": "enableLast",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (method_exists($this->language, __FUNCTION__)) {\n      $this->language->enableLast();\n    }\n  }",
            "startLine": 3228,
            "endLine": 3233,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "disableLast": {
            "name": "disableLast",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (method_exists($this->language, __FUNCTION__)) {\n      $this->language->disableLast();\n    }\n  }",
            "startLine": 3239,
            "endLine": 3244,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getRealLastParams": {
            "name": "getRealLastParams",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getRealLastParams();\n  }",
            "startLine": 3250,
            "endLine": 3255,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "realLast": {
            "name": "realLast",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->realLast();\n  }",
            "startLine": 3262,
            "endLine": 3267,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getLastParams": {
            "name": "getLastParams",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getLastParams();\n  }",
            "startLine": 3274,
            "endLine": 3279,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getLastValues": {
            "name": "getLastValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getLastValues();\n  }",
            "startLine": 3286,
            "endLine": 3291,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getQueryValues": {
            "name": "getQueryValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getQueryValues($cfg);\n  }",
            "startLine": 3299,
            "endLine": 3304,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "export4Option": {
            "name": "export4Option",
            "summary": "Creates a simplified array for options from a table model",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table_name, $database = '')\n  {\n    if ($database) {\n      $table_name = $database . '.' . $table_name; \n    }\n\n    $structure = $this->modelize($table_name);\n    foreach ($structure['keys'] as $k => &$m) {\n      unset($m['ref_db'], $m['constraint']);\n      if (empty($m['ref_table'])) {\n        unset($m['ref_table'], $m['ref_column'], $m['delete'], $m['update']);\n      }\n    }\n    foreach ($structure['fields'] as $k => &$f) {\n      unset($f['position']);\n      if (!in_array($f['type'], ['decimal', 'float', 'double'])) {\n        unset($f['decimals']);\n      }\n      if (!in_array($f['type'], $this->language->getNumericTypes())) {\n        unset($f['signed']);\n      }\n      if (empty($f['defaultExpression']) && is_null($f['default'])) {\n        unset($f['default'], $f['defaultExpression']);\n      }\n      if (empty($f['extra'])) {\n        unset($f['extra']);\n      }\n      if (empty($f['key'])) {\n        unset($f['key']);\n      }\n      if (empty($f['virtual'])) {\n        unset($f['virtual']);\n      }\n      if (empty($f['generation'])) {\n        unset($f['generation']);\n      }\n    }\n\n    return $structure;\n  }",
            "startLine": 3314,
            "endLine": 3353,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table_name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name"
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getInstance": {
            "name": "getInstance",
            "summary": "Returns the instance of the singleton or null.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$retriever_instance;\n  }",
            "startLine": 44,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "retrieverExists": {
            "name": "retrieverExists",
            "summary": "Returns true if an instance as been initiated.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$retriever_exists;\n  }",
            "startLine": 54,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        }
    },
    "properties": null,
    "staticProperties": {
        "engines": {
            "mysql": "nf nf-dev-mysql",
            "pgsql": "nf nf-dev-postgresql",
            "sqlite": "nf nf-dev-sqllite"
        },
        "retriever_instance": {},
        "retriever_exists": true
    },
    "constants": null,
    "summary": "Half ORM half DB management, the simplest class for data queries.",
    "description": "Hello world!",
    "description_parts": [
        {
            "type": "text",
            "content": "<p>Hello world!<\/p>"
        }
    ]
}