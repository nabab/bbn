{
    "doc": {
        "description": "Half ORM half DB management, the simplest class for data queries.\n\nHello world!\n",
        "tags": {
            "category": "Database",
            "package": "Bbn",
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT",
            "version": "Release: <package_version>",
            "link": "https:\/\/bbn.io\/bbn-php\/doc\/class\/db",
            "since": "Apr 4, 2011, 23:23:55 +0000",
            "todo": "Check for the tables and column names legality in _treat_arguments"
        }
    },
    "name": "bbn\\Db",
    "namespace": true,
    "realName": "Db",
    "realNamespace": "bbn",
    "traits": [
        "bbn\\Models\\Tts\\Cache",
        "bbn\\Models\\Tts\\Retriever"
    ],
    "interfaces": {
        "bbn\\Db\\Actions": {
            "name": "bbn\\Db\\Actions"
        },
        "Stringable": {
            "name": "Stringable"
        }
    },
    "fileName": "\/Db.php",
    "startLine": 24,
    "endLine": 3642,
    "numMethods": 198,
    "numProperties": 7,
    "numConstants": 0,
    "numStaticProperties": 3,
    "interfaceNames": [
        "bbn\\Db\\Actions",
        "Stringable"
    ],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "engines": {
            "mysql": "nf nf-dev-mysql",
            "pgsql": "nf nf-dev-postgresql",
            "sqlite": "nf nf-dev-sqlite"
        },
        "retriever_instance": null,
        "retriever_exists": false,
        "engine": null,
        "_cache_prefix": null,
        "cache_engine": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn",
    "shortName": "Db",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Constructor",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$dbtest = new bbn\\Db(['db_user' => 'test','db_engine' => 'mysql','db_host' => 'host','db_pass' => 't6pZDwRdfp4IM']);\n \/\/ (void)"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(array $cfg = [])\n  {\n    if (!isset($cfg['engine']) && \\defined('BBN_DB_ENGINE')) {\n      $cfg['engine'] = constant('BBN_DB_ENGINE');\n    }\n\n    if (isset($cfg['engine'])) {\n      if ($cfg['engine'] instanceof Engines) {\n        $this->language = $cfg['engine'];\n      }\n      else {\n        $engine = $cfg['engine'];\n        $cls    = '\\\\bbn\\\\Db\\\\Languages\\\\'.ucwords($engine);\n\n        if (!class_exists($cls)) {\n          throw new Exception(X::_(\"The database engine %s is not recognized\", $engine));\n        }\n\n        $this->language = new $cls($cfg);\n      }\n\n      self::retrieverInit($this);\n      $this->cacheInit();\n\n      if ($cfg = $this->getCfg()) {\n        $this->postCreation();\n        $this->engine = (string)$cfg['engine'];\n        $this->startFancyStuff();\n      }\n    }\n\n    if (!$this->engine) {\n      $connection  = $cfg['engine'] ?? 'No engine';\n      $connection .= '\/'.($cfg['db'] ?? 'No DB');\n      $this->log(X::_(\"Impossible to create the connection for\").' '.$connection);\n      throw new Exception(X::_(\"Impossible to create the connection for\").' '.$connection);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 57,
            "endLine": 94,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Mandatory db_user db_engine db_host db_pass"
                }
            ],
            "doc": {
                "description": "Constructor\n\n```php\n$dbtest = new bbn\\Db(['db_user' => 'test','db_engine' => 'mysql','db_host' => 'host','db_pass' => 't6pZDwRdfp4IM']);\n \/\/ (void)\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|array",
                        "name": "$cfg",
                        "description": "Mandatory db_user db_engine db_host db_pass"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Constructor\n   *\n   * ```php\n   * $dbtest = new bbn\\Db(['db_user' => 'test','db_engine' => 'mysql','db_host' => 'host','db_pass' => 't6pZDwRdfp4IM']);\n   *  \/\/ (void)\n   * ```\n   * @param null|array $cfg Mandatory db_user db_engine db_host db_pass\n   * @throws Exception\n   *\/"
        },
        "close": {
            "name": "close",
            "summary": "Closes the connection making the object unusable.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function close(): void\n  {\n    if ($this->language) {\n      $this->language->close();\n      $this->setErrorMode('continue');\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 102,
            "endLine": 108,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "close",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Closes the connection making the object unusable.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Closes the connection making the object unusable.\n   *\n   * @return void\n   *\/"
        },
        "isEngineSupported": {
            "name": "isEngineSupported",
            "summary": "Says if the given database engine is supported or not",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump(\n  $db->isEngineSupported(\"mysql\"), \/\/ true\n  $db->isEngineSupported(\"postgre\"), \/\/ false\n  $db->isEngineSupported(\"sqlite\"), \/\/ true\n  $db->isEngineSupported(\"mssql\"), \/\/ false\n  $db->isEngineSupported(\"test\") \/\/ false\n);"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isEngineSupported(string $engine): bool\n  {\n    return isset(self::$engines[$engine]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 128,
            "endLine": 131,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isEngineSupported",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "engine",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Says if the given database engine is supported or not\n\n```php\nX::adump(\n  $db->isEngineSupported(\"mysql\"), \/\/ true\n  $db->isEngineSupported(\"postgre\"), \/\/ false\n  $db->isEngineSupported(\"sqlite\"), \/\/ true\n  $db->isEngineSupported(\"mssql\"), \/\/ false\n  $db->isEngineSupported(\"test\") \/\/ false\n);\n```\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$engine"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Says if the given database engine is supported or not\n   * \n   * ```php\n   * X::adump(\n   *   $db->isEngineSupported(\"mysql\"), \/\/ true\n   *   $db->isEngineSupported(\"postgre\"), \/\/ false\n   *   $db->isEngineSupported(\"sqlite\"), \/\/ true\n   *   $db->isEngineSupported(\"mssql\"), \/\/ false\n   *   $db->isEngineSupported(\"test\") \/\/ false\n   * );\n   * ```\n   * \n   * @param string $engine\n   *\n   * @return bool\n   *\/"
        },
        "getEngineIcon": {
            "name": "getEngineIcon",
            "summary": "Returns the icon (CSS class from nerd fonts) for the given db engine",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "echo '<i class=\"'.$ctrl->db->getEngineIcon(\"mysql\").'\"><\/i>'; \/\/ nf nf-dev-mysql"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getEngineIcon(string $engine): ?string\n  {\n    return self::$engines[$engine] ?? null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 145,
            "endLine": 148,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getEngineIcon",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "engine",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Name of the engine"
                }
            ],
            "doc": {
                "description": "Returns the icon (CSS class from nerd fonts) for the given db engine\n\n```php\necho '<i class=\"'.$ctrl->db->getEngineIcon(\"mysql\").'\"><\/i>'; \/\/ nf nf-dev-mysql\n```\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$engine",
                        "description": "Name of the engine"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the icon (CSS class from nerd fonts) for the given db engine\n   * \n   * ```php\n   * echo '<i class=\"'.$ctrl->db->getEngineIcon(\"mysql\").'\"><\/i>'; \/\/ nf nf-dev-mysql\n   * ```\n   * \n   * @param string $engine Name of the engine\n   * \n   * @return string|null\n   *\/"
        },
        "getCfg": {
            "name": "getCfg",
            "summary": "Return the config of the language",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "adump($ctrl->db->getCfg(\"mysql\"));"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCfg(): array\n  {\n    return $this->language->getCfg();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 159,
            "endLine": 162,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCfg",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return the config of the language\n\n```php\nadump($ctrl->db->getCfg(\"mysql\"));\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Return the config of the language\n   * \n   * ```php\n   * adump($ctrl->db->getCfg(\"mysql\"));\n   * ```\n   *\n   * @return array\n   *\/"
        },
        "getEngine": {
            "name": "getEngine",
            "summary": "Returns the engine used by the current connection.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->getEngine()); \/\/ mysql"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getEngine(): ?string\n  {\n    return $this->engine;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 173,
            "endLine": 176,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getEngine",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the engine used by the current connection.\n\n```php\nX::adump($ctrl->db->getEngine()); \/\/ mysql\n```\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the engine used by the current connection.\n   * \n   * ```php\n   * X::adump($ctrl->db->getEngine()); \/\/ mysql\n   * ```\n   * \n   * @return string|null\n   *\/"
        },
        "getHost": {
            "name": "getHost",
            "summary": "Returns the host of the current connection.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->getHost()); \/\/ db.m3l.co"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getHost(): ?string\n  {\n    return $this->language->getHost();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 188,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getHost",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the host of the current connection.\n\n```php\nX::adump($ctrl->db->getHost()); \/\/ db.m3l.co\n```\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the host of the current connection.\n   * \n   * ```php\n   * X::adump($ctrl->db->getHost()); \/\/ db.m3l.co\n   * ```\n   * \n   * @return string|null\n   *\/"
        },
        "getCurrent": {
            "name": "getCurrent",
            "summary": "Returns the current database selected by the current connection.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->getCurrent()); \/\/ dev_mk"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCurrent(): ?string\n  {\n    return $this->language->getCurrent();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 203,
            "endLine": 206,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCurrent",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the current database selected by the current connection.\n\n```php\nX::adump($ctrl->db->getCurrent()); \/\/ dev_mk\n```\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * ```php\n   * X::adump($ctrl->db->getCurrent()); \/\/ dev_mk\n   * ```\n   * \n   * @return string|null\n   *\/"
        },
        "getLastError": {
            "name": "getLastError",
            "summary": "Returns the last error, return null if there is no last error.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->getLastError()); \/\/ null"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastError(): ?string\n  {\n    return $this->language->getLastError();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 218,
            "endLine": 221,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLastError",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the last error, return null if there is no last error.\n\n```php\nX::adump($ctrl->db->getLastError()); \/\/ null\n```\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the last error, return null if there is no last error.\n   *\n   * ```php\n   * X::adump($ctrl->db->getLastError()); \/\/ null\n   * ```\n   * \n   * @return string|null\n   *\/"
        },
        "isAggregateFunction": {
            "name": "isAggregateFunction",
            "summary": "Returns true if the column name is an aggregate function",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->isAggregateFunction(\"name\")); \/\/ false\nX::adump($ctrl->db->isAggregateFunction(\"ID\")); \/\/ true"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isAggregateFunction(string $f): bool\n  {\n    $cls = '\\\\bbn\\\\Db\\\\languages\\\\'.$this->engine;\n    return $cls::isAggregateFunction($f);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 235,
            "endLine": 239,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isAggregateFunction",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "f",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to check"
                }
            ],
            "doc": {
                "description": "Returns true if the column name is an aggregate function\n\n```php\nX::adump($ctrl->db->isAggregateFunction(\"name\")); \/\/ false\nX::adump($ctrl->db->isAggregateFunction(\"ID\")); \/\/ true\n```\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$f",
                        "description": "The string to check"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the column name is an aggregate function\n   * \n   * ```php\n   * X::adump($ctrl->db->isAggregateFunction(\"name\")); \/\/ false\n   * X::adump($ctrl->db->isAggregateFunction(\"ID\")); \/\/ true\n   * ```\n   * \n   * @param string $f The string to check\n   * \n   * @return bool\n   *\/"
        },
        "__toString": {
            "name": "__toString",
            "summary": "Makes that echoing the connection shows its engine and host.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->__toString()); \/\/ Connection mysql to db.m3l.co"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __toString()\n  {\n    return \"Connection {$this->engine} to \" . $this->getHost();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 251,
            "endLine": 254,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "__toString",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Makes that echoing the connection shows its engine and host.\n\n```php\nX::adump($ctrl->db->__toString()); \/\/ Connection mysql to db.m3l.co\n```\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Makes that echoing the connection shows its engine and host.\n   * \n   * ```php\n   * X::adump($ctrl->db->__toString()); \/\/ Connection mysql to db.m3l.co\n   * ```\n   * \n   * @return string\n   *\/"
        },
        "getConnectionCode": {
            "name": "getConnectionCode",
            "summary": "Returns the connection code",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->getConnectionCode()); \/\/ dev_mk@db.m3l.co"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getConnectionCode()\n  {\n    return $this->language->getConnectionCode();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 266,
            "endLine": 269,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getConnectionCode",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the connection code\n\n```php\nX::adump($ctrl->db->getConnectionCode()); \/\/ dev_mk@db.m3l.co\n```\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the connection code\n   * \n   * ```php\n   * X::adump($ctrl->db->getConnectionCode()); \/\/ dev_mk@db.m3l.co\n   * ```\n   * \n   * @return string\n   *\/"
        },
        "getLastCfg": {
            "name": "getLastCfg",
            "summary": "Returns the last config for this connection.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getLastCfg());\n\/\/ (array) INSERT INTO `db_example.table_user` (`name`) VALUES (?)"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastCfg(): ?array\n  {\n    return $this->language->getLastCfg();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 281,
            "endLine": 284,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLastCfg",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the last config for this connection.\n\n```php\nX::dump($db->getLastCfg());\n\/\/ (array) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the last config for this connection.\n   *\n   * ```php\n   * X::dump($db->getLastCfg());\n   * \/\/ (array) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n   * ```\n   *\n   * @return array|null\n   *\/"
        },
        "getConnection": {
            "name": "getConnection",
            "summary": "```php",
            "description": "X::adump($ctrl->db->getConnection());\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "X::adump($ctrl->db->getConnection());\n```"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getConnection(array $cfg = []): ?array\n  {\n    return $this->language->getConnection($cfg);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 295,
            "endLine": 298,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getConnection",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The user's options"
                }
            ],
            "doc": {
                "description": "```php\nX::adump($ctrl->db->getConnection());\n```\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The user's options"
                    }
                ],
                "return": "The final configuration"
            },
            "comments": "  \/**\n   * \n   * ```php\n   * X::adump($ctrl->db->getConnection()); \n   * ```\n   * \n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/"
        },
        "getHash": {
            "name": "getHash",
            "summary": "Gets the created hash.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getHash());\n\/\/ (string) 3819056v431b210daf45f9b5dc2"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getHash(): string\n  {\n    return $this->language->getHash();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 318,
            "endLine": 321,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getHash",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets the created hash.\n\n```php\nX::dump($db->getHash());\n\/\/ (string) 3819056v431b210daf45f9b5dc2\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the created hash.\n   *\n   * ```php\n   * X::dump($db->getHash());\n   * \/\/ (string) 3819056v431b210daf45f9b5dc2\n   * ```\n   * @return string\n   *\/"
        },
        "replaceTableInConditions": {
            "name": "replaceTableInConditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function replaceTableInConditions(array $conditions, $old_name, $new_name): array\n  {\n    return X::map(\n      function ($a) use ($old_name, $new_name) {\n        if (!empty($a['field'])) {\n          $a['field'] = preg_replace(\"\/(\\\\W|^)$old_name([\\\\`\\\\']*\\\\s*)\\\\.\/\", '$1'.$new_name.'$2.', $a['field']);\n        }\n\n        if (!empty($a['exp'])) {\n          $a['exp'] = preg_replace(\"\/(\\\\W|^)$old_name([\\\\`\\\\']*\\\\s*)\\\\.\/\", '$1'.$new_name.'$2.', $a['exp']);\n        }\n\n        return $a;\n      }, $conditions, 'conditions'\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 330,
            "endLine": 345,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "replaceTableInConditions",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "conditions",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "old_name",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "new_name",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$conditions"
                    },
                    {
                        "tag": "param",
                        "type": "$old_name"
                    },
                    {
                        "tag": "param",
                        "type": "$new_name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array $conditions\n   * @param $old_name\n   * @param $new_name\n   * @return array\n   *\/"
        },
        "treatConditions": {
            "name": "treatConditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function treatConditions(array $where, bool $full = true)\n  {\n    return $this->language->treatConditions($where, $full);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 353,
            "endLine": 356,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "treatConditions",
            "returns": [],
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$full"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/"
        },
        "reprocessCfg": {
            "name": "reprocessCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function reprocessCfg(array $cfg): ?array\n  {\n    return $this->language->reprocessCfg($cfg);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 363,
            "endLine": 366,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "reprocessCfg",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/"
        },
        "processCfg": {
            "name": "processCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function processCfg(array $args, bool $force = false): ?array\n  {\n    return $this->language->processCfg($args, $force);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 374,
            "endLine": 377,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "processCfg",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$args"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   *\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks if the database is ready to process a query.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->check());\n\/\/ (bool)"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check(): bool\n  {\n    return $this->language->check();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 389,
            "endLine": 392,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks if the database is ready to process a query.\n\n```php\nX::dump($db->check());\n\/\/ (bool)\n```\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the database is ready to process a query.\n   *\n   * ```php\n   * X::dump($db->check());\n   * \/\/ (bool)\n   * ```\n   * \n   * @return bool\n   *\/"
        },
        "log": {
            "name": "log",
            "summary": "Writes in data\/logs\/db.log.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->$db->log('test');"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log($st): self\n  {\n    $args = \\func_get_args();\n    foreach ($args as $a){\n      X::log($a, 'db');\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 404,
            "endLine": 412,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "log",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Writes in data\/logs\/db.log.\n\n```php\n$db->$db->log('test');\n```\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$st"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Writes in data\/logs\/db.log.\n   *\n   * ```php\n   * $db->$db->log('test');\n   * ```\n   * \n   * @param mixed $st\n   * @return self\n   *\/"
        },
        "setErrorMode": {
            "name": "setErrorMode",
            "summary": "Sets the error mode.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->setErrorMode('continue'|'die'|'stop_all|'stop');\n\/\/ (self)"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setErrorMode(string $mode): self\n  {\n    $this->language->setErrorMode($mode);\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 426,
            "endLine": 430,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setErrorMode",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "mode",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The error mode: \"continue\", \"die\", \"stop\", \"stop_all\"."
                }
            ],
            "doc": {
                "description": "Sets the error mode.\n\n```php\n$db->setErrorMode('continue'|'die'|'stop_all|'stop');\n\/\/ (self)\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode",
                        "description": "The error mode: \"continue\", \"die\", \"stop\", \"stop_all\"."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the error mode.\n   *\n   * ```php\n   * $db->setErrorMode('continue'|'die'|'stop_all|'stop');\n   * \/\/ (self)\n   * ```\n   *\n   * @param string $mode The error mode: \"continue\", \"die\", \"stop\", \"stop_all\".\n   * @return self\n   *\/"
        },
        "getErrorMode": {
            "name": "getErrorMode",
            "summary": "Gets the error mode.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getErrorMode());\n\/\/ (string) stop_all"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorMode(): string\n  {\n    return $this->language->getErrorMode();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 443,
            "endLine": 446,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorMode",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets the error mode.\n\n```php\nX::dump($db->getErrorMode());\n\/\/ (string) stop_all\n```\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the error mode.\n   *\n   * ```php\n   * X::dump($db->getErrorMode());\n   * \/\/ (string) stop_all\n   * ```\n   * \n   * @return string\n   *\/"
        },
        "clearCache": {
            "name": "clearCache",
            "summary": "Deletes a specific item from the cache.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->clearCache('db_example','tables'));\n\/\/ (db)"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function clearCache(string $item, string $mode): self\n  {\n    if ($this->cacheHas($item, $mode)) {\n      $this->cacheDelete($item, $mode);\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 461,
            "endLine": 468,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "clearCache",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "'db_name' or 'table_name'"
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "'columns','tables' or 'databases'"
                }
            ],
            "doc": {
                "description": "Deletes a specific item from the cache.\n\n```php\nX::dump($db->clearCache('db_example','tables'));\n\/\/ (db)\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$item",
                        "description": "'db_name' or 'table_name'"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode",
                        "description": "'columns','tables' or 'databases'"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a specific item from the cache.\n   *\n   * ```php\n   * X::dump($db->clearCache('db_example','tables'));\n   * \/\/ (db)\n   * ```\n   *\n   * @param string $item 'db_name' or 'table_name'\n   * @param string $mode 'columns','tables' or 'databases'\n   * @return self\n   *\/"
        },
        "clearAllCache": {
            "name": "clearAllCache",
            "summary": "Clears the cache.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->clearAllCache());\n\/\/ (db)"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function clearAllCache(): self\n  {\n    $this->cacheDeleteAll();\n    $this->language->initCache();\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 481,
            "endLine": 486,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "clearAllCache",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Clears the cache.\n\n```php\nX::dump($db->clearAllCache());\n\/\/ (db)\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Clears the cache.\n   *\n   * ```php\n   * X::dump($db->clearAllCache());\n   * \/\/ (db)\n   * ```\n   *\n   * @return self\n   *\/"
        },
        "stopFancyStuff": {
            "name": "stopFancyStuff",
            "summary": "Stops fancy stuff.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->stopFancyStuff();\n\/\/ (self)"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function stopFancyStuff(): self\n  {\n    if ($this->language) {\n      $this->language->stopFancyStuff();\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 499,
            "endLine": 506,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "stopFancyStuff",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Stops fancy stuff.\n\n```php\n $db->stopFancyStuff();\n\/\/ (self)\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Stops fancy stuff.\n   *\n   * ```php\n   *  $db->stopFancyStuff();\n   * \/\/ (self)\n   * ```\n   *\n   * @return self\n   *\/"
        },
        "startFancyStuff": {
            "name": "startFancyStuff",
            "summary": "Starts fancy stuff.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->startFancyStuff();\n\/\/ (self)"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function startFancyStuff(): self\n  {\n    if ($this->language) {\n      $this->language->startFancyStuff();\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 519,
            "endLine": 526,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "startFancyStuff",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Starts fancy stuff.\n\n```php\n$db->startFancyStuff();\n\/\/ (self)\n```\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Starts fancy stuff.\n   *\n   * ```php\n   * $db->startFancyStuff();\n   * \/\/ (self)\n   * ```\n   * \n   * @return self\n   *\/"
        },
        "enableTrigger": {
            "name": "enableTrigger",
            "summary": "Enable the triggers' functions",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->enableTrigger()); \/\/ bbn\\Db Object"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function enableTrigger(): self\n  {\n    $this->language->enableTrigger();\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 547,
            "endLine": 551,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "enableTrigger",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Enable the triggers' functions\n\n```php\nX::adump($ctrl->db->enableTrigger()); \/\/ bbn\\Db Object\n```\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Enable the triggers' functions\n   *\n   * ```php\n   * X::adump($ctrl->db->enableTrigger()); \/\/ bbn\\Db Object\n   * ```\n   * \n   * @return self\n   *\/"
        },
        "disableTrigger": {
            "name": "disableTrigger",
            "summary": "Disable the triggers' functions",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->disableTrigger());"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function disableTrigger(): self\n  {\n    $this->language->disableTrigger();\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 563,
            "endLine": 567,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "disableTrigger",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Disable the triggers' functions\n\n```php\nX::adump($ctrl->db->disableTrigger());\n```\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Disable the triggers' functions\n   * \n   * ```php\n   * X::adump($ctrl->db->disableTrigger());\n   * ```\n   * \n   * @return self\n   *\/"
        },
        "isTriggerEnabled": {
            "name": "isTriggerEnabled",
            "summary": "Checks if the triggers' functions are enable",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->isTriggerEnabled()); \/\/ true"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isTriggerEnabled(): bool\n  {\n    return $this->language->isTriggerEnabled();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 578,
            "endLine": 581,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isTriggerEnabled",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks if the triggers' functions are enable\n\n```php\nX::adump($ctrl->db->isTriggerEnabled()); \/\/ true\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the triggers' functions are enable\n   * \n   * ```php\n   * X::adump($ctrl->db->isTriggerEnabled()); \/\/ true\n   * ```\n   *\n   * @return boolean\n   *\/"
        },
        "isTriggerDisabled": {
            "name": "isTriggerDisabled",
            "summary": "Checks if the triggers' functions are disable",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->isTriggerEnabled()); \/\/ false"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isTriggerDisabled(): bool\n  {\n    return $this->language->isTriggerDisabled();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 592,
            "endLine": 595,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isTriggerDisabled",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks if the triggers' functions are disable\n\n```php\nX::adump($ctrl->db->isTriggerEnabled()); \/\/ false\n```\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the triggers' functions are disable\n   * \n   * ```php\n   * X::adump($ctrl->db->isTriggerEnabled()); \/\/ false\n   * ```\n   * \n   * @return boolean\n   *\/"
        },
        "setTrigger": {
            "name": "setTrigger",
            "summary": "Apply a function each time the methods $kind are used",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self\n  {\n    $this->language->setTrigger($function, $kind, $moment, $tables);\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 607,
            "endLine": 612,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "setTrigger",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "function",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "kind",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "select|insert|update|delete"
                },
                {
                    "name": "moment",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "before|after"
                },
                {
                    "name": "tables",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "*",
                    "default_name": "",
                    "description": "database's table(s) name(s)"
                }
            ],
            "doc": {
                "description": "Apply a function each time the methods $kind are used\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$function"
                    },
                    {
                        "tag": "param",
                        "type": "array|string|null",
                        "name": "$kind",
                        "description": "select|insert|update|delete"
                    },
                    {
                        "tag": "param",
                        "type": "array|string|null",
                        "name": "$moment",
                        "description": "before|after"
                    },
                    {
                        "tag": "param",
                        "type": "null|string|array",
                        "name": "$tables",
                        "description": "database's table(s) name(s)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Apply a function each time the methods $kind are used\n   *\n   * @param callable            $function\n   * @param array|string|null   $kind     select|insert|update|delete\n   * @param array|string|null   $moment   before|after\n   * @param null|string|array   $tables   database's table(s) name(s)\n   * @return self\n   *\/"
        },
        "getTriggers": {
            "name": "getTriggers",
            "summary": "Returns an array",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::adump($ctrl->db->getTriggers());"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTriggers(): array\n  {\n    return $this->language->getTriggers();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 623,
            "endLine": 626,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getTriggers",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns an array\n\n```php\nX::adump($ctrl->db->getTriggers());\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array \n   * \n   * ```php\n   * X::adump($ctrl->db->getTriggers());\n   * ```\n   * @return array\n   *\/"
        },
        "getFieldsList": {
            "name": "getFieldsList",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFieldsList($tables): array\n  {\n    return $this->language->getFieldsList($tables);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 643,
            "endLine": 646,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getFieldsList",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "tables",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$tables"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param $tables\n   * @return array\n   * @throws Exception\n   *\/"
        },
        "getForeignKeys": {
            "name": "getForeignKeys",
            "summary": "Return an array with tables and fields related to the searched foreign key.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getForeignKeys('id', 'table_users', 'db_example'));\n\/\/ (Array)"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getForeignKeys(string $col, string $table, string|null $db = null): array\n  {\n    return $this->language->getForeignKeys($col, $table, $db);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 662,
            "endLine": 665,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "getForeignKeys",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The database name if different from the current one"
                }
            ],
            "doc": {
                "description": "Return an array with tables and fields related to the searched foreign key.\n\n```php\nX::dump($db->getForeignKeys('id', 'table_users', 'db_example'));\n\/\/ (Array)\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$col",
                        "description": "The column's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$db",
                        "description": "The database name if different from the current one"
                    }
                ],
                "return": "with tables and fields related to the searched foreign key"
            },
            "comments": "  \/**\n   * Return an array with tables and fields related to the searched foreign key.\n   *\n   * ```php\n   * X::dump($db->getForeignKeys('id', 'table_users', 'db_example'));\n   * \/\/ (Array)\n   * ```\n   *\n   * @param string $col The column's name\n   * @param string $table The table's name\n   * @param string|null $db The database name if different from the current one\n   * @return array with tables and fields related to the searched foreign key\n   *\/"
        },
        "hasIdIncrement": {
            "name": "hasIdIncrement",
            "summary": "Return true if in the table there are fields with auto-increment.",
            "description": "Working only on mysql.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Working only on mysql."
                },
                {
                    "type": "code",
                    "content": "X::dump($db->hasIdIncrement('table_users'));\n\/\/ (bool) 1"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasIdIncrement(string $table): bool\n  {\n    if (method_exists($this->language, 'hasIdIncrement')) {\n      return $this->language->hasIdIncrement($table);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 680,
            "endLine": 687,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "hasIdIncrement",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ],
            "doc": {
                "description": "Return true if in the table there are fields with auto-increment.\nWorking only on mysql.\n\n```php\nX::dump($db->hasIdIncrement('table_users'));\n\/\/ (bool) 1\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return true if in the table there are fields with auto-increment.\n   * Working only on mysql.\n   *\n   * ```php\n   * X::dump($db->hasIdIncrement('table_users'));\n   * \/\/ (bool) 1\n   * ```\n   *\n   * @param string $table The table's name\n   * @return bool\n   *\/"
        },
        "modelize": {
            "name": "modelize",
            "summary": "Return the table's structure as an indexed array.",
            "description": "X::hdump($ctrl->db->modelize('my_date_2')); \/*\n\"fields\": {\n    \"ID\": {\n        \"position\": 1,\n        \"type\": \"int\",\n        \"null\": 0,\n        \"key\": null,\n        \"extra\": \"\",\n        \"signed\": true,\n        \"virtual\": false,\n        \"generation\": \"\",\n        \"maxlength\": 10,\n    },",
            "description_parts": [
                {
                    "type": "text",
                    "content": "X::hdump($ctrl->db->modelize('my_date_2')); \/*\n\"fields\": {\n    \"ID\": {\n        \"position\": 1,\n        \"type\": \"int\",\n        \"null\": 0,\n        \"key\": null,\n        \"extra\": \"\",\n        \"signed\": true,\n        \"virtual\": false,\n        \"generation\": \"\",\n        \"maxlength\": 10,\n    },"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function modelize($table = null, bool $force = false): ?array\n  {\n    return $this->language->modelize($table, $force);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 712,
            "endLine": 715,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "modelize",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true will force the modernization to re-perform even if the cache exists"
                }
            ],
            "doc": {
                "description": "Return the table's structure as an indexed array.\n\nX::hdump($ctrl->db->modelize('my_date_2')); \/*\n\"fields\": {\n    \"ID\": {\n        \"position\": 1,\n        \"type\": \"int\",\n        \"null\": 0,\n        \"key\": null,\n        \"extra\": \"\",\n        \"signed\": true,\n        \"virtual\": false,\n        \"generation\": \"\",\n        \"maxlength\": 10,\n    },\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|array|string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force",
                        "description": "If set to true will force the modernization to re-perform even if the cache exists"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return the table's structure as an indexed array.\n   * \n   * X::hdump($ctrl->db->modelize('my_date_2')); \/*    \n   * \"fields\": {\n   *     \"ID\": {\n   *         \"position\": 1,\n   *         \"type\": \"int\",\n   *         \"null\": 0,\n   *         \"key\": null,\n   *         \"extra\": \"\",\n   *         \"signed\": true,\n   *         \"virtual\": false,\n   *         \"generation\": \"\",\n   *         \"maxlength\": 10,\n   *     },\n   * \n   *\n   * @param null|array|string $table The table's name\n   * @param bool              $force If set to true will force the modernization to re-perform even if the cache exists\n   * @return null|array\n   *\/"
        },
        "getColMaxLength": {
            "name": "getColMaxLength",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getColMaxLength(string $column, string|null $table = null): ?int\n  {\n    return $this->language->getColMaxLength($column, $table);\n  } ",
            "parent": false,
            "trait": false,
            "startLine": 720,
            "endLine": 723,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getColMaxLength",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "tags": []
            },
            "comments": "  \/**\n   * \n   *\/"
        },
        "fmodelize": {
            "name": "fmodelize",
            "summary": "Return the table's structure as an indexed array.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump($ctrl->db->fmodelize('my_date_2'));"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fmodelize(string $table = '', bool $force = false): ?array\n  {\n    if (method_exists($this->language, 'fmodelize')) {\n      return $this->language->fmodelize($table, $force);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 736,
            "endLine": 743,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "fmodelize",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Return the table's structure as an indexed array.\n\n```php\nX::hdump($ctrl->db->fmodelize('my_date_2'));\n```\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force"
                    }
                ],
                "return": ""
            },
            "comments": "  \/** \n   * Return the table's structure as an indexed array.\n   * \n   * ```php\n   * X::hdump($ctrl->db->fmodelize('my_date_2'));\n   * ```\n   * \n   * @param string $table\n   * @param bool   $force\n   * @return null|array\n   *\/"
        },
        "findReferences": {
            "name": "findReferences",
            "summary": "find_references",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function findReferences($column, string $db = ''): array\n  {\n    if (method_exists($this->language, 'findReferences')) {\n      return $this->language->findReferences($column, $db);\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 754,
            "endLine": 761,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "findReferences",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "find_references\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$column"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * find_references\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\n   *\/"
        },
        "findRelations": {
            "name": "findRelations",
            "summary": "find_relations",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function findRelations($column, string $db = ''): ?array\n  {\n    return $this->language->findRelations($column, $db);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 771,
            "endLine": 774,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "findRelations",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "find_relations\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$column"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/"
        },
        "getPrimary": {
            "name": "getPrimary",
            "summary": "Return primary keys of a table as a numeric array.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db-> get_primary('table_users'));\n\/\/ (array) [\"id\"]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPrimary(string $table): array\n  {\n    return $this->language->getPrimary($table);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 788,
            "endLine": 791,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPrimary",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ],
            "doc": {
                "description": "Return primary keys of a table as a numeric array.\n\n```php\nX::dump($db-> get_primary('table_users'));\n\/\/ (array) [\"id\"]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * ```php\n   * X::dump($db-> get_primary('table_users'));\n   * \/\/ (array) [\"id\"]\n   * ```\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/"
        },
        "getSinglePrimary": {
            "name": "getSinglePrimary",
            "summary": "Return primary keys of a table as a string if there is a single-column unique key.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db-> getSinglePrimary('table_users'));\n\/\/ (string) \"id\""
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSinglePrimary(string $table): ?string\n  {\n    $primaries = $this->language->getPrimary($table);\n    if (count($primaries) === 1) {\n      return $primaries[0];\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 805,
            "endLine": 813,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getSinglePrimary",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ],
            "doc": {
                "description": "Return primary keys of a table as a string if there is a single-column unique key.\n\n```php\nX::dump($db-> getSinglePrimary('table_users'));\n\/\/ (string) \"id\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return primary keys of a table as a string if there is a single-column unique key.\n   *\n   * ```php\n   * X::dump($db-> getSinglePrimary('table_users'));\n   * \/\/ (string) \"id\"\n   * ```\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/"
        },
        "getUniquePrimary": {
            "name": "getUniquePrimary",
            "summary": "Return the unique primary key of the given table.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getUniquePrimary('table_users'));\n\/\/ (string) id"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUniquePrimary(string $table): ?string\n  {\n    if (method_exists($this->language, 'getUniquePrimary')) {\n      return $this->language->getUniquePrimary($table);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 827,
            "endLine": 834,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getUniquePrimary",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ],
            "doc": {
                "description": "Return the unique primary key of the given table.\n\n```php\nX::dump($db->getUniquePrimary('table_users'));\n\/\/ (string) id\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return the unique primary key of the given table.\n   *\n   * ```php\n   * X::dump($db->getUniquePrimary('table_users'));\n   * \/\/ (string) id\n   * ```\n   *\n   * @param string $table The table's name\n   * @return null|string\n   *\/"
        },
        "getUniqueKeys": {
            "name": "getUniqueKeys",
            "summary": "Return the unique keys of a table as a numeric array.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getUniqueKeys('table_users'));\n\/\/ (array) [\"userid\", \"userdataid\"]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUniqueKeys(string $table): array\n  {\n    if (method_exists($this->language, 'getUniqueKeys')) {\n      return $this->language->getUniqueKeys($table);\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 848,
            "endLine": 855,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getUniqueKeys",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ],
            "doc": {
                "description": "Return the unique keys of a table as a numeric array.\n\n```php\nX::dump($db->getUniqueKeys('table_users'));\n\/\/ (array) [\"userid\", \"userdataid\"]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return the unique keys of a table as a numeric array.\n   *\n   * ```php\n   * X::dump($db->getUniqueKeys('table_users'));\n   * \/\/ (array) [\"userid\", \"userdataid\"]\n   * ```\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/"
        },
        "setDatabaseCharset": {
            "name": "setDatabaseCharset",
            "summary": "Changes the charset to the given database",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDatabaseCharset(string $database, string $charset, string $collation): bool\n  {\n    if (method_exists($this->language, 'setDatabaseCharset')) {\n      return $this->language->setDatabaseCharset($database, $charset, $collation);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 864,
            "endLine": 870,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "setDatabaseCharset",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                },
                {
                    "name": "charset",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The charset to set"
                },
                {
                    "name": "collation",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The collation to set"
                }
            ],
            "doc": {
                "description": "Changes the charset to the given database\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database",
                        "description": "The database's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$charset",
                        "description": "The charset to set"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$collation",
                        "description": "The collation to set"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Changes the charset to the given database\n   * @param string $database The database's name\n   * @param string $charset The charset to set\n   * @param string $collation The collation to set\n   *\/"
        },
        "setTableCharset": {
            "name": "setTableCharset",
            "summary": "Changes the charset to the given table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setTableCharset(string $table, string $charset, string $collation): bool\n  {\n    if (method_exists($this->language, 'setTableCharset')) {\n      return $this->language->setTableCharset($table, $charset, $collation);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 879,
            "endLine": 885,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "setTableCharset",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "charset",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The charset to set"
                },
                {
                    "name": "collation",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The collation to set"
                }
            ],
            "doc": {
                "description": "Changes the charset to the given table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$charset",
                        "description": "The charset to set"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$collation",
                        "description": "The collation to set"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Changes the charset to the given table\n   * @param string $table The table's name\n   * @param string $charset The charset to set\n   * @param string $collation The collation to set\n   *\/"
        },
        "setColumnCharset": {
            "name": "setColumnCharset",
            "summary": "Changes the charset to the given column",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setColumnCharset(string $table, string $column, string $charset, string $collation): bool\n  {\n    if (method_exists($this->language, 'setColumnCharset')) {\n      return $this->language->setColumnCharset($table, $column, $charset, $collation);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 895,
            "endLine": 901,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "shortName": "setColumnCharset",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name"
                },
                {
                    "name": "charset",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The charset to set"
                },
                {
                    "name": "collation",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The collation to set"
                }
            ],
            "doc": {
                "description": "Changes the charset to the given column\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$column",
                        "description": "The column's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$charset",
                        "description": "The charset to set"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$collation",
                        "description": "The collation to set"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Changes the charset to the given column\n   * @param string $table The table's name\n   * @param string $column The column's name\n   * @param string $charset The charset to set\n   * @param string $collation The collation to set\n   *\/"
        },
        "escapeValue": {
            "name": "escapeValue",
            "summary": "Return a string with quotes and percent escaped.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->escapeValue(\"My father's job is interesting\");\n\/\/ (string) My  father\\'s  job  is  interesting"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function escapeValue(string $value, $esc = \"'\"): string\n  {\n    return str_replace(\n      '%', '\\\\%', $esc === '\"' ? Str::escapeDquotes($value) : Str::escapeSquotes($value)\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 926,
            "endLine": 931,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "escapeValue",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "value",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                },
                {
                    "name": "esc",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "'",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Return a string with quotes and percent escaped.\n\n```php\nX::dump($db->escapeValue(\"My father's job is interesting\");\n\/\/ (string) My  father\\'s  job  is  interesting\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$value",
                        "description": "The string to escape."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$esc"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return a string with quotes and percent escaped.\n   *\n   * ```php\n   * X::dump($db->escapeValue(\"My father's job is interesting\");\n   * \/\/ (string) My  father\\'s  job  is  interesting\n   * ```\n   *\n   * @param string $value The string to escape.\n   * @param string $esc\n   * @return string\n   *\n   *\/"
        },
        "setLastInsertId": {
            "name": "setLastInsertId",
            "summary": "Changes the value of last_insert_id (used by history).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setLastInsertId($id = ''): self\n  {\n    $this->language->setLastInsertId($id);\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 945,
            "endLine": 950,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "setLastInsertId",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The last inserted id"
                }
            ],
            "doc": {
                "description": "Changes the value of last_insert_id (used by history).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$id",
                        "description": "The last inserted id"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "this function should be private\n\n```php\nX::dump($db->setLastInsertId());\n\/\/ (db)\n```"
                }
            },
            "comments": "  \/**\n   * Changes the value of last_insert_id (used by history).\n   * @todo this function should be private\n   *\n   * ```php\n   * X::dump($db->setLastInsertId());\n   * \/\/ (db)\n   * ```\n   * @param mixed $id The last inserted id\n   * @return self\n   *\/"
        },
        "last": {
            "name": "last",
            "summary": "Return the last query for this connection.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->last());\n\/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function last(): ?string\n  {\n    return $this->language->last();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 962,
            "endLine": 965,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "last",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Return the last query for this connection.\n\n```php\nX::dump($db->last());\n\/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Return the last query for this connection.\n   *\n   * ```php\n   * X::dump($db->last());\n   * \/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n   * ```\n   *\n   * @return string\n   *\/"
        },
        "lastId": {
            "name": "lastId",
            "summary": "Return the last inserted ID.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->lastId());\n\/\/ (int) 26"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function lastId()\n  {\n    return $this->language->lastId();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 977,
            "endLine": 980,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "lastId",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Return the last inserted ID.\n\n```php\nX::dump($db->lastId());\n\/\/ (int) 26\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Return the last inserted ID.\n   *\n   * ```php\n   * X::dump($db->lastId());\n   * \/\/ (int) 26\n   * ```\n   *\n   * @return mixed\n   *\/"
        },
        "flush": {
            "name": "flush",
            "summary": "Deletes all the queries recorded and returns their (ex) number.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump($ctrl->db->flush()); \/\/ 9"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function flush(): int\n  {\n    return $this->language->flush();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 991,
            "endLine": 994,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "flush",
            "returns": [
                "int"
            ],
            "arguments": [],
            "doc": {
                "description": "Deletes all the queries recorded and returns their (ex) number.\n\n```php\nX::hdump($ctrl->db->flush()); \/\/ 9\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * ```php\n   * X::hdump($ctrl->db->flush()); \/\/ 9\n   * ```\n   * @return int\n   *\/"
        },
        "newId": {
            "name": "newId",
            "summary": "Generate a new casual id based on the max number of characters of id's column structure in the given table",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->newId('table_users', 18));\n\/\/ (int) 69991701"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function newId($table, int $min = 1)\n  {\n    $tab = $this->modelize($table);\n    if (\\count($tab['keys']['PRIMARY']['columns']) !== 1) {\n      die(\"Error! Unique numeric primary key doesn't exist\");\n    }\n\n    if (($id_field = $tab['keys']['PRIMARY']['columns'][0])\n        && ($maxlength = $tab['fields'][$id_field]['maxlength'] )\n        && ($maxlength > 1)\n    ) {\n      $max = (10 ** $maxlength) - 1;\n      if ($max >= mt_getrandmax()) {\n        $max = mt_getrandmax();\n      }\n\n      if (($max > $min) && ($table = $this->tfn($table, true))) {\n        $i = 0;\n        do {\n          $id = random_int($min, $max);\n          \/** @todo *\/\n          \/*\n          if ( strpos($tab['fields'][$id_field]['type'], 'char') !== false ){\n            $id = substr(md5('bbn'.$id), 0, random_int(1, 10 ** $maxlength));\n          }\n          *\/\n          $i++;\n        }\n        while (($i < 100) && $this->select($table, [$id_field], [$id_field => $id]));\n        return $id;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1010,
            "endLine": 1044,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "newId",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name."
                },
                {
                    "name": "min",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Generate a new casual id based on the max number of characters of id's column structure in the given table\n\n```php\nX::dump($db->newId('table_users', 18));\n\/\/ (int) 69991701\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$table",
                        "description": "The table's name."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$min"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Either get rid of th efunction or include the UID types\nTODO-testing is this needed?"
                }
            },
            "comments": "  \/**\n   * Generate a new casual id based on the max number of characters of id's column structure in the given table\n   *\n   * ```php\n   * X::dump($db->newId('table_users', 18));\n   * \/\/ (int) 69991701\n   * ```\n   *\n   * @todo Either get rid of th efunction or include the UID types\n   * TODO-testing is this needed?\n   * @param null|string $table The table's name.\n   * @param int         $min\n   * @return mixed\n   *\/"
        },
        "randomValue": {
            "name": "randomValue",
            "summary": "Returns a random value fitting the requested column's type",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function randomValue($col, $table)\n  {\n    $val = null;\n    if (($tab = $this->modelize($table)) && isset($tab['fields'][$col])) {\n      foreach ($tab['keys'] as $key => $cfg){\n        if ($cfg['unique']\n            && !empty($cfg['ref_column'])\n            && (\\count($cfg['columns']) === 1)\n            && ($col === $cfg['columns'][0])\n        ) {\n          return ($num = $this->count($cfg['ref_column'])) ? $this->selectOne(\n            [\n            'tables' [$cfg['ref_table']],\n            'fields' => [$cfg['ref_column']],\n            'start' => random_int(0, $num - 1)\n            ]\n          ) : null;\n        }\n      }\n\n      switch ($tab['fields'][$col]['type']){\n        case 'int':\n          if (($tab['fields'][$col]['maxlength'] === 1) && !$tab['fields'][$col]['signed']) {\n            $val = microtime(true) % 2 === 0 ? 1 : 0;\n          }\n          else {\n            $max = 10 ** $tab['fields'][$col]['maxlength'] - 1;\n            if ($max > mt_getrandmax()) {\n              $max = mt_getrandmax();\n            }\n\n            if ($tab['fields'][$col]['signed']) {\n              $max \/= 2;\n            }\n\n            $min = $tab['fields'][$col]['signed'] ? -$max : 0;\n            $val = random_int($min, $max);\n          }\n          break;\n        case 'float':\n        case 'double':\n        case 'decimal':\n          break;\n        case 'varchar':\n          break;\n        case 'text':\n          break;\n        case 'date':\n          break;\n        case 'datetime':\n          break;\n        case 'timestamp':\n          break;\n        case 'time':\n          break;\n        case 'year':\n          break;\n        case 'blob':\n          break;\n        case 'binary':\n          break;\n        case 'varbinary':\n          break;\n        case 'enum':\n          break;\n      }\n    }\n\n    return $val;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1055,
            "endLine": 1124,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "randomValue",
            "returns": [],
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a random value fitting the requested column's type\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$col"
                    },
                    {
                        "tag": "param",
                        "type": "$table"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "This great function has to be done properly\nTODO is this used?"
                }
            },
            "comments": "  \/**\n   * Returns a random value fitting the requested column's type\n   *\n   * @todo This great function has to be done properly\n   * TODO is this used?\n   * @param $col\n   * @param $table\n   * @return mixed\n   *\/"
        },
        "countQueries": {
            "name": "countQueries",
            "summary": "Returns the number of queries",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump($ctrl->db->countQueries()); \/\/ 10"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function countQueries(): int\n  {\n    return $this->language->countQueries();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1135,
            "endLine": 1138,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "countQueries",
            "returns": [
                "int"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the number of queries\n\n```php\nX::hdump($ctrl->db->countQueries()); \/\/ 10\n```\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/** Returns the number of queries \n   * \n   * ```php\n   * X::hdump($ctrl->db->countQueries()); \/\/ 10\n   * ```\n   * \n   * @return int\n   *\/"
        },
        "getOne": {
            "name": "getOne",
            "summary": "Executes the given query with given vars, and extracts the first cell's result.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getOne(\"SELECT name FROM table_users WHERE id>?\", 138));\n\/\/ (string) John"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getOne()\n  {\n   return $this->language->getOne(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1162,
            "endLine": 1165,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOne",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Executes the given query with given vars, and extracts the first cell's result.\n\n```php\nX::dump($db->getOne(\"SELECT name FROM table_users WHERE id>?\", 138));\n\/\/ (string) John\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query"
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "description": "values"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * ```php\n   * X::dump($db->getOne(\"SELECT name FROM table_users WHERE id>?\", 138));\n   * \/\/ (string) John\n   * ```\n   *\n   * @param string query\n   * @param mixed values\n   * @return mixed\n   *\/"
        },
        "getVar": {
            "name": "getVar",
            "summary": "Execute the given query with given vars, and extract the first cell's result.",
            "description": "(similar to {@link get_one()})",
            "description_parts": [
                {
                    "type": "text",
                    "content": "(similar to {@link get_one()})"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->getVar(\"SELECT telephone FROM table_users WHERE id>?\", 1));\n\/\/ (int) 123554154"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getVar()\n  {\n    return $this->getOne(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1181,
            "endLine": 1184,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getVar",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Execute the given query with given vars, and extract the first cell's result.\n(similar to {@link get_one()})\n\n```php\nX::dump($db->getVar(\"SELECT telephone FROM table_users WHERE id>?\", 1));\n\/\/ (int) 123554154\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query"
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "description": "values"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Execute the given query with given vars, and extract the first cell's result.\n   * (similar to {@link get_one()})\n   *\n   * ```php\n   * X::dump($db->getVar(\"SELECT telephone FROM table_users WHERE id>?\", 1));\n   * \/\/ (int) 123554154\n   * ```\n   *\n   * @param string query\n   * @param mixed values\n   * @return mixed\n   *\/"
        },
        "getKeyVal": {
            "name": "getKeyVal",
            "summary": "Return an array indexed on the first field of the request.",
            "description": "The value will be an array if the request has more than two fields.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "The value will be an array if the request has more than two fields."
                },
                {
                    "type": "code",
                    "content": "X::dump($db->getKeyVal(\"SELECT name,id_group FROM table_users\"));\n\/*\n(array)[\n     \"John\" => 1,\n     \"Michael\" => 1,\n     \"Barbara\" => 1\n       ]\n\nX::dump($db->getKeyVal(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n\/*\n(array)[\n        \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n        ],\n        \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n        ]\n       ]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getKeyVal(): ?array\n  {\n    return $this->language->getKeyVal(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1218,
            "endLine": 1221,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getKeyVal",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return an array indexed on the first field of the request.\nThe value will be an array if the request has more than two fields.\n\n```php\nX::dump($db->getKeyVal(\"SELECT name,id_group FROM table_users\"));\n\/*\n(array)[\n     \"John\" => 1,\n     \"Michael\" => 1,\n     \"Barbara\" => 1\n       ]\n\nX::dump($db->getKeyVal(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n\/*\n(array)[\n        \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n        ],\n        \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n        ]\n       ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query"
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "description": "values"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * ```php\n   * X::dump($db->getKeyVal(\"SELECT name,id_group FROM table_users\"));\n   * \/*\n   * (array)[\n   *      \"John\" => 1,\n   *      \"Michael\" => 1,\n   *      \"Barbara\" => 1\n   *        ]\n   *\n   * X::dump($db->getKeyVal(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n   * \/*\n   * (array)[\n   *         \"John\" => [\n   *          \"surname\" => \"Brown\",\n   *          \"id\" => 3\n   *         ],\n   *         \"Michael\" => [\n   *          \"surname\" => \"Smith\",\n   *          \"id\" => 4\n   *         ]\n   *        ]\n   * ```\n   *\n   * @param string query\n   * @param mixed values\n   * @return null|array\n   *\/"
        },
        "getColArray": {
            "name": "getColArray",
            "summary": "Return an array with the values of single field resulting from the query.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getColArray(\"SELECT id FROM table_users\"));\n\/*\n(array)[1, 2, 3, 4]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getColArray(): array\n  {\n    return $this->language->getColArray(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1237,
            "endLine": 1240,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getColArray",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return an array with the values of single field resulting from the query.\n\n```php\nX::dump($db->getColArray(\"SELECT id FROM table_users\"));\n\/*\n(array)[1, 2, 3, 4]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query"
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "description": "values"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * ```php\n   * X::dump($db->getColArray(\"SELECT id FROM table_users\"));\n   * \/*\n   * (array)[1, 2, 3, 4]\n   * ```\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/"
        },
        "select": {
            "name": "select",
            "summary": "Returns the first row resulting from the query as an object.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n\/*\n(object){\n  \"name\": \"John\",\n  \"surname\": \"Smith\",\n}"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function select($table, $fields = [], array $where = [], array $order = [], int $start = 0): ?\\stdClass\n  {\n    return $this->language->select($table, $fields, $where, $order, $start);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1271,
            "endLine": 1274,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "select",
            "returns": [
                null,
                "stdClass"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ],
            "doc": {
                "description": "Returns the first row resulting from the query as an object.\n\n```php\nX::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n\/*\n(object){\n  \"name\": \"John\",\n  \"surname\": \"Smith\",\n}\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$fields",
                        "description": "The fields' name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the first row resulting from the query as an object.\n   *\n   * ```php\n   * X::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n   * \/*\n   * (object){\n   *   \"name\": \"John\",\n   *   \"surname\": \"Smith\",\n   * }\n   * ```\n   *\n   * @param string|array    $table  The table's name or a configuration array\n   * @param string|array    $fields The fields' name\n   * @param array           $where  The \"where\" condition\n   * @param array | boolean $order  The \"order\" condition, default: false\n   * @param int             $start  The \"start\" condition, default: 0\n   * @return null|\\stdClass\n   *\/"
        },
        "selectAll": {
            "name": "selectAll",
            "summary": "Return table's rows resulting from the query as an array of objects.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->selectAll(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n       Object stdClass: df {\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         },\n       Object stdClass: df {\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n        }\n       ]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function selectAll($table, $fields = [], array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array\n  {\n    return $this->language->selectAll($table, $fields, $where, $order, $limit, $start);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1305,
            "endLine": 1308,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "selectAll",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ],
            "doc": {
                "description": "Return table's rows resulting from the query as an array of objects.\n\n```php\nX::dump($db->selectAll(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n       Object stdClass: df {\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         },\n       Object stdClass: df {\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n        }\n       ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$fields",
                        "description": "The fields' name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "The \"limit\" condition, default: 0"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return table's rows resulting from the query as an array of objects.\n   *\n   * ```php\n   * X::dump($db->selectAll(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n   * \/*\n   * (array)[\n   *        Object stdClass: df {\n   *          \"id\" => 2,\n   *          \"name\" => \"John\",\n   *          \"surname\" => \"Smith\",\n   *          },\n   *        Object stdClass: df {\n   *          \"id\" => 3,\n   *          \"name\" => \"Thomas\",\n   *          \"surname\" => \"Jones\",\n   *         }\n   *        ]\n   * ```\n   *\n   * @param string|array    $table  The table's name or a configuration array\n   * @param string|array    $fields The fields' name\n   * @param array           $where  The \"where\" condition\n   * @param array | boolean $order  The \"order\" condition, default: false\n   * @param int             $limit  The \"limit\" condition, default: 0\n   * @param int             $start  The \"start\" condition, default: 0\n   * @return null|array\n   *\/"
        },
        "iselect": {
            "name": "iselect",
            "summary": "Return the first row resulting from the query as a numeric array.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n         4,\n        \"Jack\",\n         \"Stewart\"\n       ]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function iselect($table, $fields = [], array $where = [], array $order = [], int $start = 0): ?array\n  {\n    return $this->language->iselect($table, $fields, $where, $order, $start);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1331,
            "endLine": 1334,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "iselect",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ],
            "doc": {
                "description": "Return the first row resulting from the query as a numeric array.\n\n```php\nX::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n         4,\n        \"Jack\",\n         \"Stewart\"\n       ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$fields",
                        "description": "The fields' name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return the first row resulting from the query as a numeric array.\n   *\n   * ```php\n   * X::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n   * \/*\n   * (array)[\n   *          4,\n   *         \"Jack\",\n   *          \"Stewart\"\n   *        ]\n   * ```\n   *\n   * @param string|array    $table  The table's name or a configuration array\n   * @param string|array    $fields The fields' name\n   * @param array           $where  The \"where\" condition\n   * @param array | boolean $order  The \"order\" condition, default: false\n   * @param int             $start  The \"start\" condition, default: 0\n   * @return array\n   *\/"
        },
        "iselectAll": {
            "name": "iselectAll",
            "summary": "Return the searched rows as an array of numeric arrays.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->iselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n\/*\n(array)[\n         [\n           2,\n           \"John\",\n           \"Smith\",\n         ],\n         [\n           3,\n           \"Thomas\",\n           \"Jones\",\n         ]\n       ]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function iselectAll($table, $fields = [], array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array\n  {\n    return $this->language->iselectAll($table, $fields, $where, $order, $limit, $start);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1365,
            "endLine": 1368,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "iselectAll",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ],
            "doc": {
                "description": "Return the searched rows as an array of numeric arrays.\n\n```php\nX::dump($db->iselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n\/*\n(array)[\n         [\n           2,\n           \"John\",\n           \"Smith\",\n         ],\n         [\n           3,\n           \"Thomas\",\n           \"Jones\",\n         ]\n       ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$fields",
                        "description": "The fields's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array|boolean",
                        "name": "$order",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "The \"limit\" condition, default: 0"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return the searched rows as an array of numeric arrays.\n   *\n   * ```php\n   * X::dump($db->iselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n   * \/*\n   * (array)[\n   *          [\n   *            2,\n   *            \"John\",\n   *            \"Smith\",\n   *          ],\n   *          [\n   *            3,\n   *            \"Thomas\",\n   *            \"Jones\",\n   *          ]\n   *        ]\n   * ```\n   *\n   * @param string|array  $table  The table's name or a configuration array\n   * @param string|array  $fields The fields's name\n   * @param array         $where  The \"where\" condition\n   * @param array|boolean $order The \"order\" condition, default: false\n   * @param int           $limit  The \"limit\" condition, default: 0\n   * @param int           $start  The \"start\" condition, default: 0\n   * @return array\n   *\/"
        },
        "rselect": {
            "name": "rselect",
            "summary": "Return the first row resulting from the query as an indexed array.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         \"id\" => 4,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\"\n        ]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function rselect($table, $fields = [], array $where = [], array $order = [], int $start = 0): ?array\n  {\n    return $this->language->rselect($table, $fields, $where, $order, $start);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1391,
            "endLine": 1394,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "rselect",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ],
            "doc": {
                "description": "Return the first row resulting from the query as an indexed array.\n\n```php\nX::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         \"id\" => 4,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\"\n        ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$fields",
                        "description": "The fields' name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array|boolean",
                        "name": "$order",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return the first row resulting from the query as an indexed array.\n   *\n   * ```php\n   * X::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n   * \/*\n   * (array) [\n   *          \"id\" => 4,\n   *          \"name\" => \"John\",\n   *          \"surname\" => \"Smith\"\n   *         ]\n   * ```\n   *\n   * @param string|array  $table  The table's name or a configuration array\n   * @param string|array  $fields The fields' name\n   * @param array         $where  The \"where\" condition\n   * @param array|boolean $order  The \"order\" condition, default: false\n   * @param int           $start  The \"start\" condition, default: 0\n   * @return null|array\n   *\/"
        },
        "rselectAll": {
            "name": "rselectAll",
            "summary": "Return table's rows as an array of indexed arrays.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->rselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         [\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         ],\n         [\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n         ]\n       ]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function rselectAll($table, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0): ?array\n  {\n    return $this->language->rselectAll($table, $fields, $where, $order, $limit, $start);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1425,
            "endLine": 1428,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "rselectAll",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "condition, default: false"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ],
            "doc": {
                "description": "Return table's rows as an array of indexed arrays.\n\n```php\nX::dump($db->rselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         [\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         ],\n         [\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n         ]\n       ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$fields",
                        "description": "The fields' name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "The \"limit\" condition, default: 0"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return table's rows as an array of indexed arrays.\n   *\n   * ```php\n   * X::dump($db->rselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n   * \/*\n   * (array) [\n   *          [\n   *          \"id\" => 2,\n   *          \"name\" => \"John\",\n   *          \"surname\" => \"Smith\",\n   *          ],\n   *          [\n   *          \"id\" => 3,\n   *          \"name\" => \"Thomas\",\n   *          \"surname\" => \"Jones\",\n   *          ]\n   *        ]\n   * ```\n   *\n   * @param string|array    $table  The table's name or a configuration array\n   * @param string|array    $fields The fields' name\n   * @param array           $where  The \"where\" condition\n   * @param array | boolean $order  condition, default: false\n   * @param int             $limit  The \"limit\" condition, default: 0\n   * @param int             $start  The \"start\" condition, default: 0\n   * @return null|array\n   *\/"
        },
        "countUnion": {
            "name": "countUnion",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function countUnion(array $union, array $where = []): ?int\n  {\n    return $this->language->countUnion($union, $where);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1430,
            "endLine": 1433,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "countUnion",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "union",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "selectUnion": {
            "name": "selectUnion",
            "summary": "Fetches a given array of tables and returns an array of text-indexed rows as objects",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function selectUnion(array $union, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0): ?array\n  {\n    return $this->language->selectUnion($union, $fields, $where, $order, $limit, $start);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1445,
            "endLine": 1448,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "selectUnion",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "union",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "An array of select configurations"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' names"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "condition, default: false"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ],
            "doc": {
                "description": "Fetches a given array of tables and returns an array of text-indexed rows as objects\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$union",
                        "description": "An array of select configurations"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$fields",
                        "description": "The fields' names"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "The \"limit\" condition, default: 0"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n\t * Fetches a given array of tables and returns an array of text-indexed rows as objects\n\t *\n   * @param array $union An array of select configurations\n   * @param string|array $fields The fields' names\n   * @param array $where  The \"where\" condition\n   * @param array | boolean $order condition, default: false\n   * @param int $limit The \"limit\" condition, default: 0\n   * @param int $start The \"start\" condition, default: 0\n\t * @return null|array\n\t *\/"
        },
        "rselectUnion": {
            "name": "rselectUnion",
            "summary": "Fetches a given array of tables and returns an array of text-indexed rows as arrays",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function rselectUnion(array $union, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0): ?array\n  {\n    return $this->language->rselectUnion($union, $fields, $where, $order, $limit, $start);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1461,
            "endLine": 1464,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "rselectUnion",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "union",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "An array of select configurations"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' names"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "condition, default: false"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ],
            "doc": {
                "description": "Fetches a given array of tables and returns an array of text-indexed rows as arrays\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$union",
                        "description": "An array of select configurations"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$fields",
                        "description": "The fields' names"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "The \"limit\" condition, default: 0"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n\t * Fetches a given array of tables and returns an array of text-indexed rows as arrays\n\t *\n   * @param array $union An array of select configurations\n   * @param string|array $fields The fields' names\n   * @param array $where  The \"where\" condition\n   * @param array | boolean $order condition, default: false\n   * @param int $limit The \"limit\" condition, default: 0\n   * @param int $start The \"start\" condition, default: 0\n\t * @return null|array\n\t *\/"
        },
        "iselectUnion": {
            "name": "iselectUnion",
            "summary": "Fetches a given array of tables and returns an array of text-indexed rows as arrays",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function iselectUnion(array $union, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0): ?array\n  {\n    return $this->language->iselectUnion($union, $fields, $where, $order, $limit, $start);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1477,
            "endLine": 1480,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "iselectUnion",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "union",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "An array of select configurations"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' names"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "condition, default: false"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ],
            "doc": {
                "description": "Fetches a given array of tables and returns an array of text-indexed rows as arrays\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$union",
                        "description": "An array of select configurations"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$fields",
                        "description": "The fields' names"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "The \"limit\" condition, default: 0"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n\t * Fetches a given array of tables and returns an array of text-indexed rows as arrays\n\t *\n   * @param array $union An array of select configurations\n   * @param string|array $fields The fields' names\n   * @param array $where  The \"where\" condition\n   * @param array | boolean $order condition, default: false\n   * @param int $limit The \"limit\" condition, default: 0\n   * @param int $start The \"start\" condition, default: 0\n\t * @return null|array\n\t *\/"
        },
        "selectOne": {
            "name": "selectOne",
            "summary": "Return a single value",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->selectOne(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n (string) 'Michael'"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function selectOne($table, $field = null, array $where = [], array $order = [], int $start = 0)\n  {\n    return $this->language->selectOne($table, $field, $where, $order, $start);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1498,
            "endLine": 1501,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "selectOne",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ],
            "doc": {
                "description": "Return a single value\n\n```php\nX::dump($db->selectOne(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n (string) 'Michael'\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$field",
                        "description": "The field's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return a single value\n   *\n   * ```php\n   * X::dump($db->selectOne(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n   *  (string) 'Michael'\n   * ```\n   *\n   * @param string|array    $table The table's name or a configuration array\n   * @param string          $field The field's name\n   * @param array           $where The \"where\" condition\n   * @param array | boolean $order The \"order\" condition, default: false\n   * @param int             $start The \"start\" condition, default: 0\n   * @return mixed\n   *\/"
        },
        "count": {
            "name": "count",
            "summary": "Return the number of records in the table corresponding to the $where condition (non mandatory).",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->count('table_users', ['name' => 'John']));\n\/\/ (int) 2"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function count($table, array $where = []): ?int\n  {\n    return $this->language->count($table, $where);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1516,
            "endLine": 1519,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "count",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                }
            ],
            "doc": {
                "description": "Return the number of records in the table corresponding to the $where condition (non mandatory).\n\n```php\nX::dump($db->count('table_users', ['name' => 'John']));\n\/\/ (int) 2\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return the number of records in the table corresponding to the $where condition (non mandatory).\n   *\n   * ```php\n   * X::dump($db->count('table_users', ['name' => 'John']));\n   * \/\/ (int) 2\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param array        $where The \"where\" condition\n   * @return int\n   *\/"
        },
        "selectAllByKeys": {
            "name": "selectAllByKeys",
            "summary": "Return an array indexed on the first field of the request.",
            "description": "The value will be an array if the request has more than two fields.\nReturn the same value as \"get_key_val\".",
            "description_parts": [
                {
                    "type": "text",
                    "content": "The value will be an array if the request has more than two fields.\nReturn the same value as \"get_key_val\"."
                },
                {
                    "type": "code",
                    "content": "X::dump($db->selectAllByKeys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n\/*\n(array)[\n       \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n         ],\n       \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n       ]\n     ]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function selectAllByKeys($table, array $fields = [], array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array\n  {\n    return $this->language->selectAllByKeys($table, $fields, $where, $order, $limit, $start);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1550,
            "endLine": 1553,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "selectAllByKeys",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The $limit condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The $limit condition, default: 0"
                }
            ],
            "doc": {
                "description": "Return an array indexed on the first field of the request.\nThe value will be an array if the request has more than two fields.\nReturn the same value as \"get_key_val\".\n\n```php\nX::dump($db->selectAllByKeys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n\/*\n(array)[\n       \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n         ],\n       \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n       ]\n     ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "The fields's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array|boolean",
                        "name": "$order",
                        "description": "The \"order\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "The $limit condition, default: 0"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The $limit condition, default: 0"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   * Return the same value as \"get_key_val\".\n   *\n   * ```php\n   * X::dump($db->selectAllByKeys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n   * \/*\n   * (array)[\n   *        \"John\" => [\n   *          \"surname\" => \"Brown\",\n   *          \"id\" => 3\n   *          ],\n   *        \"Michael\" => [\n   *          \"surname\" => \"Smith\",\n   *          \"id\" => 4\n   *        ]\n   *      ]\n   * ```\n   *\n   * @param string|array  $table  The table's name or a configuration array\n   * @param array         $fields The fields's name\n   * @param array         $where  The \"where\" condition\n   * @param array|boolean $order  The \"order\" condition\n   * @param int           $limit  The $limit condition, default: 0\n   * @param int           $start  The $limit condition, default: 0\n   * @return array|false\n   *\/"
        },
        "stat": {
            "name": "stat",
            "summary": "Return an array with the count of values corresponding to the where conditions.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->stat('table_user', 'name', ['name' => '%n']));\n\/* (array)\n[\n [\n     \"num\" => 1,\n     \"name\" => \"alan\",\n ], [\n     \"num\" => 1,\n     \"name\" => \"karen\",\n ],\n]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function stat(string $table, string $column, array $where = [], array $order = []): ?array\n  {\n    return $this->language->stat($table, $column, $where, $order);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1579,
            "endLine": 1582,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "stat",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array."
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The field's name."
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition."
                }
            ],
            "doc": {
                "description": "Return an array with the count of values corresponding to the where conditions.\n\n```php\nX::dump($db->stat('table_user', 'name', ['name' => '%n']));\n\/* (array)\n[\n [\n     \"num\" => 1,\n     \"name\" => \"alan\",\n ], [\n     \"num\" => 1,\n     \"name\" => \"karen\",\n ],\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$column",
                        "description": "The field's name."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return an array with the count of values corresponding to the where conditions.\n   *\n   * ```php\n   * X::dump($db->stat('table_user', 'name', ['name' => '%n']));\n   * \/* (array)\n   * [\n   *  [\n   *      \"num\" => 1,\n   *      \"name\" => \"alan\",\n   *  ], [\n   *      \"num\" => 1,\n   *      \"name\" => \"karen\",\n   *  ],\n   * ]\n   * ```\n   *\n   * @param string|array $table  The table's name or a configuration array.\n   * @param string       $column The field's name.\n   * @param array        $where  The \"where\" condition.\n   * @param array        $order  The \"order\" condition.\n   * @return array\n   *\/"
        },
        "getFieldValues": {
            "name": "getFieldValues",
            "summary": "Return the unique values of a column of a table as a numeric indexed array.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getFieldValues(\"table_users\", \"surname\", [['id', '>', '2']]));\n\/\/ (array) [\"Smiths\", \"White\"]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFieldValues($table, string|null $field = null, array $where = [], array $order = []): ?array\n  {\n    return $this->getColumnValues($table, $field, $where, $order);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1599,
            "endLine": 1602,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getFieldValues",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                }
            ],
            "doc": {
                "description": "Return the unique values of a column of a table as a numeric indexed array.\n\n```php\nX::dump($db->getFieldValues(\"table_users\", \"surname\", [['id', '>', '2']]));\n\/\/ (array) [\"Smiths\", \"White\"]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$field",
                        "description": "The field's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition"
                    }
                ],
                "return": "| false"
            },
            "comments": "  \/**\n   * Return the unique values of a column of a table as a numeric indexed array.\n   *\n   * ```php\n   * X::dump($db->getFieldValues(\"table_users\", \"surname\", [['id', '>', '2']]));\n   * \/\/ (array) [\"Smiths\", \"White\"]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null  $field The field's name\n   * @param array        $where The \"where\" condition\n   * @param array        $order The \"order\" condition\n   * @return array | false\n   *\/"
        },
        "countFieldValues": {
            "name": "countFieldValues",
            "summary": "Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->countFieldValues('table_users','surname',[['name','=','John']]));\n\/\/ (array) [\"num\" => 2, \"val\" => \"John\"]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function countFieldValues($table, string|null $field = null,  array $where = [], array $order = []): ?array\n  {\n    return $this->language->countFieldValues($table, $field, $where, $order);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1619,
            "endLine": 1622,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "countFieldValues",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                }
            ],
            "doc": {
                "description": "Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n\n```php\nX::dump($db->countFieldValues('table_users','surname',[['name','=','John']]));\n\/\/ (array) [\"num\" => 2, \"val\" => \"John\"]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$field",
                        "description": "The field's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * ```php\n   * X::dump($db->countFieldValues('table_users','surname',[['name','=','John']]));\n   * \/\/ (array) [\"num\" => 2, \"val\" => \"John\"]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param null|string  $field The field's name\n   * @param array        $where The \"where\" condition\n   * @param array        $order The \"order\" condition\n   * @return array|null\n   *\/"
        },
        "getColumnValues": {
            "name": "getColumnValues",
            "summary": "Return a numeric indexed array with the values of the unique column ($field) from the selected $table",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n\/*\narray [\n   \"Smith\",\n   \"Jones\",\n   \"Williams\",\n   \"Taylor\"\n]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getColumnValues($table, string|null $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array\n  {\n    return $this->language->getColumnValues($table, $field, $where, $order, $limit, $start);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1647,
            "endLine": 1650,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "getColumnValues",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n\n```php\nX::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n\/*\narray [\n   \"Smith\",\n   \"Jones\",\n   \"Williams\",\n   \"Taylor\"\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$field",
                        "description": "The field's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/"
        },
        "getValuesCount": {
            "name": "getValuesCount",
            "summary": "Return a string with the sql query to count equal values in a field of the table.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getValuesCount('table_users','name',['surname','=','smith']));\n\/*\n(string)\n  SELECT COUNT(*) AS num, `name` AS val FROM `db_example`.`table_users`\n    GROUP BY `name`\n    ORDER BY `name`"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getValuesCount($table, string|null $field = null, array $where = [], array $order = []): array\n  {\n    return $this->countFieldValues($table, $field, $where, $order);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1672,
            "endLine": 1675,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getValuesCount",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                }
            ],
            "doc": {
                "description": "Return a string with the sql query to count equal values in a field of the table.\n\n```php\nX::dump($db->getValuesCount('table_users','name',['surname','=','smith']));\n\/*\n(string)\n  SELECT COUNT(*) AS num, `name` AS val FROM `db_example`.`table_users`\n    GROUP BY `name`\n    ORDER BY `name`\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$field",
                        "description": "The field's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition"
                    }
                ],
                "return": "\/\/ TODO-testing: this method stated that it will return string but actually it returns an array!"
            },
            "comments": "  \/**\n   * Return a string with the sql query to count equal values in a field of the table.\n   *\n   * ```php\n   * X::dump($db->getValuesCount('table_users','name',['surname','=','smith']));\n   * \/*\n   * (string)\n   *   SELECT COUNT(*) AS num, `name` AS val FROM `db_example`.`table_users`\n   *     GROUP BY `name`\n   *     ORDER BY `name`\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @return array\n   * \/\/ TODO-testing: this method stated that it will return string but actually it returns an array!\n   *\/"
        },
        "insert": {
            "name": "insert",
            "summary": "Inserts row(s) in a table.",
            "description": "<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"Ted\"],\n   [\"surname\" => \"McLow\"]\n ]);\n<\/code>\n\n<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"July\"],\n   [\"surname\" => \"O'neill\"]\n ], [\n   [\"name\" => \"Peter\"],\n   [\"surname\" => \"Griffin\"]\n ], [\n   [\"name\" => \"Marge\"],\n   [\"surname\" => \"Simpson\"]\n ]);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"Ted\"],\n   [\"surname\" => \"McLow\"]\n ]);\n<\/code>\n\n<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"July\"],\n   [\"surname\" => \"O'neill\"]\n ], [\n   [\"name\" => \"Peter\"],\n   [\"surname\" => \"Griffin\"]\n ], [\n   [\"name\" => \"Marge\"],\n   [\"surname\" => \"Simpson\"]\n ]);\n<\/code>"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insert($table, array|null $values = null, bool $ignore = false): ?int\n  {\n    return $this->language->insert($table, $values, $ignore);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1716,
            "endLine": 1719,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "insert",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The values to insert."
                },
                {
                    "name": "ignore",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If true, controls if the row is already existing and ignores it."
                }
            ],
            "doc": {
                "description": "Inserts row(s) in a table.\n\n<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"Ted\"],\n   [\"surname\" => \"McLow\"]\n ]);\n<\/code>\n\n<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"July\"],\n   [\"surname\" => \"O'neill\"]\n ], [\n   [\"name\" => \"Peter\"],\n   [\"surname\" => \"Griffin\"]\n ], [\n   [\"name\" => \"Marge\"],\n   [\"surname\" => \"Simpson\"]\n ]);\n<\/code>\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$values",
                        "description": "The values to insert."
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$ignore",
                        "description": "If true, controls if the row is already existing and ignores it."
                    }
                ],
                "return": "Number affected rows."
            },
            "comments": "  \/**\n   * Inserts row(s) in a table.\n   *\n   * <code>\n   * $db->insert(\"table_users\", [\n   *    [\"name\" => \"Ted\"],\n   *    [\"surname\" => \"McLow\"]\n   *  ]);\n   * <\/code>\n   *\n   * <code>\n   * $db->insert(\"table_users\", [\n   *    [\"name\" => \"July\"],\n   *    [\"surname\" => \"O'neill\"]\n   *  ], [\n   *    [\"name\" => \"Peter\"],\n   *    [\"surname\" => \"Griffin\"]\n   *  ], [\n   *    [\"name\" => \"Marge\"],\n   *    [\"surname\" => \"Simpson\"]\n   *  ]);\n   * <\/code>\n   *\n   * @param string|array $table The table name or the configuration array.\n   * @param array|null $values The values to insert.\n   * @param bool $ignore If true, controls if the row is already existing and ignores it.\n   *\n   * @return int Number affected rows.\n   *\/"
        },
        "insertUpdate": {
            "name": "insertUpdate",
            "summary": "If not exist inserts row(s) in a table, else update.",
            "description": "<code>\n$db->insertUpdate(\n \"table_users\",\n [\n   'id' => '12',\n   'name' => 'Frank'\n ]\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<code>\n$db->insertUpdate(\n \"table_users\",\n [\n   'id' => '12',\n   'name' => 'Frank'\n ]\n);\n<\/code>"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insertUpdate($table, array|null $values = null): ?int\n  {\n    return $this->language->insertUpdate($table, $values);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1740,
            "endLine": 1743,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "insertUpdate",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The values to insert."
                }
            ],
            "doc": {
                "description": "If not exist inserts row(s) in a table, else update.\n\n<code>\n$db->insertUpdate(\n \"table_users\",\n [\n   'id' => '12',\n   'name' => 'Frank'\n ]\n);\n<\/code>\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$values",
                        "description": "The values to insert."
                    }
                ],
                "return": "The number of rows inserted or updated."
            },
            "comments": "  \/**\n   * If not exist inserts row(s) in a table, else update.\n   *\n   * <code>\n   * $db->insertUpdate(\n   *  \"table_users\",\n   *  [\n   *    'id' => '12',\n   *    'name' => 'Frank'\n   *  ]\n   * );\n   * <\/code>\n   *\n   * @param string|array $table The table name or the configuration array.\n   * @param array|null $values The values to insert.\n   *\n   * @return int The number of rows inserted or updated.\n   *\/"
        },
        "update": {
            "name": "update",
            "summary": "Updates row(s) in a table.",
            "description": "<code>\n$db->update(\n \"table_users\",\n [\n   ['name' => 'Frank'],\n   ['surname' => 'Red']\n ],\n ['id' => '127']\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<code>\n$db->update(\n \"table_users\",\n [\n   ['name' => 'Frank'],\n   ['surname' => 'Red']\n ],\n ['id' => '127']\n);\n<\/code>"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function update($table, array|null $values = null, array|null $where = null, bool $ignore = false): ?int\n  {\n    return $this->language->update($table, $values, $where, $ignore);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1767,
            "endLine": 1770,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "update",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The new value(s)."
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "ignore",
                    "position": 3,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If IGNORE should be added to the statement"
                }
            ],
            "doc": {
                "description": "Updates row(s) in a table.\n\n<code>\n$db->update(\n \"table_users\",\n [\n   ['name' => 'Frank'],\n   ['surname' => 'Red']\n ],\n ['id' => '127']\n);\n<\/code>\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$values",
                        "description": "The new value(s)."
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$where",
                        "description": "The \"where\" condition."
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$ignore",
                        "description": "If IGNORE should be added to the statement"
                    }
                ],
                "return": "The number of rows updated."
            },
            "comments": "  \/**\n   * Updates row(s) in a table.\n   *\n   * <code>\n   * $db->update(\n   *  \"table_users\",\n   *  [\n   *    ['name' => 'Frank'],\n   *    ['surname' => 'Red']\n   *  ],\n   *  ['id' => '127']\n   * );\n   * <\/code>\n   *\n   * @param string|array $table The table name or the configuration array.\n   * @param array|null $values The new value(s).\n   * @param array|null $where The \"where\" condition.\n   * @param boolean $ignore If IGNORE should be added to the statement\n   *\n   * @return int The number of rows updated.\n   *\/"
        },
        "updateIgnore": {
            "name": "updateIgnore",
            "summary": "If exist updates row(s) in a table, else ignore.",
            "description": "<code>\n$db->updateIgnore(\n  \"table_users\",\n  [\n    ['name' => 'Frank'],\n    ['surname' => 'Red']\n  ],\n  ['id' => '20']\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<code>\n$db->updateIgnore(\n  \"table_users\",\n  [\n    ['name' => 'Frank'],\n    ['surname' => 'Red']\n  ],\n  ['id' => '20']\n);\n<\/code>"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateIgnore($table, array|null $values = null, array|null $where = null): ?int\n  {\n    return $this->update($table, $values, $where, true);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1793,
            "endLine": 1796,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "updateIgnore",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition."
                }
            ],
            "doc": {
                "description": "If exist updates row(s) in a table, else ignore.\n\n<code>\n$db->updateIgnore(\n  \"table_users\",\n  [\n    ['name' => 'Frank'],\n    ['surname' => 'Red']\n  ],\n  ['id' => '20']\n);\n<\/code>\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$values"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$where",
                        "description": "The \"where\" condition."
                    }
                ],
                "return": "The number of rows deleted."
            },
            "comments": "  \/**\n   * If exist updates row(s) in a table, else ignore.\n   *\n   * <code>\n   * $db->updateIgnore(\n   *   \"table_users\",\n   *   [\n   *     ['name' => 'Frank'],\n   *     ['surname' => 'Red']\n   *   ],\n   *   ['id' => '20']\n   * );\n   * <\/code>\n   *\n   * @param string|array $table The table name or the configuration array.\n   * @param array|null $values\n   * @param array|null $where The \"where\" condition.\n   *\n   * @return int The number of rows deleted.\n   *\/"
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes row(s) in a table.",
            "description": "<code>\n$db->delete(\"table_users\", ['id' => '32']);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<code>\n$db->delete(\"table_users\", ['id' => '32']);\n<\/code>"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function delete($table, array|null $where = null, bool $ignore = false): ?int\n  {\n    return $this->language->delete($table, $where, $ignore);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1812,
            "endLine": 1815,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "delete",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "ignore",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "default: false."
                }
            ],
            "doc": {
                "description": "Deletes row(s) in a table.\n\n<code>\n$db->delete(\"table_users\", ['id' => '32']);\n<\/code>\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$where",
                        "description": "The \"where\" condition."
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$ignore",
                        "description": "default: false."
                    }
                ],
                "return": "The number of rows deleted."
            },
            "comments": "  \/**\n   * Deletes row(s) in a table.\n   *\n   * <code>\n   * $db->delete(\"table_users\", ['id' => '32']);\n   * <\/code>\n   *\n   * @param string|array $table The table name or the configuration array.\n   * @param array|null $where The \"where\" condition.\n   * @param bool $ignore default: false.\n   *\n   * @return int The number of rows deleted.\n   *\/"
        },
        "deleteIgnore": {
            "name": "deleteIgnore",
            "summary": "If exist deletes row(s) in a table, else ignore.",
            "description": "<code>\n$db->deleteIgnore(\n \"table_users\",\n ['id' => '20']\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<code>\n$db->deleteIgnore(\n \"table_users\",\n ['id' => '20']\n);\n<\/code>"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteIgnore($table, array|null $where = null): ?int\n  {\n    return $this->delete(\\is_array($table) ? array_merge($table, ['ignore' => true]) : $table, $where, true);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1833,
            "endLine": 1836,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteIgnore",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition."
                }
            ],
            "doc": {
                "description": "If exist deletes row(s) in a table, else ignore.\n\n<code>\n$db->deleteIgnore(\n \"table_users\",\n ['id' => '20']\n);\n<\/code>\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$where",
                        "description": "The \"where\" condition."
                    }
                ],
                "return": "The number of rows deleted."
            },
            "comments": "  \/**\n   * If exist deletes row(s) in a table, else ignore.\n   *\n   * <code>\n   * $db->deleteIgnore(\n   *  \"table_users\",\n   *  ['id' => '20']\n   * );\n   * <\/code>\n   *\n   * @param string|array $table The table name or the configuration array.\n   * @param array|null $where The \"where\" condition.\n   *\n   * @return int The number of rows deleted.\n   *\/"
        },
        "insertIgnore": {
            "name": "insertIgnore",
            "summary": "If not exist inserts row(s) in a table, else ignore.",
            "description": "<code>\n$db->insertIgnore(\n \"table_users\",\n [\n   ['id' => '19', 'name' => 'Frank'],\n   ['id' => '20', 'name' => 'Ted'],\n ]\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<code>\n$db->insertIgnore(\n \"table_users\",\n [\n   ['id' => '19', 'name' => 'Frank'],\n   ['id' => '20', 'name' => 'Ted'],\n ]\n);\n<\/code>"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insertIgnore($table, array|null $values = null): ?int\n  {\n    return $this->insert(\\is_array($table) ? array_merge($table, ['ignore' => true]) : $table, $values, true);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1857,
            "endLine": 1860,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "insertIgnore",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The row(s) values."
                }
            ],
            "doc": {
                "description": "If not exist inserts row(s) in a table, else ignore.\n\n<code>\n$db->insertIgnore(\n \"table_users\",\n [\n   ['id' => '19', 'name' => 'Frank'],\n   ['id' => '20', 'name' => 'Ted'],\n ]\n);\n<\/code>\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$values",
                        "description": "The row(s) values."
                    }
                ],
                "return": "The number of rows inserted."
            },
            "comments": "  \/**\n   * If not exist inserts row(s) in a table, else ignore.\n   *\n   * <code>\n   * $db->insertIgnore(\n   *  \"table_users\",\n   *  [\n   *    ['id' => '19', 'name' => 'Frank'],\n   *    ['id' => '20', 'name' => 'Ted'],\n   *  ]\n   * );\n   * <\/code>\n   *\n   * @param string|array $table The table name or the configuration array.\n   * @param array|null $values The row(s) values.\n   *\n   * @return int The number of rows inserted.\n   *\/"
        },
        "truncate": {
            "name": "truncate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function truncate($table): ?int\n  {\n    return $this->delete($table, []);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1867,
            "endLine": 1870,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "truncate",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$table"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $table\n   * @return int|null\n   *\/"
        },
        "fetch": {
            "name": "fetch",
            "summary": "Return an indexed array with the first result of the query or false if there are no results.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n\/* (array)\n[\n \"name\" => \"john\",\n 0 => \"john\",\n]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fetch(string $query)\n  {\n    return $this->language->fetch(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1897,
            "endLine": 1900,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "fetch",
            "returns": [],
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Return an indexed array with the first result of the query or false if there are no results.\n\n```php\nX::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n\/* (array)\n[\n \"name\" => \"john\",\n 0 => \"john\",\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$query"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * ```php\n   * X::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n   * \/* (array)\n   * [\n   *  \"name\" => \"john\",\n   *  0 => \"john\",\n   * ]\n   * ```\n   *\n   * @param string $query\n   * @return array|false\n   *\/"
        },
        "fetchAll": {
            "name": "fetchAll",
            "summary": "Return an array of indexed array with all results of the query or false if there are no results.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n\/* (array)\n [\n   [\n   \"surname\" => \"White\",\n   0 => \"White\",\n   \"name\" => \"Michael\",\n   1 => \"Michael\",\n   \"id\"  => 1,\n   2 => 1,\n   ],\n   [\n   \"surname\" => \"Smith\",\n   0 => \"Smith\",\n   \"name\" => \"John\",\n   1  =>  \"John\",\n   \"id\" => 2,\n   2 => 2,\n   ],\n ]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fetchAll(string $query)\n  {\n    return $this->language->fetchAll(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1932,
            "endLine": 1935,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "fetchAll",
            "returns": [],
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Return an array of indexed array with all results of the query or false if there are no results.\n\n```php\nX::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n\/* (array)\n [\n   [\n   \"surname\" => \"White\",\n   0 => \"White\",\n   \"name\" => \"Michael\",\n   1 => \"Michael\",\n   \"id\"  => 1,\n   2 => 1,\n   ],\n   [\n   \"surname\" => \"Smith\",\n   0 => \"Smith\",\n   \"name\" => \"John\",\n   1  =>  \"John\",\n   \"id\" => 2,\n   2 => 2,\n   ],\n ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$query"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * ```php\n   * X::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n   * \/* (array)\n   *  [\n   *    [\n   *    \"surname\" => \"White\",\n   *    0 => \"White\",\n   *    \"name\" => \"Michael\",\n   *    1 => \"Michael\",\n   *    \"id\"  => 1,\n   *    2 => 1,\n   *    ],\n   *    [\n   *    \"surname\" => \"Smith\",\n   *    0 => \"Smith\",\n   *    \"name\" => \"John\",\n   *    1  =>  \"John\",\n   *    \"id\" => 2,\n   *    2 => 2,\n   *    ],\n   *  ]\n   * ```\n   *\n   * @param string $query\n   * @return array|false\n   *\/"
        },
        "fetchColumn": {
            "name": "fetchColumn",
            "summary": "Transposition of the original fetchColumn method, but with the query included. Return an array or false if no result",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fetchColumn($query, int $num = 0)\n  {\n    return $this->language->fetchColumn(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1946,
            "endLine": 1949,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "fetchColumn",
            "returns": [],
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Transposition of the original fetchColumn method, but with the query included. Return an array or false if no result\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$query"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$num"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "confusion between result's index and this->query arguments(IMPORTANT). Missing the example because the function doesn't work"
                }
            },
            "comments": "  \/**\n   * Transposition of the original fetchColumn method, but with the query included. Return an array or false if no result\n   * @todo confusion between result's index and this->query arguments(IMPORTANT). Missing the example because the function doesn't work\n   *\n   * @param $query\n   * @param int   $num\n   * @return mixed\n   *\/"
        },
        "fetchObject": {
            "name": "fetchObject",
            "summary": "Return stdClass object or false if no result.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n\/\/ stdClass Object {\n                   \"id\"  =>  1,\n                   \"name\"  =>  \"John\",\n                   \"surname\"  =>  \"Smith\",\n                   }"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fetchObject($query)\n  {\n    return $this->language->fetchObject(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1967,
            "endLine": 1970,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "fetchObject",
            "returns": [],
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Return stdClass object or false if no result.\n\n```php\nX::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n\/\/ stdClass Object {\n                   \"id\"  =>  1,\n                   \"name\"  =>  \"John\",\n                   \"surname\"  =>  \"Smith\",\n                   }\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$query"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return stdClass object or false if no result.\n   *\n   * ```php\n   * X::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n   * \/\/ stdClass Object {\n   *                    \"id\"  =>  1,\n   *                    \"name\"  =>  \"John\",\n   *                    \"surname\"  =>  \"Smith\",\n   *                    }\n   * ```\n   *\n   * @param string $query\n   * @return bool|\\stdClass\n   *\/"
        },
        "query": {
            "name": "query",
            "summary": "Executes a writing statement and return the number of affected rows or return a query object for the reading * statement",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function query($statement)\n  {\n    if ($this->check()) {\n      return $this->language->query(...\\func_get_args());\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1987,
            "endLine": 1992,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "query",
            "returns": [],
            "arguments": [
                {
                    "name": "statement",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Executes a writing statement and return the number of affected rows or return a query object for the reading * statement\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$statement"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "far vedere a thomams perche non funziona in lettura\n\n```php\nX::dump($db->query(\"DELETE FROM table_users WHERE name LIKE '%lucy%'\"));\n\/\/ (int) 3\nX::dump($db->query(\"SELECT * FROM table_users WHERE name = 'John\"));\n\/\/ (bbn\\Db\\Query) Object\n```"
                }
            },
            "comments": "  \/**\n   * Executes a writing statement and return the number of affected rows or return a query object for the reading * statement\n   * @todo far vedere a thomams perche non funziona in lettura\n   *\n   * ```php\n   * X::dump($db->query(\"DELETE FROM table_users WHERE name LIKE '%lucy%'\"));\n   * \/\/ (int) 3\n   * X::dump($db->query(\"SELECT * FROM table_users WHERE name = 'John\"));\n   * \/\/ (bbn\\Db\\Query) Object\n   * ```\n   *\n   * @param array|string $statement\n   * @return false|int|Query\n   *\/"
        },
        "executeStatement": {
            "name": "executeStatement",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function executeStatement(string $statement)\n  {\n    if ($this->check()) {\n      return $this->language->executeStatement($statement);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1995,
            "endLine": 2002,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "executeStatement",
            "returns": [],
            "arguments": [
                {
                    "name": "statement",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "rawQuery": {
            "name": "rawQuery",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function rawQuery(string $st)\n  {\n    return $this->language->rawQuery($st);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2010,
            "endLine": 2013,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "rawQuery",
            "returns": [],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $st\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "tfn": {
            "name": "tfn",
            "summary": "Return table's full name.",
            "description": "(similar to {@link table_full_name()})",
            "description_parts": [
                {
                    "type": "text",
                    "content": "(similar to {@link table_full_name()})"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->tfn(\"table_users\"));\n\/\/ (string) work_db.table_users\nX::dump($db->tfn(\"table_users\", true));\n\/\/ (string) `work_db`.`table_users`"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tfn(string $table, bool $escaped = false): ?string\n  {\n    return $this->tableFullName($table, $escaped);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2040,
            "endLine": 2043,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "tfn",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                }
            ],
            "doc": {
                "description": "Return table's full name.\n(similar to {@link table_full_name()})\n\n```php\nX::dump($db->tfn(\"table_users\"));\n\/\/ (string) work_db.table_users\nX::dump($db->tfn(\"table_users\", true));\n\/\/ (string) `work_db`.`table_users`\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return table's full name.\n   * (similar to {@link table_full_name()})\n   *\n   * ```php\n   * X::dump($db->tfn(\"table_users\"));\n   * \/\/ (string) work_db.table_users\n   * X::dump($db->tfn(\"table_users\", true));\n   * \/\/ (string) `work_db`.`table_users`\n   * ```\n   *\n   * @param string $table   The table's name\n   * @param bool   $escaped If set to true the returned string will be escaped.\n   * @return null|string\n   *\/"
        },
        "tsn": {
            "name": "tsn",
            "summary": "Return table's simple name.",
            "description": "(similar to {@link table_simple_name()})",
            "description_parts": [
                {
                    "type": "text",
                    "content": "(similar to {@link table_simple_name()})"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->tsn(\"work_db.table_users\"));\n\/\/ (string) table_users\nX::dump($db->tsn(\"work_db.table_users\", true));\n\/\/ (string) `table_users`"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tsn(string $table, bool $escaped = false): ?string\n  {\n    return $this->tableSimpleName($table, $escaped);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2061,
            "endLine": 2064,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "tsn",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                }
            ],
            "doc": {
                "description": "Return table's simple name.\n(similar to {@link table_simple_name()})\n\n```php\nX::dump($db->tsn(\"work_db.table_users\"));\n\/\/ (string) table_users\nX::dump($db->tsn(\"work_db.table_users\", true));\n\/\/ (string) `table_users`\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return table's simple name.\n   * (similar to {@link table_simple_name()})\n   *\n   * ```php\n   * X::dump($db->tsn(\"work_db.table_users\"));\n   * \/\/ (string) table_users\n   * X::dump($db->tsn(\"work_db.table_users\", true));\n   * \/\/ (string) `table_users`\n   * ```\n   *\n   * @param string $table   The table's name\n   * @param bool   $escaped If set to true the returned string will be escaped.\n   * @return null|string\n   *\/"
        },
        "cfn": {
            "name": "cfn",
            "summary": "Return column's full name.",
            "description": "(similar to {@link col_full_name()})",
            "description_parts": [
                {
                    "type": "text",
                    "content": "(similar to {@link col_full_name()})"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->cfn(\"name\", \"table_users\"));\n\/\/ (string)  table_users.name\nX::dump($db->cfn(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function cfn(string $col, ?string $table = null, bool $escaped = false): ?string\n  {\n    return $this->colFullName($col, $table, $escaped);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2083,
            "endLine": 2086,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "cfn",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name (escaped or not)."
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table's name (escaped or not)."
                },
                {
                    "name": "escaped",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                }
            ],
            "doc": {
                "description": "Return column's full name.\n(similar to {@link col_full_name()})\n\n```php\nX::dump($db->cfn(\"name\", \"table_users\"));\n\/\/ (string)  table_users.name\nX::dump($db->cfn(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$col",
                        "description": "The column's name (escaped or not)."
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table's name (escaped or not)."
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return column's full name.\n   * (similar to {@link col_full_name()})\n   *\n   * ```php\n   * X::dump($db->cfn(\"name\", \"table_users\"));\n   * \/\/ (string)  table_users.name\n   * X::dump($db->cfn(\"name\", \"table_users\", true));\n   * \/\/ (string) \\`table_users\\`.\\`name\\`\n   * ```\n   *\n   * @param string $col     The column's name (escaped or not).\n   * @param string|null $table   The table's name (escaped or not).\n   * @param bool   $escaped If set to true the returned string will be escaped.\n   * @return null|string\n   *\/"
        },
        "csn": {
            "name": "csn",
            "summary": "Return the column's simple name.",
            "description": "(similar to {@link col_simple_name()})",
            "description_parts": [
                {
                    "type": "text",
                    "content": "(similar to {@link col_simple_name()})"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->csn(\"table_users.name\"));\n\/\/ (string) name\nX::dump($db->csn(\"table_users.name\", true));\n\/\/ (string) `name`"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function csn(string $col, bool $escaped = false): ?string\n  {\n    return $this->colSimpleName($col, $escaped);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2104,
            "endLine": 2107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "csn",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's complete name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                }
            ],
            "doc": {
                "description": "Return the column's simple name.\n(similar to {@link col_simple_name()})\n\n```php\nX::dump($db->csn(\"table_users.name\"));\n\/\/ (string) name\nX::dump($db->csn(\"table_users.name\", true));\n\/\/ (string) `name`\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$col",
                        "description": "The column's complete name (escaped or not)"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return the column's simple name.\n   * (similar to {@link col_simple_name()})\n   *\n   * ```php\n   * X::dump($db->csn(\"table_users.name\"));\n   * \/\/ (string) name\n   * X::dump($db->csn(\"table_users.name\", true));\n   * \/\/ (string) `name`\n   * ```\n   *\n   * @param string $col     The column's complete name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped.\n   * @return null|string\n   *\/"
        },
        "postCreation": {
            "name": "postCreation",
            "summary": "Actions to do once the PDO object has been created",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump($ctrl->db->postCreation()); \/\/ null"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function postCreation()\n  {\n    if ($this->language && !$this->engine) {\n      $this->language->postCreation();\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2127,
            "endLine": 2132,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "postCreation",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Actions to do once the PDO object has been created\n\n```php\nX::hdump($ctrl->db->postCreation()); \/\/ null\n```\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Actions to do once the PDO object has been created\n   *\n   * ```php\n   * X::hdump($ctrl->db->postCreation()); \/\/ null \n   * ```\n   * \n   * @return void\n   *\/"
        },
        "change": {
            "name": "change",
            "summary": "Changes the database used to the given one.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db = new Db();\nX::dump($db->change('db_example'));\n\/\/ (db)"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function change(string $db): self\n  {\n    $this->language->change($db);\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2147,
            "endLine": 2152,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "change",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                }
            ],
            "doc": {
                "description": "Changes the database used to the given one.\n\n```php\n$db = new Db();\nX::dump($db->change('db_example'));\n\/\/ (db)\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Changes the database used to the given one.\n   *\n   * ```php\n   * $db = new Db();\n   * X::dump($db->change('db_example'));\n   * \/\/ (db)\n   * ```\n   *\n   * @param string $db The database's name\n   * @return self\n   *\/"
        },
        "escape": {
            "name": "escape",
            "summary": "Escapes names with the appropriate quotes (db, tables, columns, keys...)",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->escape(\"table_users\"));\n\/\/ (string) `table_users`"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function escape(string $item): string\n  {\n    return $this->language->escape($item);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2166,
            "endLine": 2169,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "escape",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name to escape."
                }
            ],
            "doc": {
                "description": "Escapes names with the appropriate quotes (db, tables, columns, keys...)\n\n```php\nX::dump($db->escape(\"table_users\"));\n\/\/ (string) `table_users`\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$item",
                        "description": "The name to escape."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Escapes names with the appropriate quotes (db, tables, columns, keys...)\n   *\n   * ```php\n   * X::dump($db->escape(\"table_users\"));\n   * \/\/ (string) `table_users`\n   * ```\n   *\n   * @param string $item The name to escape.\n   * @return string\n   *\/"
        },
        "tableFullName": {
            "name": "tableFullName",
            "summary": "Return table's full name.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->tableFullName(\"table_users\"));\n\/\/ (String) db_example.table_users\nX::dump($db->tableFullName(\"table_users\", true));\n\/\/ (String) `db_example`.`table_users`"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tableFullName(string $table, bool $escaped = false): ?string\n  {\n    return $this->language->tableFullName($table, $escaped);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2186,
            "endLine": 2189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "tableFullName",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name (escaped or not)."
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                }
            ],
            "doc": {
                "description": "Return table's full name.\n\n```php\nX::dump($db->tableFullName(\"table_users\"));\n\/\/ (String) db_example.table_users\nX::dump($db->tableFullName(\"table_users\", true));\n\/\/ (String) `db_example`.`table_users`\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name (escaped or not)."
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped."
                    }
                ],
                "return": "| false"
            },
            "comments": "  \/**\n   * Return table's full name.\n   *\n   * ```php\n   * X::dump($db->tableFullName(\"table_users\"));\n   * \/\/ (String) db_example.table_users\n   * X::dump($db->tableFullName(\"table_users\", true));\n   * \/\/ (String) `db_example`.`table_users`\n   * ```\n   *\n   * @param string $table   The table's name (escaped or not).\n   * @param bool   $escaped If set to true the returned string will be escaped.\n   * @return string | false\n   *\/"
        },
        "isTableFullName": {
            "name": "isTableFullName",
            "summary": "Returns true if the given string is the full name of a table ('database.table').",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump($ctrl->db->isTableFullName(\"table_users\")); \/\/ true or false"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isTableFullName(string $table): bool\n  {\n    return $this->language->isTableFullName($table);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2202,
            "endLine": 2205,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isTableFullName",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ],
            "doc": {
                "description": "Returns true if the given string is the full name of a table ('database.table').\n\n```php\nX::hdump($ctrl->db->isTableFullName(\"table_users\")); \/\/ true or false\n```\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the given string is the full name of a table ('database.table').\n   *\n   * ```php\n   * X::hdump($ctrl->db->isTableFullName(\"table_users\")); \/\/ true or false\n   * ```\n   * \n   * @param string $table The table's name\n   * @return bool\n   *\/"
        },
        "isColFullName": {
            "name": "isColFullName",
            "summary": "Returns true if the given string is the full name of a column ('table.column').",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump($ctrl->db->isColFullName(\"column_users\")); \/\/ true or false"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isColFullName(string $col): bool\n  {\n    return $this->language->isColFullName($col);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2218,
            "endLine": 2221,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isColFullName",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns true if the given string is the full name of a column ('table.column').\n\n```php\nX::hdump($ctrl->db->isColFullName(\"column_users\")); \/\/ true or false\n```\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$col"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the given string is the full name of a column ('table.column').\n   *\n   * ```php\n   * X::hdump($ctrl->db->isColFullName(\"column_users\")); \/\/ true or false\n   * ```\n   * \n   * @param string $col\n   * @return bool\n   *\/"
        },
        "tableSimpleName": {
            "name": "tableSimpleName",
            "summary": "Return table's simple name.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->tableSimpleName(\"example_db.table_users\"));\n\/\/ (string) table_users\nX::dump($db->tableSimpleName(\"example.table_users\", true));\n\/\/ (string) `table_users`"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tableSimpleName(string $table, bool $escaped = false): ?string\n  {\n    return $this->language->tableSimpleName($table, $escaped);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2238,
            "endLine": 2241,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "tableSimpleName",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                }
            ],
            "doc": {
                "description": "Return table's simple name.\n\n```php\nX::dump($db->tableSimpleName(\"example_db.table_users\"));\n\/\/ (string) table_users\nX::dump($db->tableSimpleName(\"example.table_users\", true));\n\/\/ (string) `table_users`\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name (escaped or not)"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped"
                    }
                ],
                "return": "| false"
            },
            "comments": "  \/**\n   * Return table's simple name.\n   *\n   * ```php\n   * X::dump($db->tableSimpleName(\"example_db.table_users\"));\n   * \/\/ (string) table_users\n   * X::dump($db->tableSimpleName(\"example.table_users\", true));\n   * \/\/ (string) `table_users`\n   * ```\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/"
        },
        "colFullName": {
            "name": "colFullName",
            "summary": "Return column's full name.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->colFullName(\"name\", \"table_users\"));\n\/\/ (string)  table_users.name Hello Ohohoho!!\nX::dump($db->colFullName(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function colFullName(string $col, ?string $table = null, bool $escaped = false): ?string\n  {\n    return $this->language->colFullName($col, $table, $escaped);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2259,
            "endLine": 2262,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "colFullName",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name (escaped or not)"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table's name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                }
            ],
            "doc": {
                "description": "Return column's full name.\n\n```php\nX::dump($db->colFullName(\"name\", \"table_users\"));\n\/\/ (string)  table_users.name Hello Ohohoho!!\nX::dump($db->colFullName(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$col",
                        "description": "The column's name (escaped or not)"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table's name (escaped or not)"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped"
                    }
                ],
                "return": "| false"
            },
            "comments": "  \/**\n   * Return column's full name.\n   *\n   * ```php\n   * X::dump($db->colFullName(\"name\", \"table_users\"));\n   * \/\/ (string)  table_users.name Hello Ohohoho!!\n   * X::dump($db->colFullName(\"name\", \"table_users\", true));\n   * \/\/ (string) \\`table_users\\`.\\`name\\`\n   * ```\n   *\n   * @param string $col The column's name (escaped or not)\n   * @param string|null $table The table's name (escaped or not)\n   * @param bool $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/"
        },
        "colSimpleName": {
            "name": "colSimpleName",
            "summary": "Return the column's simple name.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->colSimpleName(\"table_users.name\"));\n\/\/ (string) name\nX::dump($db->colSimpleName(\"table_users.name\", true));\n\/\/ (string) `name`"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function colSimpleName(string $col, bool $escaped = false): ?string\n  {\n    return $this->language->colSimpleName($col, $escaped);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2279,
            "endLine": 2282,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "colSimpleName",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's complete name (escaped or not)."
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped."
                }
            ],
            "doc": {
                "description": "Return the column's simple name.\n\n```php\nX::dump($db->colSimpleName(\"table_users.name\"));\n\/\/ (string) name\nX::dump($db->colSimpleName(\"table_users.name\", true));\n\/\/ (string) `name`\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$col",
                        "description": "The column's complete name (escaped or not)."
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped."
                    }
                ],
                "return": "| false"
            },
            "comments": "  \/**\n   * Return the column's simple name.\n   *\n   * ```php\n   * X::dump($db->colSimpleName(\"table_users.name\"));\n   * \/\/ (string) name\n   * X::dump($db->colSimpleName(\"table_users.name\", true));\n   * \/\/ (string) `name`\n   * ```\n   *\n   * @param string $col     The column's complete name (escaped or not).\n   * @param bool   $escaped If set to true the returned string will be escaped.\n   * @return string | false\n   *\/"
        },
        "disableKeys": {
            "name": "disableKeys",
            "summary": "Disables foreign keys constraints.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->disableKeys());\n\/\/ (self)"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function disableKeys(): self\n  {\n    $this->language->disableKeys();\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2295,
            "endLine": 2299,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "disableKeys",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Disables foreign keys constraints.\n\n```php\nX::dump($db->disableKeys());\n\/\/ (self)\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Disables foreign keys constraints.\n   *\n   * ```php\n   * X::dump($db->disableKeys());\n   * \/\/ (self)\n   * ```\n   *\n   * @return self\n   *\/"
        },
        "enableKeys": {
            "name": "enableKeys",
            "summary": "Enables foreign keys constraints.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->enableKeys());\n\/\/ (db)"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function enableKeys(): self\n  {\n    $this->language->enableKeys();\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2312,
            "endLine": 2316,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "enableKeys",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Enables foreign keys constraints.\n\n```php\nX::dump($db->enableKeys());\n\/\/ (db)\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Enables foreign keys constraints.\n   *\n   * ```php\n   * X::dump($db->enableKeys());\n   * \/\/ (db)\n   * ```\n   *\n   * @return self\n   *\/"
        },
        "getDatabases": {
            "name": "getDatabases",
            "summary": "Return databases' names as an array.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getDatabases());\n\/*\n(array)[\n     \"db_customers\",\n     \"db_clients\",\n     \"db_empty\",\n     \"db_example\",\n     \"db_mail\"\n     ]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDatabases(): ?array\n  {\n    return $this->language->getDatabases();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2335,
            "endLine": 2338,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDatabases",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return databases' names as an array.\n\n```php\nX::dump($db->getDatabases());\n\/*\n(array)[\n     \"db_customers\",\n     \"db_clients\",\n     \"db_empty\",\n     \"db_example\",\n     \"db_mail\"\n     ]\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Return databases' names as an array.\n   *\n   * ```php\n   * X::dump($db->getDatabases());\n   * \/*\n   * (array)[\n   *      \"db_customers\",\n   *      \"db_clients\",\n   *      \"db_empty\",\n   *      \"db_example\",\n   *      \"db_mail\"\n   *      ]\n   * ```\n   * @return null|array\n   *\/"
        },
        "getTables": {
            "name": "getTables",
            "summary": "Return tables' names of a database as an array.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getTables('db_example'));\n\/*\n(array) [\n       \"clients\",\n       \"columns\",\n       \"cron\",\n       \"journal\",\n       \"dbs\",\n       \"examples\",\n       \"history\",\n       \"hosts\",\n       \"keys\",\n       \"mails\",\n       \"medias\",\n       \"notes\",\n       \"medias\",\n       \"versions\"\n       ]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTables(string $database = ''): ?array\n  {\n    return $this->language->getTables($database);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2368,
            "endLine": 2371,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getTables",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "Database name"
                }
            ],
            "doc": {
                "description": "Return tables' names of a database as an array.\n\n```php\nX::dump($db->getTables('db_example'));\n\/*\n(array) [\n       \"clients\",\n       \"columns\",\n       \"cron\",\n       \"journal\",\n       \"dbs\",\n       \"examples\",\n       \"history\",\n       \"hosts\",\n       \"keys\",\n       \"mails\",\n       \"medias\",\n       \"notes\",\n       \"medias\",\n       \"versions\"\n       ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database",
                        "description": "Database name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return tables' names of a database as an array.\n   *\n   * ```php\n   * X::dump($db->getTables('db_example'));\n   * \/*\n   * (array) [\n   *        \"clients\",\n   *        \"columns\",\n   *        \"cron\",\n   *        \"journal\",\n   *        \"dbs\",\n   *        \"examples\",\n   *        \"history\",\n   *        \"hosts\",\n   *        \"keys\",\n   *        \"mails\",\n   *        \"medias\",\n   *        \"notes\",\n   *        \"medias\",\n   *        \"versions\"\n   *        ]\n   * ```\n   *\n   * @param string $database Database name\n   * @return null|array\n   *\/"
        },
        "getColumns": {
            "name": "getColumns",
            "summary": "Return columns' structure of a table as an array indexed with the fields names.",
            "description": "*",
            "description_parts": [
                {
                    "type": "text",
                    "content": "*"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->getColumns('table_users'));\n\/* (array)[\n           \"id\" => [\n             \"position\" => 1,\n             \"null\" => 0,\n             \"key\" => \"PRI\",\n             \"default\" => null,\n             \"extra\" => \"auto_increment\",\n             \"signed\" => 0,\n             \"maxlength\" => \"8\",\n             \"type\" => \"int\",\n           ],\n          \"name\" => [\n             \"position\" => 2,\n             \"null\" => 0,\n             \"key\" => null,\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n           \"surname\" => [\n             \"position\" => 3,\n             \"null\" => 0,\n             \"key\" => null,\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n           \"address\" => [\n             \"position\" => 4,\n             \"null\" => 0,\n             \"key\" => \"UNI\",\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n         ]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getColumns(string $table): ?array\n  {\n    return $this->language->getColumns($table);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2426,
            "endLine": 2429,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getColumns",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ],
            "doc": {
                "description": {
                    "description": "Return columns' structure of a table as an array indexed with the fields names.\n\n* ```php\nX::dump($db->getColumns('table_users'));\n\/* (array)[\n           \"id\" => [\n             \"position\" => 1,\n             \"null\" => 0,\n             \"key\" => \"PRI\",\n             \"default\" => null,\n             \"extra\" => \"auto_increment\",\n             \"signed\" => 0,\n             \"maxlength\" => \"8\",\n             \"type\" => \"int\",\n           ],\n          \"name\" => [\n             \"position\" => 2,\n             \"null\" => 0,\n             \"key\" => null,\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n           \"surname\" => [\n             \"position\" => 3,\n             \"null\" => 0,\n             \"key\" => null,\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n           \"address\" => [\n             \"position\" => 4,\n             \"null\" => 0,\n             \"key\" => \"UNI\",\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n         ]\n```\n",
                    "tags": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table",
                            "description": "The table's name"
                        },
                        {
                            "tag": "return",
                            "type": "null|array"
                        }
                    ]
                },
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": "",
                "example_method": "* ```php\nX::dump($db->getColumns('table_users'));\n\/* (array)[\n           \"id\" => [\n             \"position\" => 1,\n             \"null\" => 0,\n             \"key\" => \"PRI\",\n             \"default\" => null,\n             \"extra\" => \"auto_increment\",\n             \"signed\" => 0,\n             \"maxlength\" => \"8\",\n             \"type\" => \"int\",\n           ],\n          \"name\" => [\n             \"position\" => 2,\n             \"null\" => 0,\n             \"key\" => null,\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n           \"surname\" => [\n             \"position\" => 3,\n             \"null\" => 0,\n             \"key\" => null,\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n           \"address\" => [\n             \"position\" => 4,\n             \"null\" => 0,\n             \"key\" => \"UNI\",\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n         ]\n```"
            },
            "comments": "  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * * ```php\n   * X::dump($db->getColumns('table_users'));\n   * \/* (array)[\n   *            \"id\" => [\n   *              \"position\" => 1,\n   *              \"null\" => 0,\n   *              \"key\" => \"PRI\",\n   *              \"default\" => null,\n   *              \"extra\" => \"auto_increment\",\n   *              \"signed\" => 0,\n   *              \"maxlength\" => \"8\",\n   *              \"type\" => \"int\",\n   *            ],\n   *           \"name\" => [\n   *              \"position\" => 2,\n   *              \"null\" => 0,\n   *              \"key\" => null,\n   *              \"default\" => null,\n   *              \"extra\" => \"\",\n   *              \"signed\" => 0,\n   *              \"maxlength\" => \"30\",\n   *              \"type\" => \"varchar\",\n   *            ],\n   *            \"surname\" => [\n   *              \"position\" => 3,\n   *              \"null\" => 0,\n   *              \"key\" => null,\n   *              \"default\" => null,\n   *              \"extra\" => \"\",\n   *              \"signed\" => 0,\n   *              \"maxlength\" => \"30\",\n   *              \"type\" => \"varchar\",\n   *            ],\n   *            \"address\" => [\n   *              \"position\" => 4,\n   *              \"null\" => 0,\n   *              \"key\" => \"UNI\",\n   *              \"default\" => null,\n   *              \"extra\" => \"\",\n   *              \"signed\" => 0,\n   *              \"maxlength\" => \"30\",\n   *              \"type\" => \"varchar\",\n   *            ],\n   *          ]\n   * ```\n   *\n   * @param string $table The table's name\n   * @return null|array\n   *\/"
        },
        "getKeys": {
            "name": "getKeys",
            "summary": "Return the table's keys as an array indexed with the fields names.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getKeys(\"table_users\"));\n\/*\n(array)[\n     \"keys\" => [\n       \"PRIMARY\" => [\n         \"columns\" => [\n           \"id\",\n         ],\n         \"ref_db\" => null,\n         \"ref_table\" => null,\n         \"ref_column\" => null,\n         \"unique\" => 1,\n       ],\n       \"number\" => [\n         \"columns\" => [\n           \"number\",\n         ],\n         \"ref_db\" => null,\n         \"ref_table\" => null,\n         \"ref_column\" => null,\n        \"unique\" => 1,\n       ],\n     ],\n     \"cols\" => [\n       \"id\" => [\n         \"PRIMARY\",\n       ],\n       \"number\" => [\n         \"number\",\n       ],\n     ],\n]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getKeys(string $table): ?array\n  {\n    return $this->language->getKeys($table);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2473,
            "endLine": 2476,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getKeys",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ],
            "doc": {
                "description": "Return the table's keys as an array indexed with the fields names.\n\n```php\nX::dump($db->getKeys(\"table_users\"));\n\/*\n(array)[\n     \"keys\" => [\n       \"PRIMARY\" => [\n         \"columns\" => [\n           \"id\",\n         ],\n         \"ref_db\" => null,\n         \"ref_table\" => null,\n         \"ref_column\" => null,\n         \"unique\" => 1,\n       ],\n       \"number\" => [\n         \"columns\" => [\n           \"number\",\n         ],\n         \"ref_db\" => null,\n         \"ref_table\" => null,\n         \"ref_column\" => null,\n        \"unique\" => 1,\n       ],\n     ],\n     \"cols\" => [\n       \"id\" => [\n         \"PRIMARY\",\n       ],\n       \"number\" => [\n         \"number\",\n       ],\n     ],\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * ```php\n   * X::dump($db->getKeys(\"table_users\"));\n   * \/*\n   * (array)[\n   *      \"keys\" => [\n   *        \"PRIMARY\" => [\n   *          \"columns\" => [\n   *            \"id\",\n   *          ],\n   *          \"ref_db\" => null,\n   *          \"ref_table\" => null,\n   *          \"ref_column\" => null,\n   *          \"unique\" => 1,\n   *        ],\n   *        \"number\" => [\n   *          \"columns\" => [\n   *            \"number\",\n   *          ],\n   *          \"ref_db\" => null,\n   *          \"ref_table\" => null,\n   *          \"ref_column\" => null,\n   *         \"unique\" => 1,\n   *        ],\n   *      ],\n   *      \"cols\" => [\n   *        \"id\" => [\n   *          \"PRIMARY\",\n   *        ],\n   *        \"number\" => [\n   *          \"number\",\n   *        ],\n   *      ],\n   * ]\n   * ```\n   *\n   * @param string $table The table's name\n   * @return null|array\n   *\/"
        },
        "getConditions": {
            "name": "getConditions",
            "summary": "Returns a string with the conditions for any filter clause.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string\n  {\n    return $this->language->getConditions($conditions, $cfg, $is_having, $indent);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2488,
            "endLine": 2491,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getConditions",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "conditions",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "is_having",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "having"
                },
                {
                    "name": "indent",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a string with the conditions for any filter clause.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$conditions"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$is",
                        "description": "having"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$indent"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/"
        },
        "getSelect": {
            "name": "getSelect",
            "summary": "Return SQL code for row(s) SELECT.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getSelect(['tables' => ['users'],'fields' => ['id', 'name']]));\n\/*\n(string)\n  SELECT\n   `table_users`.`name`,\n   `table_users`.`surname`"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSelect(array $cfg): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getSelect($cfg);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2510,
            "endLine": 2515,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getSelect",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ],
            "doc": {
                "description": "Return SQL code for row(s) SELECT.\n\n```php\nX::dump($db->getSelect(['tables' => ['users'],'fields' => ['id', 'name']]));\n\/*\n(string)\n  SELECT\n   `table_users`.`name`,\n   `table_users`.`surname`\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The configuration array"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return SQL code for row(s) SELECT.\n   *\n   * ```php\n   * X::dump($db->getSelect(['tables' => ['users'],'fields' => ['id', 'name']]));\n   * \/*\n   * (string)\n   *   SELECT\n   *    `table_users`.`name`,\n   *    `table_users`.`surname`\n   * ```\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getUnion": {
            "name": "getUnion",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUnion(array $cfg): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getUnion($cfg);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2517,
            "endLine": 2522,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getUnion",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getInsert": {
            "name": "getInsert",
            "summary": "Returns the SQL code for an INSERT statement.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getInsert([\n  'tables' => ['table_users'],\n  'fields' => ['name','surname']\n]));\n\/*\n(string)\n INSERT INTO `db_example`.`table_users` (\n             `name`, `surname`)\n             VALUES (?, ?)"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getInsert(array $cfg): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    $cfg['kind'] = 'INSERT';\n    return $this->language->getInsert($this->processCfg($cfg));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2544,
            "endLine": 2550,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getInsert",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ],
            "doc": {
                "description": "Returns the SQL code for an INSERT statement.\n\n```php\nX::dump($db->getInsert([\n  'tables' => ['table_users'],\n  'fields' => ['name','surname']\n]));\n\/*\n(string)\n INSERT INTO `db_example`.`table_users` (\n             `name`, `surname`)\n             VALUES (?, ?)\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The configuration array"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns the SQL code for an INSERT statement.\n   *\n   * ```php\n   * X::dump($db->getInsert([\n   *   'tables' => ['table_users'],\n   *   'fields' => ['name','surname']\n   * ]));\n   * \/*\n   * (string)\n   *  INSERT INTO `db_example`.`table_users` (\n   *              `name`, `surname`)\n   *              VALUES (?, ?)\n   * ```\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getUpdate": {
            "name": "getUpdate",
            "summary": "Returns the SQL code for an UPDATE statement.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getUpdate([\n  'tables' => ['table_users'],\n  'fields' => ['name','surname']\n]));\n\/*\n(string)\n   UPDATE `db_example`.`table_users`\n   SET `table_users`.`name` = ?,\n       `table_users`.`surname` = ?"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUpdate(array $cfg): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    $cfg['kind'] = 'UPDATE';\n    return $this->language->getUpdate($this->processCfg($cfg));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2572,
            "endLine": 2578,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getUpdate",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ],
            "doc": {
                "description": "Returns the SQL code for an UPDATE statement.\n\n```php\nX::dump($db->getUpdate([\n  'tables' => ['table_users'],\n  'fields' => ['name','surname']\n]));\n\/*\n(string)\n   UPDATE `db_example`.`table_users`\n   SET `table_users`.`name` = ?,\n       `table_users`.`surname` = ?\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The configuration array"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns the SQL code for an UPDATE statement.\n   *\n   * ```php\n   * X::dump($db->getUpdate([\n   *   'tables' => ['table_users'],\n   *   'fields' => ['name','surname']\n   * ]));\n   * \/*\n   * (string)\n   *    UPDATE `db_example`.`table_users`\n   *    SET `table_users`.`name` = ?,\n   *        `table_users`.`surname` = ?\n   * ```\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getDelete": {
            "name": "getDelete",
            "summary": "Returns the SQL code for a DELETE statement.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getDelete(['tables' => ['table_users']]));\n\/\/ (string) DELETE FROM `db_example`.`table_users` * WHERE 1 AND `table_users`.`id` = ?"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDelete(array $cfg): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    $cfg['kind'] = 'DELETE';\n    return $this->language->getDelete($this->processCfg($cfg));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2593,
            "endLine": 2599,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getDelete",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ],
            "doc": {
                "description": "Returns the SQL code for a DELETE statement.\n\n```php\nX::dump($db->getDelete(['tables' => ['table_users']]));\n\/\/ (string) DELETE FROM `db_example`.`table_users` * WHERE 1 AND `table_users`.`id` = ?\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The configuration array"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * ```php\n   * X::dump($db->getDelete(['tables' => ['table_users']]));\n   * \/\/ (string) DELETE FROM `db_example`.`table_users` * WHERE 1 AND `table_users`.`id` = ?\n   * ```\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getJoin": {
            "name": "getJoin",
            "summary": "Returns a string with the JOIN part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getJoin(array $cfg, array|null $join = null): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getJoin($cfg, $join);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2609,
            "endLine": 2614,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getJoin",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "join",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a string with the JOIN part of the query if there is, empty otherwise\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getWhere": {
            "name": "getWhere",
            "summary": "Return a string with 'where' conditions.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getWhere(['id' => 9], 'table_users'));\n\/\/ (string) WHERE 1 AND `table_users`.`id` = ?"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getWhere(array $cfg): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getWhere($cfg);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2629,
            "endLine": 2634,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getWhere",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Return a string with 'where' conditions.\n\n```php\nX::dump($db->getWhere(['id' => 9], 'table_users'));\n\/\/ (string) WHERE 1 AND `table_users`.`id` = ?\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return a string with 'where' conditions.\n   *\n   * ```php\n   * X::dump($db->getWhere(['id' => 9], 'table_users'));\n   * \/\/ (string) WHERE 1 AND `table_users`.`id` = ?\n   * ```\n   *\n   * @param array $cfg\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getGroupBy": {
            "name": "getGroupBy",
            "summary": "Returns a string with the GROUP BY part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getGroupBy(array $cfg): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getGroupBy($cfg);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2644,
            "endLine": 2649,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getGroupBy",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a string with the GROUP BY part of the query if there is, empty otherwise\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getHaving": {
            "name": "getHaving",
            "summary": "Returns a string with the HAVING part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getHaving(array $cfg): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getHaving($cfg);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2659,
            "endLine": 2664,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getHaving",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a string with the HAVING part of the query if there is, empty otherwise\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getOrder": {
            "name": "getOrder",
            "summary": "Get a string starting with ORDER BY with corresponding parameters to $order.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getOrder(['name' => 'DESC' ],'table_users'));\n\/\/ (string) ORDER BY `name` DESC"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getOrder(array $cfg): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getOrder($cfg);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2679,
            "endLine": 2684,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getOrder",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Get a string starting with ORDER BY with corresponding parameters to $order.\n\n```php\nX::dump($db->getOrder(['name' => 'DESC' ],'table_users'));\n\/\/ (string) ORDER BY `name` DESC\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order.\n   *\n   * ```php\n   * X::dump($db->getOrder(['name' => 'DESC' ],'table_users'));\n   * \/\/ (string) ORDER BY `name` DESC\n   * ```\n   *\n   * @param array $cfg\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getLimit": {
            "name": "getLimit",
            "summary": "Get a string starting with LIMIT with corresponding parameters to $limit.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getLimit(['limit' => 3, 'start'  => 1]));\n\/\/ (string) LIMIT 1, 3"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLimit(array $cfg): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getLimit($cfg);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2699,
            "endLine": 2704,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getLimit",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Get a string starting with LIMIT with corresponding parameters to $limit.\n\n```php\nX::dump($db->getLimit(['limit' => 3, 'start'  => 1]));\n\/\/ (string) LIMIT 1, 3\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $limit.\n   *\n   * ```php\n   * X::dump($db->getLimit(['limit' => 3, 'start'  => 1]));\n   * \/\/ (string) LIMIT 1, 3\n   * ```\n   *\n   * @param array $cfg\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getCreate": {
            "name": "getCreate",
            "summary": "Return SQL code for table creation.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getCreate(\"table_users\"));\n\/*\n(string)\n   CREATE TABLE `table_users` (\n     `userid` int(11) NOT NULL,\n     `userdataid` int(11) NOT NULL,\n     `info` char(200) DEFAULT NULL,\n      PRIMARY KEY (`userid`,`userdataid`),\n      KEY `table_users_userId_userdataId_info` (`userid`,`userdataid`,`info`)\n   ) ENGINE=InnoDB DEFAULT CHARSET=utf8"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCreate(string $table, array|null $model = null): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getCreate($table, $model);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2728,
            "endLine": 2733,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getCreate",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Return SQL code for table creation.\n\n```php\nX::dump($db->getCreate(\"table_users\"));\n\/*\n(string)\n   CREATE TABLE `table_users` (\n     `userid` int(11) NOT NULL,\n     `userdataid` int(11) NOT NULL,\n     `info` char(200) DEFAULT NULL,\n      PRIMARY KEY (`userid`,`userdataid`),\n      KEY `table_users_userId_userdataId_info` (`userid`,`userdataid`,`info`)\n   ) ENGINE=InnoDB DEFAULT CHARSET=utf8\n\n```\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": "| false",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return SQL code for table creation.\n   *\n   * ```php\n   * X::dump($db->getCreate(\"table_users\"));\n   * \/*\n   * (string)\n   *    CREATE TABLE `table_users` (\n   *      `userid` int(11) NOT NULL,\n   *      `userdataid` int(11) NOT NULL,\n   *      `info` char(200) DEFAULT NULL,\n   *       PRIMARY KEY (`userid`,`userdataid`),\n   *       KEY `table_users_userId_userdataId_info` (`userid`,`userdataid`,`info`)\n   *    ) ENGINE=InnoDB DEFAULT CHARSET=utf8\n   *\n   * ```\n   * \n   * @param string $table The table's name\n   * @return string | false\n   * @throws Exception\n   *\/"
        },
        "getCreateTable": {
            "name": "getCreateTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCreateTable(string $table, ?array $cfg = null): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n    return $this->language->getCreateTable($table, $cfg);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2742,
            "endLine": 2746,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getCreateTable",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $table\n   * @param array|null $cfg\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getCreateTableRaw": {
            "name": "getCreateTableRaw",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCreateTableRaw(\n    string $table,\n    ?array $cfg = null,\n    $createKeys = true,\n    $createConstraints = true\n    ): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n    return $this->language->getCreateTableRaw($table, $cfg, $createKeys, $createConstraints);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2749,
            "endLine": 2758,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getCreateTableRaw",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "createKeys",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                },
                {
                    "name": "createConstraints",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "getCreateKeys": {
            "name": "getCreateKeys",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCreateKeys(string $table, array|null $model = null): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getCreateKeys($table, $model);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2767,
            "endLine": 2772,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getCreateKeys",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$model"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $table\n   * @param array|null $model\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getCreateConstraints": {
            "name": "getCreateConstraints",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCreateConstraints(string $table, array|null $model = null): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getCreateConstraints($table, $model);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2781,
            "endLine": 2786,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getCreateConstraints",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$model"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $table\n   * @param array|null $model\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "createIndex": {
            "name": "createIndex",
            "summary": "Creates an index on one or more column(s) of the table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->createIndex($table, $column, $unique, $length);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2805,
            "endLine": 2810,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "createIndex",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "unique",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "length",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Creates an index on one or more column(s) of the table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$column"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$unique"
                    },
                    {
                        "tag": "param",
                        "type": "null",
                        "name": "$length"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                },
                "todo": {
                    "tag": "todo",
                    "text": "return data\n\n```php\nX::dump($db->createIndex('table_users','id_group'));\n\/\/ (bool) true\n```\n"
                }
            },
            "comments": "  \/**\n   * Creates an index on one or more column(s) of the table\n   *\n   * @param string $table\n   * @param string|array $column\n   * @param bool $unique\n   * @param null $length\n   * @return bool\n   * @throws Exception\n   * @todo return data\n   *\n   * ```php\n   * X::dump($db->createIndex('table_users','id_group'));\n   * \/\/ (bool) true\n   * ```\n   *\n   *\/"
        },
        "deleteIndex": {
            "name": "deleteIndex",
            "summary": "Deletes index on a column of the table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteIndex(string $table, string $key): bool\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->deleteIndex($table, $key);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2828,
            "endLine": 2833,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "deleteIndex",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name."
                },
                {
                    "name": "key",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The key's name."
                }
            ],
            "doc": {
                "description": "Deletes index on a column of the table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$key",
                        "description": "The key's name."
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                },
                "todo": {
                    "tag": "todo",
                    "text": "far vedere a thomas perch\u00e8 non funziona\/return data\n\n```php\nX::dump($db->deleteIndex('table_users','id_group'));\n\/\/ (bool) true\n```\n"
                }
            },
            "comments": "  \/**\n   * Deletes index on a column of the table.\n   *\n   * @param string $table The table's name.\n   * @param string $key The key's name.\n   * @return bool\n   * @throws Exception\n   * @todo far vedere a thomas perch\u00e8 non funziona\/return data\n   *\n   * ```php\n   * X::dump($db->deleteIndex('table_users','id_group'));\n   * \/\/ (bool) true\n   * ```\n   *\n   *\/"
        },
        "getAlterTable": {
            "name": "getAlterTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAlterTable(string $table, array $cfg): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getAlterTable($table, $cfg);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2842,
            "endLine": 2847,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getAlterTable",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "createColumn": {
            "name": "createColumn",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createColumn(string $table, string $col, array $cfg): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->createColumn($table, $col, $cfg);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2849,
            "endLine": 2854,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "createColumn",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "col",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getAlterColumn": {
            "name": "getAlterColumn",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAlterColumn(string $table, array $cfg): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getAlterColumn($table, $cfg);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2863,
            "endLine": 2868,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getAlterColumn",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getAlterKey": {
            "name": "getAlterKey",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAlterKey(string $table, array $cfg): string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getAlterKey($table, $cfg);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2877,
            "endLine": 2882,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getAlterKey",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "alter": {
            "name": "alter",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function alter(string $table, array $cfg): int\n  {\n    if (method_exists($this->language, 'alter')) {\n      return $this->language->alter($table, $cfg);\n    }\n\n    if ($st = $this->language->getAlterTable($table, $cfg)) {\n      return (int)$this->language->rawQuery($st);\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2891,
            "endLine": 2902,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "alter",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   * @throws Exception\n   *\/"
        },
        "moveColumn": {
            "name": "moveColumn",
            "summary": "Moves the given column's position within a table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function moveColumn(string $table, string $column, array $cfg, string|null $after = null): int\n  {\n    $this->ensureLanguageMethodExists('getMoveColumn');\n\n    if ($st = $this->language->getMoveColumn($table, $column, $cfg, $after)) {\n      return (int)$this->language->rawQuery($st);\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2914,
            "endLine": 2923,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "moveColumn",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "after",
                    "position": 3,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Moves the given column's position within a table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$column"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$after"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Moves the given column's position within a table.\n   *\n   * @param string $table\n   * @param string $column\n   * @param array $cfg\n   * @param string|null $after\n   * @return integer\n   *\/"
        },
        "createUser": {
            "name": "createUser",
            "summary": "Creates a user for a specific db.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createUser(string|null $user = null, string|null $pass = null, string|null $db = null): bool\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->createUser($user, $pass, $db);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2941,
            "endLine": 2946,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "createUser",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "pass",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Creates a user for a specific db.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$user"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$pass"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$db"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "return data\n\n```php\nX::dump($db->createUser('Michael','22101980','db_example'));\n\/\/ (bool) true\n```"
                },
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Creates a user for a specific db.\n   * @todo return data\n   *\n   * ```php\n   * X::dump($db->createUser('Michael','22101980','db_example'));\n   * \/\/ (bool) true\n   * ```\n   *\n   * @param string|null $user\n   * @param string|null $pass\n   * @param string|null $db\n   * @return bool\n   * @throws Exception\n   *\/"
        },
        "deleteUser": {
            "name": "deleteUser",
            "summary": "Deletes a db user.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteUser(string $user): bool\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->deleteUser($user);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2963,
            "endLine": 2968,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteUser",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes a db user.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$user"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "non mi funziona ma forse per una questione di permessi\/ return data\n\n```php\nX::dump($db->deleteUser('Michael'));\n\/\/ (bool) true\n```"
                },
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Deletes a db user.\n   *\n   * @todo non mi funziona ma forse per una questione di permessi\/ return data\n   *\n   * ```php\n   * X::dump($db->deleteUser('Michael'));\n   * \/\/ (bool) true\n   * ```\n   *\n   * @param string $user\n   * @return bool\n   * @throws Exception\n   *\/"
        },
        "getUsers": {
            "name": "getUsers",
            "summary": "Return an array including privileges of a specific db_user or all db_users.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUsers(string $user = '', string $host = ''): ?array\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getUsers($user, $host);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2988,
            "endLine": 2993,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getUsers",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": ". The user's name, without params will return all privileges of all db_users"
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": ". The host"
                }
            ],
            "doc": {
                "description": "Return an array including privileges of a specific db_user or all db_users.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$user",
                        "description": ". The user's name, without params will return all privileges of all db_users"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$host",
                        "description": ". The host"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                },
                "todo": {
                    "tag": "todo",
                    "text": "far vedere  a th la descrizione\n\n```php\nX::dump($db->getUsers('Michael'));\n\/* (array) [\n\"GRANT USAGE ON *.* TO 'Michael'@''\",\nGRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `db_example`.* TO 'Michael'@''\"\n]\n```\n"
                }
            },
            "comments": "  \/**\n   * Return an array including privileges of a specific db_user or all db_users.\n   * @param string $user . The user's name, without params will return all privileges of all db_users\n   * @param string $host . The host\n   * @return array\n   * @throws Exception\n   * @todo far vedere  a th la descrizione\n   *\n   * ```php\n   * X::dump($db->getUsers('Michael'));\n   * \/* (array) [\n   *      \"GRANT USAGE ON *.* TO 'Michael'@''\",\n   *       GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `db_example`.* TO 'Michael'@''\"\n   *    ]\n   * ```\n   *\n   *\/"
        },
        "renameTable": {
            "name": "renameTable",
            "summary": "Renames the given table to the new given name.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function renameTable(string $table, string $newName): bool\n  {\n    return $this->language->renameTable($table, $newName);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3003,
            "endLine": 3006,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "renameTable",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The current table's name"
                },
                {
                    "name": "newName",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame The new name."
                }
            ],
            "doc": {
                "description": "Renames the given table to the new given name.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The current table's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$new",
                        "description": "ame The new name."
                    }
                ],
                "return": "True if it succeeded"
            },
            "comments": "  \/**\n   * Renames the given table to the new given name.\n   *\n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/"
        },
        "getTableComment": {
            "name": "getTableComment",
            "summary": "Returns the comment (or an empty string if none) for a given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTableComment(string $table): string\n  {\n    return $this->language->getTableComment($table);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3015,
            "endLine": 3018,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTableComment",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ],
            "doc": {
                "description": "Returns the comment (or an empty string if none) for a given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": "The table's comment"
            },
            "comments": "  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/"
        },
        "dbSize": {
            "name": "dbSize",
            "summary": "Gets the size of a database",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dbSize(string $database = '', string $type = ''): int\n  {\n    return $this->language->dbSize($database, $type);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3027,
            "endLine": 3030,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "dbSize",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the size of a database\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int\n   *\/"
        },
        "tableSize": {
            "name": "tableSize",
            "summary": "Gets the size of a table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tableSize(string $table, string $type = ''): int\n  {\n    return $this->language->tableSize($table, $type);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3040,
            "endLine": 3043,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "tableSize",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the size of a table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int\n   *\/"
        },
        "status": {
            "name": "status",
            "summary": "Gets the status of a table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function status(string $table = '', string $database = '')\n  {\n    return $this->language->status($table, $database);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3053,
            "endLine": 3056,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "status",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the status of a table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/"
        },
        "getUid": {
            "name": "getUid",
            "summary": "Returns a UUID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUid(): ?string\n  {\n    return $this->language->getUid();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3064,
            "endLine": 3067,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getUid",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns a UUID\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/"
        },
        "getRow": {
            "name": "getRow",
            "summary": "Return the first row resulting from the query as an array indexed with the fields' name.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getRow(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n\n\/* (array)[\n       \"id\" => 3,\n       \"name\" => \"thomas\",\n       ]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRow(): ?array\n  {\n    return $this->language->getRow(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3096,
            "endLine": 3099,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRow",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return the first row resulting from the query as an array indexed with the fields' name.\n\n```php\nX::dump($db->getRow(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n\n\/* (array)[\n       \"id\" => 3,\n       \"name\" => \"thomas\",\n       ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "description": "The var ? value."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * ```php\n   * X::dump($db->getRow(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n   *\n   * \/* (array)[\n   *        \"id\" => 3,\n   *        \"name\" => \"thomas\",\n   *        ]\n   * ```\n   *\n   * @param string query.\n   * @param int The var ? value.\n   * @return array|false\n   *\n   *\/"
        },
        "getRows": {
            "name": "getRows",
            "summary": "Return an array that includes indexed arrays for every row resultant from the query.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRows(): ?array\n  {\n    return $this->language->getRows(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3109,
            "endLine": 3112,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRows",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return an array that includes indexed arrays for every row resultant from the query.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "description": "The var ? value"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @param string\n   * @param int The var ? value\n   * @return array|false\n   *\/"
        },
        "getIrow": {
            "name": "getIrow",
            "summary": "Return a row as a numeric indexed array.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getIrow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n\/* (array) [\n             3,\n             \"john\",\n             \"brown\",\n            ]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIrow(): ?array\n  {\n    return $this->language->getIrow(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3131,
            "endLine": 3134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getIrow",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return a row as a numeric indexed array.\n\n```php\nX::dump($db->getIrow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n\/* (array) [\n             3,\n             \"john\",\n             \"brown\",\n            ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "description": "The var ? value"
                    }
                ],
                "return": "| false"
            },
            "comments": "  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * ```php\n   * X::dump($db->getIrow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n   * \/* (array) [\n   *              3,\n   *              \"john\",\n   *              \"brown\",\n   *             ]\n   * ```\n   *\n   * @param string query\n   * @param int The var ? value\n   * @return array | false\n   *\/"
        },
        "getIrows": {
            "name": "getIrows",
            "summary": "Return an array of numeric indexed rows.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getIrows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n\/*\n(array)[\n        [\n         3,\n        \"john\"\n        ],\n        [\n        4,\n        \"barbara\"\n       ]\n      ]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIrows(): ?array\n  {\n    return $this->language->getIrows(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3157,
            "endLine": 3160,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getIrows",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return an array of numeric indexed rows.\n\n```php\nX::dump($db->getIrows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n\/*\n(array)[\n        [\n         3,\n        \"john\"\n        ],\n        [\n        4,\n        \"barbara\"\n       ]\n      ]\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * ```php\n   * X::dump($db->getIrows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n   * \/*\n   * (array)[\n   *         [\n   *          3,\n   *         \"john\"\n   *         ],\n   *         [\n   *         4,\n   *         \"barbara\"\n   *        ]\n   *       ]\n   * ```\n   *\n   * @return null|array\n   *\/"
        },
        "getByColumns": {
            "name": "getByColumns",
            "summary": "Return an array indexed on the searched field's in which there are all the values of the column.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getByColumns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n\/*\n(array) [\n     \"name\" => [\n      \"John\",\n      \"Michael\"\n     ],\n     \"surname\" => [\n       \"Brown\",\n       \"Smith\"\n     ]\n    ]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getByColumns(): ?array\n  {\n    return $this->language->getByColumns(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3184,
            "endLine": 3187,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getByColumns",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return an array indexed on the searched field's in which there are all the values of the column.\n\n```php\nX::dump($db->getByColumns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n\/*\n(array) [\n     \"name\" => [\n      \"John\",\n      \"Michael\"\n     ],\n     \"surname\" => [\n       \"Brown\",\n       \"Smith\"\n     ]\n    ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * ```php\n   * X::dump($db->getByColumns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n   * \/*\n   * (array) [\n   *      \"name\" => [\n   *       \"John\",\n   *       \"Michael\"\n   *      ],\n   *      \"surname\" => [\n   *        \"Brown\",\n   *        \"Smith\"\n   *      ]\n   *     ]\n   * ```\n   *\n   * @param string query\n   * @return null|array\n   *\/"
        },
        "getObj": {
            "name": "getObj",
            "summary": "Return the first row resulting from the query as an object (similar to {@link getObject()}).",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getObj(\"SELECT surname FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"Smith\"\n      }"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getObj(): ?\\stdClass\n  {\n    return $this->getObject(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3203,
            "endLine": 3206,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getObj",
            "returns": [
                null,
                "stdClass"
            ],
            "arguments": [],
            "doc": {
                "description": "Return the first row resulting from the query as an object (similar to {@link getObject()}).\n\n```php\nX::dump($db->getObj(\"SELECT surname FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"Smith\"\n      }\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Return the first row resulting from the query as an object (similar to {@link getObject()}).\n   *\n   * ```php\n   * X::dump($db->getObj(\"SELECT surname FROM table_users\"));\n   * \/*\n   * (obj){\n   *       \"name\" => \"Smith\"\n   *       }\n   * ```\n   *\n   * @return null|\\stdClass\n   *\/"
        },
        "getObject": {
            "name": "getObject",
            "summary": "Return the first row resulting from the query as an object.",
            "description": "Synonym of get_obj.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Synonym of get_obj."
                },
                {
                    "type": "code",
                    "content": "X::dump($db->getObject(\"SELECT name FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"John\"\n      }"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getObject(): ?\\stdClass\n  {\n    return $this->language->getObject(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3223,
            "endLine": 3226,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getObject",
            "returns": [
                null,
                "stdClass"
            ],
            "arguments": [],
            "doc": {
                "description": "Return the first row resulting from the query as an object.\nSynonym of get_obj.\n\n```php\nX::dump($db->getObject(\"SELECT name FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"John\"\n      }\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Return the first row resulting from the query as an object.\n   * Synonym of get_obj.\n   *\n   * ```php\n   * X::dump($db->getObject(\"SELECT name FROM table_users\"));\n   * \/*\n   * (obj){\n   *       \"name\" => \"John\"\n   *       }\n   * ```\n   *\n   * @return null|\\stdClass\n   *\/"
        },
        "getObjects": {
            "name": "getObjects",
            "summary": "Return an array of stdClass objects.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getObjects(\"SELECT name FROM table_users\"));\n\n\/*\n(array) [\n         Object stdClass: df {\n           \"name\" => \"John\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Michael\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Thomas\",\n         },\n         Object stdClass: df {\n           \"name\" => \"William\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Jake\",\n         },\n        ]"
                }
            ],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getObjects(): ?array\n  {\n    return $this->language->getObjects(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3257,
            "endLine": 3260,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getObjects",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return an array of stdClass objects.\n\n```php\nX::dump($db->getObjects(\"SELECT name FROM table_users\"));\n\n\/*\n(array) [\n         Object stdClass: df {\n           \"name\" => \"John\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Michael\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Thomas\",\n         },\n         Object stdClass: df {\n           \"name\" => \"William\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Jake\",\n         },\n        ]\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Return an array of stdClass objects.\n   *\n   * ```php\n   * X::dump($db->getObjects(\"SELECT name FROM table_users\"));\n   *\n   * \/*\n   * (array) [\n   *          Object stdClass: df {\n   *            \"name\" => \"John\",\n   *          },\n   *          Object stdClass: df {\n   *            \"name\" => \"Michael\",\n   *          },\n   *          Object stdClass: df {\n   *            \"name\" => \"Thomas\",\n   *          },\n   *          Object stdClass: df {\n   *            \"name\" => \"William\",\n   *          },\n   *          Object stdClass: df {\n   *            \"name\" => \"Jake\",\n   *          },\n   *         ]\n   * ```\n   *\n   * @return null|array\n   *\/"
        },
        "charsets": {
            "name": "charsets",
            "summary": "Returns a list of charsets available for the current language.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function charsets(): ?array\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->charsets();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3269,
            "endLine": 3274,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "charsets",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns a list of charsets available for the current language.\n",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns a list of charsets available for the current language.\n   *\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "collations": {
            "name": "collations",
            "summary": "Returns a list of collations available for the current language.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function collations(): ?array\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->collations();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3283,
            "endLine": 3288,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "collations",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns a list of collations available for the current language.\n",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns a list of collations available for the current language.\n   *\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "createDatabase": {
            "name": "createDatabase",
            "summary": "Creates a database",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createDatabase(string $database): bool\n  {\n    return $this->language->createDatabase(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3297,
            "endLine": 3300,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "createDatabase",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Creates a database\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/"
        },
        "dropDatabase": {
            "name": "dropDatabase",
            "summary": "Drops the given database",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dropDatabase(string $database): bool\n  {\n    return $this->language->dropDatabase($database);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3309,
            "endLine": 3312,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dropDatabase",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Drops the given database\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Drops the given database\n   *\n   * @param string $database\n   * @return bool\n   *\/"
        },
        "renameDatabase": {
            "name": "renameDatabase",
            "summary": "Renames the given database to the new given name.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function renameDatabase(string $oldName, string $newName): bool\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n    return $this->language->renameDatabase($oldName, $newName);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3322,
            "endLine": 3326,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "renameDatabase",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "oldName",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame The current database's name"
                },
                {
                    "name": "newName",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame The new name."
                }
            ],
            "doc": {
                "description": "Renames the given database to the new given name.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$old",
                        "description": "ame The current database's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$new",
                        "description": "ame The new name."
                    }
                ],
                "return": "True if it succeeded"
            },
            "comments": "  \/**\n   * Renames the given database to the new given name.\n   *\n   * @param string $oldName The current database's name\n   * @param string $newName The new name.\n   * @return bool True if it succeeded\n   *\/"
        },
        "duplicateDatabase": {
            "name": "duplicateDatabase",
            "summary": "Duplicates a database",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function duplicateDatabase(string $source, string $target): bool\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n    return $this->language->duplicateDatabase($source, $target);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3336,
            "endLine": 3340,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "duplicateDatabase",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "source",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The source database name"
                },
                {
                    "name": "target",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The target database name"
                }
            ],
            "doc": {
                "description": "Duplicates a database\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$source",
                        "description": "The source database name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$target",
                        "description": "The target database name"
                    }
                ],
                "return": "True if it succeeded"
            },
            "comments": "  \/**\n   * Duplicates a database\n   *\n   * @param string $source The source database name\n   * @param string $target The target database name\n   * @return bool True if it succeeded\n   *\/"
        },
        "getDatabaseCharset": {
            "name": "getDatabaseCharset",
            "summary": "Returns the charset of the given database",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDatabaseCharset(string $database): ?string\n  {\n    return $this->language->getDatabaseCharset($database);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3349,
            "endLine": 3352,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getDatabaseCharset",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the charset of the given database\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the charset of the given database\n   *\n   * @param string $database\n   * @return string|null\n   *\/"
        },
        "getDatabaseCollation": {
            "name": "getDatabaseCollation",
            "summary": "Returns the collation of the given database",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDatabaseCollation(string $database): ?string\n  {\n    return $this->language->getDatabaseCollation($database);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3361,
            "endLine": 3364,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getDatabaseCollation",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the collation of the given database\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the collation of the given database\n   *\n   * @param string $database\n   * @return string|null\n   *\/"
        },
        "tableExists": {
            "name": "tableExists",
            "summary": "Returns true if the given table exists",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tableExists(string $table, string $database = ''): bool\n  {\n    return $this->language->tableExists($table, $database);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3374,
            "endLine": 3377,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "tableExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "or currently selected if none"
                }
            ],
            "doc": {
                "description": "Returns true if the given table exists\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database",
                        "description": "or currently selected if none"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the given table exists\n   *\n   * @param string $table\n   * @param string $database. or currently selected if none\n   * @return boolean\n   *\/"
        },
        "createTable": {
            "name": "createTable",
            "summary": "Creates a table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createTable(\n    string $table,\n    ?array $cfg = null,\n    bool $createKeys = true,\n    bool $createConstraints = true\n  ): bool\n  {\n    return $this->language->createTable($table, $cfg, $createKeys, $createConstraints);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3389,
            "endLine": 3397,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "createTable",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "createKeys",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "eys"
                },
                {
                    "name": "createConstraints",
                    "position": 3,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "onstraints"
                }
            ],
            "doc": {
                "description": "Creates a table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$cfg"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$create",
                        "description": "eys"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$create",
                        "description": "onstraints"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates a table\n   *\n   * @param string $table\n   * @param array|null $cfg\n   * @param bool $createKeys\n   * @param bool $createConstraints\n   * @return bool\n   *\/"
        },
        "dropTable": {
            "name": "dropTable",
            "summary": "Drops the given table, in the current database if none given",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dropTable(string $table, string $database = ''): bool\n  {\n    return $this->language->dropTable($table, $database);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3406,
            "endLine": 3409,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dropTable",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Drops the given table, in the current database if none given\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Drops the given table, in the current database if none given\n   *\n   * @param string $database\n   * @return bool\n   *\/"
        },
        "duplicateTable": {
            "name": "duplicateTable",
            "summary": "Duplicates a table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function duplicateTable(string $source, string $target, bool $withData = true): bool\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n    return $this->language->duplicateTable($source, $target, $withData);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3420,
            "endLine": 3424,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "duplicateTable",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "source",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The source table name"
                },
                {
                    "name": "target",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The target table name"
                },
                {
                    "name": "withData",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "ata If true, the data will be copied too"
                }
            ],
            "doc": {
                "description": "Duplicates a table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$source",
                        "description": "The source table name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$target",
                        "description": "The target table name"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "ata If true, the data will be copied too"
                    }
                ],
                "return": "True if it succeeded"
            },
            "comments": "  \/**\n   * Duplicates a table\n   *\n   * @param string $source The source table name\n   * @param string $target The target table name\n   * @param bool $withData If true, the data will be copied too\n   * @return bool True if it succeeded\n   *\/"
        },
        "getTableCharset": {
            "name": "getTableCharset",
            "summary": "Returns the charset of the given table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTableCharset(string $table): ?string\n  {\n    return $this->language->getTableCharset($table);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3433,
            "endLine": 3436,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTableCharset",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the charset of the given table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the charset of the given table\n   *\n   * @param string $table\n   * @return string|null\n   *\/"
        },
        "getTableCollation": {
            "name": "getTableCollation",
            "summary": "Returns the collation of the given table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTableCollation(string $table): ?string\n  {\n    return $this->language->getTableCollation($table);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3445,
            "endLine": 3448,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTableCollation",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the collation of the given table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the collation of the given table\n   *\n   * @param string $table\n   * @return string|null\n   *\/"
        },
        "enableLast": {
            "name": "enableLast",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function enableLast()\n  {\n    if (method_exists($this->language, __FUNCTION__)) {\n      $this->language->enableLast();\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3454,
            "endLine": 3459,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "enableLast",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return void\n   *\/"
        },
        "disableLast": {
            "name": "disableLast",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function disableLast()\n  {\n    if (method_exists($this->language, __FUNCTION__)) {\n      $this->language->disableLast();\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3465,
            "endLine": 3470,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "disableLast",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return void\n   *\/"
        },
        "getRealLastParams": {
            "name": "getRealLastParams",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRealLastParams(): ?array\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getRealLastParams();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3476,
            "endLine": 3481,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRealLastParams",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "realLast": {
            "name": "realLast",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function realLast(): ?string\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->realLast();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3488,
            "endLine": 3493,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "realLast",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @return string|null\n   * @throws Exception\n   *\/"
        },
        "getLastParams": {
            "name": "getLastParams",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastParams(): ?array\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getLastParams();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3500,
            "endLine": 3505,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLastParams",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "getLastValues": {
            "name": "getLastValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastValues(): ?array\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getLastValues();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3512,
            "endLine": 3517,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLastValues",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "getQuery": {
            "name": "getQuery",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getQuery(array $cfg): Query\n  {\n    if (!isset($cfg['kind'])) {\n      $cfg['kind'] = 'SELECT';\n    }\n\n    if ($cfg = $this->processCfg($cfg)) {\n      return $this->language->query($cfg['sql'], ...array_map(function($a) {\n        return Str::isUid($a) ? hex2bin($a) : $a;\n      }, $cfg['values']));\n    }\n\n    throw new Exception(X::_(\"Impossible to make a query\"));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3520,
            "endLine": 3533,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getQuery",
            "returns": [
                "bbn\\Db\\Query"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getQueryValues": {
            "name": "getQueryValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getQueryValues(array $cfg): array\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n\n    return $this->language->getQueryValues($cfg);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3541,
            "endLine": 3546,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getQueryValues",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param array $cfg\n   * @return array\n   * @throws Exception\n   *\/"
        },
        "export4Option": {
            "name": "export4Option",
            "summary": "Creates a simplified array for options from a table model",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function export4Option($table_name, $database = ''): array\n  {\n    if ($database) {\n      $table_name = $database . '.' . $table_name; \n    }\n\n    $structure = $this->modelize($table_name);\n    foreach ($structure['keys'] as $k => &$m) {\n      unset($m['ref_db'], $m['constraint']);\n      if (empty($m['ref_table'])) {\n        unset($m['ref_table'], $m['ref_column'], $m['delete'], $m['update']);\n      }\n    }\n    foreach ($structure['fields'] as $k => &$f) {\n      unset($f['position']);\n      if (!in_array($f['type'], ['decimal', 'float', 'double'])) {\n        unset($f['decimals']);\n      }\n      if (!in_array($f['type'], $this->language->getNumericTypes())) {\n        unset($f['signed']);\n      }\n      if (empty($f['defaultExpression']) && is_null($f['default'])) {\n        unset($f['default'], $f['defaultExpression']);\n      }\n      if (empty($f['extra'])) {\n        unset($f['extra']);\n      }\n      if (empty($f['key'])) {\n        unset($f['key']);\n      }\n      if (empty($f['virtual'])) {\n        unset($f['virtual']);\n      }\n      if (empty($f['generation'])) {\n        unset($f['generation']);\n      }\n    }\n\n    return $structure;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3556,
            "endLine": 3595,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "export4Option",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table_name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name"
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Creates a simplified array for options from a table model\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "[type]",
                        "name": "$table",
                        "description": "name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates a simplified array for options from a table model\n   *\n   * @param [type] $table_name\n   * @param string $database\n   * @return array\n   *\/"
        },
        "parseQuery": {
            "name": "parseQuery",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function parseQuery(string $query): ?array\n  {\n    return $this->language->parseQuery($query);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3597,
            "endLine": 3600,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "parseQuery",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "analyzeDatabase": {
            "name": "analyzeDatabase",
            "summary": "Analyzes the given database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function analyzeDatabase(string $database): bool\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n    return $this->language->analyzeDatabase($database);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3609,
            "endLine": 3613,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "analyzeDatabase",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                }
            ],
            "doc": {
                "description": "Analyzes the given database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database",
                        "description": "The database's name"
                    }
                ],
                "return": "True if it succeeded",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Analyzes the given database.\n   *\n   * @param string $database The database's name\n   * @return bool True if it succeeded\n   * @throws Exception\n   *\/"
        },
        "analyzeTable": {
            "name": "analyzeTable",
            "summary": "Analyzes the given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function analyzeTable(string $table): bool\n  {\n    $this->ensureLanguageMethodExists(__FUNCTION__);\n    return $this->language->analyzeTable($table);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3623,
            "endLine": 3627,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "analyzeTable",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ],
            "doc": {
                "description": "Analyzes the given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": "True if it succeeded",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Analyzes the given table.\n   *\n   * @param string $table The table's name\n   * @return bool True if it succeeded\n   * @throws Exception\n   *\/"
        },
        "ensureLanguageMethodExists": {
            "name": "ensureLanguageMethodExists",
            "summary": "Throws ans exception if language class method does not exist.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function ensureLanguageMethodExists(string $method)\n  {\n    if (!method_exists($this->language, $method)) {\n      throw new Exception(X::_('Method %s not found on the language %s class!', $method, $this->engine));\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3636,
            "endLine": 3641,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "ensureLanguageMethodExists",
            "returns": [],
            "arguments": [
                {
                    "name": "method",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Throws ans exception if language class method does not exist.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Throws ans exception if language class method does not exist.\n   *\n   * @param string $method\n   * @throws Exception\n   *\/"
        },
        "cacheInit": {
            "name": "cacheInit",
            "summary": "Initializes the cache object, must be called in __construct",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheInit(): void\n  {\n    if ( \\is_null($this->cache_engine) ){\n      $this->cache_engine = CacheCls::getEngine();\n      $this->_cache_prefix = Str::encodeFilename(str_replace('\\\\', '\/', \\get_class($this)), true).'\/';\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 27,
            "endLine": 33,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheInit",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Initializes the cache object, must be called in __construct\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Initializes the cache object, must be called in __construct\n   *\n   * @return void\n   *\/"
        },
        "cacheCheck": {
            "name": "cacheCheck",
            "summary": "Throws an exception if the cache has not been initialized",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheCheck(): void\n  {\n    if (!$this->cache_engine) {\n      throw new Exception(X::_(\"The cache object has not been initialized\"));\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 41,
            "endLine": 46,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheCheck",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Throws an exception if the cache has not been initialized\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Throws an exception if the cache has not been initialized\n   *\n   * @return void\n   *\/"
        },
        "_cache_name": {
            "name": "_cache_name",
            "summary": "Generates a name for the cache based on the class name and the method called - or a gievn string",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _cache_name($uid, $method = '', string $locale = ''): string\n  {\n    $uid  = (string)$uid;\n    $path = Str::isUid($uid) ? substr($uid, 0, 3).'\/'.substr($uid, 3, 3).'\/'.substr($uid, 6) : $uid;\n    return $this->_cache_prefix.$path.(empty($method) ? '' : '\/'.(string)$method).(empty($locale) ? '' : \"-$locale\");\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 57,
            "endLine": 62,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "_cache_name",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Generates a name for the cache based on the class name and the method called - or a gievn string\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "[type]",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Generates a name for the cache based on the class name and the method called - or a gievn string\n   *\n   * @param [type] $uid\n   * @param string $method\n   * @param string $locale\n   * @return string\n   *\/"
        },
        "cacheDeleteAll": {
            "name": "cacheDeleteAll",
            "summary": "Deletes all the cache related to the current class",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDeleteAll(): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_prefix);\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 70,
            "endLine": 75,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheDeleteAll",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Deletes all the cache related to the current class\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes all the cache related to the current class\n   *\n   * @return self\n   *\/"
        },
        "cacheDelete": {
            "name": "cacheDelete",
            "summary": "Deletes the given cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDelete(string $uid, string $method = ''): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_name($uid, $method));\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 85,
            "endLine": 90,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheDelete",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the given cache\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the given cache\n   *\n   * @param string $uid\n   * @param string $method\n   * @return self\n   *\/"
        },
        "cacheDeleteLocale": {
            "name": "cacheDeleteLocale",
            "summary": "Deletes the given cache for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDeleteLocale(string $uid, string $locale, string $method = ''): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_name($uid, $method, $locale));\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 101,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheDeleteLocale",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the given cache for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the given cache for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @return self\n   *\/"
        },
        "cacheGet": {
            "name": "cacheGet",
            "summary": "Gets the cached data",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGet(string $uid, string $method = ''): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->get($this->_cache_name($uid, $method));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 116,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheGet",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cached data\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cached data\n   *\n   * @param string $uid\n   * @param string $method\n   * @return mixed\n   *\/"
        },
        "cacheGetLocale": {
            "name": "cacheGetLocale",
            "summary": "Gets the cached data for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetLocale(string $uid, string $locale, string $method = ''): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->get($this->_cache_name($uid, $method, $locale));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 131,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetLocale",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cached data for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cached data for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @return mixed\n   *\/"
        },
        "cacheSet": {
            "name": "cacheSet",
            "summary": "Sets the cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheSet(string $uid, string $method = '', $data = null, int $ttl = 0): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->set($this->_cache_name($uid, $method), $data, $ttl);\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 147,
            "endLine": 152,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheSet",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the cache\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the cache\n   *\n   * @param string $uid\n   * @param string $method\n   * @param array|null $data\n   * @param integer $ttl\n   * @return self\n   *\/"
        },
        "cacheSetLocale": {
            "name": "cacheSetLocale",
            "summary": "Sets the cache for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheSetLocale(string $uid, string $locale, string $method = '', $data = null, int $ttl = 0): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->set($this->_cache_name($uid, $method, $locale), $data, $ttl);\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 165,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheSetLocale",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the cache for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the cache for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @param array|null $data\n   * @param integer $ttl\n   * @return self\n   *\/"
        },
        "cacheGetSet": {
            "name": "cacheGetSet",
            "summary": "Gets the cache or creates it if needs to",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetSet(callable $fn, string $uid, $method = '', int $ttl = 0): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->getSet($fn, $this->_cache_name($uid, $method), $ttl);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 182,
            "endLine": 186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetSet",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cache or creates it if needs to\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$fn"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cache or creates it if needs to\n   *\n   * @param callable $fn\n   * @param string $uid\n   * @param string $method\n   * @param integer $ttl\n   * @return mixed\n   *\/"
        },
        "cacheGetSetLocale": {
            "name": "cacheGetSetLocale",
            "summary": "Gets the cache for a specific locale or creates it if needs to",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetSetLocale(callable $fn, string $uid, string $locale, $method = '', int $ttl = 0): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->getSet($fn, $this->_cache_name($uid, $method, $locale), $ttl);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 199,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 3,
            "shortName": "cacheGetSetLocale",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cache for a specific locale or creates it if needs to\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$fn"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cache for a specific locale or creates it if needs to\n   *\n   * @param callable $fn\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @param integer $ttl\n   * @return mixed\n   *\/"
        },
        "cacheHas": {
            "name": "cacheHas",
            "summary": "Checks whether the cache exists and is valid",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheHas(string $uid, string $method = ''): bool\n  {\n    $this->cacheCheck();\n    return $this->cacheGet($uid, $method) ? true : false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 213,
            "endLine": 217,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheHas",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the cache exists and is valid\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the cache exists and is valid\n   *\n   * @param string $uid\n   * @param string $method\n   * @return boolean\n   *\/"
        },
        "cacheHasLocale": {
            "name": "cacheHasLocale",
            "summary": "Checks whether the cache exists and is valid",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheHasLocale(string $uid, string $locale, string $method = ''): bool\n  {\n    $this->cacheCheck();\n    return $this->cacheGetLocale($uid, $locale, $method) ? true : false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 227,
            "endLine": 231,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheHasLocale",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the cache exists and is valid\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the cache exists and is valid\n   *\n   * @param string $uid\n   * @param string $method\n   * @return boolean\n   *\/"
        },
        "retrieverInit": {
            "name": "retrieverInit",
            "summary": "Initialize the retriever by putting its own instance as static property.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Retriever.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function retrieverInit(self $instance): void\n  {\n    self::$retriever_exists = true;\n    if (!self::$retriever_instance) {\n      self::$retriever_instance = $instance;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Retriever",
            "startLine": 31,
            "endLine": 37,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "retrieverInit",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "instance",
                    "position": 0,
                    "type": "self",
                    "type_arr": [
                        "self"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The instance object."
                }
            ],
            "doc": {
                "description": "Initialize the retriever by putting its own instance as static property.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "self",
                        "name": "$instance",
                        "description": "The instance object."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Initialize the retriever by putting its own instance as static property.\n   *\n   * @param self $instance The instance object.\n   * @return void\n   *\/"
        },
        "getInstance": {
            "name": "getInstance",
            "summary": "Returns the instance of the singleton or null.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Retriever.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getInstance(): ?self\n  {\n    return self::$retriever_instance;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Retriever",
            "startLine": 44,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getInstance",
            "returns": [
                null,
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the instance of the singleton or null.\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the instance of the singleton or null.\n   * \n   * @return self\n   *\/"
        },
        "retrieverExists": {
            "name": "retrieverExists",
            "summary": "Returns true if an instance as been initiated.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Retriever.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function retrieverExists(): bool\n  {\n    return self::$retriever_exists;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Retriever",
            "startLine": 54,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "retrieverExists",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns true if an instance as been initiated.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if an instance as been initiated.\n   *\n   * @return bool\n   *\/"
        }
    },
    "properties": {
        "language": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "bbn\\Db\\Languages\\Sql",
            "declaring": {
                "name": "bbn\\Db"
            },
            "declaring_trait": "bbn\\Db",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Sql",
                        "description": "Can be other driver"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "engine": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db"
            },
            "declaring_trait": "bbn\\Db",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The ODBC engine of this connection\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "name": "$engine"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "engines": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db"
            },
            "declaring_trait": "bbn\\Db",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array The database engines allowed",
                "tags": []
            },
            "parent": false,
            "value": {
                "mysql": "nf nf-dev-mysql",
                "pgsql": "nf nf-dev-postgresql",
                "sqlite": "nf nf-dev-sqlite"
            }
        },
        "_cache_prefix": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Cache",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "cache_engine": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Cache",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "retriever_instance": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Retriever",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "self",
                        "description": "An instance of the current class."
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "retriever_exists": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Retriever",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Will be true from the moment an instance exists."
                    }
                ]
            },
            "parent": false,
            "value": false
        }
    },
    "staticProperties": {
        "engines": {
            "mysql": "nf nf-dev-mysql",
            "pgsql": "nf nf-dev-postgresql",
            "sqlite": "nf nf-dev-sqlite"
        },
        "retriever_instance": {},
        "retriever_exists": true
    },
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "bbn\\Db\\Engines": "Engines",
        "bbn\\Db\\Query": "Query",
        "bbn\\Db\\Languages\\Sql": "Sql"
    },
    "dummyComments": [
        "\/**\n * Half ORM half DB management, the simplest class for data queries.\n *\n * Hello world!\n *\n * @category  Database\n * @package Bbn\n * @author Thomas Nabet <thomas.nabet@gmail.com>\n * @license   http:\/\/www.opensource.org\/licenses\/mit-license.php MIT\n * @version Release: <package_version>\n * @link https:\/\/bbn.io\/bbn-php\/doc\/class\/db\n * @since Apr 4, 2011, 23:23:55 +0000\n * @todo Check for the tables and column names legality in _treat_arguments\n *\/"
    ],
    "summary": "Half ORM half DB management, the simplest class for data queries.",
    "description": "Hello world!",
    "description_parts": [
        {
            "type": "text",
            "content": "Hello world!"
        }
    ]
}