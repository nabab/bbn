{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Dbsync",
    "namespace": true,
    "realName": "Dbsync",
    "realNamespace": "bbn\\Appui",
    "traits": [],
    "interfaces": [],
    "fileName": "\/Appui\/Dbsync.php",
    "startLine": 6,
    "endLine": 456,
    "numMethods": 17,
    "numProperties": 11,
    "numConstants": 0,
    "numStaticProperties": 11,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "db": false,
        "dbs": false,
        "has_history": false,
        "tables": [],
        "dbs_table": "dbsync",
        "methods": [],
        "_is_init": false,
        "_is_checked": null,
        "default_cfg": {
            "engine": "sqlite",
            "host": "localhost",
            "db": "dbsync"
        },
        "disabled": false,
        "max_retry": 5
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Dbsync",
    "contentConstructor": null,
    "methods": {
        "__callStatic": {
            "name": "__callStatic",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dbsync",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dbsync.php",
            "static": true,
            "visibility": "public",
            "final": true,
            "code": "  final public static function __callStatic($name, $arguments)\n  {\n    if ( ($name === 'cbf1') || ($name === 'cbf2') ){\n      return \\call_user_func_array(self::$methods[$name], $arguments);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 31,
            "endLine": 36,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "__callStatic",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addMethod": {
            "name": "addMethod",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dbsync",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dbsync.php",
            "static": true,
            "visibility": "public",
            "final": true,
            "code": "  final public static function addMethod($name, $fn){\n    self::$methods[$name] = \\Closure::bind($fn, NULL, __CLASS__);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 38,
            "endLine": 40,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "addMethod",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fn",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "protectedMethod": {
            "name": "protectedMethod",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dbsync",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dbsync.php",
            "static": true,
            "visibility": "protected",
            "final": true,
            "code": "  final protected static function protectedMethod(){\n    echo __METHOD__ . \" was called\" . PHP_EOL;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 42,
            "endLine": 44,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "protectedMethod",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dbsync",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dbsync.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function log(){\n    $args = \\func_get_args();\n    foreach ( $args as $a ){\n      bbn\\X::log($a, 'dbsync');\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 46,
            "endLine": 51,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "def": {
            "name": "def",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dbsync",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dbsync.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function def($dbs, $dbs_table=''){\n    if ( empty($dbs) ){\n      $dbs = self::$default_cfg;\n    }\n    else if ( \\is_string($dbs) ){\n      $db = $dbs;\n      $dbs = self::$default_cfg;\n      $dbs['db'] = $db;\n    }\n    if ( !self::$dbs ){\n      self::$dbs = $dbs;\n    }\n    if ( !empty($dbs_table) ){\n      self::$dbs_table = $dbs_table;\n    }\n    if ( !bbn\\Str::checkName(self::$dbs_table) ){\n      self::log(\"Table name not allowed\", self::$dbs_table);\n      die(\"Table name not allowed\");\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 53,
            "endLine": 72,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "def",
            "returns": [],
            "arguments": [
                {
                    "name": "dbs",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dbs_table",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "init": {
            "name": "init",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dbsync",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dbsync.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "\tpublic static function init(bbn\\Db $db, $dbs='', $tables=[], $dbs_table=''){\n    self::$db = $db;\n    self::def($dbs, $dbs_table);\n    self::$tables = $tables;\n    self::$_is_init = true;\n    if ( \\count(self::$tables) === 0 ){\n      self::$tables = self::$db->getTables();\n    }\n    if ( \\is_array(self::$tables) ){\n      foreach ( self::$tables as $i => $t ){\n        self::$tables[$i] = self::$db->tableFullName($t);\n      }\n      self::$db->setTrigger(\n            '\\\\bbn\\Appui\\\\dbsync::trigger',\n            ['delete', 'update', 'insert'],\n            ['before', 'after'],\n            self::$tables);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 81,
            "endLine": 99,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "init",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dbs",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "tables",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "dbs_table",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "table"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "bbn\\Db",
                        "name": "$db"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$dbs"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$tables"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$dbs",
                        "description": "table"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param bbn\\Db $db\n   * @param string $dbs\n   * @param array $tables\n   * @param string $dbs_table\n   * @return void\n   *\/"
        },
        "isInit": {
            "name": "isInit",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dbsync",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dbsync.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isInit()\n  {\n    return self::$_is_init;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 101,
            "endLine": 104,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isInit",
            "returns": [],
            "arguments": []
        },
        "firstCall": {
            "name": "firstCall",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dbsync",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dbsync.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function firstCall() {\n    if ( \\is_array(self::$dbs) ){\n      self::$dbs = new bbn\\Db(self::$dbs);\n    }\n    if ( class_exists('\\\\bbn\\\\Appui\\\\History') && bbn\\Appui\\History::$is_used ){\n      self::$has_history = 1;\n    }\n    \/** @todo Replace with DB functions *\/\n    if ( (self::$dbs->getEngine() === 'sqlite') && !\\in_array(self::$dbs_table, self::$dbs->getTables()) ){\n      self::$dbs->exec(<<<MYSQL\n        CREATE TABLE \"dbsync\" (\n          \"id\" INTEGER PRIMARY KEY  NOT NULL ,\n          \"db\" TEXT NOT NULL ,\n          \"tab\" TEXT NOT NULL ,\n          \"chrono\" REAL NOT NULL,\n          \"action\" TEXT NOT NULL,\n          \"rows\" TEXT,\"vals\" TEXT,\n          \"state\" INTEGER NOT NULL DEFAULT (0)\n        );\n        CREATE INDEX \"db\" \"dbsync\" (\"db\");\n        CREATE INDEX \"tab\" \"dbsync\" (\"tab\");\n        CREATE INDEX \"chrono\" \"dbsync\" (\"chrono\");\n        CREATE INDEX \"action\" \"dbsync\" (\"action\");\n        CREATE INDEX \"state\" \"dbsync\" (\"state\");\nMYSQL\n      );\n    }\n    else if ( (self::$dbs->getEngine() === 'mysql') && !\\in_array(self::$dbs_table, self::$dbs->getTables()) ){\n      self::$dbs->exec(<<<MYSQL\n        CREATE TABLE IF NOT EXISTS `dbsync` (\n          `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n          `db` varchar(50) NOT NULL,\n          `tab` varchar(50) NOT NULL,\n          `chrono` decimal(14,4) unsigned NOT NULL,\n          `action` varchar(20) NOT NULL,\n          `rows` text,\n          `vals` longtext,\n          `state` int(10) NOT NULL DEFAULT '0'\n        ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n        ALTER TABLE `dbsync`\n          ADD PRIMARY KEY (`id`),\n          ADD KEY `db` (`db`),\n          ADD KEY `tab` (`tab`),\n          ADD KEY `chrono` (`chrono`),\n          ADD KEY `action` (`action`),\n          ADD KEY `state` (`state`);\nMYSQL\n      );\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 106,
            "endLine": 155,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "firstCall",
            "returns": [],
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks if the initialization has been all right",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dbsync",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dbsync.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function check(){\n    if (!isset(self::$_is_checked)) {\n      self::$_is_checked = \\is_object(self::$db) && \\is_object(self::$dbs) && self::$db->check() && self::$dbs->check();\n    }\n    return self::$_is_checked;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 160,
            "endLine": 165,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks if the initialization has been all right\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n\t * Checks if the initialization has been all right\n\t * @return bool\n\t *\/"
        },
        "disable": {
            "name": "disable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dbsync",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dbsync.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function disable(){\n    self::$disabled = 1;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 167,
            "endLine": 169,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "disable",
            "returns": [],
            "arguments": []
        },
        "enable": {
            "name": "enable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dbsync",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dbsync.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function enable(){\n    self::$disabled = false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 171,
            "endLine": 173,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "enable",
            "returns": [],
            "arguments": []
        },
        "isEnabled": {
            "name": "isEnabled",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dbsync",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dbsync.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isEnabled(){\n    return !self::$disabled;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 175,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isEnabled",
            "returns": [],
            "arguments": []
        },
        "trigger": {
            "name": "trigger",
            "summary": "Gets all information about a given table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dbsync",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dbsync.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function trigger(array $cfg){\n    if ( !isset($cfg['run']) ){\n      $cfg['run'] = 1;\n    }\n    if ( !isset($cfg['trig']) ){\n      $cfg['run'] = 1;\n    }\n    if (self::$disabled) {\n      return $cfg;\n    }\n    self::firstCall();\n    if (self::check() &&\n      (count($cfg['tables']) === 1) &&\n      ($table = self::$db->tfn(current($cfg['tables']))) &&\n      \\in_array($table, self::$tables, true)\n    ){\n      if ( $cfg['moment'] === 'after' ){\n        \/\/ Case where we actually delete or restore through the $hcol column\n        $values = [];\n        if ( !empty($cfg['fields']) && !empty($cfg['values']) ){\n          foreach ( $cfg['fields'] as $i => $f ){\n            $values[$f] = $cfg['values'][$i];\n          }\n        }\n        self::$dbs->insert(self::$dbs_table, [\n          'db' => self::$db->getCurrent(),\n          'tab' => self::$db->tsn($table),\n          'action' => $cfg['kind'],\n          'chrono' => microtime(true),\n          'rows' => empty($cfg['where']) ? '[]' : bbn\\X::jsonBase64Encode($cfg['where']),\n          'vals' => empty($values) ? '[]' : bbn\\X::jsonBase64Encode($values)\n        ]);\n      }\n    }\n    return $cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 185,
            "endLine": 220,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "trigger",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Configuration array"
                }
            ],
            "doc": {
                "description": "Gets all information about a given table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "Configuration array"
                    }
                ],
                "return": "Resulting configuration"
            },
            "comments": "  \/**\n\t * Gets all information about a given table\n   *\n   * @param array $cfg Configuration array\n\t * @return array Resulting configuration\n\t *\/"
        },
        "callback1": {
            "name": "callback1",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dbsync",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dbsync.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function callback1(\\Closure $f){\n    self::addMethod('cbf1', $f);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 222,
            "endLine": 224,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "callback1",
            "returns": [],
            "arguments": [
                {
                    "name": "f",
                    "position": 0,
                    "type": "Closure",
                    "type_arr": [
                        "Closure"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "callback2": {
            "name": "callback2",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dbsync",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dbsync.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function callback2(\\Closure $f){\n    self::addMethod('cbf2', $f);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 226,
            "endLine": 228,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "callback2",
            "returns": [],
            "arguments": [
                {
                    "name": "f",
                    "position": 0,
                    "type": "Closure",
                    "type_arr": [
                        "Closure"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "deleteCompleted": {
            "name": "deleteCompleted",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dbsync",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dbsync.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function deleteCompleted(float $start = null)\n  {\n    if (!self::isInit()) {\n      die(\"DB sync is not initiated\");\n    }\n    if (!$start\n        || !($start = self::$dbs->selectOne(self::$dbs_table, 'MIN(chrono)', [\n          ['db', 'NOT LIKE', self::$db->getCurrent()],\n          'state' => 0\n        ]))\n    ) {\n      $start = time();\n    }\n    \/\/ Deleting the entries prior to this sync we produced and have been seen by the twin process\n    return self::$dbs->delete(self::$dbs_table, [\n      'db' => self::$db->getCurrent(),\n      'state'=> 1,\n      ['chrono', '<', $start]\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 230,
            "endLine": 249,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "deleteCompleted",
            "returns": [],
            "arguments": [
                {
                    "name": "start",
                    "position": 0,
                    "type": "null|float",
                    "type_arr": [
                        "null",
                        "float"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "sync": {
            "name": "sync",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dbsync",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dbsync.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function sync(bbn\\Db $db, $dbs='', $dbs_table='', $num_try = 0)\n  {\n    if (!self::isInit()) {\n      die(\"DB sync is not initiated\");\n    }\n    self::disable();\n    $mode_db = self::$db->getErrorMode();\n    $mode_dbs = self::$dbs->getErrorMode();\n    self::$db->setErrorMode(\"continue\");\n    self::$dbs->setErrorMode(\"continue\");\n    if ( !$num_try ){\n      self::def($dbs, $dbs_table);\n      self::firstCall();\n    }\n\n    $num_try++;\n\n    $to_log = [\n      'deleted_sync' => 0,\n      'deleted_real' => 0,\n      'updated_sync' => 0,\n      'updated_real' => 0,\n      'inserted_sync' => 0,\n      'inserted_real' => 0,\n      'num_problems' => 0,\n      'problems' => []\n    ];\n\n    $to_log['deleted_sync'] = self::deleteCompleted();\n\n    $retry = false;\n\n    \/\/ Selecting the entries inserted\n    $ds = self::$dbs->rselectAll(self::$dbs_table, ['id', 'tab', 'vals', 'chrono'], [\n      ['db', '!=', self::$db->getCurrent()],\n      ['state', '=', 0],\n      ['action', 'LIKE', 'INSERT']\n    ], [\n      'chrono' => 'ASC',\n      'id' => 'ASC'\n    ]);\n    \/\/ They just have to be inserted\n    foreach ( $ds as $i => $d ){\n      if ( isset(self::$methods['cbf1']) ){\n        self::cbf1($d);\n      }\n      $vals = \\bbn\\X::jsonBase64Decode($d['vals']);\n      if ( !\\is_array($vals) ){\n        $to_log['num_problems']++;\n        $to_log['problems'][] = \"Hey, look urgently at the row $d[id]!\";\n      }\n      else if ( self::$db->insert($d['tab'], $vals) ){\n        if ( isset(self::$methods['cbf2']) ){\n          self::cbf2($d);\n        }\n        $to_log['inserted_sync']++;\n        self::$dbs->update(self::$dbs_table, [\"state\" => 1], [\"id\" => $d['id']]);\n      }\n      else if ( self::$db->select($d['tab'], [], $vals) ){\n        self::$dbs->update(self::$dbs_table, [\"state\" => 1], [\"id\" => $d['id']]);\n      }\n      else{\n        if ( $num_try > self::$max_retry ){\n          $to_log['num_problems']++;\n          $to_log['problems'][] = \"Problem while syncing (insert), check data with status 5 and ID \".$d['id'];\n          self::$dbs->update(self::$dbs_table, [\"state\" => 5], [\"id\" => $d['id']]);\n        }\n        $retry = 1;\n      }\n    }\n\n\n    \/\/ Selecting the entries modified and deleted in the twin DB,\n    \/\/ ordered by table and rows (so the same go together)\n    $ds = self::$dbs->rselectAll(self::$dbs_table, ['id', 'tab', 'action', 'rows', 'vals', 'chrono'], [\n      ['db', '!=', self::$db->getCurrent()],\n      ['state', '=', 0],\n      ['rows', '!=', '[]'],\n      ['action', '!=', 'insert']\n    ], [\n      'tab' => 'ASC',\n      'rows' => 'ASC',\n      'chrono' => 'ASC',\n      'id' => 'ASC'\n    ]);\n    foreach ( $ds as $i => $d ){\n      \/\/ Executing the first callback\n      $d['rows'] = bbn\\X::jsonBase64Decode($d['rows']);\n      $d['vals'] = bbn\\X::jsonBase64Decode($d['vals']);\n      if ( isset(self::$methods['cbf1']) ){\n        self::cbf1($d);\n      }\n      \/\/ Proceeding to the actions: delete is before\n      if ( strtolower($d['action']) === 'delete' ){\n        if ( self::$db->delete($d['tab'], $d['rows']) ){\n          self::$dbs->update(self::$dbs_table, [\"state\" => 1], [\"id\" => $d['id']]);\n          $to_log['deleted_real']++;\n        }\n        else if ( !self::$db->select($d['tab'], [], $d['rows']) ){\n          self::$dbs->update(self::$dbs_table, [\"state\" => 1], [\"id\" => $d['id']]);\n        }\n        else{\n          if ( $num_try > self::$max_retry ){\n            self::$dbs->update(self::$dbs_table, [\"state\" => 5], [\"id\" => $d['id']]);\n            $to_log['num_problems']++;\n            $to_log['problems'][] = \"Problem while syncing (delete), check data with status 5 and ID \".$d['id'];\n          }\n          $retry = 1;\n        }\n      }\n      \/\/ Checking if there is another change done to this record and when in the twin DB\n      $next_time = (\n              isset($ds[$i+1]) &&\n              ($ds[$i+1]['tab'] === $d['tab']) &&\n              ($ds[$i+1]['rows'] === $d['rows'])\n            ) ? $ds[$i+1]['chrono'] : microtime();\n      \/\/ Looking for the actions done on this specific record in our database\n      \/\/ between the twin change and the next (or now if there is no other change)\n      $each = self::$dbs->rselectAll(self::$dbs_table, ['id', 'chrono', 'action', 'vals'], [\n        ['db', '=', self::$db->getCurrent()],\n        ['tab', '=', $d['tab']],\n        ['rows', '=', $d['rows']],\n        ['chrono', '>=', $d['chrono']],\n        ['chrono', '<', $next_time],\n      ]);\n      if ( \\count($each) > 0 ){\n        $to_log['num_problems']++;\n        $to_log['problems'][] = \"Conflict!\";\n        $to_log['problems'][] = $d;\n        foreach ( $each as $e ){\n          $e['vals'] = bbn\\X::jsonBase64Decode($e['vals']);\n          \/\/ If it's deleted locally and updated on the twin we restore\n          if ( strtolower($e['action']) === 'delete' ){\n            if ( strtolower($d['action']) === 'update' ){\n              if ( !self::$db->insertUpdate(\n                      $d['tab'],\n                      bbn\\X::mergeArrays(\n                        $e['vals'],\n                        $d['vals']\n                      ))\n              ){\n                $to_log['num_problems']++;\n                $to_log['problems'][] = \"insert_update number 1 had a problem\";\n              }\n            }\n          }\n          \/\/ If it's updated locally and deleted in the twin we restore\n          else if ( strtolower($e['action']) === 'update' ){\n            if ( strtolower($d['action']) === 'delete' ){\n              if ( !self::$db->insertUpdate($d['tab'], bbn\\X::mergeArrays($d['vals'], $e['vals'])) ){\n                $to_log['num_problems']++;\n                $to_log['problems'][] = \"insert_update had a problem\";\n              }\n            }\n          \/\/ If it's updated locally and in the twin we merge the values for the update\n            else if ( strtolower($d['action']) === 'update' ){\n              $d['vals'] = bbn\\X::mergeArrays($d['vals'], $e['vals']);\n            }\n          }\n        }\n      }\n      \/\/ Proceeding to the actions update is after in case we needed to restore\n      if ( strtolower($d['action']) === 'update' ){\n        \\bbn\\X::log(bbn\\X::mergeArrays($d['rows'], $d['vals']), 'synct');\n        if ( self::$db->update($d['tab'], $d['vals'], $d['rows']) ){\n          self::$dbs->update(self::$dbs_table, [\"state\" => 1], [\"id\" => $d['id']]);\n          $to_log['updated_real']++;\n        }\n        elseif ( self::$db->count($d['tab'], bbn\\X::mergeArrays($d['rows'], $d['vals'])) ){\n          self::$dbs->update(self::$dbs_table, [\"state\" => 1], [\"id\" => $d['id']]);\n        }\n        else{\n          if ( $num_try > self::$max_retry ){\n            self::$dbs->update(self::$dbs_table, [\"state\" => 5], [\"id\" => $d['id']]);\n            $to_log['num_problems']++;\n            $to_log['problems'][] = \"Problem while syncing (update), check data with status 5 and ID \".$d['id'];\n          }\n          $retry = 1;\n        }\n      }\n      \/\/ Callback number 2\n      if ( isset(self::$methods['cbf2']) ){\n        self::cbf2($d);\n      }\n    }\n\n\n    $res = [];\n    foreach ( $to_log as $k => $v ){\n      if ( !empty($v) ){\n        $res[$k] = $v;\n      }\n    }\n    self::$db->setErrorMode($mode_db);\n    self::$dbs->setErrorMode($mode_dbs);\n    self::enable();\n    if ( $retry && ( $num_try <= self::$max_retry ) ){\n      $res = bbn\\X::mergeArrays($res, self::sync($db, $dbs, $dbs_table, $num_try));\n    }\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 254,
            "endLine": 454,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "sync",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dbs",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dbs_table",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "num_try",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "db": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dbsync"
            },
            "declaring_trait": "bbn\\Appui\\Dbsync",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "db",
                        "description": "The DB connection"
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "dbs": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dbsync"
            },
            "declaring_trait": "bbn\\Appui\\Dbsync",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": false,
            "value": false
        },
        "has_history": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dbsync"
            },
            "declaring_trait": "bbn\\Appui\\Dbsync",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": false,
            "value": false
        },
        "tables": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dbsync"
            },
            "declaring_trait": "bbn\\Appui\\Dbsync",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": false,
            "value": []
        },
        "dbs_table": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dbsync"
            },
            "declaring_trait": "bbn\\Appui\\Dbsync",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": false,
            "value": "dbsync"
        },
        "methods": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dbsync"
            },
            "declaring_trait": "bbn\\Appui\\Dbsync",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": []
        },
        "_is_init": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dbsync"
            },
            "declaring_trait": "bbn\\Appui\\Dbsync",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": false
        },
        "_is_checked": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dbsync"
            },
            "declaring_trait": "bbn\\Appui\\Dbsync",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "default_cfg": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dbsync"
            },
            "declaring_trait": "bbn\\Appui\\Dbsync",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": {
                "engine": "sqlite",
                "host": "localhost",
                "db": "dbsync"
            }
        },
        "disabled": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dbsync"
            },
            "declaring_trait": "bbn\\Appui\\Dbsync",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": false
        },
        "max_retry": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dbsync"
            },
            "declaring_trait": "bbn\\Appui\\Dbsync",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": 5
        }
    },
    "staticProperties": {
        "db": false,
        "dbs": false,
        "has_history": false,
        "tables": [],
        "dbs_table": "dbsync",
        "methods": [],
        "_is_init": false,
        "_is_checked": null,
        "default_cfg": {
            "engine": "sqlite",
            "host": "localhost",
            "db": "dbsync"
        },
        "disabled": false,
        "max_retry": 5
    },
    "constants": null,
    "uses": {
        "bbn": "bbn"
    },
    "dummyComments": [],
    "summary": "",
    "description": "",
    "description_parts": []
}