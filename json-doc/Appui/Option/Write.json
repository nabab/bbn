{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Option\\Write",
    "namespace": true,
    "realName": "Write",
    "realNamespace": "bbn\\Appui\\Option",
    "traits": [],
    "interfaces": [],
    "fileName": "\/Appui\/Option\/Write.php",
    "startLine": 10,
    "endLine": 1050,
    "numMethods": 18,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": true,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": [],
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui\\Option",
    "shortName": "Write",
    "contentConstructor": null,
    "methods": {
        "add": {
            "name": "add",
            "summary": "Creates a new option or a new hierarchy by adding row(s) in the options' table",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->add([\n  'id_parent' => $opt->fromCode('bbn_ide'),\n  'text' => 'My new option',\n  'code' => 'new_opt',\n  'myProperty' => 'my value'\n]));\n\/\/ (int) 49  New ID\nX::dump($opt->add([\n  'id_parent' => $opt->fromCode('bbn_ide'),\n  'text' => 'My new option',\n  'code' => 'new_opt',\n  'myProperty' => 'my value'\n  'items' => [\n    [\n      'code' => \"test\",\n      'text' => \"Test\",\n      'myProperty' => \"My property's value\",\n    ],\n    [\n      'code' => \"test2\",\n      'text' => \"Test 2\",\n      'myProperty' => \"My property's value\",\n      'items' => [\n        [\n          'code' => \"test8\",\n          'text' => \"Test 8\",\n        ]\n      ]\n    ]\n  ]\n], true, true));\n\/\/ (int) 4 Number of inserted\/modified rows"
                }
            ],
            "class": "bbn\\Appui\\Option\\Write",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function add(array $it, $force = false, $return_num = false, $with_id = false)\n  {\n    if ($this->check()) {\n      $res   = $return_num ? 0 : null;\n      $items = !empty($it['items']) && \\is_array($it['items']) ? $it['items'] : false;\n      $id    = null;\n      try {\n        $this->_prepare($it);\n      }\n      catch (Exception $e) {\n        throw new Exception($e->getMessage());\n      }\n\n      if ($it) {\n\n        $c =& $this->fields;\n        if ($it[$c['code']]) {\n          $id = $this->db->selectOne(\n            $this->class_cfg['table'],\n            $c['id'],\n            [\n              $c['id_parent'] => $it[$c['id_parent']],\n              $c['code'] => $it[$c['code']]\n            ]\n          );\n        }\n        elseif (!empty($it[$c['id']])) {\n          $id = $this->db->selectOne(\n            $this->class_cfg['table'],\n            $c['id'],\n            [\n              $c['id'] => $it[$c['id']],\n              $c['code'] => null\n            ]\n          );\n        }\n\n        if ($id\n            && $force\n            && (null !== $it[$c['code']])\n        ) {\n          try {\n            $res = (int)$this->db->update(\n              $this->class_cfg['table'],\n              [\n                $c['text'] => $it[$c['text']],\n                $c['id_alias'] => $it[$c['id_alias']],\n                $c['value'] => $it[$c['value']],\n                $c['num'] => $it[$c['num']] ?? null,\n                $c['cfg'] => $it[$c['cfg']] ?? null\n              ],\n              [$c['id'] => $id]\n            );\n          }\n          catch (Exception $e) {\n            $this->log([X::_(\"Impossible to update the option\"), $it]);\n            throw new Exception(X::_(\"Impossible to update the option\"));\n          }\n        }\n\n        $values = [\n          $c['id_parent'] => $it[$c['id_parent']],\n          $c['text'] => $it[$c['text']],\n          $c['code'] => empty($it[$c['code']]) ? null : $it[$c['code']],\n          $c['id_alias'] => $it[$c['id_alias']],\n          $c['value'] => $it[$c['value']],\n          $c['num'] => $it[$c['num']] ?? null,\n          $c['cfg'] => $it[$c['cfg']] ?? null\n        ];\n\n        if (isset($it[$c['id']]) && !$this->exists($it[$c['id']])) {\n          $values[$c['id']] = $it[$c['id']];\n        }\n\n        if (!empty($it[$c['id']]) && $with_id) {\n          $values[$c['id']] = $it[$c['id']];\n        }\n\n        if (!$id) {\n          try {\n            $res = (int)$this->db->insert($this->class_cfg['table'], $values);\n          }\n          catch (Exception $e) {\n            X::log([X::_(\"Impossible to add the option\"), $values], 'OptionAddErrors');\n            throw new Exception(\n              X::_(\"Impossible to add the option\") . ':' . PHP_EOL . \n              X::getDump($values) . $e->getMessage()\n            );\n          }\n\n          $id = $this->db->lastId();\n        }\n\n        if ($res) {\n          $this->deleteCache($id);\n        }\n\n        if ($items && Str::isUid($id)) {\n          foreach ($items as $item){\n            $item[$c['id_parent']] = $id;\n            $res              += (int)$this->add($item, $force, $return_num, $with_id);\n          }\n        }\n      }\n      else {\n        X::log($it, 'OptionAddErrors');\n      }\n\n      return $return_num ? $res : $id;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 57,
            "endLine": 169,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "add",
            "returns": [],
            "arguments": [
                {
                    "name": "it",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The option configuration"
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "Determines if the option should be updated if it already exists"
                },
                {
                    "name": "return_num",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "num If set to true the function will return the number of rows inserted otherwise the ID of the newly created option"
                },
                {
                    "name": "with_id",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "id"
                }
            ],
            "doc": {
                "description": "Creates a new option or a new hierarchy by adding row(s) in the options' table\n\n```php\nX::dump($opt->add([\n  'id_parent' => $opt->fromCode('bbn_ide'),\n  'text' => 'My new option',\n  'code' => 'new_opt',\n  'myProperty' => 'my value'\n]));\n\/\/ (int) 49  New ID\nX::dump($opt->add([\n  'id_parent' => $opt->fromCode('bbn_ide'),\n  'text' => 'My new option',\n  'code' => 'new_opt',\n  'myProperty' => 'my value'\n  'items' => [\n    [\n      'code' => \"test\",\n      'text' => \"Test\",\n      'myProperty' => \"My property's value\",\n    ],\n    [\n      'code' => \"test2\",\n      'text' => \"Test 2\",\n      'myProperty' => \"My property's value\",\n      'items' => [\n        [\n          'code' => \"test8\",\n          'text' => \"Test 8\",\n        ]\n      ]\n    ]\n  ]\n], true, true));\n\/\/ (int) 4 Number of inserted\/modified rows\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$it",
                        "description": "The option configuration"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$force",
                        "description": "Determines if the option should be updated if it already exists"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$return",
                        "description": "num If set to true the function will return the number of rows inserted otherwise the ID of the newly created option"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates a new option or a new hierarchy by adding row(s) in the options' table\n   *\n   * ```php\n   * X::dump($opt->add([\n   *   'id_parent' => $opt->fromCode('bbn_ide'),\n   *   'text' => 'My new option',\n   *   'code' => 'new_opt',\n   *   'myProperty' => 'my value'\n   * ]));\n   * \/\/ (int) 49  New ID\n   * X::dump($opt->add([\n   *   'id_parent' => $opt->fromCode('bbn_ide'),\n   *   'text' => 'My new option',\n   *   'code' => 'new_opt',\n   *   'myProperty' => 'my value'\n   *   'items' => [\n   *     [\n   *       'code' => \"test\",\n   *       'text' => \"Test\",\n   *       'myProperty' => \"My property's value\",\n   *     ],\n   *     [\n   *       'code' => \"test2\",\n   *       'text' => \"Test 2\",\n   *       'myProperty' => \"My property's value\",\n   *       'items' => [\n   *         [\n   *           'code' => \"test8\",\n   *           'text' => \"Test 8\",\n   *         ]\n   *       ]\n   *     ]\n   *   ]\n   * ], true, true));\n   * \/\/ (int) 4 Number of inserted\/modified rows\n   * ```\n   *\n   * @param array   $it         The option configuration\n   * @param boolean $force      Determines if the option should be updated if it already exists\n   * @param boolean $return_num If set to true the function will return the number of rows inserted otherwise the ID of the newly created option\n   * @param bool $with_id\n   * @return int|string|null\n   *\/"
        },
        "set": {
            "name": "set",
            "summary": "Updates an option's row (without changing cfg)",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->set(12, [\n  'id_parent' => $opt->fromCode('bbn_ide'),\n  'text' => 'My new option',\n  'code' => 'new_opt',\n  'myProperty' => 'my value'\n  'cfg' => [\n    'sortable' => true,\n    'Description' => \"I am a cool option\"\n  ]\n]);\n\/\/ (int) 1"
                }
            ],
            "class": "bbn\\Appui\\Option\\Write",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function set($id, array $data)\n  {\n    if ($this->check() && $this->_prepare($data)) {\n      if (isset($data['id'])) {\n        unset($data['id']);\n      }\n\n      $c =& $this->fields;\n      \/\/ id_parent cannot be edited this way\n      if ($res = $this->db->update(\n        $this->class_cfg['table'],\n        [\n          $c['text'] => $data[$c['text']],\n          $c['code'] => !empty($data[$c['code']]) ? $data[$c['code']] : null,\n          $c['id_alias'] => !empty($data[$c['id_alias']]) ? $data[$c['id_alias']] : null,\n          $c['value'] => $data[$c['value']]\n        ],\n        [$c['id'] => $id]\n      )\n      ) {\n        $this->deleteCache($id);\n        return $res;\n      }\n\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 193,
            "endLine": 220,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "set",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Updates an option's row (without changing cfg)\n\n```php\nX::dump($opt->set(12, [\n  'id_parent' => $opt->fromCode('bbn_ide'),\n  'text' => 'My new option',\n  'code' => 'new_opt',\n  'myProperty' => 'my value'\n  'cfg' => [\n    'sortable' => true,\n    'Description' => \"I am a cool option\"\n  ]\n]);\n\/\/ (int) 1\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates an option's row (without changing cfg)\n   *\n   * ```php\n   * X::dump($opt->set(12, [\n   *   'id_parent' => $opt->fromCode('bbn_ide'),\n   *   'text' => 'My new option',\n   *   'code' => 'new_opt',\n   *   'myProperty' => 'my value'\n   *   'cfg' => [\n   *     'sortable' => true,\n   *     'Description' => \"I am a cool option\"\n   *   ]\n   * ]);\n   * \/\/ (int) 1\n   * ```\n   *\n   * @param string   $id\n   * @param array $data\n   * @return int\n   *\/"
        },
        "merge": {
            "name": "merge",
            "summary": "Updates an option's row by merging the data and cfg.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->merge(12, [\n  'id_parent' => $opt->fromCode('bbn_ide'),\n  'text' => 'My new option',\n  'code' => 'new_opt',\n  'myProperty' => 'my value'\n  'cfg' => [\n    'sortable' => true,\n    'Description' => \"I am a cool option\"\n  ]\n]);\n\/\/ (int) 1"
                }
            ],
            "class": "bbn\\Appui\\Option\\Write",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function merge(string $id, array $data, array $cfg = null)\n  {\n    if ($this->check()\n        && ($o = $this->option($id))\n    ) {\n      $c =& $this->fields;\n      $o[$c['text']] = $this->rawText($o[$c['id']]);\n      if (!empty($data)) {\n        $data = array_merge($o, $data);\n        $this->_prepare($data);\n        if (isset($data[$c['id']])) {\n          unset($data[$c['id']]);\n        }\n      }\n\n      if ($cfg) {\n        $ocfg        = $this->getRawCfg($id);\n        $data[$c['cfg']] = json_encode(array_merge($ocfg ? json_decode($ocfg, true) : [], $cfg));\n      }\n\n      \/\/ id_parent cannot be edited this way\n      if ($res = $this->db->update(\n        $this->class_cfg['table'],\n        $data,\n        [$c['id'] => $id]\n      )\n      ) {\n        $this->deleteCache($id);\n        return $res;\n      }\n\n      return 0;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 246,
            "endLine": 281,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "merge",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 2,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Updates an option's row by merging the data and cfg.\n\n```php\nX::dump($opt->merge(12, [\n  'id_parent' => $opt->fromCode('bbn_ide'),\n  'text' => 'My new option',\n  'code' => 'new_opt',\n  'myProperty' => 'my value'\n  'cfg' => [\n    'sortable' => true,\n    'Description' => \"I am a cool option\"\n  ]\n]);\n\/\/ (int) 1\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Updates an option's row by merging the data and cfg.\n   *\n   * ```php\n   * X::dump($opt->merge(12, [\n   *   'id_parent' => $opt->fromCode('bbn_ide'),\n   *   'text' => 'My new option',\n   *   'code' => 'new_opt',\n   *   'myProperty' => 'my value'\n   *   'cfg' => [\n   *     'sortable' => true,\n   *     'Description' => \"I am a cool option\"\n   *   ]\n   * ]);\n   * \/\/ (int) 1\n   * ```\n   *\n   * @param string $id\n   * @param array $data\n   * @param array|null $cfg\n   * @return int|null\n   * @throws Exception\n   *\/"
        },
        "remove": {
            "name": "remove",
            "summary": "Deletes a row from the options table, deletes the cache and fix order if needed",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->remove(12));\n\/\/ (int) 12 Number of options deleted\nX::dump($opt->remove(12));\n\/\/ (null) The option doesn't exist anymore"
                }
            ],
            "class": "bbn\\Appui\\Option\\Write",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function remove(...$codes)\n  {\n    if (Str::isUid($id = $this->fromCode(...$codes))\n        && ($id !== $this->default)\n        && ($id !== $this->root)\n        && Str::isUid($id_parent = $this->getIdParent($id))\n    ) {\n      $num = 0;\n      if ($items = $this->items($id)) {\n        foreach ($items as $it){\n          $num += (int)$this->remove($it);\n        }\n      }\n\n      $this->deleteCache($id);\n      $this->db->update(\n        $this->class_cfg['table'], [\n          $this->fields['code'] => null\n        ], [\n          $this->fields['id'] => $id\n        ]\n      );\n      $num += (int)$this->db->delete(\n        $this->class_cfg['table'], [\n          $this->fields['id'] => $id\n        ]\n      );\n      if ($this->isSortable($id_parent)) {\n        $this->fixOrder($id_parent);\n      }\n\n      return $num;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 297,
            "endLine": 332,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "remove",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Deletes a row from the options table, deletes the cache and fix order if needed\n\n```php\nX::dump($opt->remove(12));\n\/\/ (int) 12 Number of options deleted\nX::dump($opt->remove(12));\n\/\/ (null) The option doesn't exist anymore\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "The number of affected rows or null if option not found"
            },
            "comments": "  \/**\n   * Deletes a row from the options table, deletes the cache and fix order if needed\n   *\n   * ```php\n   * X::dump($opt->remove(12));\n   * \/\/ (int) 12 Number of options deleted\n   * X::dump($opt->remove(12));\n   * \/\/ (null) The option doesn't exist anymore\n   * ```\n   *\n   * @param string $code Any option(s) accepted by {@link fromCode()}\n   * @return int|null The number of affected rows or null if option not found\n   *\/"
        },
        "removeFull": {
            "name": "removeFull",
            "summary": "Deletes an option row with all it's hierarchical structure from the options table and deletes the cache.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->removeFull(12));\n\/\/ (int) 12 Number of options deleted\nX::dump($opt->removeFull(12));\n\/\/ (null) The option doesn't exist anymore"
                }
            ],
            "class": "bbn\\Appui\\Option\\Write",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeFull($code)\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))\n        && ($id !== $this->default)\n        && ($id !== $this->root)\n    ) {\n      $res = 0;\n      $this->deleteCache($id);\n      $all = $this->treeIds($id);\n\n      $has_history = History::isEnabled() && History::isLinked($this->class_cfg['table']);\n      foreach (array_reverse($all) as $a){\n        if ($has_history) {\n          $res += (int)$this->db->delete('bbn_history_uids', ['bbn_uid' => $a]);\n        }\n        else{\n          $res += (int)$this->db->delete($this->class_cfg['table'], [$this->fields['id'] => $a]);\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 348,
            "endLine": 372,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeFull",
            "returns": [],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()} or the uid"
                }
            ],
            "doc": {
                "description": "Deletes an option row with all it's hierarchical structure from the options table and deletes the cache.\n\n```php\nX::dump($opt->removeFull(12));\n\/\/ (int) 12 Number of options deleted\nX::dump($opt->removeFull(12));\n\/\/ (null) The option doesn't exist anymore\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()} or the uid"
                    }
                ],
                "return": "The number of affected rows or null if option not found"
            },
            "comments": "  \/**\n   * Deletes an option row with all it's hierarchical structure from the options table and deletes the cache.\n   *\n   * ```php\n   * X::dump($opt->removeFull(12));\n   * \/\/ (int) 12 Number of options deleted\n   * X::dump($opt->removeFull(12));\n   * \/\/ (null) The option doesn't exist anymore\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()} or the uid\n   * @return int|null The number of affected rows or null if option not found\n   *\/"
        },
        "setAlias": {
            "name": "setAlias",
            "summary": "Sets the alias of an option",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->setAlias(26, 32));\n\/\/ (int) 1"
                }
            ],
            "class": "bbn\\Appui\\Option\\Write",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setAlias($id, $alias = null)\n  {\n    $res = null;\n    if ($this->check()) {\n      $res = $this->db->updateIgnore(\n        $this->class_cfg['table'], [\n        $this->fields['id_alias'] => $alias ?: null\n        ], [\n        $this->fields['id'] => $id\n        ]\n      );\n      if ($res) {\n        $this->deleteCache($id);\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 387,
            "endLine": 404,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setAlias",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The ID of the option to be updated"
                },
                {
                    "name": "alias",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The alias' option ID"
                }
            ],
            "doc": {
                "description": "Sets the alias of an option\n\n```php\nX::dump($opt->setAlias(26, 32));\n\/\/ (int) 1\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The ID of the option to be updated"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$alias",
                        "description": "The alias' option ID"
                    }
                ],
                "return": "The number of affected rows"
            },
            "comments": "  \/**\n   * Sets the alias of an option\n   *\n   * ```php\n   * X::dump($opt->setAlias(26, 32));\n   * \/\/ (int) 1\n   * ```\n   *\n   * @param string      $id    The ID of the option to be updated\n   * @param string|null $alias The alias' option ID\n   * @return int The number of affected rows\n   *\/"
        },
        "setText": {
            "name": "setText",
            "summary": "Sets the text of an option",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->setText(26, \"Hello world!\"));\n\/\/ (int) 1"
                }
            ],
            "class": "bbn\\Appui\\Option\\Write",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setText($id, ?string $text)\n  {\n    $res = null;\n    if ($this->check()) {\n      $res = $this->db->updateIgnore(\n        $this->class_cfg['table'], [\n        $this->fields['text'] => $text\n        ], [\n          $this->fields['id'] => $id\n        ]\n      );\n      if ($res) {\n        $this->deleteCache($id);\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 419,
            "endLine": 436,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setText",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The ID of the option to be updated"
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The new text"
                }
            ],
            "doc": {
                "description": "Sets the text of an option\n\n```php\nX::dump($opt->setText(26, \"Hello world!\"));\n\/\/ (int) 1\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id",
                        "description": "The ID of the option to be updated"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$text",
                        "description": "The new text"
                    }
                ],
                "return": "The number of affected rows"
            },
            "comments": "  \/**\n   * Sets the text of an option\n   *\n   * ```php\n   * X::dump($opt->setText(26, \"Hello world!\"));\n   * \/\/ (int) 1\n   * ```\n   *\n   * @param int    $id   The ID of the option to be updated\n   * @param string $text The new text\n   * @return int The number of affected rows\n   *\/"
        },
        "setCode": {
            "name": "setCode",
            "summary": "Sets the code of an option",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->setCode(26, \"HWD\"));\n\/\/ (int) 1"
                }
            ],
            "class": "bbn\\Appui\\Option\\Write",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setCode($id, string $code = null)\n  {\n    if ($this->check()) {\n      return $this->db->updateIgnore(\n        $this->class_cfg['table'], [\n        $this->fields['code'] => $code ?: null\n        ], [\n        $this->fields['id'] => $id\n        ]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 451,
            "endLine": 464,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setCode",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The ID of the option to be updated"
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The new code"
                }
            ],
            "doc": {
                "description": "Sets the code of an option\n\n```php\nX::dump($opt->setCode(26, \"HWD\"));\n\/\/ (int) 1\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id",
                        "description": "The ID of the option to be updated"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$code",
                        "description": "The new code"
                    }
                ],
                "return": "The number of affected rows"
            },
            "comments": "  \/**\n   * Sets the code of an option\n   *\n   * ```php\n   * X::dump($opt->setCode(26, \"HWD\"));\n   * \/\/ (int) 1\n   * ```\n   *\n   * @param int $id The ID of the option to be updated\n   * @param string|null $code The new code\n   * @return int|null The number of affected rows\n   *\/"
        },
        "setValue": {
            "name": "setValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option\\Write",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setValue(array $value, $id): ?int\n  {\n    if ($this->check() && $this->dbTraitExists($id)) {\n      $c =& $this->class_cfg;\n      $f =& $this->fields;\n      $this->cacheDelete($id);\n      return $this->db->update(\n        $c['table'],\n        [$f['value'] => json_encode($value)],\n        [$f['id'] => $id]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 473,
            "endLine": 487,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setValue",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "value",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$value"
                    },
                    {
                        "tag": "param",
                        "type": "$id"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param array $value\n   * @param $id\n   * @return int|null\n   * @throws Exception\n   *\/"
        },
        "setProp": {
            "name": "setProp",
            "summary": "Updates option's properties derived from the value column",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->setProp(12, 'myProperty', \"78%\"));\n\/\/ (int) 1\nX::dump($opt->setProp(12, ['myProperty' => \"78%\"]));\n\/\/ (int) 0 Already updated, no change done\nX::dump($opt->setProp(9654, ['myProperty' => \"78%\"]));\n\/\/ (bool) false Option not found\nX::dump($opt->setProp(12, ['myProperty' => \"78%\", 'myProperty2' => \"42%\"]));\n\/\/ (int) 1\nX::dump($opt->option(12));\n\/*\nBefore\narray [\n  'id' => 12,\n  'id_parent' => 0,\n  'code' => 'bbn_ide',\n  'text' => 'BBN's own IDE',\n  'myOtherProperty' => \"Hello\",\n]\nAfter\narray [\n  'id' => 12,\n  'id_parent' => 0,\n  'code' => 'bbn_ide',\n  'text' => 'BBN's own IDE',\n  'myProperty' => \"78%\",\n  'myProperty2' => \"42%\",\n  'myOtherProperty' => \"Hello\",\n]"
                }
            ],
            "class": "bbn\\Appui\\Option\\Write",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setProp($id, $prop)\n  {\n    if (!empty($id) && !empty($prop) && ($o = $this->optionNoAlias($id))) {\n      $args = \\func_get_args();\n      if (\\is_string($prop) && isset($args[2])) {\n        $prop = [$prop => $args[2]];\n      }\n\n      if (\\is_array($prop)) {\n        X::log([$o, $prop], \"set_prop\");\n        $change = false;\n        foreach ($prop as $k => $v){\n          if (!isset($o[$k]) || ($o[$k] !== $v)) {\n            $change = true;\n            $o[$k]  = $v;\n          }\n\n        }\n\n        if ($change) {\n          return $this->set($id, $o);\n        }\n      }\n\n      return 0;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 527,
            "endLine": 555,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setProp",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The option to update's ID"
                },
                {
                    "name": "prop",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "An array of properties and values, or a string with the property's name adding as next argument the new value"
                }
            ],
            "doc": {
                "description": "Updates option's properties derived from the value column\n\n```php\nX::dump($opt->setProp(12, 'myProperty', \"78%\"));\n\/\/ (int) 1\nX::dump($opt->setProp(12, ['myProperty' => \"78%\"]));\n\/\/ (int) 0 Already updated, no change done\nX::dump($opt->setProp(9654, ['myProperty' => \"78%\"]));\n\/\/ (bool) false Option not found\nX::dump($opt->setProp(12, ['myProperty' => \"78%\", 'myProperty2' => \"42%\"]));\n\/\/ (int) 1\nX::dump($opt->option(12));\n\/*\nBefore\narray [\n  'id' => 12,\n  'id_parent' => 0,\n  'code' => 'bbn_ide',\n  'text' => 'BBN's own IDE',\n  'myOtherProperty' => \"Hello\",\n]\nAfter\narray [\n  'id' => 12,\n  'id_parent' => 0,\n  'code' => 'bbn_ide',\n  'text' => 'BBN's own IDE',\n  'myProperty' => \"78%\",\n  'myProperty2' => \"42%\",\n  'myOtherProperty' => \"Hello\",\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id",
                        "description": "The option to update's ID"
                    },
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$prop",
                        "description": "An array of properties and values, or a string with the property's name adding as next argument the new value"
                    }
                ],
                "return": "the number of affected rows or null if no argument or option not found"
            },
            "comments": "  \/**\n   * Updates option's properties derived from the value column\n   *\n   * ```php\n   * X::dump($opt->setProp(12, 'myProperty', \"78%\"));\n   * \/\/ (int) 1\n   * X::dump($opt->setProp(12, ['myProperty' => \"78%\"]));\n   * \/\/ (int) 0 Already updated, no change done\n   * X::dump($opt->setProp(9654, ['myProperty' => \"78%\"]));\n   * \/\/ (bool) false Option not found\n   * X::dump($opt->setProp(12, ['myProperty' => \"78%\", 'myProperty2' => \"42%\"]));\n   * \/\/ (int) 1\n   * X::dump($opt->option(12));\n   * \/*\n   * Before\n   * array [\n   *   'id' => 12,\n   *   'id_parent' => 0,\n   *   'code' => 'bbn_ide',\n   *   'text' => 'BBN's own IDE',\n   *   'myOtherProperty' => \"Hello\",\n   * ]\n   * After\n   * array [\n   *   'id' => 12,\n   *   'id_parent' => 0,\n   *   'code' => 'bbn_ide',\n   *   'text' => 'BBN's own IDE',\n   *   'myProperty' => \"78%\",\n   *   'myProperty2' => \"42%\",\n   *   'myOtherProperty' => \"Hello\",\n   * ]\n   * ```\n   *\n   * @param int          $id   The option to update's ID\n   * @param array|string $prop An array of properties and values, or a string with the property's name adding as next argument the new value\n   * @return int|null the number of affected rows or null if no argument or option not found\n   *\/"
        },
        "unsetProp": {
            "name": "unsetProp",
            "summary": "Unset option's properties taken from the value column",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->unsetProp(12, 'myProperty'));\n\/\/ (int) 1\nX::dump($opt->unsetProp(12, ['myProperty']));\n\/\/ (int) 0 Already updated, no change done\nX::dump($opt->unsetProp(9654, ['myProperty']));\n\/\/ (bool) false Option not found\nX::dump($opt->unsetProp(12, ['myProperty', 'myProperty2']));\n\/\/ (int) 1\nX::dump($opt->option(12));\n\/*\nBefore\narray [\n  'id' => 12,\n  'id_parent' => 0,\n  'code' => 'bbn_ide',\n  'text' => 'BBN's own IDE',\n  'myProperty' => \"78%\",\n  'myProperty2' => \"42%\",\n  'myOtherProperty' => \"Hello\",\n]\nAfter\narray [\n  'id' => 12,\n  'id_parent' => 0,\n  'code' => 'bbn_ide',\n  'text' => 'BBN's own IDE',\n  'myOtherProperty' => \"Hello\",\n]"
                }
            ],
            "class": "bbn\\Appui\\Option\\Write",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unsetProp($id, $prop)\n  {\n    if (!empty($prop) && Str::isUid($id) && ($o = $this->optionNoAlias($id))) {\n      if (\\is_string($prop)) {\n        $prop = [$prop];\n      }\n\n      if (\\is_array($prop)) {\n        $change = false;\n        foreach ($prop as $k){\n          if (!\\in_array($k, $this->fields, true) && array_key_exists($k, $o)) {\n            $change = true;\n            unset($o[$k]);\n          }\n        }\n\n        if ($change) {\n          return $this->set($id, $o);\n        }\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 596,
            "endLine": 619,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "unsetProp",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The option to update's ID"
                },
                {
                    "name": "prop",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "An array of properties and values, or a string with the property's name adding as next argument the new value"
                }
            ],
            "doc": {
                "description": "Unset option's properties taken from the value column\n\n```php\nX::dump($opt->unsetProp(12, 'myProperty'));\n\/\/ (int) 1\nX::dump($opt->unsetProp(12, ['myProperty']));\n\/\/ (int) 0 Already updated, no change done\nX::dump($opt->unsetProp(9654, ['myProperty']));\n\/\/ (bool) false Option not found\nX::dump($opt->unsetProp(12, ['myProperty', 'myProperty2']));\n\/\/ (int) 1\nX::dump($opt->option(12));\n\/*\nBefore\narray [\n  'id' => 12,\n  'id_parent' => 0,\n  'code' => 'bbn_ide',\n  'text' => 'BBN's own IDE',\n  'myProperty' => \"78%\",\n  'myProperty2' => \"42%\",\n  'myOtherProperty' => \"Hello\",\n]\nAfter\narray [\n  'id' => 12,\n  'id_parent' => 0,\n  'code' => 'bbn_ide',\n  'text' => 'BBN's own IDE',\n  'myOtherProperty' => \"Hello\",\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The option to update's ID"
                    },
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$prop",
                        "description": "An array of properties and values, or a string with the property's name adding as next argument the new value"
                    }
                ],
                "return": "the number of affected rows or null if no argument or option not found"
            },
            "comments": "  \/**\n   * Unset option's properties taken from the value column\n   *\n   * ```php\n   * X::dump($opt->unsetProp(12, 'myProperty'));\n   * \/\/ (int) 1\n   * X::dump($opt->unsetProp(12, ['myProperty']));\n   * \/\/ (int) 0 Already updated, no change done\n   * X::dump($opt->unsetProp(9654, ['myProperty']));\n   * \/\/ (bool) false Option not found\n   * X::dump($opt->unsetProp(12, ['myProperty', 'myProperty2']));\n   * \/\/ (int) 1\n   * X::dump($opt->option(12));\n   * \/*\n   * Before\n   * array [\n   *   'id' => 12,\n   *   'id_parent' => 0,\n   *   'code' => 'bbn_ide',\n   *   'text' => 'BBN's own IDE',\n   *   'myProperty' => \"78%\",\n   *   'myProperty2' => \"42%\",\n   *   'myOtherProperty' => \"Hello\",\n   * ]\n   * After\n   * array [\n   *   'id' => 12,\n   *   'id_parent' => 0,\n   *   'code' => 'bbn_ide',\n   *   'text' => 'BBN's own IDE',\n   *   'myOtherProperty' => \"Hello\",\n   * ]\n   * ```\n   *\n   * @param string       $id   The option to update's ID\n   * @param array|string $prop An array of properties and values, or a string with the property's name adding as next argument the new value\n   * @return int|null the number of affected rows or null if no argument or option not found\n   *\/"
        },
        "setCfg": {
            "name": "setCfg",
            "summary": "Sets the cfg column of a given option in the table through an array",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->getCfg('bbn_ide'));\n\/\/ array ['sortable' => true]\nX::dump($opt->setCfg(12, [\n  'desc' => \"I am a cool option\",\n  'sortable' => true\n]));\n\/\/ (int) 1\nX::dump($opt->getCfg('bbn_ide'));\n\/\/ array ['desc' => \"I am a cool option\", 'sortable' => true];"
                }
            ],
            "class": "bbn\\Appui\\Option\\Write",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setCfg($id, array $cfg, bool $merge = false): ?int\n  {\n    if ($this->check() && $this->exists($id)) {\n      if (isset($cfg['inherited_from'])) {\n        unset($cfg['inherited_from']);\n      }\n\n      if (isset($cfg[$this->fields['id']])) {\n        unset($cfg[$this->fields['id']]);\n      }\n\n      if (isset($cfg['permissions']) && !in_array($cfg['permissions'], ['single', 'cascade', 'all', 'children'])) {\n        unset($cfg['permissions']);\n      }\n\n      if ($merge && ($old_cfg = $this->getCfg($id))) {\n        $cfg = array_merge($old_cfg, $cfg);\n      }\n\n      $c =& $this->class_cfg;\n      if ($res = $this->db->update(\n        $c['table'], [\n        $this->fields['cfg'] => $cfg ? json_encode($cfg) : null\n        ], [\n          $this->fields['id'] => $id\n        ]\n      )\n      ) {\n        if ((isset($old_cfg['inheritance'], $cfg['inheritance'])\n            && ($old_cfg['inheritance'] !== $cfg['inheritance']))\n          || (isset($old_cfg['i18n_inheritance'], $cfg['i18n_inheritance'])\n            && ($old_cfg['i18n_inheritance'] !== $cfg['i18n_inheritance']))\n        ) {\n          $this->deleteCache($id, true);\n        }\n        else{\n          $this->deleteCache($id);\n        }\n\n        return $res;\n      }\n\n      return 0;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 642,
            "endLine": 688,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "setCfg",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The option ID"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The config value"
                },
                {
                    "name": "merge",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the cfg column of a given option in the table through an array\n\n```php\nX::dump($opt->getCfg('bbn_ide'));\n\/\/ array ['sortable' => true]\nX::dump($opt->setCfg(12, [\n  'desc' => \"I am a cool option\",\n  'sortable' => true\n]));\n\/\/ (int) 1\nX::dump($opt->getCfg('bbn_ide'));\n\/\/ array ['desc' => \"I am a cool option\", 'sortable' => true];\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|int",
                        "name": "$id",
                        "description": "The option ID"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The config value"
                    }
                ],
                "return": "number of affected rows"
            },
            "comments": "  \/**\n   * Sets the cfg column of a given option in the table through an array\n   *\n   * ```php\n   * X::dump($opt->getCfg('bbn_ide'));\n   * \/\/ array ['sortable' => true]\n   * X::dump($opt->setCfg(12, [\n   *   'desc' => \"I am a cool option\",\n   *   'sortable' => true\n   * ]));\n   * \/\/ (int) 1\n   * X::dump($opt->getCfg('bbn_ide'));\n   * \/\/ array ['desc' => \"I am a cool option\", 'sortable' => true];\n   * ```\n   *\n   * @param string|int   $id  The option ID\n   * @param array       $cfg The config value\n   * @return int|null number of affected rows\n   *\/"
        },
        "unsetCfg": {
            "name": "unsetCfg",
            "summary": "Unsets the cfg column (sets it to null)",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->getCfg('bbn_ide'));\n\/\/ array ['desc' => \"I am a cool option\", 'sortable' => true];"
                }
            ],
            "class": "bbn\\Appui\\Option\\Write",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unsetCfg($id)\n  {\n    $res = false;\n    if ($this->check() && $this->exists($id)) {\n      $res = $this->db->update(\n        $this->class_cfg['table'], [\n        $this->fields['cfg'] => null\n        ], [\n        $this->fields['id'] => $id\n        ]\n      );\n      if ($res) {\n        $this->deleteCache($id);\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 702,
            "endLine": 719,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "unsetCfg",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The option ID"
                }
            ],
            "doc": {
                "description": "Unsets the cfg column (sets it to null)\n\n```php\nX::dump($opt->getCfg('bbn_ide'));\n\/\/ array ['desc' => \"I am a cool option\", 'sortable' => true];\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|int",
                        "name": "$id",
                        "description": "The option ID"
                    }
                ],
                "return": "Number of affected rows or false if not found"
            },
            "comments": "  \/**\n   * Unsets the cfg column (sets it to null)\n   *\n   * ```php\n   * X::dump($opt->getCfg('bbn_ide'));\n   * \/\/ array ['desc' => \"I am a cool option\", 'sortable' => true];\n   * ```\n   *\n   * @param string|int $id The option ID\n   * @return int|false Number of affected rows or false if not found\n   *\/"
        },
        "fusion": {
            "name": "fusion",
            "summary": "Merges an option $src into an existing option $dest",
            "description": "Children will change id_parent and references in the same database will be updated\nThe config will remain the one from the destination",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Children will change id_parent and references in the same database will be updated\nThe config will remain the one from the destination"
                }
            ],
            "class": "bbn\\Appui\\Option\\Write",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fusion($src, $dest)\n  {\n    if ($this->check()) {\n      $o_src  = $this->option($src);\n      $o_dest = $this->option($dest);\n      $num    = 0;\n      $cf     =& $this->fields;\n      if ($o_dest && $o_src) {\n        $o_dest[$cf['text']] = $this->rawText($o_dest[$cf['id']]);\n        $o_src[$cf['text']] = $this->rawText($o_src[$cf['id']]);\n        $o_final = X::mergeArrays($o_src, $o_dest);\n        \/\/ Order remains the dest one\n        $o_final[$cf['num']] = $o_dest[$cf['num']];\n        $tables              = $this->db->getForeignKeys($cf['id'], $this->class_cfg['table']);\n        foreach ($tables as $table => $cols){\n          foreach ($cols as $c){\n            $num += (int)$this->db->update($table, [$c => $dest], [$c => $src]);\n          }\n        }\n\n        if ($opt = $this->options($src)) {\n          \/\/ Moving children\n          foreach ($opt as $id => $text){\n            $num += (int)$this->move($id, $dest);\n          }\n        }\n\n        $num += (int)$this->set($dest, $o_final);\n        $num += (int)$this->remove($src);\n\n        $this->deleteCache($o_final[$cf['id_parent']], true);\n        $this->deleteCache($o_src[$cf['id_parent']], true);\n\n        if ($this->isSortable($o_src[$cf['id_parent']])) {\n          $this->fixOrder($o_src[$cf['id_parent']]);\n        }\n\n        if ($this->isSortable($o_final[$cf['id_parent']])) {\n          $this->fixOrder($o_final[$cf['id_parent']]);\n        }\n      }\n\n      return $num;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 744,
            "endLine": 790,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "fusion",
            "returns": [],
            "arguments": [
                {
                    "name": "src",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Source option ID, will be"
                },
                {
                    "name": "dest",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Destination option ID, will remain after the fusion"
                }
            ],
            "doc": {
                "description": "Merges an option $src into an existing option $dest\nChildren will change id_parent and references in the same database will be updated\nThe config will remain the one from the destination\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$src",
                        "description": "Source option ID, will be"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$dest",
                        "description": "Destination option ID, will remain after the fusion"
                    }
                ],
                "return": "Number of affected rows",
                "todo": {
                    "tag": "todo",
                    "text": "Finish the example\n```php\nX::dump($opt->option(20), $opt->option(30));\nX::dump($opt->fusion(30, 20));\nX::dump($opt->option(20));\n\/\/ (int) 7\n\/* The expression before would have returned\narray []\narray []\nAnd the resulting option would be\narray []\n```"
                }
            },
            "comments": "  \/**\n   * Merges an option $src into an existing option $dest\n   * Children will change id_parent and references in the same database will be updated\n   * The config will remain the one from the destination\n   *\n   * @todo Finish the example\n   * ```php\n   * X::dump($opt->option(20), $opt->option(30));\n   * X::dump($opt->fusion(30, 20));\n   * X::dump($opt->option(20));\n   * \/\/ (int) 7\n   * \/* The expression before would have returned\n   * array []\n   * array []\n   * And the resulting option would be\n   * array []\n   * ```\n   *\n   * @param int $src  Source option ID, will be\n   * @param int $dest Destination option ID, will remain after the fusion\n   * @return null|int Number of affected rows\n   *\/"
        },
        "move": {
            "name": "move",
            "summary": "Changes the id_parent of an option",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($this->getIdParent(21));\n\/\/ (int) 13\nX::dump($this->move(21, 12));\n\/\/ (int) 1\nX::dump($this->getIdParent(21));\n\/\/ (int) 12"
                }
            ],
            "class": "bbn\\Appui\\Option\\Write",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function move($id, $id_parent)\n  {\n    $res = null;\n    if (($o = $this->option($id))\n        && ($target = $this->option($id_parent))\n    ) {\n      $upd = [$this->fields['id_parent'] => $id_parent];\n      if ($this->isSortable($id_parent)) {\n        $upd[$this->fields['num']] = empty($target['num_children']) ? 1 : $target['num_children'] + 1;\n      }\n\n      $res = $this->db->update(\n        $this->class_cfg['table'], $upd, [\n        $this->fields['id'] => $id\n        ]\n      );\n      $this->deleteCache($id_parent);\n      $this->deleteCache($id);\n      $this->deleteCache($o[$this->fields['id_parent']]);\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 809,
            "endLine": 831,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "move",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The option's ID"
                },
                {
                    "name": "id_parent",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "parent The new id_parent"
                }
            ],
            "doc": {
                "description": "Changes the id_parent of an option\n\n```php\nX::dump($this->getIdParent(21));\n\/\/ (int) 13\nX::dump($this->move(21, 12));\n\/\/ (int) 1\nX::dump($this->getIdParent(21));\n\/\/ (int) 12\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id",
                        "description": "The option's ID"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id",
                        "description": "parent The new id_parent"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Changes the id_parent of an option\n   *\n   * ```php\n   * X::dump($this->getIdParent(21));\n   * \/\/ (int) 13\n   * X::dump($this->move(21, 12));\n   * \/\/ (int) 1\n   * X::dump($this->getIdParent(21));\n   * \/\/ (int) 12\n   * ```\n   *\n   * @param int $id        The option's ID\n   * @param int $id_parent The new id_parent\n   * @return int|null\n   *\/"
        },
        "fixOrder": {
            "name": "fixOrder",
            "summary": "Sets the order configuration for each option of a sortable given parent",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option\\Write",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fixOrder($id, $deep = false)\n  {\n    if ($this->check() && $this->isSortable($id) && $its = $this->fullOptions($id)) {\n      $cf  =& $this->class_cfg;\n      $p   = 1;\n      foreach ($its as $it) {\n        if ($it[$this->fields['num']] !== $p) {\n          $this->db->update(\n            $cf['table'], [\n            $this->fields['num'] => $p\n            ], [\n            $this->fields['id'] => $it[$this->fields['id']]\n            ]\n          );\n          $this->deleteCache($it[$this->fields['id']]);\n        }\n\n        $p++;\n        if ($deep) {\n          $this->fixOrder($it[$this->fields['id']]);\n        }\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 841,
            "endLine": 866,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "fixOrder",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "deep",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the order configuration for each option of a sortable given parent\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$deep"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the order configuration for each option of a sortable given parent\n   *\n   * @param int     $id\n   * @param boolean $deep\n   * @return $this\n   *\/"
        },
        "_prepare": {
            "name": "_prepare",
            "summary": "Transforms an array of parameters into valid option array",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option\\Write",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _prepare(array &$it): bool\n  {\n    \/\/ The table's columns\n    $c =& $this->fields;\n\n    \/\/ If id_parent is undefined it uses the default\n    if (!isset($it[$c['id_parent']])) {\n      $it[$c['id_parent']] = $this->default;\n    }\n    elseif (is_array($it[$c['id_parent']])) {\n      if ($id_parent = $this->fromCode(...$it[$c['id_parent']])) {\n        $it[$c['id_parent']] = $id_parent;\n      }\n      else {\n        throw new Exception(X::_(\"Impossible to find the parent\"));\n      }\n    }\n    elseif (!isset($it[$c['id_parent']]) || !$this->exists($it[$c['id_parent']])) {\n      throw new Exception(X::_(\"Impossible to find the parent\"));\n    }\n\n    if (empty($it[$c['id_alias']])) {\n      $it[$c['id_alias']] = null;\n    }\n    elseif (is_array($it[$c['id_alias']])) {\n      if ($id_alias = $this->fromCode(...$it[$c['id_alias']])) {\n        $it[$c['id_alias']] = $id_alias;\n      }\n      else {\n        throw new Exception(X::_(\"Impossible to find the alias\"));\n      }\n    }\n    elseif (!$this->exists($it[$c['id_alias']])) {\n      throw new Exception(X::_(\"Impossible to find the alias %s\", $it[$c['id_alias']]));\n    }\n\n    if (array_key_exists($c['id'], $it) && empty($it[$c['id']])) {\n      unset($it[$c['id']]);\n    }\n\n    if (isset($it[$c['cfg']])) {\n      if (!is_array($it[$c['cfg']]) && Str::isJson($it[$c['cfg']])) {\n        $it[$c['cfg']] = json_decode($it[$c['cfg']], true);\n      }\n\n      $cfg =& $it[$c['cfg']];\n      if (is_array($cfg) && !empty($cfg['id_root_alias'])) {\n        if (is_array($cfg['id_root_alias'])) {\n          if ($id_root_alias = $this->fromCode(...$cfg['id_root_alias'])) {\n            $cfg['id_root_alias'] = $id_root_alias;\n          }\n          else {\n            throw new Exception(X::_(\"Impossible to find the root alias\"));\n          }\n        }\n        elseif (!$this->exists($cfg['id_root_alias'])) {\n          throw new Exception(X::_(\"Impossible to find the root alias\"));\n        }\n      }\n    }\n\n    \/\/ Text is required and parent exists\n    if (!empty($it[$c['id_parent']])\n        && (!empty($it[$c['text']]) || !empty($it[$c['id_alias']]) || !empty($it[$c['code']]))\n        && ($parent = $this->option($it[$c['id_parent']]))\n    ) {\n      \/\/ If the id_parent property is a code or a sequence of codes have to set it as uid\n      $it[$c['id_parent']] = $parent[$c['id']];\n\n      \/\/ If code is empty it MUST be null\n      if (empty($it[$c['code']])) {\n        $it[$c['code']] = null;\n      }\n\n      \/\/ If text is empty it MUST be null\n      if (empty($it[$c['text']])) {\n        $it[$c['text']] = null;\n      }\n\n      \/\/ Unsetting computed values\n      if (isset($it[$c['value']]) && Str::isJson($it[$c['value']])) {\n        $this->_set_value($it);\n      }\n\n      if (array_key_exists('alias', $it)) {\n        unset($it['alias']);\n      }\n\n      if (array_key_exists('num_children', $it)) {\n        unset($it['num_children']);\n      }\n\n      if (array_key_exists('items', $it)) {\n        unset($it['items']);\n      }\n\n      \/\/ Taking care of user-defined properties (contained in value)\n      $value = [];\n      foreach ($it as $k => $v){\n        if (!\\in_array($k, $c, true)) {\n          $value[$k] = $v;\n          unset($it[$k]);\n        }\n      }\n\n      if (!empty($value)) {\n        $it[$c['value']] = json_encode($value);\n      }\n      else {\n        if (empty($it[$c['value']])) {\n          $it[$c['value']] = null;\n        }\n        else{\n          if (\\is_array($it[$c['value']])) {\n            $it[$c['value']] = json_encode($it[$c['value']]);\n          }\n        }\n      }\n\n      \/\/ Taking care of the config\n      if (isset($it[$c['cfg']])) {\n        if (is_array($it[$c['cfg']]) && !empty($it[$c['cfg']])) {\n          $it[$c['cfg']] = json_encode($it[$c['cfg']]);\n        }\n\n        if (!Str::isJson($it[$c['cfg']]) || in_array($it[$c['cfg']], ['{}', '[]'], true)) {\n          $it[$c['cfg']] = null;\n        }\n      }\n\n      $is_sortable = $this->isSortable($parent[$c['id']]);\n      \/\/ If parent is sortable and order is not defined we define it as last\n      if (isset($it[$c['num']]) && !$is_sortable) {\n        unset($it[$c['num']]);\n      }\n      elseif ($is_sortable && empty($it[$c['num']])) {\n        $it[$c['num']] = ($parent['num_children'] ?? 0) + 1;\n      }\n\n      return true;\n    }\n\n    throw new Exception(\n      X::_(\"Impossible to make an option out of it...\")\n      .PHP_EOL.json_encode($it, JSON_PRETTY_PRINT)\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 875,
            "endLine": 1021,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_prepare",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "it",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": true,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Transforms an array of parameters into valid option array\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$it"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Transforms an array of parameters into valid option array\n   * @param array $it\n   * @return bool\n   * @throws Exception\n   *\/"
        },
        "_set_value": {
            "name": "_set_value",
            "summary": "Gives to option's database row array each of the column value's JSON properties",
            "description": "Only if value is an associative array value itself will be unset",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Only if value is an associative array value itself will be unset"
                }
            ],
            "class": "bbn\\Appui\\Option\\Write",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _set_value(array &$opt): ?array\n  {\n    if (!empty($opt[$this->fields['value']]) && Str::isJson($opt[$this->fields['value']])) {\n      $val = json_decode($opt[$this->fields['value']], true);\n      if (X::isAssoc($val)) {\n        foreach ($val as $k => $v){\n          if (!isset($opt[$k])) {\n            $opt[$k] = $v;\n          }\n        }\n\n        unset($opt[$this->fields['value']]);\n      }\n      else{\n        $opt[$this->fields['value']] = $val;\n      }\n    }\n\n    return $opt;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1030,
            "endLine": 1049,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_set_value",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "opt",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": true,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gives to option's database row array each of the column value's JSON properties\nOnly if value is an associative array value itself will be unset\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$opt"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gives to option's database row array each of the column value's JSON properties\n   * Only if value is an associative array value itself will be unset\n   * @param array $opt\n   * @return array|bool\n   *\/"
        }
    },
    "properties": null,
    "staticProperties": [],
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "bbn\\X": "X",
        "bbn\\Str": "Str",
        "bbn\\Appui\\History": "History"
    },
    "dummyComments": [
        "\/**\n   * Creates a new option or a new hierarchy by adding row(s) in the options' table\n   *\n   * ```php\n   * X::dump($opt->add([\n   *   'id_parent' => $opt->fromCode('bbn_ide'),\n   *   'text' => 'My new option',\n   *   'code' => 'new_opt',\n   *   'myProperty' => 'my value'\n   * ]));\n   * \/\/ (int) 49  New ID\n   * X::dump($opt->add([\n   *   'id_parent' => $opt->fromCode('bbn_ide'),\n   *   'text' => 'My new option',\n   *   'code' => 'new_opt',\n   *   'myProperty' => 'my value'\n   *   'items' => [\n   *     [\n   *       'code' => \"test\",\n   *       'text' => \"Test\",\n   *       'myProperty' => \"My property's value\",\n   *     ],\n   *     [\n   *       'code' => \"test2\",\n   *       'text' => \"Test 2\",\n   *       'myProperty' => \"My property's value\",\n   *       'items' => [\n   *         [\n   *           'code' => \"test8\",\n   *           'text' => \"Test 8\",\n   *         ]\n   *       ]\n   *     ]\n   *   ]\n   * ], true, true));\n   * \/\/ (int) 4 Number of inserted\/modified rows\n   * ```\n   *\n   * @param array   $it         The option configuration\n   * @param boolean $force      Determines if the option should be updated if it already exists\n   * @param boolean $return_num If set to true the function will return the number of rows inserted otherwise the ID of the newly created option\n   * @param bool $with_id\n   * @return int|string|null\n   *\/",
        "\/**\n   * Updates an option's row (without changing cfg)\n   *\n   * ```php\n   * X::dump($opt->set(12, [\n   *   'id_parent' => $opt->fromCode('bbn_ide'),\n   *   'text' => 'My new option',\n   *   'code' => 'new_opt',\n   *   'myProperty' => 'my value'\n   *   'cfg' => [\n   *     'sortable' => true,\n   *     'Description' => \"I am a cool option\"\n   *   ]\n   * ]);\n   * \/\/ (int) 1\n   * ```\n   *\n   * @param string   $id\n   * @param array $data\n   * @return int\n   *\/",
        "\/**\n   * Updates an option's row by merging the data and cfg.\n   *\n   * ```php\n   * X::dump($opt->merge(12, [\n   *   'id_parent' => $opt->fromCode('bbn_ide'),\n   *   'text' => 'My new option',\n   *   'code' => 'new_opt',\n   *   'myProperty' => 'my value'\n   *   'cfg' => [\n   *     'sortable' => true,\n   *     'Description' => \"I am a cool option\"\n   *   ]\n   * ]);\n   * \/\/ (int) 1\n   * ```\n   *\n   * @param string $id\n   * @param array $data\n   * @param array|null $cfg\n   * @return int|null\n   * @throws Exception\n   *\/",
        "\/**\n   * Deletes a row from the options table, deletes the cache and fix order if needed\n   *\n   * ```php\n   * X::dump($opt->remove(12));\n   * \/\/ (int) 12 Number of options deleted\n   * X::dump($opt->remove(12));\n   * \/\/ (null) The option doesn't exist anymore\n   * ```\n   *\n   * @param string $code Any option(s) accepted by {@link fromCode()}\n   * @return int|null The number of affected rows or null if option not found\n   *\/",
        "\/**\n   * Deletes an option row with all it's hierarchical structure from the options table and deletes the cache.\n   *\n   * ```php\n   * X::dump($opt->removeFull(12));\n   * \/\/ (int) 12 Number of options deleted\n   * X::dump($opt->removeFull(12));\n   * \/\/ (null) The option doesn't exist anymore\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()} or the uid\n   * @return int|null The number of affected rows or null if option not found\n   *\/",
        "\/**\n   * Sets the alias of an option\n   *\n   * ```php\n   * X::dump($opt->setAlias(26, 32));\n   * \/\/ (int) 1\n   * ```\n   *\n   * @param string      $id    The ID of the option to be updated\n   * @param string|null $alias The alias' option ID\n   * @return int The number of affected rows\n   *\/",
        "\/**\n   * Sets the text of an option\n   *\n   * ```php\n   * X::dump($opt->setText(26, \"Hello world!\"));\n   * \/\/ (int) 1\n   * ```\n   *\n   * @param int    $id   The ID of the option to be updated\n   * @param string $text The new text\n   * @return int The number of affected rows\n   *\/",
        "\/**\n   * Sets the code of an option\n   *\n   * ```php\n   * X::dump($opt->setCode(26, \"HWD\"));\n   * \/\/ (int) 1\n   * ```\n   *\n   * @param int $id The ID of the option to be updated\n   * @param string|null $code The new code\n   * @return int|null The number of affected rows\n   *\/",
        "\/**\n   * @param array $value\n   * @param $id\n   * @return int|null\n   * @throws Exception\n   *\/",
        "\/**\n   * Updates option's properties derived from the value column\n   *\n   * ```php\n   * X::dump($opt->setProp(12, 'myProperty', \"78%\"));\n   * \/\/ (int) 1\n   * X::dump($opt->setProp(12, ['myProperty' => \"78%\"]));\n   * \/\/ (int) 0 Already updated, no change done\n   * X::dump($opt->setProp(9654, ['myProperty' => \"78%\"]));\n   * \/\/ (bool) false Option not found\n   * X::dump($opt->setProp(12, ['myProperty' => \"78%\", 'myProperty2' => \"42%\"]));\n   * \/\/ (int) 1\n   * X::dump($opt->option(12));\n   * \/*\n   * Before\n   * array [\n   *   'id' => 12,\n   *   'id_parent' => 0,\n   *   'code' => 'bbn_ide',\n   *   'text' => 'BBN's own IDE',\n   *   'myOtherProperty' => \"Hello\",\n   * ]\n   * After\n   * array [\n   *   'id' => 12,\n   *   'id_parent' => 0,\n   *   'code' => 'bbn_ide',\n   *   'text' => 'BBN's own IDE',\n   *   'myProperty' => \"78%\",\n   *   'myProperty2' => \"42%\",\n   *   'myOtherProperty' => \"Hello\",\n   * ]\n   * ```\n   *\n   * @param int          $id   The option to update's ID\n   * @param array|string $prop An array of properties and values, or a string with the property's name adding as next argument the new value\n   * @return int|null the number of affected rows or null if no argument or option not found\n   *\/",
        "\/**\n   * Unset option's properties taken from the value column\n   *\n   * ```php\n   * X::dump($opt->unsetProp(12, 'myProperty'));\n   * \/\/ (int) 1\n   * X::dump($opt->unsetProp(12, ['myProperty']));\n   * \/\/ (int) 0 Already updated, no change done\n   * X::dump($opt->unsetProp(9654, ['myProperty']));\n   * \/\/ (bool) false Option not found\n   * X::dump($opt->unsetProp(12, ['myProperty', 'myProperty2']));\n   * \/\/ (int) 1\n   * X::dump($opt->option(12));\n   * \/*\n   * Before\n   * array [\n   *   'id' => 12,\n   *   'id_parent' => 0,\n   *   'code' => 'bbn_ide',\n   *   'text' => 'BBN's own IDE',\n   *   'myProperty' => \"78%\",\n   *   'myProperty2' => \"42%\",\n   *   'myOtherProperty' => \"Hello\",\n   * ]\n   * After\n   * array [\n   *   'id' => 12,\n   *   'id_parent' => 0,\n   *   'code' => 'bbn_ide',\n   *   'text' => 'BBN's own IDE',\n   *   'myOtherProperty' => \"Hello\",\n   * ]\n   * ```\n   *\n   * @param string       $id   The option to update's ID\n   * @param array|string $prop An array of properties and values, or a string with the property's name adding as next argument the new value\n   * @return int|null the number of affected rows or null if no argument or option not found\n   *\/",
        "\/**\n   * Sets the cfg column of a given option in the table through an array\n   *\n   * ```php\n   * X::dump($opt->getCfg('bbn_ide'));\n   * \/\/ array ['sortable' => true]\n   * X::dump($opt->setCfg(12, [\n   *   'desc' => \"I am a cool option\",\n   *   'sortable' => true\n   * ]));\n   * \/\/ (int) 1\n   * X::dump($opt->getCfg('bbn_ide'));\n   * \/\/ array ['desc' => \"I am a cool option\", 'sortable' => true];\n   * ```\n   *\n   * @param string|int   $id  The option ID\n   * @param array       $cfg The config value\n   * @return int|null number of affected rows\n   *\/",
        "\/**\n   * Unsets the cfg column (sets it to null)\n   *\n   * ```php\n   * X::dump($opt->getCfg('bbn_ide'));\n   * \/\/ array ['desc' => \"I am a cool option\", 'sortable' => true];\n   * ```\n   *\n   * @param string|int $id The option ID\n   * @return int|false Number of affected rows or false if not found\n   *\/",
        "\/**\n   * Merges an option $src into an existing option $dest\n   * Children will change id_parent and references in the same database will be updated\n   * The config will remain the one from the destination\n   *\n   * @todo Finish the example\n   * ```php\n   * X::dump($opt->option(20), $opt->option(30));\n   * X::dump($opt->fusion(30, 20));\n   * X::dump($opt->option(20));\n   * \/\/ (int) 7\n   * \/* The expression before would have returned\n   * array []\n   * array []\n   * And the resulting option would be\n   * array []\n   * ```\n   *\n   * @param int $src  Source option ID, will be\n   * @param int $dest Destination option ID, will remain after the fusion\n   * @return null|int Number of affected rows\n   *\/",
        "\/**\n   * Changes the id_parent of an option\n   *\n   * ```php\n   * X::dump($this->getIdParent(21));\n   * \/\/ (int) 13\n   * X::dump($this->move(21, 12));\n   * \/\/ (int) 1\n   * X::dump($this->getIdParent(21));\n   * \/\/ (int) 12\n   * ```\n   *\n   * @param int $id        The option's ID\n   * @param int $id_parent The new id_parent\n   * @return int|null\n   *\/",
        "\/**\n   * Sets the order configuration for each option of a sortable given parent\n   *\n   * @param int     $id\n   * @param boolean $deep\n   * @return $this\n   *\/",
        "\/**\n   * Transforms an array of parameters into valid option array\n   * @param array $it\n   * @return bool\n   * @throws Exception\n   *\/",
        "\/**\n   * Gives to option's database row array each of the column value's JSON properties\n   * Only if value is an associative array value itself will be unset\n   * @param array $opt\n   * @return array|bool\n   *\/"
    ],
    "summary": "",
    "description": "",
    "description_parts": []
}