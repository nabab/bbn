{
    "doc": {
        "description": "Trait providing functionality for handling aliases in options.",
        "tags": []
    },
    "name": "bbn\\Appui\\Option\\Internal\\Alias",
    "namespace": true,
    "realName": "Alias",
    "realNamespace": "bbn\\Appui\\Option\\Internal",
    "traits": [],
    "interfaces": [],
    "fileName": "\/Appui\/Option\/Internal\/Alias.php",
    "startLine": 10,
    "endLine": 257,
    "numMethods": 7,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": true,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": [],
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui\\Option\\Internal",
    "shortName": "Alias",
    "contentConstructor": null,
    "methods": {
        "alias": {
            "name": "alias",
            "summary": "Returns the id_alias relative to the given id_option.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option\\Internal\\Alias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Internal\/Alias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function alias(string $id): ?string\n  {\n    \/\/ Check if the class is initialized and the database connection is valid.\n    if ($this->check() && Str::isUid($id)) {\n      \/\/ Query the database to retrieve the id_alias.\n      return $this->db->selectOne(\n        $this->class_cfg['table'],\n        $this->fields['id_alias'],\n        [\n          $this->fields['id'] => $id\n        ]\n      );\n    }\n\n    \/\/ If checks fail, return null.\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 18,
            "endLine": 34,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "alias",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The ID of the option."
                }
            ],
            "doc": {
                "description": "Returns the id_alias relative to the given id_option.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The ID of the option."
                    }
                ],
                "return": "The id_alias if it exists, otherwise null."
            },
            "comments": "  \/**\n   * Returns the id_alias relative to the given id_option.\n   *\n   * @param string $id The ID of the option.\n   * @return string|null The id_alias if it exists, otherwise null.\n   *\/"
        },
        "getIdAlias": {
            "name": "getIdAlias",
            "summary": "Returns the id_alias for a given code(s).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option\\Internal\\Alias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Internal\/Alias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIdAlias(...$codes): ?string\n  {\n    \/\/ Get the ID from the provided codes.\n    if (Str::isUid($id = $this->fromCode($codes))) {\n      \/\/ Retrieve the class configuration and query the database to get the id_alias.\n      $cf = $this->getClassCfg();\n      return $this->db->selectOne(\n        $cf['table'],\n        $this->fields['id_alias'],\n        [\n          $this->fields['id'] => $id\n        ]\n      );\n    }\n\n    \/\/ If checks fail, return null.\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 42,
            "endLine": 59,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getIdAlias",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The codes to retrieve the id_alias for."
                }
            ],
            "doc": {
                "description": "Returns the id_alias for a given code(s).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$codes",
                        "description": "The codes to retrieve the id_alias for."
                    }
                ],
                "return": "The id_alias if it exists, otherwise null."
            },
            "comments": "  \/**\n   * Returns the id_alias for a given code(s).\n   *\n   * @param string ...$codes The codes to retrieve the id_alias for.\n   * @return string|null The id_alias if it exists, otherwise null.\n   *\/"
        },
        "getAliases": {
            "name": "getAliases",
            "summary": "Retrieves all aliases for a given code(s).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option\\Internal\\Alias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Internal\/Alias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAliases(...$codes): ?array\n  {\n    \/\/ Get the ID from the provided codes.\n    if (Str::isUid($id = $this->fromCode($codes))) {\n      \/\/ Initialize an empty array to store the results.\n      $r = [];\n\n      \/\/ Retrieve the class configuration and query the database to get all aliases.\n      $cf = $this->getClassCfg();\n      $order = empty($cf['sortable']) ? [\n        $this->fields['text'] => 'ASC',\n        $this->fields['code'] => 'ASC',\n        $this->fields['id'] => 'ASC',\n      ] : [\n        $this->fields['num'] => 'ASC',\n        $this->fields['text'] => 'ASC',\n        $this->fields['code'] => 'ASC',\n        $this->fields['id'] => 'ASC',\n      ];\n\n      if ($results = $this->db->rselectAll($cf['table'], [], [$this->fields['id_alias'] => $id], $order)) {\n        \/\/ Iterate through each result and process the data.\n        foreach ($results as $d) {\n          \/\/ Convert code to integer if it's an integer string.\n          if (\n            !empty($d[$this->fields['code']])\n            && Str::isInteger($d[$this->fields['code']])\n          ) {\n            $d[$this->fields['code']] = (int)$d[$this->fields['code']];\n          }\n          \/\/ Set the value and retrieve the text for the alias.\n          $this->_set_value($d);\n          if (!empty($d[$this->fields['text']])) {\n            $d[$this->fields['text']] = $this->text($d[$this->fields['id']]);\n          }\n          \/\/ Add the processed data to the results array.\n          $r[] = $d;\n        }\n      }\n\n      \/\/ Return the array of aliases.\n      return $r;\n    }\n\n    \/\/ If checks fail, return null.\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 67,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getAliases",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The codes to retrieve the aliases for."
                }
            ],
            "doc": {
                "description": "Retrieves all aliases for a given code(s).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$codes",
                        "description": "The codes to retrieve the aliases for."
                    }
                ],
                "return": "An array of aliases if they exist, otherwise null."
            },
            "comments": "  \/**\n   * Retrieves all aliases for a given code(s).\n   *\n   * @param string ...$codes The codes to retrieve the aliases for.\n   * @return array|null An array of aliases if they exist, otherwise null.\n   *\/"
        },
        "getAliasItems": {
            "name": "getAliasItems",
            "summary": "Retrieves all items for an alias based on a given code(s).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option\\Internal\\Alias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Internal\/Alias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAliasItems(...$codes): ?array\n  {\n    \/\/ Get the ID from the provided codes.\n    if (Str::isUid($id = $this->fromCode($codes))) {\n      \/\/ Check if the result is cached.\n      if ($res = $this->getCache($id, __FUNCTION__)) {\n        return $res;\n      }\n\n      \/\/ Retrieve the class configuration and query the database to get all items for the alias.\n      $cf  = $this->getClassCfg();\n      $f   = $this->getFields();\n      $res = $this->db->getColumnValues(\n        $cf['table'],\n        $f['id'],\n        [\n          $f['id_alias'] => $id\n        ]\n      );\n\n      \/\/ Cache the result and return it.\n      $this->setCache($id, __FUNCTION__, $res);\n      return $res;\n    }\n\n    \/\/ If checks fail, return null.\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 121,
            "endLine": 148,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getAliasItems",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The codes to retrieve the alias items for."
                }
            ],
            "doc": {
                "description": "Retrieves all items for an alias based on a given code(s).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$codes",
                        "description": "The codes to retrieve the alias items for."
                    }
                ],
                "return": "An array of item IDs if they exist, otherwise null."
            },
            "comments": "  \/**\n   * Retrieves all items for an alias based on a given code(s).\n   *\n   * @param string ...$codes The codes to retrieve the alias items for.\n   * @return array|null An array of item IDs if they exist, otherwise null.\n   *\/"
        },
        "getAliasOptions": {
            "name": "getAliasOptions",
            "summary": "Retrieves all options for an alias based on a given code(s).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option\\Internal\\Alias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Internal\/Alias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAliasOptions(...$codes): ?array\n  {\n    \/\/ Get the ID from the provided codes.\n    if (Str::isUid($id = $this->fromCode($codes))) {\n      \/\/ Check if the result is cached.\n      if ($r = $this->getCache($id, __FUNCTION__)) {\n        return $r;\n      }\n\n      \/\/ Initialize an empty array to store the results.\n      $res = [];\n\n      \/\/ Retrieve all items for the alias and process them into options.\n      if ($items = $this->getAliasItems($id)) {\n        foreach ($items as $it) {\n          $res[$it] = $this->text($it);\n        }\n      }\n\n      \/\/ Cache the result and return it.\n      $this->setCache($id, __FUNCTION__, $res);\n      return $res;\n    }\n\n    \/\/ If checks fail, return null.\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 156,
            "endLine": 182,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getAliasOptions",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The codes to retrieve the alias options for."
                }
            ],
            "doc": {
                "description": "Retrieves all options for an alias based on a given code(s).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$codes",
                        "description": "The codes to retrieve the alias options for."
                    }
                ],
                "return": "An array of option IDs and their corresponding text if they exist, otherwise null."
            },
            "comments": "  \/**\n   * Retrieves all options for an alias based on a given code(s).\n   *\n   * @param string ...$codes The codes to retrieve the alias options for.\n   * @return array|null An array of option IDs and their corresponding text if they exist, otherwise null.\n   *\/"
        },
        "getAliasFullOptions": {
            "name": "getAliasFullOptions",
            "summary": "Retrieves all full options for an alias based on a given code(s).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option\\Internal\\Alias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Internal\/Alias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAliasFullOptions(...$codes): ?array\n  {\n    \/\/ Get the ID from the provided codes.\n    if (Str::isUid($id = $this->fromCode($codes))) {\n      \/\/ Check if the result is cached.\n      if ($r = $this->getCache($id, __FUNCTION__)) {\n        return $r;\n      }\n\n      \/\/ Initialize an empty array to store the results.\n      $res = [];\n\n      \/\/ Retrieve all items for the alias and process them into full options.\n      if ($items = $this->getAliasItems($id)) {\n        foreach ($items as $it) {\n          $res[] = $this->option($it);\n        }\n      }\n\n      \/\/ Cache the result and return it.\n      $this->setCache($id, __FUNCTION__, $res);\n      return $res;\n    }\n\n    \/\/ If checks fail, return null.\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 190,
            "endLine": 216,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getAliasFullOptions",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The codes to retrieve the full alias options for."
                }
            ],
            "doc": {
                "description": "Retrieves all full options for an alias based on a given code(s).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$codes",
                        "description": "The codes to retrieve the full alias options for."
                    }
                ],
                "return": "An array of full options if they exist, otherwise null."
            },
            "comments": "  \/**\n   * Retrieves all full options for an alias based on a given code(s).\n   *\n   * @param string ...$codes The codes to retrieve the full alias options for.\n   * @return array|null An array of full options if they exist, otherwise null.\n   *\/"
        },
        "optionsByAlias": {
            "name": "optionsByAlias",
            "summary": "Retrieves all options based on their id_alias.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option\\Internal\\Alias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Internal\/Alias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function optionsByAlias(...$codes): ?array\n  {\n    \/\/ Get the ID from the provided codes.\n    $id_alias = $this->fromCode($codes);\n\n    \/\/ Check if the id_alias is a valid UID.\n    if (Str::isUid($id_alias)) {\n      \/\/ Create a where condition for the query.\n      $where = [\n        $this->fields['id_alias'] => $id_alias\n      ];\n\n      \/\/ Query the database to retrieve all options based on their id_alias.\n      $list  = $this->getRows($where);\n\n      \/\/ Check if the result is an array.\n      if (\\is_array($list)) {\n        \/\/ Initialize an empty array to store the processed results.\n        $res = [];\n\n        \/\/ Iterate through each option and process it.\n        foreach ($list as $i) {\n          $res[] = $this->option($i);\n        }\n\n        \/\/ Return the array of processed options.\n        return $res;\n      }\n    }\n\n    \/\/ If checks fail, return null.\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 224,
            "endLine": 256,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "optionsByAlias",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The codes to retrieve the options for."
                }
            ],
            "doc": {
                "description": "Retrieves all options based on their id_alias.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$codes",
                        "description": "The codes to retrieve the options for."
                    }
                ],
                "return": "An array of options if they exist, otherwise null."
            },
            "comments": "  \/**\n   * Retrieves all options based on their id_alias.\n   *\n   * @param string ...$codes The codes to retrieve the options for.\n   * @return array|null An array of options if they exist, otherwise null.\n   *\/"
        }
    },
    "properties": null,
    "staticProperties": [],
    "constants": null,
    "uses": {
        "bbn\\Str": "Str"
    },
    "dummyComments": [
        "\/**\n * Trait providing functionality for handling aliases in options.\n *\/",
        "\/**\n   * Returns the id_alias relative to the given id_option.\n   *\n   * @param string $id The ID of the option.\n   * @return string|null The id_alias if it exists, otherwise null.\n   *\/",
        "\/**\n   * Returns the id_alias for a given code(s).\n   *\n   * @param string ...$codes The codes to retrieve the id_alias for.\n   * @return string|null The id_alias if it exists, otherwise null.\n   *\/",
        "\/**\n   * Retrieves all aliases for a given code(s).\n   *\n   * @param string ...$codes The codes to retrieve the aliases for.\n   * @return array|null An array of aliases if they exist, otherwise null.\n   *\/",
        "\/**\n   * Retrieves all items for an alias based on a given code(s).\n   *\n   * @param string ...$codes The codes to retrieve the alias items for.\n   * @return array|null An array of item IDs if they exist, otherwise null.\n   *\/",
        "\/**\n   * Retrieves all options for an alias based on a given code(s).\n   *\n   * @param string ...$codes The codes to retrieve the alias options for.\n   * @return array|null An array of option IDs and their corresponding text if they exist, otherwise null.\n   *\/",
        "\/**\n   * Retrieves all full options for an alias based on a given code(s).\n   *\n   * @param string ...$codes The codes to retrieve the full alias options for.\n   * @return array|null An array of full options if they exist, otherwise null.\n   *\/",
        "\/**\n   * Retrieves all options based on their id_alias.\n   *\n   * @param string ...$codes The codes to retrieve the options for.\n   * @return array|null An array of options if they exist, otherwise null.\n   *\/"
    ],
    "summary": "Trait providing functionality for handling aliases in options.",
    "description": "",
    "description_parts": []
}