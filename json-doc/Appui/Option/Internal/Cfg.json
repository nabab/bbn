{
    "doc": {
        "description": "This trait provides configuration-related functionality for the Options class.",
        "tags": []
    },
    "name": "bbn\\Appui\\Option\\Internal\\Cfg",
    "namespace": true,
    "realName": "Cfg",
    "realNamespace": "bbn\\Appui\\Option\\Internal",
    "traits": [],
    "interfaces": [],
    "fileName": "\/Appui\/Option\/Internal\/Cfg.php",
    "startLine": 12,
    "endLine": 410,
    "numMethods": 5,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": true,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": [],
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui\\Option\\Internal",
    "shortName": "Cfg",
    "contentConstructor": null,
    "methods": {
        "getCfg": {
            "name": "getCfg",
            "summary": "Returns a formatted content of the cfg column as an array.",
            "description": "Checks if the parent option has inheritance and sets array accordingly.\n\nThe following inheritance values are supported:\n- 'children': if the option is the direct parent\n- 'cascade': any level of parenthood",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Checks if the parent option has inheritance and sets array accordingly.\n\nThe following inheritance values are supported:\n- 'children': if the option is the direct parent\n- 'cascade': any level of parenthood"
                }
            ],
            "class": "bbn\\Appui\\Option\\Internal\\Cfg",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Internal\/Cfg.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCfg(...$codes): ?array\n  {\n    \/\/ Get the ID of the option from its code.\n    $id = $this->fromCode($codes);\n\n    if (!Str::isUid($id)) {\n      \/\/ If the ID is not valid, return null.\n      throw new Exception(X::_(\"Invalid option ID\"));\n    }\n\n    \/\/ Check if the ID is valid and if the result is cached.\n    if ($tmp = $this->getCache($id, __FUNCTION__)) {\n      return $tmp;\n    }\n\n    \/\/ Get references to class configuration and fields.\n    $c   = &$this->class_cfg;\n    $f   = &$this->fields;\n\n    $id_alias = $this->db->selectOne($c['table'], $f['id_alias'], [$f['id'] => $id]);\n    if ($id_alias && $this->hasTemplate($id)) {\n      $cfg = $this->db->selectOne($c['table'], $f['cfg'], [$f['id'] => $id_alias]);\n      $id = $id_alias;\n    }\n    else {\n      \/\/ Retrieve the cfg value from the database.\n      $cfg = $this->db->selectOne($c['table'], $f['cfg'], [$f['id'] => $id]);\n    }\n\n    \/\/ Decode the JSON string to an array if possible, otherwise initialize as empty array.\n    $cfg = Str::isJson($cfg) ? json_decode($cfg, true) : [];\n\n    \/\/ Check for permissions and store them in the config array.\n    $perm = $cfg['permissions'] ?? false;\n\n    \/\/ Look for parent options with inheritance.\n    $rparents = $this->parents($id);\n\n    $parents = array_reverse($rparents);\n    $last    = end($parents);\n\n    \/\/ Iterate through the parents to find one with inheritance.\n    foreach ($parents as $i => $p) {\n      if ($i < 2) {\n        \/\/ Skip the first two parents as they are not relevant for inheritance.\n        continue;\n      }\n      \/\/ Retrieve the config of the parent option.\n      $parent_cfg = $this->db->selectOne($c['table'], $f['cfg'], [$f['id'] => $p]);\n\n      \/\/ Decode the JSON string to an array if possible, otherwise initialize as empty array.\n      $parent_cfg = Str::isJson($parent_cfg) ? json_decode($parent_cfg, true) : [];\n\n      \/\/ Check for inheritance in the parent's config or scfg.\n      if (!empty($parent_cfg['scfg']) && ($p === $last)) {\n        \/\/ Merge the current config with the parent's scfg and set inherit_from and frozen.\n        $cfg                 = array_merge((array)$cfg, $parent_cfg['scfg']);\n        $cfg['inherit_from'] = $p;\n        $cfg['frozen']       = 1;\n        break;\n      }\n\n      \/\/ Check for inheritance in the parent's config or scfg.\n      if (!empty($parent_cfg['inheritance']) || !empty($parent_cfg['scfg']['inheritance'])) {\n        \/\/ Check if the parent is a direct parent and its inheritance value is 'children' or 'cascade'.\n        if (\n          (($p === $last)\n            && (\n              (($parent_cfg['inheritance'] ?? null) === 'children')\n              || (!empty($parent_cfg['scfg']) && (($parent_cfg['scfg']['inheritance'] ?? null) === 'children'))\n            )\n          )\n          || (\n            (($parent_cfg['inheritance'] ?? null) === 'cascade')\n            || (!empty($parent_cfg['scfg']) && (($parent_cfg['scfg']['inheritance'] ?? null) === 'cascade'))\n          )\n        ) {\n          \/\/ Merge the current config with the parent's scfg or config, and set inherit_from and frozen.\n          $cfg                 = array_merge((array)$cfg, $parent_cfg['scfg'] ?? $parent_cfg);\n          $cfg['inherit_from'] = $p;\n          $cfg['frozen']       = 1;\n          break;\n        }\n        \/\/ If the current config is empty and the parent's inheritance value is 'default', use the parent's scfg or config.\n        elseif (\n          !count($cfg)\n          && ((($parent_cfg['inheritance'] ?? null) === 'default')\n            || (!empty($parent_cfg['scfg']) && (($parent_cfg['scfg']['inheritance'] ?? null) === 'default')))\n        ) {\n          $cfg                 = $parent_cfg['scfg'] ?? $parent_cfg;\n          $cfg['inherit_from'] = $p;\n        }\n      }\n    }\n\n    if (empty($cfg) && ($id_alias = $this->getIdAlias($id)) && $this->isInTemplate($id_alias)) {\n      $cfg['inherit_from'] = $id_alias;\n      $cfg['frozen']       = 1;\n    }\n\n    if ($cfg && !empty($cfg['inherit_from'])) {\n      $cfg['inherit_from_text'] = $this->text($cfg['inherit_from']);\n    }\n\n    \/\/ Restore permissions if they were present initially.\n    if ($perm) {\n      $cfg['permissions'] = $perm;\n    }\n\n    \/\/ Set default values for mandatory fields.\n    $mandatories = ['show_code', 'show_value', 'show_icon', 'sortable', 'allow_children', 'frozen'];\n    foreach ($mandatories as $m) {\n      $cfg[$m] = empty($cfg[$m]) ? 0 : 1;\n    }\n\n    \/\/ Set default values for fields that should be strings.\n    $mandatories = ['desc', 'inheritance', 'relations', 'permissions', 'i18n', 'i18n_inheritance'];\n    foreach ($mandatories as $m) {\n      $cfg[$m] = empty($cfg[$m]) ? '' : $cfg[$m];\n    }\n\n    \/\/ Set default values for fields that should be null.\n    $mandatories = ['controller', 'schema', 'form', 'default_value', 'id_root_alias'];\n    foreach ($mandatories as $m) {\n      $cfg[$m] = empty($cfg[$m]) ? null : $cfg[$m];\n    }\n\n    $cfg['root_alias'] = null;\n    if ($this->root && $this->default && !empty($cfg['id_root_alias'])) {\n      $cfg['root_alias'] = $this->option($cfg['id_root_alias']);\n      if (!empty($cfg['root_alias']['num_children'])\n          && ($items = $this->items($cfg['id_root_alias']))\n      ) {\n        $cfg['root_alias']['last_level'] = true;\n        foreach ($items as $item) {\n          if ($this->items($item)) {\n            $cfg['root_alias']['last_level'] = false;\n            break;\n          }\n        }\n\n        if ($cfg['root_alias']['last_level']\n            && ($last_level_children = $this->fullOptions($cfg['id_root_alias']))\n        ) {\n          X::sortBy($last_level_children, 'text');\n          $cfg['root_alias']['last_level_children'] = $last_level_children;\n        }\n      }\n    }\n\n    \/\/ Cache the result and return it.\n    $this->setCache($id, __FUNCTION__, $cfg);\n    return $cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 25,
            "endLine": 178,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getCfg",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Any option(s) accepted by fromCode()"
                }
            ],
            "doc": {
                "description": "Returns a formatted content of the cfg column as an array.\nChecks if the parent option has inheritance and sets array accordingly.\n\nThe following inheritance values are supported:\n- 'children': if the option is the direct parent\n- 'cascade': any level of parenthood\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$codes",
                        "description": "Any option(s) accepted by fromCode()"
                    }
                ],
                "return": "The formatted array or null if the option cannot be found"
            },
            "comments": "  \/**\n   * Returns a formatted content of the cfg column as an array.\n   * Checks if the parent option has inheritance and sets array accordingly.\n   *\n   * The following inheritance values are supported:\n   * - 'children': if the option is the direct parent\n   * - 'cascade': any level of parenthood\n   *\n   * @param mixed ...$codes Any option(s) accepted by fromCode()\n   * @return array|null The formatted array or null if the option cannot be found\n   *\/"
        },
        "getRawCfg": {
            "name": "getRawCfg",
            "summary": "Returns the raw content of the cfg column for the given option.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option\\Internal\\Cfg",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Internal\/Cfg.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRawCfg(...$codes): ?string\n  {\n    \/\/ Get the ID of the option from its code.\n    $id = $this->fromCode($codes);\n\n    \/\/ Check if the ID is valid and retrieve the raw cfg value from the database.\n    if (Str::isUid($id)) {\n      $c = &$this->class_cfg;\n      $f = &$this->fields;\n      return $this->db->selectOne($c['table'], $f['cfg'], [$f['id'] => $id]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 187,
            "endLine": 200,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getRawCfg",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Any option(s) accepted by fromCode()"
                }
            ],
            "doc": {
                "description": "Returns the raw content of the cfg column for the given option.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$codes",
                        "description": "Any option(s) accepted by fromCode()"
                    }
                ],
                "return": "The raw cfg value or null if the option cannot be found"
            },
            "comments": "  \/**\n   * Returns the raw content of the cfg column for the given option.\n   *\n   * @param mixed ...$codes Any option(s) accepted by fromCode()\n   * @return string|null The raw cfg value or null if the option cannot be found\n   *\/"
        },
        "getApplicableCfg": {
            "name": "getApplicableCfg",
            "summary": "Returns a formatted content of the cfg column as an array from the option's parent.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option\\Internal\\Cfg",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Internal\/Cfg.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getApplicableCfg(...$codes): ?array\n  {\n    \/\/ Get the ID of the option from its code.\n    $id = $this->fromCode($codes);\n\n    if (!Str::isUid($id)) {\n      \/\/ If the ID is not valid, return null.\n      throw new Exception(X::_(\"Invalid option ID\"));\n    }\n\n    \/\/ Check if the result is cached.\n    if ($tmp = $this->getCache($id, __FUNCTION__)) {\n      return $tmp;\n    }\n\n    \/\/ Check if the ID is valid and retrieve the parent's config.\n    if ($id && ($id_parent = $this->getIdParent($id))) {\n      \/\/ Get references to class configuration and fields.\n      $c   = &$this->class_cfg;\n      $f   = &$this->fields;\n      \n      $itemCfg = $this->db->selectOne($c['table'], $f['cfg'], [$f['id'] => $id]);\n      $itemCfg = Str::isJson($itemCfg) ? json_decode($itemCfg, true) : [];\n      $id_alias = $this->alias($id_parent);\n      $inherit = false;\n      if ($id_alias && $this->hasTemplate($id_parent)) {\n        $cfg = $this->db->selectOne($c['table'], $f['cfg'], [$f['id'] => $id_alias]);\n        $id_parent = $id_alias;\n        $inherit = $id_alias;\n      }\n      else {\n        \/\/ Retrieve the cfg value from the database.\n        $cfg = $this->db->selectOne($c['table'], $f['cfg'], [$f['id'] => $id_parent]);\n        $inherit = $id_parent;\n      }\n\n      \/\/ Decode the JSON string to an array if possible, otherwise initialize as empty array.\n      $cfg = Str::isJson($cfg) ? json_decode($cfg, true) : [];\n\n      if ($id === '24307e41648d11eab7ec525400007196') {\n        \/\/X::ddump(\"cfg\", $cfg, \"id\", $id, \"umherit\", $inherit, \"id_parent\", $id_parent, \"id_alias\", $id_alias, \"itemCfg\", $itemCfg);\n      }\n\n      \/\/ Check for permissions and store them in the config array.\n      $perm = isset($itemCfg['permissions']) && ($itemCfg['permissions'] === 'single') ? true : ($cfg['permissions'] ?? false);\n      \/\/ Look for parent options with inheritance.\n      $parents = array_reverse($this->parents($id_parent));\n      $last    = end($parents);\n      $parent_cfg = $this->db->selectOne($c['table'], $f['cfg'], [$f['id'] => $last]);\n      \/\/ Decode the JSON string to an array if possible, otherwise initialize as empty array.\n      $parent_cfg = Str::isJson($parent_cfg) ? json_decode($parent_cfg, true) : [];\n      \/\/ Check for inheritance in the parent's config or scfg.\n      if (!empty($parent_cfg['scfg'])) {\n        \/\/ Merge the current config with the parent's scfg and set inherit_from and frozen.\n        $inherit       = $last;\n        $cfg           = array_merge((array)$cfg, $parent_cfg['scfg']);\n        $cfg['frozen'] = 1;\n      }\n      else {\n        \/\/ Iterate through the parents to find one with inheritance.\n        foreach ($parents as $i => $p) {\n          \/\/ Retrieve the config of the parent option.\n          $parent_cfg = $this->db->selectOne($c['table'], $f['cfg'], [$f['id'] => $p]);\n          \/\/ Decode the JSON string to an array if possible, otherwise initialize as empty array.\n          $parent_cfg = Str::isJson($parent_cfg) ? json_decode($parent_cfg, true) : [];\n          \/\/ Check for inheritance in the parent's config or scfg.\n          if (!empty($parent_cfg['inheritance']) || !empty($parent_cfg['scfg']['inheritance'])) {\n            \/\/ Check if the parent is a direct parent and its inheritance value is 'children' or 'cascade'.\n            if (\n              (($i === ($last-1))\n                && (\n                  (($parent_cfg['inheritance'] ?? null) === 'children')\n                  || (!empty($parent_cfg['scfg']) && (($parent_cfg['scfg']['inheritance'] ?? null) === 'children'))\n                )\n              )\n              || (\n                (($parent_cfg['inheritance'] ?? null) === 'cascade')\n                || (!empty($parent_cfg['scfg']) && (($parent_cfg['scfg']['inheritance'] ?? null) === 'cascade'))\n              )\n            ) {\n              \/\/ Merge the current config with the parent's scfg or config, and set inherit_from and frozen.\n              $inherit       = $p;\n              $cfg           = array_merge((array)$cfg, $parent_cfg['scfg'] ?? $parent_cfg);\n              $cfg['frozen'] = 1;\n              break;\n            }\n            \/\/ If the current config is empty and the parent's inheritance value is 'default', use the parent's scfg or config.\n            elseif (\n              empty($cfg)\n              && ((($parent_cfg['inheritance'] ?? null) === 'default')\n                || (!empty($parent_cfg['scfg']) && (($parent_cfg['scfg']['inheritance'] ?? null) === 'default')))\n            ) {\n              $cfg                 = $parent_cfg['scfg'] ?? $parent_cfg;\n              $inherit = $p;\n            }\n          }\n        }\n      }\n\n      if ($inherit) {\n        $cfg['inherit_from'] = $inherit;\n        $cfg['inherit_from_text'] = $this->text($cfg['inherit_from']);\n      }\n\n      \/\/ Restore permissions if they were present initially.\n      if ($perm) {\n        $cfg['permissions'] = $perm;\n      }\n\n      \/\/ Set default values for mandatory fields.\n      $mandatories = ['show_code', 'show_value', 'show_icon', 'sortable', 'allow_children', 'frozen'];\n      foreach ($mandatories as $m) {\n        $cfg[$m] = empty($cfg[$m]) ? 0 : 1;\n      }\n\n      \/\/ Set default values for fields that should be strings.\n      $mandatories = ['desc', 'inheritance', 'relations', 'permissions', 'i18n', 'i18n_inheritance'];\n      foreach ($mandatories as $m) {\n        $cfg[$m] = empty($cfg[$m]) ? '' : $cfg[$m];\n      }\n\n      \/\/ Set default values for fields that should be null.\n      $mandatories = ['controller', 'schema', 'form', 'default_value', 'id_root_alias'];\n      foreach ($mandatories as $m) {\n        $cfg[$m] = empty($cfg[$m]) ? null : $cfg[$m];\n      }\n\n      $cfg['root_alias'] = null;\n      if ($this->root && $this->default && !empty($cfg['id_root_alias'])) {\n        $cfg['root_alias'] = $this->option($cfg['id_root_alias']);\n        if (!empty($cfg['root_alias']['num_children'])\n            && ($items = $this->items($cfg['id_root_alias']))\n        ) {\n          $cfg['root_alias']['last_level'] = true;\n          foreach ($items as $item) {\n            if ($this->items($item)) {\n              $cfg['root_alias']['last_level'] = false;\n              break;\n            }\n          }\n\n          if ($cfg['root_alias']['last_level']\n              && ($last_level_children = $this->fullOptions($cfg['id_root_alias']))\n          ) {\n            X::sortBy($last_level_children, 'text');\n            $cfg['root_alias']['last_level_children'] = $last_level_children;\n          }\n        }\n      }\n\n        \/\/ Cache the result and return it.\n      $this->setCache($id, __FUNCTION__, $cfg);\n      return $cfg;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 208,
            "endLine": 364,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getApplicableCfg",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Any option(s) accepted by fromCode()"
                }
            ],
            "doc": {
                "description": "Returns a formatted content of the cfg column as an array from the option's parent.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$codes",
                        "description": "Any option(s) accepted by fromCode()"
                    }
                ],
                "return": "The formatted config or null if the option cannot be found"
            },
            "comments": "  \/**\n   * Returns a formatted content of the cfg column as an array from the option's parent.\n   *\n   * @param mixed ...$codes Any option(s) accepted by fromCode()\n   * @return array|null The formatted config or null if the option cannot be found\n   *\/"
        },
        "isSortable": {
            "name": "isSortable",
            "summary": "Tells if an option has its config set as sortable or no",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option\\Internal\\Cfg",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Internal\/Cfg.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isSortable(...$codes): ?bool\n  {\n    \/\/ Get the ID of the option from its code.\n    $id = $this->fromCode($codes);\n\n    \/\/ Check if the ID is valid and retrieve the config to check for sortability.\n    if (Str::isUid($id)) {\n      $cfg = $this->getCfg($id);\n      return !empty($cfg['sortable']);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 373,
            "endLine": 385,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "isSortable",
            "returns": [
                null,
                "bool"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Any option(s) accepted by fromCode()"
                }
            ],
            "doc": {
                "description": "Tells if an option has its config set as sortable or no\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$codes",
                        "description": "Any option(s) accepted by fromCode()"
                    }
                ],
                "return": "Whether the option is sortable or null if the option cannot be found"
            },
            "comments": "  \/**\n   * Tells if an option has its config set as sortable or no\n   *\n   * @param mixed ...$codes Any option(s) accepted by fromCode()\n   * @return bool|null Whether the option is sortable or null if the option cannot be found\n   *\/"
        },
        "getSchema": {
            "name": "getSchema",
            "summary": "Retrieves the schema of an option.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option\\Internal\\Cfg",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Internal\/Cfg.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSchema(string $id): ?array\n  {\n    \/\/ Retrieve the config to check for a schema.\n    if ($cfg = $this->getCfg($id)) {\n      \/\/ Check if a schema is defined and decode it from JSON.\n      if (!empty($cfg['schema'])) {\n        if (is_string($cfg['schema'])) {\n          return json_decode($cfg['schema'], true);\n        }\n\n        return $cfg['schema'];\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 394,
            "endLine": 409,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getSchema",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The ID of the option"
                }
            ],
            "doc": {
                "description": "Retrieves the schema of an option.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The ID of the option"
                    }
                ],
                "return": "The schema or null if it cannot be found"
            },
            "comments": "  \/**\n   * Retrieves the schema of an option.\n   *\n   * @param string $id The ID of the option\n   * @return array|null The schema or null if it cannot be found\n   *\/"
        }
    },
    "properties": null,
    "staticProperties": [],
    "constants": null,
    "uses": {
        "bbn\\Str": "Str",
        "bbn\\X": "X",
        "Exception": "Exception"
    },
    "dummyComments": [
        "\/**\n * This trait provides configuration-related functionality for the Options class.\n *\/",
        "\/**\n   * Returns a formatted content of the cfg column as an array.\n   * Checks if the parent option has inheritance and sets array accordingly.\n   *\n   * The following inheritance values are supported:\n   * - 'children': if the option is the direct parent\n   * - 'cascade': any level of parenthood\n   *\n   * @param mixed ...$codes Any option(s) accepted by fromCode()\n   * @return array|null The formatted array or null if the option cannot be found\n   *\/",
        "\/**\n   * Returns the raw content of the cfg column for the given option.\n   *\n   * @param mixed ...$codes Any option(s) accepted by fromCode()\n   * @return string|null The raw cfg value or null if the option cannot be found\n   *\/",
        "\/**\n   * Returns a formatted content of the cfg column as an array from the option's parent.\n   *\n   * @param mixed ...$codes Any option(s) accepted by fromCode()\n   * @return array|null The formatted config or null if the option cannot be found\n   *\/",
        "\/**\n   * Tells if an option has its config set as sortable or no\n   *\n   * @param mixed ...$codes Any option(s) accepted by fromCode()\n   * @return bool|null Whether the option is sortable or null if the option cannot be found\n   *\/",
        "\/**\n   * Retrieves the schema of an option.\n   *\n   * @param string $id The ID of the option\n   * @return array|null The schema or null if it cannot be found\n   *\/"
    ],
    "summary": "This trait provides configuration-related functionality for the Options class.",
    "description": "",
    "description_parts": []
}