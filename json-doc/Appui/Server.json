{
    "doc": {
        "description": "Server class\n",
        "tags": {
            "category": "Appui",
            "package": "Appui",
            "author": "Mirko Argentino <mirko@bbn.solutions>",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.html MIT License",
            "link": "https:\/\/bbn.io\/bbn-php\/doc\/class\/Appui\/Server"
        }
    },
    "name": "bbn\\Appui\\Server",
    "namespace": true,
    "realName": "Server",
    "realNamespace": "bbn\\Appui",
    "traits": [
        "bbn\\Models\\Tts\\Cache",
        "bbn\\Models\\Tts\\Optional"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Server.php",
    "startLine": 24,
    "endLine": 1239,
    "numMethods": 74,
    "numProperties": 18,
    "numConstants": 1,
    "numStaticProperties": 2,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "optional_is_init": false,
        "option_root_id": null,
        "user": null,
        "pass": null,
        "hostname": null,
        "opt": null,
        "virtualmin": null,
        "cloudmin": null,
        "webmin": null,
        "cacheNamePrefix": null,
        "mainDataPath": null,
        "dataPath": null,
        "db": null,
        "lastError": "",
        "online": true,
        "_cache_prefix": null,
        "cache_engine": null,
        "options": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Server",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Constructor.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct($cfg)\n  {\n    $this->cacheInit();\n    self::optionalInit();\n    if (\\is_string($cfg)) {\n      $opt = self::getOption($cfg, 'servers');\n      $psw = new Passwords(Db::getInstance());\n      $cfg = [\n        'user' => $opt['user'] ?? null,\n        'pass' => !empty($opt['id']) ? $psw->get($opt['id']) : null,\n        'host' => $opt['code'] ?? null\n      ];\n    }\n\n    if (empty($cfg['user'])) {\n      throw new \\Exception(_('The username is mandatory'));\n    }\n\n    if (empty($cfg['pass'])) {\n      throw new \\Exception(_('The password is mandatory'));\n    }\n\n    $this->opt             = Option::getInstance();\n    $this->user            = $cfg['user'];\n    $this->pass            = $cfg['pass'];\n    $this->hostname        = isset($cfg['host']) ? $cfg['host'] : 'localhost';\n    $this->cacheNamePrefix = $this->hostname . '\/';\n    $this->mainDataPath    = self::getMainDataPath();\n    $this->dataPath        = $this->mainDataPath . $this->hostname . '\/';\n    $this->db         = self::getDb();\n    $this->virtualmin = new Virtualmin([\n      'user' => $this->user,\n      'pass' => $this->pass,\n      'host' => $this->hostname,\n      'mode' => 'virtualmin'\n    ]);\n    $this->webmin     = new Webmin([\n      'user' => $this->user,\n      'pass' => $this->pass,\n      'host' => $this->hostname\n    ]);\n    if (!empty($cfg['cloudmin'])) {\n      $this->cloudmin   = new Cloudmin([\n        'user' => $this->user,\n        'pass' => $this->pass,\n        'host' => $this->hostname\n      ]);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 74,
            "endLine": 122,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Constructor.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Constructor.\n   * @param array $cfg\n   *\/"
        },
        "makeCache": {
            "name": "makeCache",
            "summary": "Makes the cache for this server",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function makeCache(string $mode = '', string $domain = '')\n  {\n    if ($this->online) {\n      if (!$this->virtualmin->testConnection()) {\n        throw new \\Exception(sprintf(_('Connection with server \"%s\" failed'), $this->hostname));\n      }\n      if (empty($mode) || ($mode === 'info') || $this->virtualmin->isInfoProp($mode)) {\n        $this->cacheInfo($this->virtualmin->isInfoProp($mode) ? ['search' => $mode] : []);\n      }\n\n      if (empty($mode) || ($mode === 'uptime')) {\n        $this->cacheUptime();\n      }\n\n      if (empty($mode) || ($mode === 'domains')) {\n        $this->cacheListDomains($domain);\n      }\n\n      if (empty($mode) || ($mode === 'subdomains')) {\n        $this->cacheListSubDomains($domain);\n      }\n\n      if (empty($mode) || ($mode === 'admins')) {\n        $this->cacheListAdmins($domain);\n      }\n\n      if (empty($mode) || ($mode === 'users')) {\n        $this->cacheListUsers($domain);\n      }\n\n      if (empty($mode) || ($mode === 'dns')) {\n        $this->cacheListDns($domain);\n      }\n\n      if (empty($mode) || ($mode === 'backups')) {\n        $this->cacheListBackups($domain);\n      }\n\n      if (empty($mode) || ($mode === 'features_template')) {\n        $this->cacheListFeaturesTemplate($domain);\n      }\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 132,
            "endLine": 174,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "makeCache",
            "returns": [],
            "arguments": [
                {
                    "name": "mode",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "domain",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Makes the cache for this server\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$domain"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Makes the cache for this server\n   *\n   * @param string $mode\n   * @param string $domain\n   * @return void\n   *\/"
        },
        "hasCache": {
            "name": "hasCache",
            "summary": "Checks if the cache file exists",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasCache(string $path, string $domain = ''): bool\n  {\n    return $this->getCache($path, false, $domain) !== false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 183,
            "endLine": 186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "hasCache",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "domain",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if the cache file exists\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$domain"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the cache file exists\n   * @param string $path\n   * @param string $domain\n   * @return bool\n   *\/"
        },
        "getCache": {
            "name": "getCache",
            "summary": "Gets data from the cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCache(string $path, bool $force = false, string $domain = '')\n  {\n    $c = $this->cacheNamePrefix . (empty($domain) ? '' : \"domains\/$domain\/\") . $path;\n    if (($force || ($this->cacheGet($c) === false)) && !$this->offline) {\n      $this->makeCache($path, $domain);\n    }\n    return $this->cacheGet($c);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 196,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getCache",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "domain",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets data from the cache\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$domain"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets data from the cache\n   * @param string $path\n   * @param bool $force\n   * @param string $domain\n   * @return mixed\n   *\/"
        },
        "getVirtualmin": {
            "name": "getVirtualmin",
            "summary": "Gets Virtualmin instance",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getVirtualmin(): bbn\\Api\\Virtualmin\n  {\n    return $this->virtualmin;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 210,
            "endLine": 213,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getVirtualmin",
            "returns": [
                "bbn\\Api\\Virtualmin"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets Virtualmin instance\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets Virtualmin instance\n   * @return bbn\\Api\\Virtualmin\n   *\/"
        },
        "getCloudmin": {
            "name": "getCloudmin",
            "summary": "Gets Cloudmin instance",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCloudmin(): ?bbn\\Api\\Cloudmin\n  {\n    return $this->cloudmin;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 220,
            "endLine": 223,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCloudmin",
            "returns": [
                null,
                "bbn\\Api\\Cloudmin"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets Cloudmin instance\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets Cloudmin instance\n   * @return bbn\\Api\\Cloudmin|null\n   *\/"
        },
        "getWebmin": {
            "name": "getWebmin",
            "summary": "Gets Webmin instance",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getWebmin(): bbn\\Api\\Webmin\n  {\n    return $this->webmin;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 230,
            "endLine": 233,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getWebmin",
            "returns": [
                "bbn\\Api\\Webmin"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets Webmin instance\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets Webmin instance\n   * @return bbn\\Api\\Webmin\n   *\/"
        },
        "setOffline": {
            "name": "setOffline",
            "summary": "Sets the property 'online' to false",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setOffline(): bbn\\Appui\\Server\n  {\n    $this->online = false;\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 240,
            "endLine": 244,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "setOffline",
            "returns": [
                "bbn\\Appui\\Server"
            ],
            "arguments": [],
            "doc": {
                "description": "Sets the property 'online' to false\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the property 'online' to false\n   * @return self\n   *\/"
        },
        "setOnline": {
            "name": "setOnline",
            "summary": "Sets the property 'online' to true",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setOnline(): bbn\\Appui\\Server\n  {\n    $this->online = true;\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 251,
            "endLine": 255,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "setOnline",
            "returns": [
                "bbn\\Appui\\Server"
            ],
            "arguments": [],
            "doc": {
                "description": "Sets the property 'online' to true\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the property 'online' to true\n   * @return self\n   *\/"
        },
        "startService": {
            "name": "startService",
            "summary": "Start a service",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function startService(string $service): bool\n  {\n    if ($this->webmin && $this->webmin->startService($service)) {\n      return $this->collectInfo();\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 263,
            "endLine": 269,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "startService",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "service",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the service"
                }
            ],
            "doc": {
                "description": "Start a service\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$service",
                        "description": "The name of the service"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Start a service\n   * @param string $service The name of the service\n   * @return bool\n   *\/"
        },
        "stopService": {
            "name": "stopService",
            "summary": "Stop a service",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function stopService(string $service): bool\n  {\n    if ($this->webmin && $this->webmin->stopService($service)) {\n      return $this->collectInfo();\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 277,
            "endLine": 283,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "stopService",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "service",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the service"
                }
            ],
            "doc": {
                "description": "Stop a service\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$service",
                        "description": "The name of the service"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Stop a service\n   * @param string $service The name of the service\n   * @return bool\n   *\/"
        },
        "restartService": {
            "name": "restartService",
            "summary": "Restart a service",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function restartService(string $service): bool\n  {\n    if ($this->webmin && $this->webmin->restartService($service)) {\n      return $this->collectInfo();\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 291,
            "endLine": 297,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "restartService",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "service",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the service"
                }
            ],
            "doc": {
                "description": "Restart a service\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$service",
                        "description": "The name of the service"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Restart a service\n   * @param string $service The name of the service\n   * @return bool\n   *\/"
        },
        "collectInfo": {
            "name": "collectInfo",
            "summary": "Re-collect server info",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function collectInfo(): bool\n  {\n    return $this->virtualmin ? (bool)$this->virtualmin->collectInfo() : false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 304,
            "endLine": 307,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "collectInfo",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Re-collect server info\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Re-collect server info\n   * @return bool\n   *\/"
        },
        "setDomainState": {
            "name": "setDomainState",
            "summary": "Enables\/Disables a domain",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDomainState(string $domain, bool $state = true): bool\n  {\n    if (\n        (!empty($state)\n          && $this->virtualmin->enable_domain(['domain' => $domain]))\n        || (empty($state)\n          && $this->virtualmin->disable_domain(['domain' => $domain])\n        )\n    ) {\n      $domains = $this->getCache('domains');\n      $this->makeCache('', $domain);\n      if (\n          !\\is_null($idx = X::search($domains, ['name' => $domain]))\n          && !empty($domains[$idx]['parent_domain'])\n      ) {\n        $this->makeCache('subdomains', $domains[$idx]['parent_domain']);\n      }\n      self::makeGlobalDomainsCache();\n      return true;\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 317,
            "endLine": 338,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setDomainState",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "domain",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "state",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Enables\/Disables a domain\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$domain"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$state"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Enables\/Disables a domain\n   *\n   * @param string $domain\n   * @param bool $state\n   * @return bool\n   *\/"
        },
        "createDomain": {
            "name": "createDomain",
            "summary": "Creates a new domain",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createDomain(array $domainData): bool\n  {\n    if (empty($domainData['name'])) {\n      throw new \\Error(_('The \"name\" property is mandatory'));\n    }\n    if (empty($domainData['type'])) {\n      throw new \\Error(_('The \"type\" property is mandatory'));\n    }\n    $args = [\n      'domain' => $domainData['name']\n    ];\n    if (!empty($domainData['description'])) {\n      $args['desc'] = $domainData['description'];\n    }\n\n    switch ($domainData['type']) {\n      case 'top':\n        if (empty($domainData['password'])) {\n          throw new \\Error(_('The \"password\" property is mandatory'));\n        }\n        $args['pass'] = $domainData['password'];\n        $features = $this->getCache('features_template');\n        break;\n      case 'sub':\n        if (empty($domainData['parent'])) {\n          throw new \\Error(_('The \"parent\" property is mandatory'));\n        }\n        $args['parent'] = $domainData['parent'];\n        $features       = $this->getCache('features_template', false, $domainData['parent']);\n        break;\n      case 'alias':\n        if (empty($domainData['parent'])) {\n          throw new \\Error(_('The \"parent\" property is mandatory'));\n        }\n        $args['alias'] = $domainData['parent'];\n        $features      = $this->getCache('features_template_alias', false, $domainData['parent']);\n        break;\n    }\n\n    if (!empty($features)) {\n      foreach ($features as $f) {\n        if (\n            (strtolower($f['automatic']) === 'yes')\n            && (strtolower($f['enabled']) === 'yes')\n            && (strtolower($f['default']) === 'yes')\n        ) {\n          $args[$f['name']] = 1;\n        }\n      }\n\n      if (!empty($domainData['features'])) {\n        $args = X::mergeArrays(\n            $args,\n            \\array_filter($domainData['features'], function ($v, $k) use ($features) {\n              $f = X::getRow($features, ['name' => $k]);\n              return !empty($v)\n                && !empty($f)\n                && (strtolower($f['enabled']) === 'yes');\n            }, ARRAY_FILTER_USE_BOTH)\n        );\n      }\n    }\n\n    if ($this->virtualmin->create_domain($args)) {\n      $this->makeCache('', $domainData['name']);\n      if (!empty($domainData['parent'])) {\n        $this->makeCache('subdomains', $domainData['parent']);\n      }\n      self::makeGlobalDomainsCache();\n      return true;\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 346,
            "endLine": 418,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "createDomain",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "domainData",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ata"
                }
            ],
            "doc": {
                "description": "Creates a new domain\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$domain",
                        "description": "ata"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates a new domain\n   * @param array $domainData\n   * @return bool\n   *\/"
        },
        "editDomain": {
            "name": "editDomain",
            "summary": "Edites a domain",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function editDomain(array $domainData): bool\n  {\n    if (empty($domainData['name'])) {\n      throw new \\Error(_('The \"name\" property is mandatory'));\n    }\n\n    if (empty($domainData['type'])) {\n      throw new \\Error(_('The \"type\" property is mandatory'));\n    }\n\n    if (!($domains = $this->getCache('domains'))) {\n      throw new \\Error(_('No domains cache found'));\n    }\n\n    if (!($oldDomain = X::getRow($domains, ['name' => $domainData['name']]))) {\n      throw new \\Error(_('Domain not found into cache'));\n    }\n\n    $args = ['domain' => $domainData['name']];\n    if (\n        isset($domainData['description'])\n        && ($domainData['description'] !== $oldDomain['description'])\n    ) {\n      $args['desc'] = $domainData['description'];\n    }\n\n    switch ($domainData['type']) {\n      case 'top':\n        if (!empty($domainData['password'])) {\n          $args['pass'] = $domainData['password'];\n        }\n        $features = $this->getCache('features_template');\n        break;\n      case 'sub':\n        $features = $this->getCache('features_template', false, $domainData['parent']);\n        break;\n      case 'alias':\n        $features = $this->getCache('features_template_alias', false, $domainData['parent']);\n        break;\n    }\n\n    if (\n        isset($domainData['serverQuota'])\n        && ($domainData['serverQuota'] !== $oldDomain['server_block_quota'])\n        && !(($domainData['serverQuota'] === 0)\n          && ($oldDomain['server_block_quota'] === 'Unlimited'))\n    ) {\n      $args['quota'] = $domainData['serverQuota'] === 0 ? 'UNLIMITED' : ($domainData['serverQuota'] \/ 1024);\n    }\n\n    if (\n        isset($domainData['userQuota'])\n        && ($domainData['userQuota'] !== $oldDomain['user_block_quota'])\n        && !(($domainData['userQuota'] === 0)\n          && ($oldDomain['user_block_quota'] === 'Unlimited'))\n    ) {\n      $args['uquota'] = $domainData['userQuota'] === 0 ? 'UNLIMITED' : ($domainData['userQuota'] \/ 1024);\n    }\n\n    if (\n        (count($args) > 1)\n        && !$this->virtualmin->modify_domain($args)\n    ) {\n      $this->lastError = $this->virtualmin->error;\n      return false;\n    }\n\n    \/\/ Features\n    if (!empty($features) && !empty($domainData['features'])) {\n      $args              = ['domain' => $domainData['name']];\n      $oldFeatures       = explode(' ', $oldDomain['features']);\n      $featuresToEnable  = \\array_filter($domainData['features'], function ($v, $k) use ($features, $oldFeatures) {\n        $f = X::getRow($features, ['name' => $k]);\n        return !empty($v)\n          && !empty($f)\n          && (strtolower($f['enabled']) === 'yes')\n          && !\\in_array($k, $oldFeatures);\n      }, ARRAY_FILTER_USE_BOTH);\n      $featuresToDisable = \\array_map(function ($f) {\n        return 1;\n      }, \\array_filter($domainData['features'], function ($v, $k) use ($features, $oldFeatures) {\n        $f = X::getRow($features, ['name' => $k]);\n        return empty($v)\n          && !empty($f)\n          && (strtolower($f['enabled']) === 'yes')\n          && \\in_array($k, $oldFeatures);\n      }, ARRAY_FILTER_USE_BOTH));\n\n      if (\n          !empty($featuresToEnable)\n          && !$this->virtualmin->enable_feature(X::mergeArrays($featuresToEnable, $args))\n      ) {\n        $this->lastError = $this->virtualmin->error;\n        return false;\n      }\n\n      if (\n          !empty($featuresToDisable)\n          && !$this->virtualmin->disable_feature(X::mergeArrays($featuresToDisable, $args))\n      ) {\n        $this->lastError = $this->virtualmin->error;\n        return false;\n      }\n    }\n    $this->makeCache('', $domainData['name']);\n    if (!empty($oldDomain['parent_domain'])) {\n      $this->makeCache('subdomains', $oldDomain['parent_domain']);\n    }\n    self::makeGlobalDomainsCache();\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 426,
            "endLine": 536,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "editDomain",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "domainData",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ata"
                }
            ],
            "doc": {
                "description": "Edites a domain\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$domain",
                        "description": "ata"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Edites a domain\n   * @param array $domainData\n   * @return bool\n   *\/"
        },
        "deleteDomain": {
            "name": "deleteDomain",
            "summary": "Deletes a domain",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteDomain(string $domain): bool\n  {\n    if (\n        ($domains = $this->getCache('domains'))\n        && $this->virtualmin->delete_domain(['domain' => $domain])\n    ) {\n      if (!\\is_null($idx = X::search($domains, ['name' => $domain]))) {\n        if (!empty($domains[$idx]['parent_domain'])) {\n          $this->makeCache('subdomains', $domains[$idx]['parent_domain']);\n        }\n        array_splice($domains, $idx, 1);\n        $this->cacheSet(\n            $this->cacheNamePrefix . 'domains',\n            '',\n            $domains,\n            0\n        );\n        $this->cacheDelete($this->cacheNamePrefix . \"domains\/$domain\");\n        self::makeGlobalDomainsCache();\n      }\n      return true;\n    }\n    else {\n      $this->lastError = $this->virtualmin->error;\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 543,
            "endLine": 569,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteDomain",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "domain",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes a domain\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$domain"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a domain\n   * @param string $domain\n   * @return bool\n   *\/"
        },
        "renameDomain": {
            "name": "renameDomain",
            "summary": "Renames a domain",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function renameDomain(string $domain, string $newDomain): bool\n  {\n    if (\n        $this->virtualmin->unsetJson()->rename_domain([\n          'domain' => $domain,\n          'new-domain' => $newDomain,\n          'auto-user' => 1,\n          'auto-home' => 1,\n          'auto-prefix' => 1\n        ])\n    ) {\n      $this->virtualmin->setJson();\n      $this->makeCache('', $newDomain);\n      $domains = $this->getCache('domains');\n      if (!\\is_null($idx = X::search($domains, ['name' => $domain]))) {\n        if (!empty($domains[$idx]['parent_domain'])) {\n          $this->makeCache('subdomains', $domains[$idx]['parent_domain']);\n        }\n        array_splice($domains, $idx, 1);\n        $this->cacheSet(\n            $this->cacheNamePrefix . 'domains',\n            '',\n            $domains,\n            0\n        );\n        $this->cacheDelete($this->cacheNamePrefix . \"domains\/$domain\");\n      }\n      self::makeGlobalDomainsCache();\n      return true;\n    }\n    else {\n      $this->lastError = $this->virtualmin->error;\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 579,
            "endLine": 613,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "renameDomain",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "domain",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "newDomain",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "omain"
                }
            ],
            "doc": {
                "description": "Renames a domain\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$domain"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$new",
                        "description": "omain"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Renames a domain\n   *\n   * @param string $domain\n   * @param string $newDomain\n   * @return bool\n   *\/"
        },
        "cloneDomain": {
            "name": "cloneDomain",
            "summary": "Clones a domain",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function cloneDomain(string $domain, string $newDomain): bool\n  {\n    if (\n        $this->virtualmin->clone_domain([\n          'domain' => $domain,\n          'newdomain' => $newDomain\n        ])\n    ) {\n      $this->makeCache('', $newDomain);\n      $domains = $this->getCache('domains');\n      if (\n          !\\is_null($idx = X::search($domains, ['name' => $domain]))\n          && !empty($domains[$idx]['parent_domain'])\n      ) {\n        $this->makeCache('subdomains', $domains[$idx]['parent_domain']);\n      }\n      self::makeGlobalDomainsCache();\n      return true;\n    }\n    else {\n      $this->lastError = $this->virtualmin->error;\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 623,
            "endLine": 646,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "cloneDomain",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "domain",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "newDomain",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "omain"
                }
            ],
            "doc": {
                "description": "Clones a domain\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$domain"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$new",
                        "description": "omain"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Clones a domain\n   *\n   * @param string $domain\n   * @param string $newDomain\n   * @return bool\n   *\/"
        },
        "addToTasksQueue": {
            "name": "addToTasksQueue",
            "summary": "Adds the given action to the queue",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addToTasksQueue(string $method, array $args = [])\n  {\n    $user = bbn\\User::getInstance();\n    if (\n        !$this->checkQueueTaskHash($method, $args)\n        && $this->db->insert('queue', [\n          'server' => $this->hostname,\n          'hash' => $this->getQueueTaskHash($method, $args),\n          'method' => $method,\n          'args' => \\json_encode($args),\n          'user' => $user->getId() ?: null\n        ])\n    ) {\n      return $this->db->lastId();\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 655,
            "endLine": 671,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "addToTasksQueue",
            "returns": [],
            "arguments": [
                {
                    "name": "method",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "args",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds the given action to the queue\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$args"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Adds the given action to the queue\n   * @param string $method\n   * @param array $args\n   * @return int!false\n   *\/"
        },
        "removeFromTasksQueue": {
            "name": "removeFromTasksQueue",
            "summary": "Removes a taks from the queue",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeFromTasksQueue(int $id): bool\n  {\n    return (bool)$this->db->update('queue', ['active' => 0], ['id' => $id]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 679,
            "endLine": 682,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeFromTasksQueue",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The task ID"
                }
            ],
            "doc": {
                "description": "Removes a taks from the queue\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id",
                        "description": "The task ID"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Removes a taks from the queue\n   * @param int $id The task ID\n   * @return bool\n   *\/"
        },
        "setQueueTaskStart": {
            "name": "setQueueTaskStart",
            "summary": "Sets the start field of a task element on the queue",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setQueueTaskStart(int $id, ?string $date = null): bool\n  {\n    return (bool)$this->db->update('queue', ['start' => $date ?: date('Y-m-d H:i:s')], ['id' => $id]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 691,
            "endLine": 694,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setQueueTaskStart",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The task ID"
                },
                {
                    "name": "date",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The date to set"
                }
            ],
            "doc": {
                "description": "Sets the start field of a task element on the queue\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id",
                        "description": "The task ID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$date",
                        "description": "The date to set"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the start field of a task element on the queue\n   * @param int $id The task ID\n   * @param string $date The date to set\n   * @return bool\n   *\/"
        },
        "setQueueTaskEnd": {
            "name": "setQueueTaskEnd",
            "summary": "Sets the end field of a task element on the queue",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setQueueTaskEnd(int $id, ?string $date = null): bool\n  {\n    return (bool)$this->db->update('queue', ['end' => $date ?: date('Y-m-d H:i:s')], ['id' => $id]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 703,
            "endLine": 706,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setQueueTaskEnd",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The task ID"
                },
                {
                    "name": "date",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The date to set"
                }
            ],
            "doc": {
                "description": "Sets the end field of a task element on the queue\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id",
                        "description": "The task ID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$date",
                        "description": "The date to set"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the end field of a task element on the queue\n   * @param int $id The task ID\n   * @param string $date The date to set\n   * @return bool\n   *\/"
        },
        "setQueueTaskFailed": {
            "name": "setQueueTaskFailed",
            "summary": "Sets a task element on the queue as failed",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setQueueTaskFailed(int $id, string $error = ''): bool\n  {\n    return (bool)$this->db->update('queue', [\n      'failed' => 1,\n      'error' => $error\n    ], [\n      'id' => $id\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 715,
            "endLine": 723,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setQueueTaskFailed",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The task ID"
                },
                {
                    "name": "error",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The error message"
                }
            ],
            "doc": {
                "description": "Sets a task element on the queue as failed\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id",
                        "description": "The task ID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$error",
                        "description": "The error message"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets a task element on the queue as failed\n   * @param int $id The task ID\n   * @param string $error The error message\n   * @return bool\n   *\/"
        },
        "getLastError": {
            "name": "getLastError",
            "summary": "Gets the value of the 'lastError' property",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastError(): string\n  {\n    return $this->lastError;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 730,
            "endLine": 733,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLastError",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets the value of the 'lastError' property\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the value of the 'lastError' property\n   * @return string\n   *\/"
        },
        "makeGlobalDomainsCache": {
            "name": "makeGlobalDomainsCache",
            "summary": "Makes global domains cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function makeGlobalDomainsCache(): array\n  {\n    $cache   = Cache::getEngine();\n    $domains = [];\n    $servers = self::getOptions('servers');\n    if (!empty($servers)) {\n      foreach ($servers as $server) {\n        if (\n            !empty($server['code'])\n            && ($serverDomains = $cache->get(self::CACHE_NAME . '\/' . $server['code'] . '\/domains'))\n        ) {\n          foreach ($serverDomains as $sd) {\n            $backups              = $cache->get(self::CACHE_NAME . '\/' . $server['code'] . '\/domains\/' . $sd['name'] . '\/backups') ?: [];\n            $domains[$sd['name']] = X::mergeArrays($sd, [\n              'hostname' => $server['code'],\n              'admins' => $cache->get(self::CACHE_NAME . '\/' . $server['code'] . '\/domains\/' . $sd['name'] . '\/admins') ?: [],\n              'users' => $cache->get(self::CACHE_NAME . '\/' . $server['code'] . '\/domains\/' . $sd['name'] . '\/users') ?: [],\n              'dns' => $cache->get(self::CACHE_NAME . '\/' . $server['code'] . '\/domains\/' . $sd['name'] . '\/dns') ?: [],\n              'backups_succeeded' =>  !empty($backups) ? $backups['succeeded'] : [],\n              'backups_failed' =>  !empty($backups) ? $backups['failed'] : []\n            ]);\n          }\n        }\n      }\n      ksort($domains);\n      $domains = \\array_values($domains);\n    }\n    $cache->set(self::CACHE_NAME . '\/domains', $domains);\n    return $domains;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 741,
            "endLine": 770,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "makeGlobalDomainsCache",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Makes global domains cache\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Makes global domains cache\n   *\n   * @return array\n   *\/"
        },
        "getMainDataPath": {
            "name": "getMainDataPath",
            "summary": "Gets the data path of the appui-server plugin",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getMainDataPath(): string\n  {\n    return bbn\\Mvc::getDataPath('appui-server');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 777,
            "endLine": 780,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getMainDataPath",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets the data path of the appui-server plugin\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the data path of the appui-server plugin\n   * @return string\n   *\/"
        },
        "getDb": {
            "name": "getDb",
            "summary": "Returns an instance of bbn\\Db of the tasks queue database",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getDb(): ?bbn\\Db\n  {\n    if ($dbPath = self::makeDb()) {\n      return new bbn\\Db([\n        'engine' => 'sqlite',\n        'db' => $dbPath\n      ]);\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 786,
            "endLine": 795,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDb",
            "returns": [
                null,
                "bbn\\Db"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns an instance of bbn\\Db of the tasks queue database\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an instance of bbn\\Db of the tasks queue database\n   * @return bbn\\Db|null\n   *\/"
        },
        "processTasksQueue": {
            "name": "processTasksQueue",
            "summary": "Process the tasks queue",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function processTasksQueue()\n  {\n    $appPath = bbn\\Mvc::getAppPath();\n    $db = self::getDb();\n    if (!empty($db) && is_dir($appPath)) {\n      if ($queue = self::getCurrentTasksQueue(true)) {\n        foreach ($queue as $q) {\n          if (!empty($q['server'])) {\n            $running = self::getRunningTasks();\n            if (empty($running)\n              || (bbn\\X::search($running, ['server' => $q['server']]) === null)\n            ) {\n              exec(sprintf('php -f %srouter.php %s \"%s\"',\n                $appPath,\n                bbn\\Mvc::getPluginUrl('appui-server') . '\/action',\n                bbn\\Str::escapeDquotes(json_encode($q))\n              ));\n            }\n          }\n        }\n      }\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 802,
            "endLine": 824,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "processTasksQueue",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Process the tasks queue\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Process the tasks queue\n   * @return void\n   *\/"
        },
        "getCurrentTasksQueue": {
            "name": "getCurrentTasksQueue",
            "summary": "Gets the current tasks queueu",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getCurrentTasksQueue(bool $group = false): array\n  {\n    if ($db = self::getDb()) {\n      return $db->rselectAll([\n        'table' => 'queue',\n        'fields' => [],\n        'where' => [\n          'conditions' => [[\n            'field' => 'active',\n            'value' => 1\n          ], [\n            'field' => 'failed',\n            'value' => 0\n          ], [\n            'field' => 'start',\n            'operator' => 'isnull'\n          ], [\n            'field' => 'end',\n            'operator' => 'isnull'\n          ]]\n        ],\n        'group_by' => !empty($group) ? ['server'] : [],\n        'order' => ['id' => 'asc']\n      ]);\n    }\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 831,
            "endLine": 857,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getCurrentTasksQueue",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "group",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the current tasks queueu\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the current tasks queueu\n   * @return array\n   *\/"
        },
        "getRunningTasks": {
            "name": "getRunningTasks",
            "summary": "Gets the running tasks",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getRunningTasks(): array\n  {\n    if ($db = self::getDb()) {\n      return $db->rselectAll([\n        'table' => 'queue',\n        'fields' => [],\n        'where' => [\n          'conditions' => [[\n            'field' => 'active',\n            'value' => 1\n          ], [\n            'field' => 'failed',\n            'value' => 0\n          ], [\n            'field' => 'start',\n            'operator' => 'isnotnull'\n          ], [\n            'field' => 'end',\n            'operator' => 'isnull'\n          ]]\n        ],\n        'order' => ['id' => 'asc']\n      ]);\n    }\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 864,
            "endLine": 889,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRunningTasks",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets the running tasks\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the running tasks\n   * @return array\n   *\/"
        },
        "checkQueueTaskHash": {
            "name": "checkQueueTaskHash",
            "summary": "Checks if the hash is already present on the queue",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function checkQueueTaskHash(string $method, array $args = [])\n  {\n    $hash = $this->getQueueTaskHash($method, $args);\n    return (bool)$this->db->selectOne([\n      'table' => 'queue',\n      'fields' => ['id'],\n      'where' => [\n        'conditions' => [[\n          'field' => 'server',\n          'value' => $this->hostname\n        ], [\n          'field' => 'hash',\n          'value' => $hash\n        ], [\n          'field' => 'active',\n          'value' => 1\n        ], [\n          'field' => 'end',\n          'operator' => 'isnull'\n        ]]\n      ]\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 898,
            "endLine": 920,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "checkQueueTaskHash",
            "returns": [],
            "arguments": [
                {
                    "name": "method",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "args",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if the hash is already present on the queue\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$args"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the hash is already present on the queue\n   * @param string $method\n   * @param array $args\n   * @return bool\n   *\/"
        },
        "getQueueTaskHash": {
            "name": "getQueueTaskHash",
            "summary": "Gets the queue hash",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function getQueueTaskHash(string $method, array $args = []): string\n  {\n    return \\md5($method . \\json_encode($args));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 929,
            "endLine": 932,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getQueueTaskHash",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "method",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "args",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the queue hash\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$args"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the queue hash\n   * @param string $method\n   * @param array $args\n   * @return string\n   *\/"
        },
        "normalizeData": {
            "name": "normalizeData",
            "summary": "Normalizes the data structure",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function normalizeData(array $data): array\n  {\n    return \\array_map(function ($f) {\n      return X::mergeArrays(\n          ['name' => $f['name']],\n          \\array_map(function ($v) {\n            if (\\is_array($v) && (count($v) === 1)) {\n              $v = $v[0];\n            }\n            return $v;\n          }, $f['values'])\n      );\n    }, \\array_filter($data, function ($f) {\n      return !empty($f['values']);\n    }));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 940,
            "endLine": 955,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "normalizeData",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Normalizes the data structure\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Normalizes the data structure\n   * @param array $data\n   * @return array\n   *\/"
        },
        "cacheInfo": {
            "name": "cacheInfo",
            "summary": "Cache the info",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function cacheInfo(array $search = [])\n  {\n    if ($info = $this->virtualmin->info($search)) {\n      foreach ($info as $k => $v) {\n        $this->cacheSet($this->cacheNamePrefix . $k, '', $v, 0);\n      }\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 963,
            "endLine": 970,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheInfo",
            "returns": [],
            "arguments": [
                {
                    "name": "search",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Cache the info\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$search"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Cache the info\n   * @param array $search\n   * @return void\n   *\/"
        },
        "cacheUptime": {
            "name": "cacheUptime",
            "summary": "Cache the server uptime",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function cacheUptime()\n  {\n    if ($uptime = $this->webmin->getSystemUptime()) {\n      $this->cacheSet($this->cacheNamePrefix . 'uptime', '', $uptime, 0);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 977,
            "endLine": 982,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheUptime",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Cache the server uptime\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Cache the server uptime\n   * @return void\n   *\/"
        },
        "cacheListDomains": {
            "name": "cacheListDomains",
            "summary": "Cache the list of domains",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function cacheListDomains(string $domain = '')\n  {\n    $domains = $this->virtualmin->list_domains(!empty($domain) ? ['domain' => $domain] : []) ?: [];\n    $domains = $this->normalizeData($domains);\n    if (!empty($domain)) {\n      $dom     = !empty($domains) ? $domains[0] : [];\n      $domains = $this->getCache('domains');\n      if (!\\is_null($idx = X::search($domains, ['name' => $domain]))) {\n        $domains[$idx] = $dom;\n      }\n      else {\n        $domains[] = $dom;\n        $domains   = X::sortBy($domains, 'name', 'asc');\n      }\n    }\n    $this->cacheSet(\n        $this->cacheNamePrefix . 'domains',\n        '',\n        $domains ?: [],\n        0\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 990,
            "endLine": 1011,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheListDomains",
            "returns": [],
            "arguments": [
                {
                    "name": "domain",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Cache the list of domains\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$domain"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Cache the list of domains\n   * @param string $domain\n   * @return void\n   *\/"
        },
        "cacheList": {
            "name": "cacheList",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function cacheList(string $name, callable $func, string $domain = '')\n  {\n    if (!empty($domain)) {\n      $this->cacheSet(\n          $this->cacheNamePrefix . \"domains\/$domain\/$name\",\n          '',\n          $func($domain),\n          0\n      );\n    }\n    else {\n      if ($domains = $this->getCache('domains')) {\n        foreach ($domains as $d) {\n          $this->cacheSet(\n              $this->cacheNamePrefix . \"domains\/$d[name]\/$name\",\n              '',\n              $func($d['name']),\n              0\n          );\n        }\n      }\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1019,
            "endLine": 1041,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheList",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "func",
                    "position": 1,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "domain",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name"
                    },
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$func"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$domain"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $name\n   * @param callable $func\n   * @param string $domain\n   *\/"
        },
        "cacheListSubDomains": {
            "name": "cacheListSubDomains",
            "summary": "Cache the list of sub domains",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function cacheListSubDomains(string $domain = '')\n  {\n    $allDomains = $this->getCache('domains') ?: [];\n    $domains    = [];\n    foreach ($allDomains as $d) {\n      if (!empty($d['parent_domain'])) {\n        if (!isset($domains[$d['parent_domain']])) {\n          $domains[$d['parent_domain']] = [];\n        }\n\n        $domains[$d['parent_domain']][] = $d;\n      }\n    }\n\n    $getDomains = fn($d) => $domains[$d] ?? [];\n    $this->cacheList('subdomains', $getDomains, $domain);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1049,
            "endLine": 1065,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheListSubDomains",
            "returns": [],
            "arguments": [
                {
                    "name": "domain",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Cache the list of sub domains\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$domain"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Cache the list of sub domains\n   * @param string $domain\n   * @return void\n   *\/"
        },
        "cacheListAdmins": {
            "name": "cacheListAdmins",
            "summary": "Cache the list of admins",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function cacheListAdmins(string $domain = '')\n  {\n    $vm        = $this->virtualmin;\n    $getAdmins = fn ($d) => $vm->list_admins(['domain' => $d]) ?: [];\n    $this->cacheList('admins', $getAdmins, $domain);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1073,
            "endLine": 1078,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheListAdmins",
            "returns": [],
            "arguments": [
                {
                    "name": "domain",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Cache the list of admins\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$domain"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Cache the list of admins\n   * @param string $domain\n   * @return void\n   *\/"
        },
        "cacheListUsers": {
            "name": "cacheListUsers",
            "summary": "Cache the list of users",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function cacheListUsers(string $domain = '')\n  {\n    $users = $this->normalizeData($this->virtualmin->list_users([\n      'domain' => '',\n      'all-domains' => 1,\n      'domain-user' => '',\n      'include-owner' => 1\n    ]) ?: []);\n    $getUsers = function ($d) use ($users) {\n      $ret = [];\n      foreach ($users as $user) {\n        if (\n            (\\is_array($user['domain']) && \\in_array($d, $user['domain'], true))\n            || ($user['domain'] === $d)\n        ) {\n          $ret[] = $user;\n        }\n      }\n      return $ret;\n    };\n    $this->cacheList('users', $getUsers, $domain);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1086,
            "endLine": 1107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheListUsers",
            "returns": [],
            "arguments": [
                {
                    "name": "domain",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Cache the list of users\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$domain"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Cache the list of users\n   * @param string $domain\n   * @return void\n   *\/"
        },
        "cacheListDns": {
            "name": "cacheListDns",
            "summary": "Cache the list of DNS",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function cacheListDns(string $domain = '')\n  {\n    $domains   = $this->getCache('domains') ?: [];\n    $t         = $this;\n    $filterDns = function ($dom) use ($domains, $t) {\n      $rexp = '\/^([^\\.]*\\.{1}|^)[^\\.]*' . str_replace('.', '\\.{1}', $dom) . '\\.{1}\/m';\n      $dns  = $t->normalizeData($t->virtualmin->get_dns(['domain' => $dom]) ?: []);\n      foreach ($dns as $i => $d) {\n        \\preg_match_all($rexp, $d['name'], $found);\n        if (\n            (empty($found) || empty($found[0]))\n            || (($d['name'] !== $dom . '.')\n                && (\\substr_count($d['name'], '.') > 2)\n                && (!\\is_null(X::search($domains, ['name' => substr($d['name'], 0, -1)]))))\n        ) {\n          unset($dns[$i]);\n        }\n      }\n      return \\array_values($dns);\n    };\n    $this->cacheList('dns', $filterDns, $domain);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1115,
            "endLine": 1136,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheListDns",
            "returns": [],
            "arguments": [
                {
                    "name": "domain",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Cache the list of DNS\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$domain"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Cache the list of DNS\n   * @param string $domain\n   * @return void\n   *\/"
        },
        "cacheListBackups": {
            "name": "cacheListBackups",
            "summary": "Cache the list of backups",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function cacheListBackups(string $domain = '')\n  {\n    $t             = $this;\n    $filterBackups = function ($dom) use ($t) {\n      $backups = $t->normalizeData($t->virtualmin->list_backup_logs(['domain' => $dom]) ?: []);\n      $ok      = [];\n      $failed  = [];\n      foreach ($backups as $backup) {\n        $d = \\date('Y-m-d H:i:s', \\strtotime(\\str_replace('\/', ' ', $backup['started'])));\n        if (\\strtolower($backup['final_status']) === 'ok') {\n          $ok[$d] = $backup;\n        }\n        else {\n          $failed[$d] = $backup;\n        }\n      }\n      \\rsort($ok);\n      \\rsort($failed);\n      $ok     = \\array_values($ok);\n      $failed = \\array_values($failed);\n      return [\n        'succeeded' => \\array_splice($ok, 0, 5),\n        'failed' => \\array_splice($failed, 0, 5)\n      ];\n    };\n    $this->cacheList('backups', $filterBackups, $domain);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1144,
            "endLine": 1170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheListBackups",
            "returns": [],
            "arguments": [
                {
                    "name": "domain",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Cache the list of backups\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$domain"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Cache the list of backups\n   * @param string $domain\n   * @return void\n   *\/"
        },
        "cacheListFeaturesTemplate": {
            "name": "cacheListFeaturesTemplate",
            "summary": "Cache the list of features",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function cacheListFeaturesTemplate(string $domain = '')\n  {\n    $t            = $this;\n    $listFeatures = function ($dom = '') use ($t) {\n      $args = [];\n      if (!empty($dom)) {\n        $args  = ['alias' => $dom];\n        $alias = $t->normalizeData($t->virtualmin->list_features($args) ?: []);\n        $t->cacheSet(\n            $t->cacheNamePrefix . \"domains\/$dom\/features_template_alias\",\n            '',\n            $alias,\n            0\n        );\n        $args = ['parent' => $dom];\n      }\n      return $t->normalizeData($t->virtualmin->list_features($args) ?: []);\n    };\n    $this->cacheList('features_template', $listFeatures, $domain);\n    if (empty($domain)) {\n      $this->cacheSet(\n          $this->cacheNamePrefix . 'features_template',\n          '',\n          $listFeatures(),\n          0\n      );\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1178,
            "endLine": 1205,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheListFeaturesTemplate",
            "returns": [],
            "arguments": [
                {
                    "name": "domain",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Cache the list of features\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$domain"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Cache the list of features\n   * @param string $domain\n   * @return void\n   *\/"
        },
        "makeDb": {
            "name": "makeDb",
            "summary": "Makes the SQLite database and returns its path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Server.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function makeDb(): ?string\n  {\n    if ($mainDataPath = self::getMainDataPath()) {\n      $path = $mainDataPath . 'servers.sqlite';\n      if (!\\is_file($path) && bbn\\File\\Dir::createPath($mainDataPath)) {\n        $db = new SQLite3($path);\n        $db->exec(\"CREATE TABLE queue (\n          id INTEGER PRIMARY KEY,\n          server VARCHAR (150) NOT NULL,\n          created DATETIME NOT NULL DEFAULT (CURRENT_TIMESTAMP),\n          user VARCHAR (32),\n          method VARCHAR (100) NOT NULL,\n          args TEXT,\n          hash TEXT NOT NULL,\n          start DATETIME,\n          [end] DATETIME,\n          failed INTEGER (1) DEFAULT (0),\n          error TEXT,\n          active INTEGER (1) DEFAULT (1)\n        );\");\n      }\n      return \\is_file($path) ? $path : null;\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1212,
            "endLine": 1236,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "makeDb",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Makes the SQLite database and returns its path\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Makes the SQLite database and returns its path\n   * @return null|string\n   *\/"
        },
        "cacheInit": {
            "name": "cacheInit",
            "summary": "Initializes the cache object, must be called in __construct",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheInit(): void\n  {\n    if ( \\is_null($this->cache_engine) ){\n      $this->cache_engine = CacheCls::getEngine();\n      $this->_cache_prefix = Str::encodeFilename(str_replace('\\\\', '\/', \\get_class($this)), true).'\/';\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 27,
            "endLine": 33,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheInit",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Initializes the cache object, must be called in __construct\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Initializes the cache object, must be called in __construct\n   *\n   * @return void\n   *\/"
        },
        "cacheCheck": {
            "name": "cacheCheck",
            "summary": "Throws an exception if the cache has not been initialized",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheCheck(): void\n  {\n    if (!$this->cache_engine) {\n      throw new Exception(X::_(\"The cache object has not been initialized\"));\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 41,
            "endLine": 46,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheCheck",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Throws an exception if the cache has not been initialized\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Throws an exception if the cache has not been initialized\n   *\n   * @return void\n   *\/"
        },
        "_cache_name": {
            "name": "_cache_name",
            "summary": "Generates a name for the cache based on the class name and the method called - or a gievn string",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _cache_name($uid, $method = '', string $locale = ''): string\n  {\n    $uid  = (string)$uid;\n    $path = Str::isUid($uid) ? substr($uid, 0, 3).'\/'.substr($uid, 3, 3).'\/'.substr($uid, 6) : $uid;\n    return $this->_cache_prefix.$path.(empty($method) ? '' : '\/'.(string)$method).(empty($locale) ? '' : \"-$locale\");\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 57,
            "endLine": 62,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "_cache_name",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Generates a name for the cache based on the class name and the method called - or a gievn string\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "[type]",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Generates a name for the cache based on the class name and the method called - or a gievn string\n   *\n   * @param [type] $uid\n   * @param string $method\n   * @param string $locale\n   * @return string\n   *\/"
        },
        "cacheDeleteAll": {
            "name": "cacheDeleteAll",
            "summary": "Deletes all the cache related to the current class",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDeleteAll(): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_prefix);\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 70,
            "endLine": 75,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheDeleteAll",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Deletes all the cache related to the current class\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes all the cache related to the current class\n   *\n   * @return self\n   *\/"
        },
        "cacheDelete": {
            "name": "cacheDelete",
            "summary": "Deletes the given cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDelete(string $uid, string $method = ''): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_name($uid, $method));\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 85,
            "endLine": 90,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheDelete",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the given cache\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the given cache\n   *\n   * @param string $uid\n   * @param string $method\n   * @return self\n   *\/"
        },
        "cacheDeleteLocale": {
            "name": "cacheDeleteLocale",
            "summary": "Deletes the given cache for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDeleteLocale(string $uid, string $locale, string $method = ''): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_name($uid, $method, $locale));\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 101,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheDeleteLocale",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the given cache for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the given cache for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @return self\n   *\/"
        },
        "cacheGet": {
            "name": "cacheGet",
            "summary": "Gets the cached data",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGet(string $uid, string $method = ''): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->get($this->_cache_name($uid, $method));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 116,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheGet",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cached data\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cached data\n   *\n   * @param string $uid\n   * @param string $method\n   * @return mixed\n   *\/"
        },
        "cacheGetLocale": {
            "name": "cacheGetLocale",
            "summary": "Gets the cached data for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetLocale(string $uid, string $locale, string $method = ''): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->get($this->_cache_name($uid, $method, $locale));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 131,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetLocale",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cached data for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cached data for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @return mixed\n   *\/"
        },
        "cacheSet": {
            "name": "cacheSet",
            "summary": "Sets the cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheSet(string $uid, string $method = '', $data = null, int $ttl = 0): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->set($this->_cache_name($uid, $method), $data, $ttl);\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 147,
            "endLine": 152,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheSet",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the cache\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the cache\n   *\n   * @param string $uid\n   * @param string $method\n   * @param array|null $data\n   * @param integer $ttl\n   * @return self\n   *\/"
        },
        "cacheSetLocale": {
            "name": "cacheSetLocale",
            "summary": "Sets the cache for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheSetLocale(string $uid, string $locale, string $method = '', $data = null, int $ttl = 0): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->set($this->_cache_name($uid, $method, $locale), $data, $ttl);\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 165,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheSetLocale",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the cache for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the cache for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @param array|null $data\n   * @param integer $ttl\n   * @return self\n   *\/"
        },
        "cacheGetSet": {
            "name": "cacheGetSet",
            "summary": "Gets the cache or creates it if needs to",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetSet(callable $fn, string $uid, $method = '', int $ttl = 0): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->getSet($fn, $this->_cache_name($uid, $method), $ttl);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 182,
            "endLine": 186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetSet",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cache or creates it if needs to\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$fn"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cache or creates it if needs to\n   *\n   * @param callable $fn\n   * @param string $uid\n   * @param string $method\n   * @param integer $ttl\n   * @return mixed\n   *\/"
        },
        "cacheGetSetLocale": {
            "name": "cacheGetSetLocale",
            "summary": "Gets the cache for a specific locale or creates it if needs to",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetSetLocale(callable $fn, string $uid, string $locale, $method = '', int $ttl = 0): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->getSet($fn, $this->_cache_name($uid, $method, $locale), $ttl);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 199,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 3,
            "shortName": "cacheGetSetLocale",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cache for a specific locale or creates it if needs to\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$fn"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cache for a specific locale or creates it if needs to\n   *\n   * @param callable $fn\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @param integer $ttl\n   * @return mixed\n   *\/"
        },
        "cacheHas": {
            "name": "cacheHas",
            "summary": "Checks whether the cache exists and is valid",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheHas(string $uid, string $method = ''): bool\n  {\n    $this->cacheCheck();\n    return $this->cacheGet($uid, $method) ? true : false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 213,
            "endLine": 217,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheHas",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the cache exists and is valid\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the cache exists and is valid\n   *\n   * @param string $uid\n   * @param string $method\n   * @return boolean\n   *\/"
        },
        "cacheHasLocale": {
            "name": "cacheHasLocale",
            "summary": "Checks whether the cache exists and is valid",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheHasLocale(string $uid, string $locale, string $method = ''): bool\n  {\n    $this->cacheCheck();\n    return $this->cacheGetLocale($uid, $locale, $method) ? true : false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 227,
            "endLine": 231,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheHasLocale",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the cache exists and is valid\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the cache exists and is valid\n   *\n   * @param string $uid\n   * @param string $method\n   * @return boolean\n   *\/"
        },
        "optionalInit": {
            "name": "optionalInit",
            "summary": "Returns the option's root ID for the current class based on {@link $option_root_code}",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function optionalInit(array|null $path = null)\n  {\n    if (!self::$optional_is_init) {\n      $opt = Option::getInstance();\n      $cls = false;\n      if (!$opt) {\n        throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n      }\n\n      if (!$path) {\n        $tmp = explode('\\\\', __CLASS__);\n        $cls = strtolower(end($tmp));\n        $path = [$cls, 'appui', 'plugins'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      \/\/X::ddump($path, self::$option_root_id);\n      if (!self::$option_root_id) {\n        if (empty($cls)) {\n          throw new Exception(\"Impossible to find the option \".json_encode($path).\" !!! for \".__CLASS__);\n        }\n\n        throw new Exception(\"Impossible to find the option $cls for \".__CLASS__);\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 41,
            "endLine": 68,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "optionalInit",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the option's root ID for the current class based on {@link $option_root_code}\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the option's root ID for the current class based on {@link $option_root_code}\n   *\n   * @return false|int\n   *\/"
        },
        "initOptionalGlobal": {
            "name": "initOptionalGlobal",
            "summary": "Sets only once all the constants used by the class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function initOptionalGlobal(Option $opt, array|null $path = null)\n  {\n    if (!self::$optional_is_init) {\n      if (!$path) {\n        $tmp                   = explode('\\\\', __CLASS__);\n        $cls                   = end($tmp);\n        $path                  = [$cls, 'appui'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      if (!self::$option_root_id) {\n        X::log(\"Impossible to find the option $cls for \".__CLASS__, 'errors');\n        return;\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 78,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "initOptionalGlobal",
            "returns": [],
            "arguments": [
                {
                    "name": "opt",
                    "position": 0,
                    "type": "bbn\\Appui\\Option",
                    "type_arr": [
                        "bbn\\Appui\\Option"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets only once all the constants used by the class.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Option",
                        "name": "$opt"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets only once all the constants used by the class.\n   *\n   * @param Option $opt\n   * @param array             $path\n   * @return void\n   *\/"
        },
        "initOptional": {
            "name": "initOptional",
            "summary": "Defines the options prop and launches the static init method.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initOptional(array|null $path = null)\n  {\n    $this->options = Option::getInstance();\n    if (!$this->options) {\n      throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n    }\n\n    self::initOptionalGlobal($this->options, $path);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 104,
            "endLine": 112,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initOptional",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Defines the options prop and launches the static init method.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Defines the options prop and launches the static init method.\n   *\n   * @param array $path\n   * @return void\n   *\/"
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionRoot()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 115,
            "endLine": 119,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionRoot",
            "returns": [],
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsObject(): Option\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 122,
            "endLine": 130,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsObject",
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionId(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fromCode(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 139,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionId",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns The option's ID of a category, i.e. direct children of option's root\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns The option's ID of a category, i.e. direct children of option's root\n   *\n   * @param string $code\n   * @return int|false\n   *\/"
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsIds(...$codes): array\n  {\n    $codes[] = self::getOptionRoot();\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...$codes),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 152,
            "endLine": 163,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsIds",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Undocumented function\n",
                "params": [],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Check it, it doesn't seem ok"
                }
            },
            "comments": "  \/**\n   * Undocumented function\n   *\n   * @todo Check it, it doesn't seem ok\n   * @return array\n   *\/"
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTree(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return ($tree = self::getOptionsObject()->fullTree(...$codes)) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 166,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTree",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTreeRef": {
            "name": "getOptionsTreeRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTreeRef(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return ($tree = self::getOptionsObject()->fullTreeRef(...$codes)) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 173,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTreeRef",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptions(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fullOptions(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 180,
            "endLine": 184,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptions",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getSimpleOptions": {
            "name": "getSimpleOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getSimpleOptions(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->options(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 187,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getSimpleOptions",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsRef": {
            "name": "getOptionsRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsRef(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fullOptionsRef(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 194,
            "endLine": 198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsRef",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOption(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->option(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 201,
            "endLine": 205,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOption",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValue(string|array $id, string $text = 'text', string $value = 'value', ...$additionalFields): array\n  {\n    if (is_string($id) && !Str::isUid($id)) {\n      $id = [$id];\n    }\n\n    if (is_array($id)) {\n      $id[] = self::getOptionRoot();\n    }\n\n    return $id ? self::getOptionsObject()->textValueOptions($id, $text, $value, ...$additionalFields) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 208,
            "endLine": 219,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTextValue",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": ""
                },
                {
                    "name": "additionalFields",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTextValueRef": {
            "name": "getOptionsTextValueRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Server",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValueRef(string|array $id, string $text = 'text', string $value = 'value', ...$additionalFields): array\n  {\n    if (is_string($id) && !Str::isUid($id)) {\n      $id = self::getOptionId($id);\n    }\n\n    return $id ? self::getOptionsObject()->textValueOptionsRef($id, $text, $value, ...$additionalFields) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 222,
            "endLine": 229,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTextValueRef",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": ""
                },
                {
                    "name": "additionalFields",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "user": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Server"
            },
            "declaring_trait": "bbn\\Appui\\Server",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string Username",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "pass": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Server"
            },
            "declaring_trait": "bbn\\Appui\\Server",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string Password",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "hostname": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Server"
            },
            "declaring_trait": "bbn\\Appui\\Server",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string Hostname",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "opt": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Server"
            },
            "declaring_trait": "bbn\\Appui\\Server",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "virtualmin": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Server"
            },
            "declaring_trait": "bbn\\Appui\\Server",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var bbn\\Api\\Virtualmin Virtualmin instance",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "cloudmin": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Server"
            },
            "declaring_trait": "bbn\\Appui\\Server",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var bbn\\Api\\Cloudmin|null Cloudmin instance",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "webmin": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Server"
            },
            "declaring_trait": "bbn\\Appui\\Server",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var bbn\\Api\\Webmin Webmin instance",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "cacheNamePrefix": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Server"
            },
            "declaring_trait": "bbn\\Appui\\Server",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string The server cache name prefix",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "mainDataPath": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Server"
            },
            "declaring_trait": "bbn\\Appui\\Server",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string The data path of the appui-server plugin",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "dataPath": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Server"
            },
            "declaring_trait": "bbn\\Appui\\Server",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string The data path of the server inside the appui-server plugin",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Server"
            },
            "declaring_trait": "bbn\\Appui\\Server",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string The internal SQLite database",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "lastError": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Server"
            },
            "declaring_trait": "bbn\\Appui\\Server",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string The last error",
                "tags": []
            },
            "parent": false,
            "value": ""
        },
        "online": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Server"
            },
            "declaring_trait": "bbn\\Appui\\Server",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var bool Indicates whether the class should connect to the server when needed",
                "tags": []
            },
            "parent": false,
            "value": true
        },
        "_cache_prefix": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Server"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Cache",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "cache_engine": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Server"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Cache",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "optional_is_init": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Server"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Set as true from the moment a first instance has been initiated and has defined the constants."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "option_root_id": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Server"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The ID of the root option"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "options": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Server"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Option",
                        "description": "The Option object"
                    }
                ]
            },
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "optional_is_init": false,
        "option_root_id": null
    },
    "constants": {
        "CACHE_NAME": {
            "name": "CACHE_NAME",
            "value": "bbn\/Appui\/Server",
            "class": "bbn\\Appui\\Server",
            "parent": false,
            "private": false,
            "protected": false,
            "public": true,
            "final": false,
            "doc": {
                "description": "",
                "tags": []
            }
        }
    },
    "uses": {
        "bbn": "bbn",
        "bbn\\Cache": "Cache",
        "bbn\\Api\\Virtualmin": "Virtualmin",
        "bbn\\Api\\Cloudmin": "Cloudmin",
        "bbn\\Api\\Webmin": "Webmin",
        "bbn\\Appui\\Passwords": "Passwords",
        "bbn\\X": "X",
        "bbn\\Appui\\Option": "Option",
        "bbn\\Db": "Db",
        "SQLite3": "SQLite3"
    },
    "dummyComments": [
        "\/**\n * Server class\n * @category Appui\n * @package Appui\n * @author Mirko Argentino <mirko@bbn.solutions>\n * @license http:\/\/www.opensource.org\/licenses\/mit-license.html MIT License\n * @link https:\/\/bbn.io\/bbn-php\/doc\/class\/Appui\/Server\n *\/"
    ],
    "summary": "Server class",
    "description": "",
    "description_parts": []
}