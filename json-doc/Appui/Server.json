{
    "doc": {
        "description": "Server class\n",
        "tags": {
            "category": "Appui",
            "package": "Appui",
            "author": "Mirko Argentino <mirko@bbn.solutions>",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.html MIT License",
            "link": "https:\/\/bbn.io\/bbn-php\/doc\/class\/Appui\/Server"
        }
    },
    "name": "bbn\\Appui\\Server",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\Cache",
        "bbn\\Models\\Tts\\Optional"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Server.php",
    "startLine": 23,
    "endLine": 905,
    "contentConstructor": {
        "file": "bbn\\Appui\\Server",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Constructor.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($cfg)\n  {\n    $this->cacheInit();\n    self::optionalInit();\n    if (\\is_string($cfg)) {\n      $opt = self::getOption($cfg, 'servers');\n      $psw = new Passwords(Db::getInstance());\n      $cfg = [\n        'user' => $opt['user'] ?? null,\n        'pass' => !empty($opt['id']) ? $psw->get($opt['id']) : null,\n        'host' => $opt['code'] ?? null\n      ];\n    }\n\n    if (empty($cfg['user'])) {\n      throw new \\Exception(_('The username is mandatory'));\n    }\n\n    if (empty($cfg['pass'])) {\n      throw new \\Exception(_('The password is mandatory'));\n    }\n\n    $this->opt             = Option::getInstance();\n    $this->user            = $cfg['user'];\n    $this->pass            = $cfg['pass'];\n    $this->hostname        = isset($cfg['host']) ? $cfg['host'] : 'localhost';\n    $this->cacheNamePrefix = $this->hostname . '\/';\n    $this->virtualmin      = new Virtualmin([\n      'user' => $this->user,\n      'pass' => $this->pass,\n      'host' => $this->hostname,\n      'mode' => 'virtualmin'\n    ]);\n    $this->webmin          = new Webmin([\n      'user' => $this->user,\n      'pass' => $this->pass,\n      'host' => $this->hostname\n    ]);\n    if (!empty($cfg['cloudmin'])) {\n      $this->webmin = new Cloudmin([\n        'user' => $this->user,\n        'pass' => $this->pass,\n        'host' => $this->hostname\n      ]);\n    }\n  }",
            "startLine": 57,
            "endLine": 102,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "makeCache": {
            "name": "makeCache",
            "summary": "Makes the cache for this server",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $mode = '', string $domain = '')\n  {\n    if (empty($mode) || ($mode === 'info') || $this->virtualmin->isInfoProp($mode)) {\n      $this->cacheInfo($this->virtualmin->isInfoProp($mode) ? ['search' => $mode] : []);\n    }\n\n    if (empty($mode) || ($mode === 'uptime')) {\n      $this->cacheUptime();\n    }\n\n    if (empty($mode) || ($mode === 'domains')) {\n      $this->cacheListDomains($domain);\n    }\n\n    if (empty($mode) || ($mode === 'subdomains')) {\n      $this->cacheListSubDomains($domain);\n    }\n\n    if (empty($mode) || ($mode === 'admins')) {\n      $this->cacheListAdmins($domain);\n    }\n\n    if (empty($mode) || ($mode === 'users')) {\n      $this->cacheListUsers($domain);\n    }\n\n    if (empty($mode) || ($mode === 'dns')) {\n      $this->cacheListDns($domain);\n    }\n\n    if (empty($mode) || ($mode === 'backups')) {\n      $this->cacheListBackups($domain);\n    }\n\n    if (empty($mode) || ($mode === 'features_template')) {\n      $this->cacheListFeaturesTemplate($domain);\n    }\n  }",
            "startLine": 112,
            "endLine": 149,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "mode",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "domain",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hasCache": {
            "name": "hasCache",
            "summary": "Checks if the cache file exists",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, string $domain = '')\n  {\n    return $this->getCache($path, false, $domain) !== false;\n  }",
            "startLine": 158,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "domain",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCache": {
            "name": "getCache",
            "summary": "Gets data from the cache",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, bool $force = false, string $domain = '')\n  {\n    $c = $this->cacheNamePrefix . (empty($domain) ? '' : \"domains\/$domain\/\") . $path;\n    if ($force || ($this->cacheGet($c) === false)) {\n      $this->makeCache($path, $domain);\n    }\n    return $this->cacheGet($c);\n  }",
            "startLine": 171,
            "endLine": 178,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "domain",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getVirtualmin": {
            "name": "getVirtualmin",
            "summary": "Gets Virtualmin instance",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->virtualmin;\n  }",
            "startLine": 185,
            "endLine": 188,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bbn\\Api\\Virtualmin"
            ],
            "parent": false,
            "arguments": []
        },
        "getCloudmin": {
            "name": "getCloudmin",
            "summary": "Gets Cloudmin instance",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->cloudmin;\n  }",
            "startLine": 195,
            "endLine": 198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bbn\\Api\\Cloudmin",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getWebmin": {
            "name": "getWebmin",
            "summary": "Gets Webmin instance",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->webmin;\n  }",
            "startLine": 205,
            "endLine": 208,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bbn\\Api\\Webmin"
            ],
            "parent": false,
            "arguments": []
        },
        "startService": {
            "name": "startService",
            "summary": "Start a service",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $service)\n  {\n    if ($this->webmin && $this->webmin->startService($service)) {\n      return $this->collectInfo();\n    }\n    return false;\n  }",
            "startLine": 216,
            "endLine": 222,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "service",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the service"
                }
            ]
        },
        "stopService": {
            "name": "stopService",
            "summary": "Stop a service",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $service)\n  {\n    if ($this->webmin && $this->webmin->stopService($service)) {\n      return $this->collectInfo();\n    }\n    return false;\n  }",
            "startLine": 230,
            "endLine": 236,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "service",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the service"
                }
            ]
        },
        "restartService": {
            "name": "restartService",
            "summary": "Restart a service",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $service)\n  {\n    if ($this->webmin && $this->webmin->restartService($service)) {\n      return $this->collectInfo();\n    }\n    return false;\n  }",
            "startLine": 244,
            "endLine": 250,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "service",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the service"
                }
            ]
        },
        "collectInfo": {
            "name": "collectInfo",
            "summary": "Re-collect server info",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->virtualmin ? (bool)$this->virtualmin->collectInfo() : false;\n  }",
            "startLine": 257,
            "endLine": 260,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "setDomainState": {
            "name": "setDomainState",
            "summary": "Enables\/Disables a domain",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $domain, bool $state = true)\n  {\n    if (\n        (!empty($state)\n          && $this->virtualmin->enable_domain(['domain' => $domain]))\n        || (empty($state)\n          && $this->virtualmin->disable_domain(['domain' => $domain])\n        )\n    ) {\n      $domains = $this->getCache('domains');\n      $this->makeCache('', $domain);\n      if (\n          !\\is_null($idx = X::find($domains, ['name' => $domain]))\n          && !empty($domains[$idx]['parent_domain'])\n      ) {\n        $this->makeCache('subdomains', $domains[$idx]['parent_domain']);\n      }\n      self::makeGlobalDomainsCache();\n      return true;\n    }\n    return false;\n  }",
            "startLine": 270,
            "endLine": 291,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "domain",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "state",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "createDomain": {
            "name": "createDomain",
            "summary": "Creates a new domain",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $domainData)\n  {\n    if (empty($domainData['name'])) {\n      throw new \\Error(_('The \"name\" property is mandatory'));\n    }\n    if (empty($domainData['type'])) {\n      throw new \\Error(_('The \"type\" property is mandatory'));\n    }\n    $args = [\n      'domain' => $domainData['name']\n    ];\n    if (!empty($domainData['description'])) {\n      $args['desc'] = $domainData['description'];\n    }\n\n    switch ($domainData['type']) {\n      case 'top':\n        if (empty($domainData['password'])) {\n          throw new \\Error(_('The \"password\" property is mandatory'));\n        }\n        $args['pass'] = $domainData['password'];\n        $features = $this->getCache('features_template');\n        break;\n      case 'sub':\n        if (empty($domainData['parent'])) {\n          throw new \\Error(_('The \"parent\" property is mandatory'));\n        }\n        $args['parent'] = $domainData['parent'];\n        $features       = $this->getCache('features_template', false, $domainData['parent']);\n        break;\n      case 'alias':\n        if (empty($domainData['parent'])) {\n          throw new \\Error(_('The \"parent\" property is mandatory'));\n        }\n        $args['alias'] = $domainData['parent'];\n        $features      = $this->getCache('features_template_alias', false, $domainData['parent']);\n        break;\n    }\n\n    if (!empty($features)) {\n      foreach ($features as $f) {\n        if (\n            (strtolower($f['automatic']) === 'yes')\n            && (strtolower($f['enabled']) === 'yes')\n            && (strtolower($f['default']) === 'yes')\n        ) {\n          $args[$f['name']] = 1;\n        }\n      }\n\n      if (!empty($domainData['features'])) {\n        $args = X::mergeArrays(\n            $args,\n            \\array_filter($domainData['features'], function ($v, $k) use ($features) {\n              $f = X::getRow($features, ['name' => $k]);\n              return !empty($v)\n                && !empty($f)\n                && (strtolower($f['enabled']) === 'yes');\n            }, ARRAY_FILTER_USE_BOTH)\n        );\n      }\n    }\n\n    if ($this->virtualmin->create_domain($args)) {\n      $this->makeCache('', $domainData['name']);\n      if (!empty($domainData['parent'])) {\n        $this->makeCache('subdomains', $domainData['parent']);\n      }\n      self::makeGlobalDomainsCache();\n      return true;\n    }\n    return false;\n  }",
            "startLine": 299,
            "endLine": 371,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "domainData",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ata"
                }
            ]
        },
        "editDomain": {
            "name": "editDomain",
            "summary": "Edites a domain",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $domainData)\n  {\n    if (empty($domainData['name'])) {\n      throw new \\Error(_('The \"name\" property is mandatory'));\n    }\n\n    if (empty($domainData['type'])) {\n      throw new \\Error(_('The \"type\" property is mandatory'));\n    }\n\n    if (!($domains = $this->getCache('domains'))) {\n      throw new \\Error(_('No domains cache found'));\n    }\n\n    if (!($oldDomain = X::getRow($domains, ['name' => $domainData['name']]))) {\n      throw new \\Error(_('Domain not found into cache'));\n    }\n\n    $args = ['domain' => $domainData['name']];\n    if (\n        isset($domainData['description'])\n        && ($domainData['description'] !== $oldDomain['description'])\n    ) {\n      $args['desc'] = $domainData['description'];\n    }\n\n    switch ($domainData['type']) {\n      case 'top':\n        if (!empty($domainData['password'])) {\n          $args['pass'] = $domainData['password'];\n        }\n        $features = $this->getCache('features_template');\n        break;\n      case 'sub':\n        $features = $this->getCache('features_template', false, $domainData['parent']);\n        break;\n      case 'alias':\n        $features = $this->getCache('features_template_alias', false, $domainData['parent']);\n        break;\n    }\n\n    if (\n        isset($domainData['serverQuota'])\n        && ($domainData['serverQuota'] !== $oldDomain['server_block_quota'])\n        && !(($domainData['serverQuota'] === 0)\n          && ($oldDomain['server_block_quota'] === 'Unlimited'))\n    ) {\n      $args['quota'] = $domainData['serverQuota'] === 0 ? 'UNLIMITED' : ($domainData['serverQuota'] \/ 1024);\n    }\n\n    if (\n        isset($domainData['userQuota'])\n        && ($domainData['userQuota'] !== $oldDomain['user_block_quota'])\n        && !(($domainData['userQuota'] === 0)\n          && ($oldDomain['user_block_quota'] === 'Unlimited'))\n    ) {\n      $args['uquota'] = $domainData['userQuota'] === 0 ? 'UNLIMITED' : ($domainData['userQuota'] \/ 1024);\n    }\n\n    if (\n        (count($args) > 1)\n        && !$this->virtualmin->modify_domain($args)\n    ) {\n      return false;\n    }\n\n    \/\/ Features\n    if (!empty($features) && !empty($domainData['features'])) {\n      $args              = ['domain' => $domainData['name']];\n      $oldFeatures       = explode(' ', $oldDomain['features']);\n      $featuresToEnable  = \\array_filter($domainData['features'], function ($v, $k) use ($features, $oldFeatures) {\n        $f = X::getRow($features, ['name' => $k]);\n        return !empty($v)\n          && !empty($f)\n          && (strtolower($f['enabled']) === 'yes')\n          && !\\in_array($k, $oldFeatures);\n      }, ARRAY_FILTER_USE_BOTH);\n      $featuresToDisable = \\array_map(function ($f) {\n        return 1;\n      }, \\array_filter($domainData['features'], function ($v, $k) use ($features, $oldFeatures) {\n        $f = X::getRow($features, ['name' => $k]);\n        return empty($v)\n          && !empty($f)\n          && (strtolower($f['enabled']) === 'yes')\n          && \\in_array($k, $oldFeatures);\n      }, ARRAY_FILTER_USE_BOTH));\n\n      if (\n          !empty($featuresToEnable)\n          && !$this->virtualmin->enable_feature(X::mergeArrays($featuresToEnable, $args))\n      ) {\n        return false;\n      }\n\n      if (\n          !empty($featuresToDisable)\n          && !$this->virtualmin->disable_feature(X::mergeArrays($featuresToDisable, $args))\n      ) {\n        return false;\n      }\n    }\n    $this->makeCache('', $domainData['name']);\n    if (!empty($oldDomain['parent_domain'])) {\n      $this->makeCache('subdomains', $oldDomain['parent_domain']);\n    }\n    self::makeGlobalDomainsCache();\n    return true;\n  }",
            "startLine": 379,
            "endLine": 486,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "domainData",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ata"
                }
            ]
        },
        "deleteDomain": {
            "name": "deleteDomain",
            "summary": "Deletes a domain",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $domain)\n  {\n    if (\n        ($domains = $this->getCache('domains'))\n        && $this->virtualmin->delete_domain(['domain' => $domain])\n    ) {\n      if (!\\is_null($idx = X::find($domains, ['name' => $domain]))) {\n        if (!empty($domains[$idx]['parent_domain'])) {\n          $this->makeCache('subdomains', $domains[$idx]['parent_domain']);\n        }\n        array_splice($domains, $idx, 1);\n        $this->cacheSet(\n            $this->cacheNamePrefix . 'domains',\n            '',\n            $domains,\n            0\n        );\n        $this->cacheDelete($this->cacheNamePrefix . \"domains\/$domain\");\n        self::makeGlobalDomainsCache();\n      }\n      return true;\n    }\n    return false;\n  }",
            "startLine": 493,
            "endLine": 516,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "domain",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "renameDomain": {
            "name": "renameDomain",
            "summary": "Renames a domain",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $domain, string $newDomain)\n  {\n    if (\n        $this->virtualmin->unsetJson()->rename_domain([\n          'domain' => $domain,\n          'new-domain' => $newDomain,\n          'auto-user' => 1,\n          'auto-home' => 1,\n          'auto-prefix' => 1\n        ])\n    ) {\n      $this->virtualmin->setJson();\n      $this->makeCache('', $newDomain);\n      $domains = $this->getCache('domains');\n      if (!\\is_null($idx = X::find($domains, ['name' => $domain]))) {\n        if (!empty($domains[$idx]['parent_domain'])) {\n          $this->makeCache('subdomains', $domains[$idx]['parent_domain']);\n        }\n        array_splice($domains, $idx, 1);\n        $this->cacheSet(\n            $this->cacheNamePrefix . 'domains',\n            '',\n            $domains,\n            0\n        );\n        $this->cacheDelete($this->cacheNamePrefix . \"domains\/$domain\");\n      }\n      self::makeGlobalDomainsCache();\n      return true;\n    }\n    return false;\n  }",
            "startLine": 526,
            "endLine": 557,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "domain",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "newDomain",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "omain"
                }
            ]
        },
        "cloneDomain": {
            "name": "cloneDomain",
            "summary": "Clones a domain",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $domain, string $newDomain)\n  {\n    if (\n        $this->virtualmin->clone_domain([\n          'domain' => $domain,\n          'newdomain' => $newDomain\n        ])\n    ) {\n      $this->makeCache('', $newDomain);\n      $domains = $this->getCache('domains');\n      if (\n          !\\is_null($idx = X::find($domains, ['name' => $domain]))\n          && !empty($domains[$idx]['parent_domain'])\n      ) {\n        $this->makeCache('subdomains', $domains[$idx]['parent_domain']);\n      }\n      self::makeGlobalDomainsCache();\n      return true;\n    }\n    return false;\n  }",
            "startLine": 567,
            "endLine": 587,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "domain",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "newDomain",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "omain"
                }
            ]
        },
        "makeGlobalDomainsCache": {
            "name": "makeGlobalDomainsCache",
            "summary": "Makes global domains cache",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $cache   = Cache::getEngine();\n    $domains = [];\n    $servers = self::getOptions('servers');\n    if (!empty($servers)) {\n      foreach ($servers as $server) {\n        if (\n            !empty($server['code'])\n            && ($serverDomains = $cache->get(self::CACHE_NAME . '\/' . $server['code'] . '\/domains'))\n        ) {\n          foreach ($serverDomains as $sd) {\n            $backups              = $cache->get(self::CACHE_NAME . '\/' . $server['code'] . '\/domains\/' . $sd['name'] . '\/backups') ?: [];\n            $domains[$sd['name']] = X::mergeArrays($sd, [\n              'hostname' => $server['code'],\n              'admins' => $cache->get(self::CACHE_NAME . '\/' . $server['code'] . '\/domains\/' . $sd['name'] . '\/admins') ?: [],\n              'users' => $cache->get(self::CACHE_NAME . '\/' . $server['code'] . '\/domains\/' . $sd['name'] . '\/users') ?: [],\n              'dns' => $cache->get(self::CACHE_NAME . '\/' . $server['code'] . '\/domains\/' . $sd['name'] . '\/dns') ?: [],\n              'backups_succeeded' =>  !empty($backups) ? $backups['succeeded'] : [],\n              'backups_failed' =>  !empty($backups) ? $backups['failed'] : []\n            ]);\n          }\n        }\n      }\n      ksort($domains);\n      $domains = \\array_values($domains);\n    }\n    $cache->set(self::CACHE_NAME . '\/domains', $domains);\n    return $domains;\n  }",
            "startLine": 595,
            "endLine": 624,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "startLine": 150,
            "endLine": 154,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppuiRoot": {
            "name": "getAppuiRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_appui_id;\n  }",
            "startLine": 157,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "startLine": 164,
            "endLine": 172,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "parent": false,
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 181,
            "endLine": 184,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...self::_treat_args(func_get_args())), function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 187,
            "endLine": 196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "startLine": 199,
            "endLine": 202,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 205,
            "endLine": 208,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 211,
            "endLine": 214,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 217,
            "endLine": 220,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionId": {
            "name": "getAppuiOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 229,
            "endLine": 232,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsIds": {
            "name": "getAppuiOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(\n          ...self::_treat_args(func_get_args(), true)\n        ),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 235,
            "endLine": 247,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTree": {
            "name": "getAppuiOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args(), true)) ) ? $tree['items'] : [];\n  }",
            "startLine": 250,
            "endLine": 253,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptions": {
            "name": "getAppuiOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 256,
            "endLine": 259,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOption": {
            "name": "getAppuiOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 262,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTextValue": {
            "name": "getAppuiOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Server",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getAppuiOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 268,
            "endLine": 271,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        }
    },
    "properties": null,
    "staticProperties": {
        "optional_is_init": false,
        "option_root_id": null,
        "option_appui_id": null
    },
    "constants": [],
    "numMethods": 33,
    "numProperties": 0,
    "numConstants": 1,
    "numStaticProperties": 3,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\Cache",
        "bbn\\Models\\Tts\\Optional"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "optional_is_init": false,
        "option_root_id": null,
        "option_appui_id": null,
        "user": null,
        "pass": null,
        "hostname": null,
        "opt": null,
        "virtualmin": null,
        "cloudmin": null,
        "webmin": null,
        "cacheNamePrefix": null,
        "_cache_prefix": null,
        "cache_engine": null,
        "options": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Server",
    "summary": "Server class",
    "description": "",
    "description_parts": []
}