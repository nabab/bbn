{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Medias",
    "namespace": true,
    "realName": "Medias",
    "realNamespace": "bbn\\Appui",
    "traits": [
        "bbn\\Models\\Tts\\References",
        "bbn\\Models\\Tts\\DbActions",
        "bbn\\Models\\Tts\\Url",
        "bbn\\Models\\Tts\\Tagger"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Medias.php",
    "startLine": 20,
    "endLine": 1328,
    "numMethods": 98,
    "numProperties": 41,
    "numConstants": 0,
    "numStaticProperties": 1,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "table": "bbn_medias",
            "tables": {
                "medias": "bbn_medias",
                "medias_tags": "bbn_medias_tags",
                "medias_url": "bbn_medias_url",
                "medias_groups": "bbn_medias_groups",
                "medias_groups_medias": "bbn_medias_groups_medias"
            },
            "arch": {
                "medias": {
                    "id": "id",
                    "id_user": "id_user",
                    "type": "type",
                    "mimetype": "mimetype",
                    "name": "name",
                    "title": "title",
                    "description": "description",
                    "content": "content",
                    "private": "private",
                    "created": "created",
                    "edited": "edited",
                    "editor": "editor"
                },
                "medias_url": {
                    "id_media": "id_media",
                    "id_url": "id_url"
                },
                "medias_tags": {
                    "id_media": "id_media",
                    "id_tag": "id_tag"
                },
                "medias_groups": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "text": "text",
                    "cfg": "cfg"
                },
                "medias_groups_medias": {
                    "id_media": "id_media",
                    "id_group": "id_group",
                    "position": "position",
                    "link": "link"
                }
            },
            "urlItemField": "id_media",
            "urlTypeValue": "media"
        },
        "opt": null,
        "usr": null,
        "userId": null,
        "opt_id": null,
        "thumbsSizes": null,
        "path": null,
        "img_extensions": [
            "jpeg",
            "jpg",
            "png",
            "gif",
            "webp"
        ],
        "thumbs_sizes": [
            [
                500,
                false
            ],
            [
                250,
                false
            ],
            [
                125,
                false
            ],
            [
                96,
                false
            ],
            [
                48,
                false
            ]
        ],
        "defaultUrlType": null,
        "class_cfg": null,
        "imageRoot": null,
        "fileRoot": null,
        "db": null,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": [],
        "references": null,
        "references_select": "",
        "references_join": "",
        "_isInitClassCfg": false,
        "fields": null,
        "class_table": null,
        "class_table_index": null,
        "rootFilterCfg": [],
        "dbTraitRelations": [],
        "dbTraitStructure": [],
        "isInitUrl": false,
        "urlType": null,
        "urlTable": null,
        "urlTableIdx": null,
        "urlFields": null,
        "url": null,
        "taggerIsInit": false,
        "taggerTable": null,
        "taggerCols": null,
        "taggerObject": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Medias",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(Db $db, array $cfg = null)\n  {\n    parent::__construct($db);\n    $this->initClassCfg($cfg);\n    $this->opt    = Option::getInstance();\n    $this->usr    = User::getInstance();\n    $this->opt_id = $this->opt->fromCode('media', 'note', 'appui');\n    $this->fs     = new System();\n    $this->defaultUrlType = 'media';\n    $this->taggerInit(\n      $this->class_cfg['tables']['medias_tags'],\n      [\n        'id_tag' => $this->class_cfg['arch']['medias_tags']['id_tag'],\n        'id_element' => $this->class_cfg['arch']['medias_tags']['id_media']\n      ]\n    );\n    $this->userId = $this->usr->getId() ?: $this->setExternalUser();\n  }",
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Db",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Db.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function __construct(dbClass $db)\n  {\n    $this->db = $db;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "__construct",
                "returns": [],
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "type_arr": [
                            "bbn\\Db"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ],
                "doc": {
                    "description": "Constructor.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "dbClass",
                            "name": "$db",
                            "description": "A database connection"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Constructor.\n   *\n   * @param dbClass $db A database connection\n   *\/"
            },
            "trait": false,
            "startLine": 107,
            "endLine": 124,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "setExternalUser": {
            "name": "setExternalUser",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setExternalUser()\n  {\n    $this->userId = defined('BBN_EXTERNAL_USER_ID') ? BBN_EXTERNAL_USER_ID : null;\n    return $this->userId;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 127,
            "endLine": 131,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "setExternalUser",
            "returns": [],
            "arguments": []
        },
        "getUserId": {
            "name": "getUserId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUserId(): ?string\n  {\n    return $this->userId;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 134,
            "endLine": 137,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getUserId",
            "returns": [
                null,
                "string"
            ],
            "arguments": []
        },
        "setImageRoot": {
            "name": "setImageRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setImageRoot(string $root): bool\n  {\n    if ($root) {\n      if (substr($root, -1) !== '\/') {\n        $root .= '\/';\n      }\n\n      $this->imageRoot = $root;\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 140,
            "endLine": 152,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setImageRoot",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "root",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setFileRoot": {
            "name": "setFileRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setFileRoot(string $root): bool\n  {\n    if ($root) {\n      if (substr($root, -1) !== '\/') {\n        $root .= '\/';\n      }\n\n      $this->fileRoot = $root;\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 155,
            "endLine": 167,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setFileRoot",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "root",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getImageUrl": {
            "name": "getImageUrl",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getImageUrl(string $id = null): string\n  {\n    if ($this->dbTraitExists($id)) {\n      if ($url = $this->getUrl($id)) {\n        return $url;\n      }\n\n      if (!$this->imageRoot) {\n        $this->setImageRoot(Mvc::getPluginUrl('appui-note').'\/media\/image\/');\n      }\n\n      return $this->imageRoot . (string)$id;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 170,
            "endLine": 183,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getImageUrl",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getFileUrl": {
            "name": "getFileUrl",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFileUrl(string $id = null): string\n  {\n    if ($this->dbTraitExists($id)) {\n      if ($url = $this->getUrl($id)) {\n        return $url;\n      }\n\n      if (!$this->fileRoot) {\n        $this->setFileRoot(Mvc::getPluginUrl('appui-note').'\/media\/download\/');\n      }\n\n      return $this->fileRoot . (string)$id;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 186,
            "endLine": 199,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getFileUrl",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getPath": {
            "name": "getPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPath($media = null): string\n  {\n    if (is_string($media)) {\n      $media = $this->getMedia($media, true);\n    }\n\n    if (!is_array($media)) {\n      throw new Exception(\"Impossible to find the media in the database\");\n    }\n\n    if (!isset($this->path)) {\n      $this->path = Mvc::getDataPath('appui-note').'media';\n    }\n\n    if (!isset($media['content'], $media['content']['path'])) {\n      throw new Exception(\"The media doesn't seem to have a path\");\n    }\n\n    return $this->path . '\/' . $media['content']['path'] . $media['id'] . '\/' . $media['name'];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 206,
            "endLine": 225,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "media",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array|null",
                        "name": "$media"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string|array|null $media\n   * @return string\n   *\/"
        },
        "search": {
            "name": "search",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function search($search, $cfg = [], int $limit = 20, int $start = 0): ?array\n  {\n    $cf = $this->getClassCfg();\n    $cft = $this->taggerObject->getClassCfg();\n\n    if (!isset($cfg['join'])) {\n      $cfg['join'] = [];\n    }\n\n    $cfg['join'][] = [\n      'type' => 'left',\n      'table' => $cf['tables']['medias_tags'],\n      'on' => [\n        [\n          'field' => $this->db->cfn($cf['arch']['medias_tags']['id_media'], $cf['tables']['medias_tags']),\n          'exp' => $this->db->cfn($cf['arch']['medias']['id'], $cf['tables']['medias'], true)\n        ]\n      ]\n    ];\n    $cfg['join'][] = [\n      'type' => 'left',\n      'table' => $cft['tables']['tags'],\n      'on' => [\n        [\n          'field' => $this->db->cfn($cf['arch']['medias_tags']['id_tag'], $cf['tables']['medias_tags']),\n          'exp' => $this->db->cfn($cft['arch']['tags']['id'], $cft['tables']['tags'], true)\n        ]\n      ]\n    ];\n    if (!isset($cfg['filters'])) {\n      $cfg['filters'] = [\n        'logic' => 'AND',\n        'conditions' => []\n      ];\n    }\n\n    $filter = [\n      'logic' => 'OR',\n      'conditions' => []\n    ];\n\n    $filter['conditions'][] = [\n      'field' => $this->db->cfn($cf['arch']['medias']['title'], $cf['tables']['medias']),\n      'operator' => 'contains',\n      'value' => $search\n    ];\n    $filter['conditions'][] = [\n      'field' => $this->db->cfn($cf['arch']['medias']['name'], $cf['tables']['medias']),\n      'operator' => 'contains',\n      'value' => $search\n    ];\n    $filter['conditions'][] = [\n      'field' => $this->db->cfn($cft['arch']['tags']['tag'], $cft['tables']['tags']),\n      'operator' => 'contains',\n      'value' => $search\n    ];\n\n    $cfg['filters']['conditions'][] = $filter;\n\n    return $this->browse($cfg, $limit, $start);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 228,
            "endLine": 288,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "search",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "search",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 20,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "browse": {
            "name": "browse",
            "summary": "Gets an array of medias.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function browse(array $cfg, int $limit = 20, int $start = 0): ?array\n  {\n    if ($this->usr) {\n      $cf = $this->getClassCfg();\n      $ct = $cf['arch']['medias'];\n      $filters = [];\n      if (isset($cfg['filters'], $cfg['filters']['conditions'])) {\n        $filters = $cfg['filters']['conditions'];\n        if ((count($filters) === 1) && ($filters[0]['field'] === $cf['arch']['medias']['title'])) {\n          unset($cfg['filters']);\n          return $this->search($filters[0]['value'], $cfg, $limit, $start);\n        }\n      }\n      if (($pvtIdx = X::find($filters, ['field' => $ct['private']])) === null) {\n        $filters[] = [\n          'field' => $ct['private'],\n          'value' => 0\n        ];\n      }\n      else {\n        $userIdx = X::find($filters, ['field' => $ct['id_user']]);\n        $id_user = $this->userId;\n        if (!empty($filters[$pvtIdx]['value'])) {\n          if ($userIdx === null) {\n            $filters[] = [\n              'field' => $ct['id_user'],\n              'value' => $id_user\n            ];\n          }\n          else {\n            $filters[$userIdx]['value'] = $id_user;\n          }\n        }\n        else if ($userIdx !== null) {\n          unset($filters[$userIdx]);\n        }\n      }\n      if (isset($cfg['filters'], $cfg['filters']['conditions'])) {\n        $cfg['filters']['conditions'] = $filters;\n      }\n      else {\n        $cfg['filters'] = [\n          'logic' => 'AND',\n          'conditions' => $filters\n        ];\n      }\n      $grid = new Grid($this->db, $cfg, [\n        'table' => $cf['table'],\n        'fields' => array_merge($ct, ['last_mod' => \"IFNULL(edited, created)\"]),\n        'join' => $cfg['join'] ?? null,\n        'limit' => $cfg['limit'] ?? $limit,\n        'start' => $cfg['start'] ?? $start\n      ]);\n      if ($data = $grid->getDatatable()) {\n        foreach ($data['data'] as &$d) {\n          $this->transformMedia($d);\n        }\n        return $data;\n      }\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 299,
            "endLine": 360,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "browse",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 20,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets an array of medias.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets an array of medias.\n   *\n   * @param array $cfg\n   * @param int $limit\n   * @param int $start\n   * @return array|null\n   *\/"
        },
        "createGroup": {
            "name": "createGroup",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createGroup(string $text): string\n  {\n    $cf = $this->getClassCfg();\n    $t = $cf['tables']['medias_groups'];\n    $f = $cf['arch']['medias_groups'];\n    if ($this->db->insert($t, [\n      $f['text'] => Str::sanitizeHtml($text)\n    ])) {\n      return $this->db->lastId();\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 363,
            "endLine": 373,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "createGroup",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "text",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getGroup": {
            "name": "getGroup",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getGroup(string $id): string\n  {\n    $cf = $this->getClassCfg();\n    $t = $cf['tables']['medias_groups'];\n    $f = $cf['arch']['medias_groups'];\n    return $this->db->selectOne($t, $f['text'], [$f['id'] => $id]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 376,
            "endLine": 382,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getGroup",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "renameGroup": {
            "name": "renameGroup",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function renameGroup(string $id, string $text): bool\n  {\n    $cf = $this->getClassCfg();\n    $t = $cf['tables']['medias_groups'];\n    $f = $cf['arch']['medias_groups'];\n    return (bool)$this->db->update($t, [\n      $f['text'] => Str::sanitizeHtml($text)\n    ], [\n      $f['id'] => $id\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 385,
            "endLine": 395,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "renameGroup",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addToGroup": {
            "name": "addToGroup",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addToGroup(string $id_media, string $id_group, bool $addTag = false): bool\n  {\n    $cf = $this->getClassCfg();\n    $t = $cf['tables']['medias_groups_medias'];\n    $f = $cf['arch']['medias_groups_medias'];\n    $order = $this->db->selectOne($t, 'position', ['id_group' => $id_group], ['position' => 'DESC']) + 1;\n    $res = $this->db->insertIgnore($t, [\n      $f['id_group'] => $id_group,\n      $f['id_media'] => $id_media,\n      $f['position'] => $order ?: null\n    ]);\n    if ($res && $addTag) {\n      $group = $this->getGroup($id_group);\n      $this->addTag($id_media, $group);\n    }\n\n    return (bool)$res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 398,
            "endLine": 415,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "addToGroup",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_group",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "addTag",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "removeFromGroup": {
            "name": "removeFromGroup",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeFromGroup(string $id_media, string $id_group): bool\n  {\n    $cf = $this->getClassCfg();\n    $t = $cf['tables']['medias_groups_medias'];\n    $f = $cf['arch']['medias_groups_medias'];\n    return (bool)$this->db->deleteIgnore($t, [\n      $f['id_group'] => $id_group,\n      $f['id_media'] => $id_media\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 418,
            "endLine": 427,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "removeFromGroup",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_group",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "browseByGroup": {
            "name": "browseByGroup",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function browseByGroup(string $idGroup, array $cfg = [], int $limit = 20, int $start = 0): ?array\n  {\n    $cf = $this->getClassCfg();\n    $t = $cf['tables']['medias_groups_medias'];\n\n    $cfg['join'] = [[\n      'table' => $t,\n      'on' => [\n        'conditions' => [[\n          'field' => $this->db->cfn('id_media', $t),\n          'exp' => $this->db->cfn('id', $cf['tables']['medias'])\n        ], [\n          'field' => $this->db->cfn('id_group', $t),\n          'value' => $idGroup\n        ]]\n      ]\n    ]];\n\n    if (empty($cfg['order']) || !\\is_array($cfg['order'])) {\n      $cfg['order'] = [];\n    }\n\n    $cfg['order'][] = [\n      'field' => $this->db->cfn('position', $t),\n      'dir' => 'ASC'\n    ];\n\n    if ($res = $this->browse($cfg, $limit, $start)) {\n      foreach ($res['data'] as $i => $d) {\n        $media_groups_media = $this->db->rselect(\n          $t,\n          [],\n          [\n            $cf['arch']['medias_groups_medias']['id_group'] => $idGroup,\n            $cf['arch']['medias_groups_medias']['id_media'] => $d[$cf['arch']['medias']['id']]\n          ]\n        );\n        $res['data'][$i][$cf['arch']['medias_groups_medias']['position']] = $media_groups_media['position'];\n        $res['data'][$i][$cf['arch']['medias_groups_medias']['link']] = $media_groups_media['link'];\n      }\n    }\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 430,
            "endLine": 472,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "browseByGroup",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "idGroup",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 20,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "count": {
            "name": "count",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function count(array $filter = []): ?int\n  {\n    if ($this->usr) {\n      $cf = $this->getClassCfg();\n      $ct = $cf['arch']['medias'];\n      if (!isset($filter[$ct['private']])) {\n        $filter[$ct['private']] = 0;\n      }\n      elseif ($filter[$ct['private']]) {\n        $filter[$ct['id_user']] = $this->userId;\n      }\n\n      return $this->db->count($cf['table'], $filter);\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 479,
            "endLine": 494,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "count",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array $filter\n   * @return int|null\n   *\/"
        },
        "insert": {
            "name": "insert",
            "summary": "Adds a new media",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insert(\n      string $file,\n      array $content = null,\n      string $title = '',\n      string $type = 'file',\n      bool $private = false,\n      string $description = null\n  ): ?string\n  {\n    $cf =& $this->class_cfg;\n    if (!empty($file)\n        && ($id_type = $this->opt->fromCode($type, $this->opt_id))\n        && ($ext = Str::fileExt($file))\n    ) {\n      if (($type === 'file') && $this->isImage($file)) {\n        $id_type = $this->opt->fromCode('image', $this->opt_id);\n      }\n\n      $content = null;\n      if (!$this->fs->isFile($file)) {\n        throw new Exception(X::_(\"Impossible to find the file %s\", $file));\n      }\n\n      if ($private) {\n        if (!$this->usr->check()) {\n          return null;\n        }\n\n        $root = Mvc::getUserDataPath($this->userId, 'appui-note');\n      }\n      else {\n        $root = Mvc::getDataPath('appui-note');\n      }\n\n      $root   .= 'media\/';\n      $path    = X::makeStoragePath($root, '', 0, $this->fs);\n      $dpath   = substr($path, strlen($root));\n      $name    = normalizer_normalize(X::basename($file));\n      $mime    = mime_content_type($file) ?: null;\n      $content = [\n        'path' => $dpath,\n        'size' => $this->fs->filesize($file),\n        'extension' => $ext\n      ];\n      if (empty($title)) {\n        $title = trim(str_replace(['-', '_', '+'], ' ', X::basename($file, \".$ext\")));\n      }\n\n      if (!$this->db->insert(\n        $cf['table'],\n        [\n          $cf['arch']['medias']['id_user'] => $this->userId,\n          $cf['arch']['medias']['type'] => $id_type,\n          $cf['arch']['medias']['mimetype'] => $mime,\n          $cf['arch']['medias']['title'] => normalizer_normalize($title),\n          $cf['arch']['medias']['description'] => normalizer_normalize($description),\n          $cf['arch']['medias']['name'] => $name ?: null,\n          $cf['arch']['medias']['content'] => $content ? json_encode($content) : null,\n          $cf['arch']['medias']['private'] => $private ? 1 : 0,\n          $cf['arch']['medias']['created'] => date('Y-m-d H:i:s')\n        ]\n      )) {\n        throw new Exception(X::_(\"Impossible to insert the media in the database\"));\n      }\n\n      $id = $this->db->lastId();\n      if ($this->fs->createPath($path.$id)) {\n        $this->fs->move(\n          $file,\n          $path.$id\n        );\n        \/\/ Normalize the filename\n        rename($path.$id.'\/'.X::basename($file), $path.$id.'\/'.$name);\n        $newFile = $path.$id.'\/'.$name;\n        chmod($newFile, 0644);\n        if (strpos($mime, 'image\/') === 0) {\n          $image = new Image($newFile, $this->fs);\n          $tst = $this->getThumbsSizesByType($id_type);\n          $ts =  !empty($tst) && !empty($tst['thumbs']) ? \\array_map(function($t){\n            return [\n              empty($t['width']) ? false : $t['width'],\n              empty($t['height']) ? false : $t['height'],\n              X::hasProps($t, ['width', 'height', 'crop'], true) ? true : false\n            ];\n          }, $tst['thumbs']) : $this->thumbs_sizes;\n          $image->thumbs($path.$id, $ts, '.bbn-%s');\n        }\n      }\n\n\n      return $id;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 508,
            "endLine": 602,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "insert",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 4,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "description",
                    "position": 5,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds a new media\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$content"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$title"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$private"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$description"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Adds a new media\n   *\n   * @param string $file\n   * @param array|null $content\n   * @param string $title\n   * @param string $type\n   * @param boolean $private\n   * @param string|null $description\n   * @return string|null\n   * @throws Exception\n   *\/"
        },
        "getThumbsSizesByType": {
            "name": "getThumbsSizesByType",
            "summary": "Returns an array of sizes rules, each corresponding to a thumbnail",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getThumbsSizesByType(string $id_type): array\n  {\n    if (!isset($this->thumbsSizes[$id_type])) {\n      $o = $this->opt->option($id_type);\n      if (!$o) {\n        throw new Exception(X::_(\"The given type doesn't exist\"));\n      }\n\n      $this->thumbsSizes[$id_type] = $o;\n    }\n\n    return $this->thumbsSizes[$id_type];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 610,
            "endLine": 622,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getThumbsSizesByType",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id_type",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "type"
                }
            ],
            "doc": {
                "description": "Returns an array of sizes rules, each corresponding to a thumbnail\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of sizes rules, each corresponding to a thumbnail\n   * @param string $id_type\n   * @return array\n   *\/"
        },
        "getThumbsSizes": {
            "name": "getThumbsSizes",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getThumbsSizes($media, $exists = true): array\n  {\n    if (is_string($media)) {\n      $media = $this->getMedia($media);\n    }\n\n    if (!is_array($media)) {\n      throw new Exception(\"Impossible to find the media in the database\");\n    }\n\n    if (empty($media['file'])) {\n      throw new Exception(\"Impossible to retrieve the path\");\n    }\n\n    $cfg = $this->getThumbsSizesByType($media['type']);\n    $res = [];\n    foreach ($cfg['thumbs'] as $thumb) {\n      $size = [\n        empty($thumb['width']) ? false : $thumb['width'],\n        empty($thumb['height']) ? false : $thumb['height'],\n        X::hasProps($thumb, ['width', 'height', 'crop'], true) ? true : false\n      ];\n      if (!$exists || $this->fs->exists($this->getThumbPath($media['file'], $size))) {\n        $res[] = $size;\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 629,
            "endLine": 657,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getThumbsSizes",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "media",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "exists",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$media"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string|array $media\n   * @return array\n   *\/"
        },
        "getThumbPath": {
            "name": "getThumbPath",
            "summary": "Returns the path to the img for the given $path and size",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function getThumbPath(string $path, array $size, bool $if_exists = true, bool $create = false): ?string\n  {\n    if (count($size) && (Str::isInteger($size[0]) || Str::isInteger($size[1] ?? null))) {\n      $ext = Str::fileExt($path, true);\n      $file = dirname($path) . '\/' . $ext[0] . '.bbn';\n      \/\/ Width\n      if ($size[0]) {\n        $file .= '-w-' . $size[0];\n      }\n      \/\/ Height\n      if ($size[1]) {\n        $file .= '-h-' . $size[1];\n      }\n      \/\/ Cropped\n      if ($size[0] && $size[1] && !empty($size[2])) {\n        $file .= '-c';\n      }\n\n      $file .= '.' . $ext[1];\n\n      if (!$if_exists) {\n        return $file;\n      }\n      \n      if (!$this->fs->exists($path)) {\n        return null;\n      }\n\n      $exists = $this->fs->exists($file);\n\n      if ($create && !$exists) {\n        $img = new Image($path);\n        if ($size[0] && ($size[0] >= $img->getWidth())) {\n          symlink($path, $file);\n        }\n        elseif ($size[1] && ($size[1] >= $img->getHeight())) {\n          symlink($path, $file);\n        }\n        elseif ($img->resize($size[0] ?: null, $size[1] ?: null, $size[2] ?? false)) {\n          $img->save($file);\n        }\n      }\n\n      if ($exists || $this->fs->exists($file)) {\n        return $file;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 664,
            "endLine": 713,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "getThumbPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "size",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "if_exists",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                },
                {
                    "name": "create",
                    "position": 3,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the path to the img for the given $path and size\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$size"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the path to the img for the given $path and size\n   * @param string $path\n   * @param array $size\n   *\/"
        },
        "getThumbsPath": {
            "name": "getThumbsPath",
            "summary": "If the thumbs files exists for this path it returns an array of the the thumbs filename",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getThumbsPath($media, bool $if_exists = true, bool $create = false, bool $delete = false)\n  {\n    $res  = [];\n    if (is_string($media)) {\n      $media = $this->getMedia($media, true);\n    }\n\n    if (!is_array($media)) {\n      throw new Exception(X::_(\"The media doesn't exist\"));\n    }\n\n    if (!empty($media['is_image']) && $this->fs->exists($media['file'])) {\n      if ($delete) {\n        $files = $this->fs->getFiles(dirname($media['file']));\n        if (count($files) > 1) {\n          foreach ($files as $f) {\n            if ($f !== $media['file']) {\n              $this->fs->delete($f);\n            }\n          }\n        }\n      }\n\n      foreach ($media['thumbs'] as $size) {\n        if (($result = $this->getThumbPath($media['file'], $size, $if_exists, $create)) !== null) {\n          $res[] = $result;\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 724,
            "endLine": 755,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getThumbsPath",
            "returns": [],
            "arguments": [
                {
                    "name": "media",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "if_exists",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "exists"
                },
                {
                    "name": "create",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "delete",
                    "position": 3,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "If the thumbs files exists for this path it returns an array of the the thumbs filename\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$media"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$if",
                        "description": "exists"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$create"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * If the thumbs files exists for this path it returns an array of the the thumbs filename\n   *\n   * @param $media\n   * @param bool $if_exists\n   * @param bool $create\n   * @return array\n   *\/"
        },
        "removeThumbs": {
            "name": "removeThumbs",
            "summary": "Remove the thumbs files",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeThumbs($media)\n  {\n    if (is_string($media)) {\n      $media = $this->getMedia($media);\n    }\n\n    if (!is_array($media)) {\n      throw new Exception(X::_(\"The media doesn't exist\"));\n    }\n\n    if ($thumbs = $this->getThumbsPath($media)) {\n      foreach($thumbs as $th){\n        if ($this->fs->exists($th)) {\n          unlink($th);\n        }\n      }\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 764,
            "endLine": 781,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeThumbs",
            "returns": [],
            "arguments": [
                {
                    "name": "media",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Remove the thumbs files\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Remove the thumbs files\n   *\n   * @param string $path\n   * @return void\n   *\/"
        },
        "getThumbsName": {
            "name": "getThumbsName",
            "summary": "Returns the name of the thumb file corresponding to the given name and size",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getThumbsName(string $name,array $size = [60,60])\n  {\n    if (count($size) === 1) {\n      $size[] = $size[0];\n    }\n\n    if ((count($size) !== 2) || !Str::isInteger($size[0], $size[1])) {\n      return null;\n    }\n\n    $ext = Str::fileExt($name, true);\n    $dir = dirname($name);\n    if (!empty($dir)) {\n      $dir .= '\/';\n    }\n\n    return $dir . $ext[0] . '_w' . $size[0] . 'h' . $size[1] . (empty($ext[1]) ? '' : '.' . $ext[1]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 789,
            "endLine": 806,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getThumbsName",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "size",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [
                        60,
                        60
                    ],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the name of the thumb file corresponding to the given name and size\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$size"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the name of the thumb file corresponding to the given name and size\n   * @param string $name\n   * @param array $size\n   *\/"
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes the given media",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function delete(string $id)\n  {\n    if (Str::isUid($id)) {\n      $cf    =& $this->class_cfg;\n      $media =  $this->getMedia($id, true);\n\n      if ($media\n          && ($path = X::dirname($media['file']))\n          && is_file($media['file'])\n          && $this->db->delete($cf['table'], [$cf['arch']['medias']['id'] => $id])\n      ) {\n        if ($this->fs->delete($path, false)) {\n          X::cleanStoragePath($path);\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 815,
            "endLine": 835,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "delete",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the given media\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the given media\n   *\n   * @param string $id\n   * @return bool\n   *\/"
        },
        "isImage": {
            "name": "isImage",
            "summary": "Returns true if the given path is an image",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isImage(string $path)\n  {\n    if (is_string($path) && $this->fs->isFile($path)) {\n      $content_type = mime_content_type($path);\n      if (strpos($content_type, 'image\/') === 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 844,
            "endLine": 854,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isImage",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns true if the given path is an image\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the given path is an image\n   *\n   * @param string $path\n   * @return boolean\n   *\/"
        },
        "getMedia": {
            "name": "getMedia",
            "summary": "Returns the object of the media",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMedia(string $id, bool $details = false, int $width = null, int $height = null, bool $crop = false, bool $force = false)\n  {\n    $cf =& $this->class_cfg;\n    if (Str::isUid($id)\n        && ($link_type = $this->opt->fromCode('link', $this->opt_id))\n        && ($media = $this->db->rselect($cf['table'], $cf['arch']['medias'], [$cf['arch']['medias']['id'] => $id]))\n        && ($link_type !== $media[$cf['arch']['medias']['type']])\n    ) {\n      $this->transformMedia($media, $width, $height, $crop, $force);\n      if (empty($details)) {\n        return $media['file'];\n      }\n      else {\n        $media['url'] = $this->getUrl($id);\n        return $media;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 865,
            "endLine": 884,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "getMedia",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "details",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "width",
                    "position": 2,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "height",
                    "position": 3,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "crop",
                    "position": 4,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 5,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the object of the media\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$details"
                    },
                    {
                        "tag": "param",
                        "type": "int|null",
                        "name": "$width"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the object of the media\n   *\n   * @param string $id\n   * @param boolean $details\n   * @param int|null $width\n   * @return array|false|string\n   *\/"
        },
        "zip": {
            "name": "zip",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function zip($medias, $dest)\n  {\n    if (is_string($medias)) {\n      $medias = [$medias];\n    }\n\n    if (is_array($medias)\n        && $this->fs->createPath(X::dirname($dest))\n        && ($zip = new \\ZipArchive())\n        && ((        is_file($dest)\n        && ($zip->open($dest, \\ZipArchive::OVERWRITE) === true))\n        || ($zip->open($dest, \\ZipArchive::CREATE) === true)        )\n    ) {\n      foreach ($medias as $media){\n        if ($file = $this->getMedia($media)) {\n          $zip->addFile($file, X::basename($file));\n        }\n      }\n\n      return $zip->close();\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 892,
            "endLine": 915,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "zip",
            "returns": [],
            "arguments": [
                {
                    "name": "medias",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dest",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$medias"
                    },
                    {
                        "tag": "param",
                        "type": "$dest"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $medias\n   * @param $dest\n   * @return bool\n   *\/"
        },
        "update": {
            "name": "update",
            "summary": "updates the title or the name or the title of the given media at the level of the file and database",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function update(string $id_media, string $name, string $title)\n  {\n    $new = [];\n    \/\/the old media\n    $old  = $this->getMedia($id_media, true);\n    if ($old && (($old['name'] !== $name) || ($old['title'] !== $title))) {\n      $content = $old['content'];\n      if (Str::isJson($content)) {\n        $content = \\json_decode($content, true);\n      }\n\n      if ($this->fs->exists($old['file'])) {\n        $path = dirname($old['file']).'\/';\n        if ($old['name'] !== $name) {\n          \/\/if the media is an image has to update also the thumbs names\n          if ($this->isImage($old['file'])) {\n            $thumbs_names = [\n              [\n                'old' => $this->getThumbsName($old['name'], [60,60]),\n                'new' => $this->getThumbsName($name, [60,60])\n              ],[\n                'old' => $this->getThumbsName($old['name'], [100,100]),\n                'new' => $this->getThumbsName($name, [100,100])\n              ],[\n                'old' => $this->getThumbsName($old['name'], [125,125]),\n                'new' => $this->getThumbsName($name, [125,125])\n              ]\n            ];\n            foreach ($thumbs_names as $t){\n              $this->fs->rename($path . $t['old'], $t['new'], true);\n            }\n          }\n\n          $this->fs->rename($path . $old['name'], $name, true);\n        }\n\n        if ($this->updateDb($id_media, $name, $title)) {\n          $new = $this->getMedia($id_media, true);\n        }\n      }\n\n      return $new;\n    }\n\n    return $new;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 926,
            "endLine": 971,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "update",
            "returns": [],
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "updates the title or the name or the title of the given media at the level of the file and database\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "media"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$title"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * updates the title or the name or the title of the given media at the level of the file and database\n   *\n   * @param string $id_media\n   * @param string $name\n   * @param string $title\n   * @return array|false|string\n   *\/"
        },
        "updateDb": {
            "name": "updateDb",
            "summary": "Updates the media on the databases",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateDb(string $id_media, string $name, string $title, array $content = [])\n  {\n    $fields = [\n      $this->class_cfg['arch']['medias']['name'] => $name,\n            $this->class_cfg['arch']['medias']['title'] => $title\n    ];\n    if(!empty($content)) {\n      $fields[$this->class_cfg['arch']['medias']['content']] = json_encode($content);\n    }\n\n    return $this->db->update(\n      [\n      'table' => $this->class_cfg['table'],\n      'fields' => $fields,\n          'where' => [\n            'conditions' => [[\n              'field' => $this->class_cfg['arch']['medias']['id'],\n              'value' => $id_media\n            ]]\n          ]\n      ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 983,
            "endLine": 1005,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "updateDb",
            "returns": [],
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Updates the media on the databases\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "media"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$title"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$content"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates the media on the databases\n   *\n   * @param string $id_media\n   * @param string $name\n   * @param string $title\n   * @param array  $content\n   * @return int|null\n   *\/"
        },
        "updateContent": {
            "name": "updateContent",
            "summary": "Updates the content of the media when it's deleted and replaced in the bbn-upload",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateContent(string $id_media, int $ref, string $oldName, string $newName, string $title)\n  {\n    $tmp_path  = Mvc::getUserTmpPath().$ref.'\/'.$oldName;\n    $new_media = [];\n    if ($this->fs->isFile($tmp_path)) {\n      $file_content = file_get_contents($tmp_path);\n\n      if (($media = $this->getMedia($id_media, true))) {\n        $old_path  = $media['file'];\n        $full_path = $this->getMediaPath($id_media, $newName);\n        if ($this->fs->putContents($full_path, $file_content)) {\n          if ($this->isImage($full_path)) {\n            $thumbs_sizes = $this->getThumbsSizes($media);\n            $image = new Image($full_path);\n            $this->removeThumbs($old_path);\n            $image->thumbs(X::dirname($full_path), $thumbs_sizes, '.bbn-%s', true);\n            $media['is_image'] = true;\n          }\n        }\n\n        if($this->updateDb(\n          $id_media, $newName, $title, [\n            'path' => $media['path'],\n            'size' => $this->fs->filesize($full_path),\n            'extension' => X::pathinfo($full_path, PATHINFO_EXTENSION)\n          ]\n        )\n        ) {\n          $new_media = $this->getMedia($id_media, true);\n        }\n      }\n    }\n\n    return $new_media;\n\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1018,
            "endLine": 1053,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 5,
            "shortName": "updateContent",
            "returns": [],
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "ref",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "oldName",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame"
                },
                {
                    "name": "newName",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame"
                },
                {
                    "name": "title",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Updates the content of the media when it's deleted and replaced in the bbn-upload\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "media"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ref"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$old",
                        "description": "ame"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$new",
                        "description": "ame"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$title"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates the content of the media when it's deleted and replaced in the bbn-upload\n   *\n   * @param string  $id_media\n   * @param integer $ref\n   * @param string  $oldName\n   * @param string  $newName\n   * @param string  $title\n   * @return array|false|string\n   *\/"
        },
        "replaceContent": {
            "name": "replaceContent",
            "summary": "Replaces the content of the media",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function replaceContent(string $id, string $file)\n  {\n    if (!$this->fs->isFile($file)) {\n      throw new Exception(X::_(\"Impossible to find the file %s\", $file));\n    }\n    if (($ext = Str::fileExt($file))\n      && ($media = $this->getMedia($id, true))\n    ) {\n      $cf      =& $this->class_cfg;\n      $root    = Mvc::getDataPath('appui-note') . 'media\/';\n      $path    = $media[$cf['arch']['medias']['content']]['path'];\n      $oldFile = $media['file'];\n      $name    = X::basename($file);\n      $title   = $media[$cf['arch']['medias']['title']];\n      $mime    = mime_content_type($file) ?: null;\n      $content = [\n        'path' => $path,\n        'size' => $this->fs->filesize($file),\n        'extension' => $ext\n      ];\n      if (empty($title)) {\n        $title = trim(str_replace(['-', '_', '+'], ' ', X::basename($file, \".$ext\")));\n      }\n      if (!$this->db->update(\n        $cf['table'],\n        [\n          $cf['arch']['medias']['mimetype'] => $mime,\n          $cf['arch']['medias']['title'] => $title,\n          $cf['arch']['medias']['name'] => $name,\n          $cf['arch']['medias']['content'] => json_encode($content),\n          $cf['arch']['medias']['edited'] => date('Y-m-d H:i:s')\n        ],\n        [\n          $cf['arch']['medias']['id'] => $id\n        ]\n      ) && false) {\n        throw new Exception(X::_(\"Impossible to update the media in the database\"));\n      }\n      $this->removeThumbs($media);\n      $this->fs->delete($oldFile);\n      if (strpos($mime, 'image\/') === 0) {\n        $tst = $this->getThumbsSizesByType($media['type']);\n        $ts =  !empty($tst) && !empty($tst['thumbs']) ? \\array_map(function($t){\n          return [\n            empty($t['width']) ? false : $t['width'],\n            empty($t['height']) ? false : $t['height'],\n            X::hasProps($t, ['width', 'height', 'crop'], true) ? true : false\n          ];\n        }, $tst['thumbs']) : $this->thumbs_sizes;\n        $image = new Image($file, $this->fs);\n        $image->thumbs($root . $path . $id, $ts, '.bbn-%s');\n      }\n      $this->fs->move(\n        $file,\n        $root . $path . $id\n      );\n      return $this->getMedia($id, true);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1062,
            "endLine": 1121,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "replaceContent",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "file",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Replaces the content of the media\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Replaces the content of the media\n   * @param string $id\n   * @param string $file\n   * @return array|false\n   *\/"
        },
        "setTitle": {
            "name": "setTitle",
            "summary": "Sets the title of the media",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setTitle(string $id, string $title): bool\n  {\n    $cf =& $this->class_cfg;\n    return (bool)$this->db->update(\n      $cf['table'],\n      [\n        $cf['arch']['medias']['title'] => $title\n      ],\n      [\n        $cf['arch']['medias']['id'] => $id\n      ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1130,
            "endLine": 1142,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setTitle",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "return bool"
                }
            ],
            "doc": {
                "description": "Sets the title of the media\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$title",
                        "description": "return bool"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the title of the media\n   * @param string $id\n   * @param string $title\n   * return bool\n   *\/"
        },
        "setDescription": {
            "name": "setDescription",
            "summary": "Sets the description of the media",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDescription(string $id, string $description): bool\n  {\n    $cf =& $this->class_cfg;\n    return (bool)$this->db->update(\n      $cf['table'],\n      [\n        $cf['arch']['medias']['description'] => $description\n      ],\n      [\n        $cf['arch']['medias']['id'] => $id\n      ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1151,
            "endLine": 1163,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setDescription",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "description",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "return bool"
                }
            ],
            "doc": {
                "description": "Sets the description of the media\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$description",
                        "description": "return bool"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the description of the media\n   * @param string $id\n   * @param string $description\n   * return bool\n   *\/"
        },
        "getMediaPath": {
            "name": "getMediaPath",
            "summary": "Returns the path of the given id_media",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMediaPath($media, string $name = null)\n  {\n    if (is_string($media)) {\n      $media = $this->getMedia($media);\n    }\n\n    if (!is_array($media)) {\n      throw new Exception(\"Impossible to find the media in the database\");\n    }\n\n    if (!empty($media['content'])) {\n      $path = Mvc::getDataPath('appui-note').'media\/'.$media['content']['path']\n          . $media['id'] . '\/' . ($name ? $name : $media['name']);\n\n      return $path;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1173,
            "endLine": 1191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getMediaPath",
            "returns": [],
            "arguments": [
                {
                    "name": "media",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the path of the given id_media\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "media"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the path of the given id_media\n   *\n   * @param string $id_media\n   * @param string|null $name\n   * @return string|null\n   *\/"
        },
        "fixOrder": {
            "name": "fixOrder",
            "summary": "Fixes the order of a medias group. If the group ID is not given, all groups will be fixed.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fixOrder(string $idGroup = ''): int\n  {\n    $groups = !empty($idGroup) ? [$idGroup] : $this->db->getColumnValues($this->class_cfg['tables']['medias_groups'], $this->class_cfg['arch']['medias_groups']['id']);\n    $fixed = 0;\n    if (!empty($groups)) {\n      $mgTable = $this->class_cfg['tables']['medias_groups'];\n      $mgmTable = $this->class_cfg['tables']['medias_groups_medias'];\n      $mTable = $this->class_cfg['tables']['medias'];\n      $mFields = $this->class_cfg['arch']['medias'];\n      $mgFields = $this->class_cfg['arch']['medias_groups'];\n      $mgmFields = $this->class_cfg['arch']['medias_groups_medias'];\n      $positionMgm = $this->db->cfn($mgmFields['position'], $mgmTable);\n      $idMg = $this->db->cfn($mgFields['id'], $mgTable);\n      $idM = $this->db->cfn($mFields['id'], $mTable);\n      $idGroupMgm = $this->db->cfn($mgmFields['id_group'], $mgmTable);\n      $idMediaMgm = $this->db->cfn($mgmFields['id_media'], $mgmTable);\n      $createdM = $this->db->cfn($mFields['created'], $mTable);\n      foreach ($groups as $group) {\n        $medias = $this->db->rselectAll([\n          'table' => $mgmTable,\n          'fields' => [\n            $idMediaMgm,\n            $idGroupMgm,\n            $positionMgm,\n            $createdM\n          ],\n          'join' => [[\n            'table' => $mgTable,\n            'on' => [\n              'conditions' => [[\n                'field' => $idMg,\n                'exp' => $idGroupMgm\n              ]]\n            ]\n          ], [\n            'table' => $mTable,\n            'on' => [\n              'conditions' => [[\n                'field' => $idM,\n                'exp' => $idMediaMgm\n              ]]\n            ]\n          ]],\n          'where' => [\n            $idGroupMgm => $group\n          ],\n          'order' => [\n            $positionMgm => 'ASC',\n            $createdM => 'ASC'\n          ]\n        ]);\n        $this->db->update($mgmTable, [\n          $mgmFields['position'] => null\n        ], [\n          $mgmFields['id_group'] => $group\n        ]);\n        foreach ($medias as $i => $media) {\n          if ($this->db->update($mgmTable, [\n              $mgmFields['position'] => $i + 1\n            ], [\n              $mgmFields['id_group'] => $media[$mgmFields['id_group']],\n              $mgmFields['id_media'] => $media[$mgmFields['id_media']]\n            ])\n            && \\is_null($media[$mgmFields['position']])\n          ) {\n            $fixed++;\n          }\n        }\n      }\n    }\n    return $fixed;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1199,
            "endLine": 1270,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "fixOrder",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "idGroup",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "roup"
                }
            ],
            "doc": {
                "description": "Fixes the order of a medias group. If the group ID is not given, all groups will be fixed.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "roup"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Fixes the order of a medias group. If the group ID is not given, all groups will be fixed.\n   * @param string $idGroup\n   * @return int\n   *\/"
        },
        "transformMedia": {
            "name": "transformMedia",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Medias.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function transformMedia(array &$data, int $width = null, int $height = null, bool $crop = false, bool $force = false): void\n  {\n    if (!empty($data['content'])) {\n      $data['content'] = json_decode($data['content'], true);\n      $file = $this->getPath($data);\n      $data['file']      = $file;\n      $data['full_path'] = $file;\n      $data['is_image']  = $this->isImage($file);\n      $data['path']      = empty($data['is_image']) ? $this->getFileUrl($data['id']) : $this->getImageUrl($data['id']);\n      if ($data['is_image'] && is_file($file)) {\n        $img                = new Image($file);\n        $data['is_thumb']   = false;\n        $data['thumbs']     = $this->getThumbsSizes($data, false);\n        $data['dimensions'] = [\n          'w' => $img->getWidth(),\n          'h' => $img->getHeight()\n        ];\n        if ($width || $height || ($crop && ($data['dimensions']['w'] !== $data['dimensions']['h']))) {\n          $goodSize = $force ? [$width, $height, $crop] : null;\n          $redirect = false;\n          if (!$goodSize) {\n            foreach ($data['thumbs'] as $size) {\n              if (($width == $size[0])\n                && ($height == $size[1])\n                && ($crop == ($size[2] ?? false))\n              ) {\n                $goodSize = $size;\n                $redirect = false;\n                break;\n              }\n              if (((!empty($width) && ($width <= $size[0]))\n                  || (!empty($height) && ($width <= $size[0])))\n                && ($crop == ($size[2] ?? false))\n              ) {\n                $goodSize = $size;\n                $redirect = true;\n              }\n            }\n          }\n\n          if (!$goodSize) {\n            $data['redirect'] = true;\n          }\n\n          if ($goodSize && ($tmpFile = $this->getThumbPath($file, $goodSize, true, true))) {\n            $data['is_thumb'] = true;\n            if ($redirect) {\n              $data['redirect'] = $redirect;\n            }\n            $data['file'] = $tmpFile;\n          }\n        }\n      }\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1273,
            "endLine": 1327,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "transformMedia",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": true,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "width",
                    "position": 1,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "height",
                    "position": 2,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "crop",
                    "position": 3,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 4,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 71,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        },
        "_get_references": {
            "name": "_get_references",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/References.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_references(){\n    if ( \\is_null($this->references) ){\n      if ( $refs = $this->db->findRelations('bbn_tasks.id') ){\n        $this->references = array_filter($refs, function($a, $k){\n          return strpos($k, 'bbn_tasks') !== 0;\n        }, ARRAY_FILTER_USE_BOTH);\n      }\n      if ( empty($this->references) ){\n        $this->references = false;\n      }\n      else{\n        foreach ( $this->references as $table => $ref ){\n          foreach ( $ref['refs'] as $j => $r ){\n            $this->references_select = empty($this->references_select) ?\n              $this->db->cfn($j, $table, 1) :\n              \"IFNULL(\".$this->references_select.\", \".$this->db->cfn($j, $table, 1).\")\";\n\n            $this->references_join .= \"LEFT JOIN \".$this->db->tfn($table, 1).PHP_EOL.\n              \"ON \".$this->db->cfn($ref['column'], $table, 1).\" = bbn_tasks.id\".PHP_EOL;\n          }\n        }\n        if ( !empty($this->references_select) ){\n          $this->references_select .= \" AS reference,\".PHP_EOL;\n        }\n      }\n    }\n    return $this->references;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\References",
            "startLine": 26,
            "endLine": 53,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "_get_references",
            "returns": [],
            "arguments": []
        },
        "getReferences": {
            "name": "getReferences",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/References.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getReferences(){\n    $this->_get_references();\n    return [\n      'select' => $this->references_select,\n      'join' => $this->references_join\n    ];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\References",
            "startLine": 55,
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getReferences",
            "returns": [],
            "arguments": []
        },
        "dbTraitExists": {
            "name": "dbTraitExists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitExists($filter): bool\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (!empty($cfg) && $this->db->count(\n      $this->class_table,\n      $this->dbTraitGetFilterCfg($cfg)\n    )) {\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 25,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array|string $id\n   * @return bool\n   *\/"
        },
        "dbTraitInsert": {
            "name": "dbTraitInsert",
            "summary": "Inserts a new row in the table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitInsert(array $data, bool $ignore = false): ?string\n  {\n    if ($data = $this->dbTraitPrepare($data)) {\n      $ccfg = $this->getClassCfg();\n      if (!empty($ccfg['arch'][$this->class_table_index]['cfg'])) {\n        $col = $ccfg['arch'][$this->class_table_index]['cfg'];\n        if (isset($data[$col])) {\n          $data[$col] = json_encode($data[$col]);\n        }\n      }\n\n      if ($this->db->{$ignore ? 'insertIgnore' : 'insert'}($ccfg['table'], $data)) {\n        return $this->db->lastId();\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 56,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitInsert",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ignore",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Inserts a new row in the table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Inserts a new row in the table.\n   *\n   * @param array $data\n   *\n   * @return string|null\n   *\/"
        },
        "dbTraitDelete": {
            "name": "dbTraitDelete",
            "summary": "Deletes a single row from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitDelete(string|array $filter, bool $cascade = false): bool\n  {\n    if ($this->dbTraitExists($filter)) {\n      $cfg = $this->getClassCfg();\n      $f = $cfg['arch'][$this->class_table_index];\n\n      if (!is_array($filter) && !empty($f['id'])) {\n        $filter = [$f['id'] => $filter];\n      }\n\n      return (bool)$this->db->delete($cfg['table'], $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 83,
            "endLine": 97,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitDelete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cascade",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes a single row from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a single row from the table through its id.\n   *\n   * @param string $id\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitUpdate": {
            "name": "dbTraitUpdate",
            "summary": "Updates a single row in the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitUpdate(string|array $filter, array $data): int\n  {\n    $ccfg = $this->getClassCfg();\n    $f = $ccfg['arch'][$this->class_table_index];\n    if (!is_array($filter)) {\n      $filter = [$f['id'] => $filter];\n    }\n\n    if (!$this->dbTraitExists($filter)) {\n      throw new Exception(X::_(\"Impossible to find the given row\"));\n    }\n\n    if ($data = $this->dbTraitPrepare($data)) {\n      if (!empty($f['cfg'])) {\n        $col = $f['cfg'];\n        if (!empty($data[$col])) {\n          if (is_string($data[$col])) {\n            $data[$col] = json_decode($data[$col], true);\n          }\n\n          $jsonUpdate = 'JSON_SET(' . $this->db->csn($col, true);\n          foreach ($data[$col] as $k => $v) {\n            $jsonUpdate .= ', \"$.' . $k . '\", \"' . Str::escapeDquotes(is_iterable($v) ? json_encode($v) : $v) . '\"';\n          }\n\n          $jsonUpdate .= \")\";\n          $data[$col] = [null, $jsonUpdate];\n        }\n      }\n      \n      return $this->db->update($ccfg['table'], $data, $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 109,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitUpdate",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Updates a single row in the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$add",
                        "description": "fg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates a single row in the table through its id.\n   *\n   * @param array $data\n   * @param string|array $filter\n   * @param bool $addCfg\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitSelectOne": {
            "name": "dbTraitSelectOne",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectOne(string $field, string|array $filter = [], array $order = [])\n  {\n    if ($res = $this->dbTraitSingleSelection($filter, $order, 'array', [$field])) {\n      return $res[$field] ?? null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 154,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectOne",
            "returns": [],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return mixed\n   *\/"
        },
        "dbTraitSelect": {
            "name": "dbTraitSelect",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelect(string|array $filter = [], array $order = [], array $fields = []): ?stdClass\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'object', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 172,
            "endLine": 175,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelect",
            "returns": [
                null,
                "stdClass"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return stdClass|null\n   *\/"
        },
        "dbTraitRselect": {
            "name": "dbTraitRselect",
            "summary": "Retrieves a row as an array from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselect(string|array $filter = [], array $order = [], array $fields = []): ?array\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'array', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 186,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselect",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an array from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an array from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return array|null\n   *\/"
        },
        "dbTraitSelectValues": {
            "name": "dbTraitSelectValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectValues(string $field, array $filter = [], array $order = [], int $limit = 0, int $start = 0): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'value', [$field]);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 191,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectValues",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitCount": {
            "name": "dbTraitCount",
            "summary": "Returns the number of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitCount(array $filter = []): int\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $req = $this->dbTraitGetRequestCfg($filter, [], 1, 0, [$this->fields['id']]);\n    return $this->db->count($req);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 204,
            "endLine": 212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitCount",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the number of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the number of rows from the table for the given conditions.\n   *\n   * @param array $filter\n   *\n   * @return int\n   *\/"
        },
        "dbTraitSelectAll": {
            "name": "dbTraitSelectAll",
            "summary": "Returns an array of rows as objects from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'object', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 225,
            "endLine": 228,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as objects from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as objects from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitRselectAll": {
            "name": "dbTraitRselectAll",
            "summary": "Returns an array of rows as arrays from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'array', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 241,
            "endLine": 244,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as arrays from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as arrays from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitGetRelations": {
            "name": "dbTraitGetRelations",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetRelations(string $id, string $table = null): ?array\n  {\n    if ($this->dbTraitExists($id)) {\n      $db =& $this->db;\n      $res = [];\n      foreach ($this->dbTraitGetTableRelations($table) as $rel) {\n        if ($all = $db->getColumnValues($rel['table'], $rel['primary'], [$rel['col'] => $id])) {\n          $res[$rel['table']] = [\n            'col' => $rel['col'],\n            'primary' => $rel['primary'],\n            'values' => $all\n          ];\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 246,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetRelations",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "dbTraitGetSearchFilter": {
            "name": "dbTraitGetSearchFilter",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetSearchFilter(string|int $filter, array $cols = [], bool $strict = false): array\n  {\n    $cfg = $this->getClassCfg();\n    $isNumber = Str::isNumber($filter);\n    $finalFilter = [\n      'logic' => 'OR',\n      'conditions' => []\n    ];\n    if (empty($cols)) {\n      $tableCols = $this->db->modelize($cfg['table'])['fields'];\n      foreach ($tableCols as $col => $colCfg) {\n        if ((strpos($colCfg['type'], 'text') !== false) || (strpos($colCfg['type'], 'char') !== false)) {\n          $cols[] = $col;\n        }\n        elseif ($isNumber && (strpos($colCfg['type'], 'int') !== false)) {\n          $cols[] = $col;\n        }\n      }\n    }\n\n    foreach ($cols as $col) {\n      $finalFilter['conditions'][] = [\n        'field' => $this->db->cfn($col, $cfg['table']),\n        'operator' => $strict ? '=' : 'contains',\n        'value' => $filter\n      ];\n    }\n\n    return $finalFilter;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 267,
            "endLine": 296,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetSearchFilter",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "string|int",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSearch": {
            "name": "dbTraitSearch",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSearch(array|string $filter, array $cols = [], array $fields = [], array $order = [], bool $strict = false, int $limit = 0, int $start = 0): array\n  {\n    if (is_array($filter)) {\n      $finalFilter = $filter;\n      if (empty($fields) && !empty($cols)) {\n        $fields = $cols;\n      }\n    }\n    else {\n      $finalFilter = $this->dbTraitGetSearchFilter($filter, $cols);\n    }\n\n    return $this->dbTraitRselectAll($finalFilter, $order, $limit, $start, $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 298,
            "endLine": 311,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSearch",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 4,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 5,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 6,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSingleSelection": {
            "name": "dbTraitSingleSelection",
            "summary": "Gets a single row and returns it",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitSingleSelection(\n    string|array $filter,\n    array $order,\n    string $mode = 'array',\n    array $fields = []\n  ): mixed\n  {\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (isset($cfg)\n        && ($res = $this->dbTraitSelection($cfg, $order, 1, 0, $mode, $fields))\n    ) {\n      return $res[0];\n    }\n\n    return null;\n\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 321,
            "endLine": 344,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitSingleSelection",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "array",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets a single row and returns it\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets a single row and returns it\n   *\n   * @param string|array $filter\n   * @param array $order\n   * @param string $mode\n   * @return mixed\n   *\/"
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the class configuration.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getClassCfg()\n  {\n    return $this->class_cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 37,
            "endLine": 40,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getClassCfg",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the class configuration.\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the class configuration.\n   * \n   * @return mixed\n   *\/"
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the fields of the main table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFields()\n  {\n    return $this->fields;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 48,
            "endLine": 51,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getFields",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the fields of the main table.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the fields of the main table.\n   *\n   * @return array\n   *\/"
        },
        "initClassCfg": {
            "name": "initClassCfg",
            "summary": "Sets the class configuration as defined in self::default_class_cfg",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initClassCfg(array $cfg = null)\n  {\n$arr = [];\n    if (isset(self::$default_class_cfg)) {\n      $arr[] = self::$default_class_cfg;\n    }\n\n    if (isset(static::$default_class_cfg)) {\n      $arr[] = static::$default_class_cfg;\n    }\n    \n    if ($cfg) {\n      $arr[] = $cfg;\n    }\n\n    if (!count($arr)) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $cfg = count($arr) > 1 ? X::mergeArrays(...$arr) : $arr[0];\n\n    $table_index = array_flip($cfg['tables'])[$cfg['table']];\n    if (!$table_index || !isset($cfg['tables'], $cfg['table'], $cfg['arch'], $cfg['arch'][$table_index])) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $this->class_table = $cfg['table'];\n    \/\/ We completely replace the table structure, no merge\n    $props = [];\n    foreach ($cfg['arch'] as $t => &$fields){\n      if (!$this->class_table_index && isset($cfg['tables'][$t]) && ($cfg['tables'][$t] === $cfg['table']))  {\n        $this->class_table_index = $t;\n      }\n    foreach ($fields as $f => $it) {\n        if (is_array($it)) {\n          $props[$t][$f] = $it;\n          $fields[$f] = $it['name'] ?? $f;\n        }\n      }\n    }\n    unset($fields);\n    if (!empty($props)) {\n      $cfg['props'] = $props;\n    }\n\n\n\n    \/\/ The selection comprises the defined fields of the users table\n    \/\/ Plus a bunch of user-defined additional fields in the same table\n    $this->fields = $cfg['arch'][$this->class_table_index];\n\n    $this->class_cfg = $cfg;\n    $this->_isInitClassCfg = true;\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 59,
            "endLine": 114,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initClassCfg",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the class configuration as defined in self::default_class_cfg\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the class configuration as defined in self::default_class_cfg\n   * @param array $cfg\n   * @return $this\n   *\/"
        },
        "isInitClassCfg": {
            "name": "isInitClassCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isInitClassCfg(): bool\n  {\n    return $this->_isInitClassCfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 117,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isInitClassCfg",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "dbTraitPrepare": {
            "name": "dbTraitPrepare",
            "summary": "Prepares data before inserting or updating in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitPrepare(array $data): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (!empty($ccfg['cfg'])) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $res[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        unset($data[$f['cfg']]);\n      }\n      elseif (isset($ccfg['cfg'])) {\n        $cfg = [];\n        foreach ($ccfg['cfg'] as $k => $v) {\n          if (array_key_exists($v['field'], $data)) {\n            $cfg[$v['field']] = $data[$v['field']];\n            unset($data[$v['field']]);\n          }\n        }\n        if (!empty($cfg)) {\n          $res[$f['cfg']] = $cfg;\n        }\n      }\n    }\n\n    $structure = $this->dbTraitGetStructure();\n    foreach ($data as $k => $v) {\n      if (in_array($k, $f)) {\n        \/\/ Set the value to null if it's empty and not 0 and the field allows null\n        if (empty($v)\n          && ($v !== 0)\n          && $structure['fields'][$k]['null']\n        ) {\n          $v = null;\n        }\n\n        $res[$k] = $v;\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 39,
            "endLine": 92,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitPrepare",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The data to be prepared."
                }
            ],
            "doc": {
                "description": "Prepares data before inserting or updating in the database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data",
                        "description": "The data to be prepared."
                    }
                ],
                "return": "The prepared data.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the class config has not been initialized or is incorrect."
                }
            },
            "comments": "  \/**\n   * Prepares data before inserting or updating in the database.\n   *\n   * @param array $data The data to be prepared.\n   *\n   * @return array The prepared data.\n   * @throws Exception If the class config has not been initialized or is incorrect.\n   *\/"
        },
        "dbTraitTreat": {
            "name": "dbTraitTreat",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitTreat(array ...$rows): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (empty($f['cfg'])) {\n      return [...$rows];\n    }\n    foreach ($rows as &$data) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $data[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        if (!empty($ccfg['cfg'])) {\n          foreach ($ccfg['cfg'] as $k => $v) {\n            if (isset($v['field']) \n                && array_key_exists($v['field'], $data[$f['cfg']])\n                && !array_key_exists($v['field'], $data)) {\n              $data[$v['field']] = $data[$f['cfg']][$v['field']];\n            }\n          }\n          unset($data[$f['cfg']]);\n        }\n      }\n\n      $res[] = $data;\n    }\n\n    unset($data);\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 94,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitTreat",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "rows",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbTraitSetFilterCfg": {
            "name": "dbTraitSetFilterCfg",
            "summary": "Sets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSetFilterCfg(array $cfg): void\n  {\n    $this->dbTraitFilterCfg = $cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 142,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The filter configuration."
                }
            ],
            "doc": {
                "description": "Sets the filter configuration for database queries.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The filter configuration."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the filter configuration for database queries.\n   *\n   * @param array $cfg The filter configuration.\n   *\/"
        },
        "dbTraitResetFilterCfg": {
            "name": "dbTraitResetFilterCfg",
            "summary": "Resets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitResetFilterCfg(): void\n  {\n    $this->dbTraitFilterCfg = [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 150,
            "endLine": 153,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitResetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Resets the filter configuration for database queries.",
                "tags": []
            },
            "comments": "  \/**\n   * Resets the filter configuration for database queries.\n   *\/"
        },
        "dbTraitGetFilterCfg": {
            "name": "dbTraitGetFilterCfg",
            "summary": "Combines multiple filter configurations into a single array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetFilterCfg(array $cfg): array\n  {\n    $conditions = [];\n    if (!empty($this->rootFilterCfg)) {\n      $conditions[] = $this->rootFilterCfg;\n    }\n\n    if (!empty($this->dbTraitFilterCfg)) {\n      $conditions[] = $this->dbTraitFilterCfg;\n    }\n\n    if (!empty($cfg)) {\n      $conditions[] = $cfg;\n    }\n\n    \/\/ Return empty array if no conditions exist\n    if (empty($conditions)) {\n      return [];\n    }\n\n    \/\/ Return single condition if only one exists\n    if (count($conditions) === 1) {\n      return $conditions[0];\n    }\n\n    \/\/ Combine all conditions with 'AND' logic\n    return array_map(function ($a) {\n      return [\n        'logic' => 'AND',\n        'conditions' => $a\n      ];\n    }, $conditions);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 162,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetFilterCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Additional filter configuration."
                }
            ],
            "doc": {
                "description": "Combines multiple filter configurations into a single array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "Additional filter configuration."
                    }
                ],
                "return": "The combined filter configuration."
            },
            "comments": "  \/**\n   * Combines multiple filter configurations into a single array.\n   *\n   * @param array $cfg Additional filter configuration.\n   *\n   * @return array The combined filter configuration.\n   *\/"
        },
        "dbTraitGetStructure": {
            "name": "dbTraitGetStructure",
            "summary": "Gets the structure of the specified table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetStructure(string $table = null): array\n  {\n    if (!$table) {\n      $cfg = $this->getClassCfg();\n      $table = $cfg['table'];\n    }\n\n    if (!isset($this->dbTraitStructure[$table])) {\n      $this->dbTraitStructure[$table] = $this->db->modelize($table);\n    }\n\n    return $this->dbTraitStructure[$table];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 203,
            "endLine": 215,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetStructure",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Gets the structure of the specified table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "The structure of the table."
            },
            "comments": "  \/**\n   * Gets the structure of the specified table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array The structure of the table.\n   *\/"
        },
        "dbTraitGetTableRelations": {
            "name": "dbTraitGetTableRelations",
            "summary": "Retrieves the relations for a given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetTableRelations(string $table = null): array\n  {\n    $cfg = $this->getClassCfg();\n    if (!$table) {\n      $table = $cfg['table'];\n    }\n    $idx = array_flip($cfg['tables'])[$table];\n    if ($idx && !isset($this->dbTraitRelations[$table])) {\n      $arc = &$cfg['arch'][$idx];\n      $this->dbTraitRelations[$table] = [];\n      if (!empty($arc['id'])) {\n        $refs = $this->db->findReferences($this->db->cfn($arc['id'], $table));\n        foreach ($refs as $ref) {\n          [$db, $tab, $col] = X::split($ref, '.');\n          $model = $this->db->modelize($tab);\n          $this->dbTraitRelations[$table][] = [\n            'db' => $db,\n            'table' => $tab,\n            'primary' => isset($model['keys']['PRIMARY']) && (count($model['keys']['PRIMARY']['columns']) === 1) ? $model['keys']['PRIMARY']['columns'][0] : null,\n            'col' => $col,\n            'model' => $model\n          ];\n        }\n      }\n    }\n\n    return $this->dbTraitRelations[$table];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 224,
            "endLine": 251,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetTableRelations",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Retrieves the relations for a given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "An array of relations."
            },
            "comments": "  \/**\n   * Retrieves the relations for a given table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array An array of relations.\n   *\/"
        },
        "dbTraitSelection": {
            "name": "dbTraitSelection",
            "summary": "Returns an array of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitSelection(\n    array $filter,\n    array $order,\n    int $limit,\n    int $start,\n    string $mode = 'array',\n    array $fields = []\n  ): array\n  {\n    $returnObject = $mode === 'object';\n    $req = $this->dbTraitGetRequestCfg($filter, $order, $limit, $start, $fields);\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    $method = $mode === 'object' ? 'selectAll' : ($mode === 'value' ? 'getColumnValues' : 'rselectAll');\n    $res = $this->db->$method($req);\n    if ($res) {\n      if (!empty($f['cfg'])) {\n        foreach ($res as &$r) {\n          if ($returnObject && !empty($r->{$f['cfg']})) {\n            $cfg = json_decode($r->{$f['cfg']});\n            $r = X::mergeObjects($cfg, $r);\n            unset($r->{$f['cfg']});\n          }\n          elseif (!$returnObject && !empty($r[$f['cfg']])) {\n            $cfg = json_decode($r[$f['cfg']], true);\n            $r = array_merge($cfg, $r);\n            unset($r[$f['cfg']]);\n          }\n        }\n\n        unset($r);\n      }\n\n      return $res;\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 265,
            "endLine": 301,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 4,
            "shortName": "dbTraitSelection",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Filter conditions."
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Order by conditions."
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Maximum number of rows to return."
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Offset of the first row to return."
                },
                {
                    "name": "mode",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "array",
                    "default_name": "",
                    "description": "The mode of result ('array', 'object', 'value')."
                },
                {
                    "name": "fields",
                    "position": 5,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Fields to select."
                }
            ],
            "doc": {
                "description": "Returns an array of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter",
                        "description": "Filter conditions."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "Order by conditions."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Maximum number of rows to return."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Offset of the first row to return."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode",
                        "description": "The mode of result ('array', 'object', 'value')."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "Fields to select."
                    }
                ],
                "return": "The result set."
            },
            "comments": "  \/**\n   * Returns an array of rows from the table for the given conditions.\n   *\n   * @param array $filter Filter conditions.\n   * @param array $order Order by conditions.\n   * @param int $limit Maximum number of rows to return.\n   * @param int $start Offset of the first row to return.\n   * @param string $mode The mode of result ('array', 'object', 'value').\n   * @param array $fields Fields to select.\n   *\n   * @return array The result set.\n   *\/"
        },
        "dbTraitGetRequestCfg": {
            "name": "dbTraitGetRequestCfg",
            "summary": "Prepares the request configuration for a database query.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitGetRequestCfg(\n    array $filter,\n    array $order,\n    int $limit,\n    int $start,\n    array $fields = []\n  ): array\n  {\n    \/\/ Ensure table index is defined\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    \/\/ Validate fields\n    if (!empty($fields)) {\n      foreach (array_values($fields) as $f) {\n        if (!in_array($f, $this->class_cfg['arch'][$this->class_table_index])) {\n          throw new Exception(X::_(\"The field %s does not exist\", $f));\n        }\n      }\n\n      $properFields = $fields;\n    }\n    else {\n      $fields = $this->class_cfg['arch'][$this->class_table_index];\n    }\n\n    $ccfg = $this->getClassCfg();\n    if (isset($fields['cfg']) && !empty($ccfg['cfg'])) {\n      $cfgCol = $fields['cfg'];\n      unset($fields['cfg']);\n      if (!isset($properFields)) {\n        $properFields = array_values($fields);\n      }\n\n      foreach ($ccfg['cfg'] as $v) {\n        if ($v['field'] && !in_array($v['field'], $properFields)) {\n          $properFields[$v['field']] = \"IF(JSON_EXTRACT(\"\n              . $this->db->csn($cfgCol, true) . \", '\\$.\" . $v['field']\n              . \"') = 'null', NULL, JSON_UNQUOTE(JSON_EXTRACT(\"\n              . $this->db->csn($cfgCol, true) . \", '\\$.\" . $v['field']\n              .\"')))\";\n        }\n      }\n    }\n    elseif (!isset($properFields)) {\n      $properFields = array_values($fields);\n    }\n\n    \/\/ Build the request configuration\n    $req = [\n      'table' => $this->class_table,\n      'fields' => $properFields,\n      'where' => $this->dbTraitGetFilterCfg($filter),\n      'order' => $order\n    ];\n\n    if ($limit) {\n      $req['limit'] = $limit;\n      $req['start'] = $start;\n    }\n\n    return $req;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 315,
            "endLine": 378,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 4,
            "shortName": "dbTraitGetRequestCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Filter conditions."
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Order by conditions."
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Maximum number of rows to return."
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Offset of the first row to return."
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Fields to select."
                }
            ],
            "doc": {
                "description": "Prepares the request configuration for a database query.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter",
                        "description": "Filter conditions."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "Order by conditions."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Maximum number of rows to return."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Offset of the first row to return."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "Fields to select."
                    }
                ],
                "return": "The request configuration.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the table index is not defined or a field does not exist."
                }
            },
            "comments": "  \/**\n   * Prepares the request configuration for a database query.\n   *\n   * @param array $filter Filter conditions.\n   * @param array $order Order by conditions.\n   * @param int $limit Maximum number of rows to return.\n   * @param int $start Offset of the first row to return.\n   * @param array $fields Fields to select.\n   *\n   * @return array The request configuration.\n   * @throws Exception If the table index is not defined or a field does not exist.\n   *\/"
        },
        "getUrl": {
            "name": "getUrl",
            "summary": "Returns the URL corresponding to the given item's ID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUrl(string $id_item, bool $followRedirect = true): ?string\n  {\n    $this->checkUrlCfg();\n    if ($id_url = $this->db->selectOne($this->urlTable, $this->urlFields['id_url'], [\n      $this->class_cfg['urlItemField'] => $id_item\n    ])) {\n      return $this->url->getUrl($id_url, $followRedirect);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 63,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getUrl",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                },
                {
                    "name": "followRedirect",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "edirect"
                }
            ],
            "doc": {
                "description": "Returns the URL corresponding to the given item's ID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "item"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$follow",
                        "description": "edirect"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the URL corresponding to the given item's ID\n   *\n   * @param string $id_item\n   * @param boolean $followRedirect\n   * @return string|null\n   *\/"
        },
        "getUrls": {
            "name": "getUrls",
            "summary": "Returns the URL corresponding to the given item's ID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUrls(string $id_item, bool $followRedirect = true): array\n  {\n    $this->checkUrlCfg();\n    $res = [];\n    if ($id_urls = $this->db->getColumnValues($this->urlTable, $this->urlFields['id_url'], [\n      $this->class_cfg['urlItemField'] => $id_item\n    ])) {\n      foreach ($id_urls as $id_url) {\n        $res[] = $this->url->getUrl($id_url, $followRedirect);\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 83,
            "endLine": 96,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getUrls",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                },
                {
                    "name": "followRedirect",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "edirect"
                }
            ],
            "doc": {
                "description": "Returns the URL corresponding to the given item's ID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "item"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$follow",
                        "description": "edirect"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the URL corresponding to the given item's ID\n   *\n   * @param string $id_item\n   * @param boolean $followRedirect\n   * @return string|null\n   *\/"
        },
        "urlExists": {
            "name": "urlExists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function urlExists(string $url): bool\n  {\n    return (bool)$this->getUrlId($url);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 103,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "urlExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $url\n   * @return bool\n   *\/"
        },
        "urlToId": {
            "name": "urlToId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function urlToId(string $url): ?string\n  {\n    $this->checkUrlCfg();\n    if ($id_url = $this->getUrlId($url)) {\n      return $this->db->selectOne($this->urlTable, $this->class_cfg['urlItemField'], [\n        $this->urlFields['id_url'] => $id_url\n      ]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 113,
            "endLine": 123,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "urlToId",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $url\n   * @return string|null\n   *\/"
        },
        "idToUrl": {
            "name": "idToUrl",
            "summary": "Returns the ID of the URL for the given item",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function idToUrl(string $id_item): ?string\n  {\n    $this->checkUrlCfg();\n    return $this->db->selectOne($this->urlTable, $this->urlFields['id_url'], [\n      $this->class_cfg['urlItemField'] => $id_item\n    ]);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 132,
            "endLine": 138,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "idToUrl",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                }
            ],
            "doc": {
                "description": "Returns the ID of the URL for the given item\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "item"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of the URL for the given item\n   * \n   * @param string $id_item\n   * @return string|null\n   *\/"
        },
        "getUrlId": {
            "name": "getUrlId",
            "summary": "Returns a URL's id based on its URL",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUrlId(string $url): ?string\n  {\n    $this->checkUrlCfg();\n    return $this->url->retrieveUrl($url);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 147,
            "endLine": 151,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getUrlId",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a URL's id based on its URL\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a URL's id based on its URL\n   *\n   * @param string $url\n   * @return string|null\n   *\/"
        },
        "getFullUrl": {
            "name": "getFullUrl",
            "summary": "Returns the whole content of the URL row based on its ID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFullUrl(string $id_url): ?stdClass\n  {\n    $this->checkUrlCfg();\n    return $this->url->select($id_url);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 160,
            "endLine": 164,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getFullUrl",
            "returns": [
                null,
                "stdClass"
            ],
            "arguments": [
                {
                    "name": "id_url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "url"
                }
            ],
            "doc": {
                "description": "Returns the whole content of the URL row based on its ID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the whole content of the URL row based on its ID\n   *\n   * @param string $id_url\n   * @return stdClass|null\n   *\/"
        },
        "setUrl": {
            "name": "setUrl",
            "summary": "Adds or replace a URL for a given item's ID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setUrl(string $id_item, string $url, string $type = null): ?string\n  {\n    $this->checkUrlCfg();\n    if (!($url = $this->sanitizeUrl($url))) {\n      throw new Exception(X::_(\"The URL can't be empty\"));\n    }\n\n    if (!($id_url = $this->url->retrieveUrl($url))\n        && (!$id_url = $this->url->add($url, $type ?: $this->urlType))\n    ) {\n      throw new Exception(X::_(\"Impossible to add the URL %s\", $url));\n    }\n\n    if ($checkItem = $this->urlToId($id_url)) {\n      if ($checkItem !== $id_item) {\n        throw new Exception(X::_(\"The URL is already in use by another item\"));\n      }\n    }\n    elseif (!$this->db->insert($this->urlTable, [\n      $this->class_cfg['urlItemField'] => $id_item,\n      $this->urlFields['id_url'] => $id_url\n    ])) {\n      return null;\n    }\n\n    return $id_url ?: null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 175,
            "endLine": 201,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "setUrl",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                },
                {
                    "name": "url",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds or replace a URL for a given item's ID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "item"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Adds or replace a URL for a given item's ID\n   *\n   * @param string $id_item\n   * @param string $url\n   * @param string $type\n   * @return null|string\n   *\/"
        },
        "addUrl": {
            "name": "addUrl",
            "summary": "Creates a new URL for a given item's ID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addUrl(string $id_item, string $url, string $prefix = '', string $type = null): ?string\n  {\n    $this->checkUrlCfg();\n    if (!$type && !$this->urlType) {\n      throw new Exception(X::_(\"You have no type set and no default type for the class %s\"), __CLASS__);\n    }\n\n    if ($id_url = $this->url->add($url, $type ?: $this->urlType, $prefix)) {\n      $this->db->delete($this->urlTable, [\n        $this->class_cfg['urlItemField'] => $id_item\n      ]);\n      return (bool)$this->db->insert($this->urlTable, [\n        $this->class_cfg['urlItemField'] => $id_item,\n        $this->urlFields['id_url'] => $id_url\n      ]);\n    }\n\n    return $id_url ?: null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 213,
            "endLine": 231,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "addUrl",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                },
                {
                    "name": "url",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "prefix",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 3,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Creates a new URL for a given item's ID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "item"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$prefix"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates a new URL for a given item's ID\n   *\n   * @param string $id_item\n   * @param string $url\n   * @param string $prefix\n   * @param string $type\n   * @return null|string\n   *\/"
        },
        "redirectUrl": {
            "name": "redirectUrl",
            "summary": "Returns true if the item is linked to an url.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function redirectUrl(string $id_item, string $url_source, string $url_destination): bool\n  {\n    $this->checkUrlCfg();\n    if ($id_source = $this->getUrlId($url_source)) {\n      $url = $this->getFullUrl($id_source);\n      if ($url && ($id_destination = $this->setUrl($id_item, $url_destination, $url->type))) {\n        $cfg = $this->url->getClassCfg();\n        return (bool)$this->db->update(\n          $cfg['table'],\n          [$cfg['arch']['url']['redirect'] => $id_destination],\n          [$cfg['arch']['url']['id'] => $id_source]\n        );\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 242,
            "endLine": 258,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "redirectUrl",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "source"
                },
                {
                    "name": "url_source",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "destination"
                },
                {
                    "name": "url_destination",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns true if the item is linked to an url.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "source"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "destination"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the item is linked to an url.\n   *\n   * @param string $id_source\n   * @param string $id_destination\n   * @return bool\n   *\n   *\/"
        },
        "hasUrl": {
            "name": "hasUrl",
            "summary": "Returns true if the item is linked to an url.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasUrl(string $id_item): bool\n  {\n    $this->checkUrlCfg();\n    return (bool)$this->db->count(\n      $this->urlTable,\n      [$this->class_cfg['urlItemField'] => $id_item]\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 268,
            "endLine": 275,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "hasUrl",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                }
            ],
            "doc": {
                "description": "Returns true if the item is linked to an url.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "item"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the item is linked to an url.\n   *\n   * @param string $id_item\n   * @return bool\n   *\n   *\/"
        },
        "deleteUrl": {
            "name": "deleteUrl",
            "summary": "Deletes url for the given note.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteUrl(string $id_item)\n  {\n    $this->checkUrlCfg();\n    $id_url = $this->db->selectOne(\n      $this->urlTable,\n      $this->urlFields['id_url'],\n      [$this->class_cfg['urlItemField'] => $id_item]\n    );\n\n    if ($id_url) {\n      $this->db->delete(\n        $this->urlTable,\n        [$this->class_cfg['urlItemField'] => $id_item]\n      );\n      return (bool)$this->url->delete($id_url);\n    }\n\n    throw new Exception(X::_(\"Impossible to retrieve the URL for item %s\", $id_item));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 284,
            "endLine": 302,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteUrl",
            "returns": [],
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                }
            ],
            "doc": {
                "description": "Deletes url for the given note.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "item"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes url for the given note.\n   *\n   * @param string $id_item\n   * @return int|null\n   *\/"
        },
        "sanitizeUrl": {
            "name": "sanitizeUrl",
            "summary": "Trims the slashes and removes double slashes if any.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function sanitizeUrl(string $url): string\n  {\n    $this->checkUrlCfg();\n    return $this->url->sanitize($url);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 311,
            "endLine": 315,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "sanitizeUrl",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Trims the slashes and removes double slashes if any.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Trims the slashes and removes double slashes if any.\n   *\n   * @param string $url\n   * @return string\n   *\/"
        },
        "initUrl": {
            "name": "initUrl",
            "summary": "initialize the trait's props",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initUrl(): void\n  {\n    if (!$this->isInitUrl\n        && $this->db\n        && $this->class_cfg\n        && $this->class_table_index\n        && $this->class_cfg['tables'][$this->class_table_index . '_url']\n        && $this->class_cfg['urlItemField']\n        && $this->class_cfg['urlTypeValue']\n    ) {\n      $this->urlTableIdx = $this->class_table_index . '_url';\n      $this->urlTable    = $this->class_cfg['tables'][$this->urlTableIdx];\n      $this->urlFields   = $this->class_cfg['arch'][$this->urlTableIdx];\n      $this->urlType     = $this->class_cfg['urlTypeValue'];\n      if (X::hasProps($this->urlFields, ['id_url', $this->class_cfg['urlItemField']], true)) {\n        $this->url = new urlCls($this->db);\n      }\n      $this->isInitUrl = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 323,
            "endLine": 342,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "initUrl",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "initialize the trait's props\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * initialize the trait's props\n   *\n   * @return void\n   *\/"
        },
        "checkUrlCfg": {
            "name": "checkUrlCfg",
            "summary": "Checks if the class has been correctly initialized and throws an exception if not",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function checkUrlCfg(): void\n  {\n    $this->initUrl();\n    if (!$this->url) {\n      throw new Exception(X::_(\"The class is missing configuration to make use of URL\"));\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 350,
            "endLine": 356,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "checkUrlCfg",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks if the class has been correctly initialized and throws an exception if not\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the class has been correctly initialized and throws an exception if not\n   *\n   * @return void\n   *\/"
        },
        "getTags": {
            "name": "getTags",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Tagger.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTags(string $id_element, bool $full = false, bool $force = false): array\n  {\n    $this->taggerInit();\n    $res = [];\n    $ids = $this->db->getColumnValues(\n      $this->taggerTable,\n      $this->taggerCols['id_tag'],\n      [$this->taggerCols['id_element'] => $id_element]\n    );\n    foreach ($ids as $id) {\n      if ($tmp = $this->taggerObject->getById($id, $full)) {\n        $res[] = $tmp;\n      }\n      elseif (!$force) {\n        X::log([$ids, $this->db->last()]);\n        throw new Exception(X::_(\"Impossible to find the tag %s\", $id));\n      }\n    }\n   \n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Tagger",
            "startLine": 41,
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getTags",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "setTags": {
            "name": "setTags",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Tagger.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setTags(string $id_element, array $tags, string $lang = ''): int\n  {\n    $this->taggerInit();\n    $lang = $this->taggerGetLang($lang);\n    if (!method_exists($this, 'dbTraitExists') || !$this->dbTraitExists($id_element)) {\n      throw new Exception(X::_(\"Impossible to find the element in %s\", __CLASS__));\n    }\n\n    foreach ($this->getTags($id_element, true) as $tag) {\n      $idx = X::indexOf($tags, $tag['tag']);\n      if ($idx > -1) {\n        array_splice($tags, $idx, 1);\n      }\n      else {\n        $this->removeTag($id_element, $tag['id']);\n      }\n    }\n\n    $num = 0;\n    foreach ($tags as $tag) {\n      if ($this->addTag($id_element, $tag, $lang)) {\n        $num++;\n      }\n    }\n\n    return $num;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Tagger",
            "startLine": 71,
            "endLine": 97,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "setTags",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "element The ID of the element to which attach the tags"
                },
                {
                    "name": "tags",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "A list of tags which will be retrieved or added"
                },
                {
                    "name": "lang",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Undocumented function\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "element The ID of the element to which attach the tags"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$tags",
                        "description": "A list of tags which will be retrieved or added"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Undocumented function\n   *\n   * @param string $id_element The ID of the element to which attach the tags\n   * @param array  $tags A list of tags which will be retrieved or added\n   * @return int \n   *\/"
        },
        "removeTag": {
            "name": "removeTag",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Tagger.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeTag(string $id_element, string $id_tag): int\n  {\n    $this->taggerInit();\n    return $this->db->delete(\n      $this->taggerTable,\n      [\n        $this->taggerCols['id_element'] => $id_element,\n        $this->taggerCols['id_tag'] => $id_tag\n      ]\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Tagger",
            "startLine": 100,
            "endLine": 110,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "removeTag",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_tag",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "removeTags": {
            "name": "removeTags",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Tagger.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeTags(string $id_element): int\n  {\n    $this->taggerInit();\n    return $this->db->delete(\n      $this->taggerTable,\n      [\n        $this->taggerCols['id_element'] => $id_element,\n      ]\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Tagger",
            "startLine": 113,
            "endLine": 122,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeTags",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addTag": {
            "name": "addTag",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Tagger.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addTag(string $id_element, string $tag, string $lang = '', string $description = ''): int\n  {\n    $this->taggerInit();\n    $lang = $this->taggerGetLang($lang);\n    if ($tmp = $this->taggerObject->get($tag, $lang)) {\n      $id_tag = $tmp['id'];\n    }\n    else {\n      $id_tag = $this->taggerObject->add($tag, $lang, $description);\n    }\n\n    if (!$id_tag) {\n      throw new Exception(X::_(\"Impossible to create the tag %s\", $tag));\n    }\n\n    return $this->db->insertIgnore(\n      $this->taggerTable,\n      [\n        $this->taggerCols['id_element'] => $id_element,\n        $this->taggerCols['id_tag'] => $id_tag\n      ]\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Tagger",
            "startLine": 125,
            "endLine": 147,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "addTag",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "tag",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "description",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "taggerGetLang": {
            "name": "taggerGetLang",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Tagger.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function taggerGetLang(string $lang = '')\n  {\n    if ($lang) {\n      return $lang;\n    }\n\n    if (method_exists($this, 'getLang')) {\n      return $this->getLang();\n    }\n\n    if (defined('BBN_LANG')) {\n      return BBN_LANG;\n    }\n\n    return 'en';\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Tagger",
            "startLine": 150,
            "endLine": 165,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "taggerGetLang",
            "returns": [],
            "arguments": [
                {
                    "name": "lang",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "taggerInit": {
            "name": "taggerInit",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Medias",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Tagger.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function taggerInit(string $table = null, array $columns = null)\n  {\n    if (!$this->taggerIsInit) {\n      if (!$this->db) {\n        throw new Exception(X::_(\"Impossible to init the tagger if there is no Db property\"));\n      }\n\n      if (!$this->class_cfg) {\n        throw new Exception(X::_(\"Impossible to init the tagger if the class hasn't the trait Dbconfig\"));\n      }\n\n      if (empty($table) || empty($columns)) {\n        throw new Exception(X::_(\"Impossible to init the tagger without a table name and 2 columns defined\"));\n      }\n\n      if (empty($columns['id_tag'])) {\n        throw new Exception(X::_(\"Impossible to init the tagger without an id_tag column\"));\n      }\n\n      if (empty($columns['id_element'])) {\n        throw new Exception(X::_(\"Impossible to init the tagger without an id_element column\"));\n      }\n\n      $this->taggerObject = new Tag($this->db);\n      $this->taggerTable  = $table;\n      $this->taggerCols   = $columns;\n      $this->taggerIsInit = true;\n    }\n\n    return $this->taggerIsInit;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Tagger",
            "startLine": 168,
            "endLine": 198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "taggerInit",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "columns",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "default_class_cfg": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Appui\\Medias",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": {
                "table": "bbn_medias",
                "tables": {
                    "medias": "bbn_medias",
                    "medias_tags": "bbn_medias_tags",
                    "medias_url": "bbn_medias_url",
                    "medias_groups": "bbn_medias_groups",
                    "medias_groups_medias": "bbn_medias_groups_medias"
                },
                "arch": {
                    "medias": {
                        "id": "id",
                        "id_user": "id_user",
                        "type": "type",
                        "mimetype": "mimetype",
                        "name": "name",
                        "title": "title",
                        "description": "description",
                        "content": "content",
                        "private": "private",
                        "created": "created",
                        "edited": "edited",
                        "editor": "editor"
                    },
                    "medias_url": {
                        "id_media": "id_media",
                        "id_url": "id_url"
                    },
                    "medias_tags": {
                        "id_media": "id_media",
                        "id_tag": "id_tag"
                    },
                    "medias_groups": {
                        "id": "id",
                        "id_parent": "id_parent",
                        "text": "text",
                        "cfg": "cfg"
                    },
                    "medias_groups_medias": {
                        "id_media": "id_media",
                        "id_group": "id_group",
                        "position": "position",
                        "link": "link"
                    }
                },
                "urlItemField": "id_media",
                "urlTypeValue": "media"
            }
        },
        "opt": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Appui\\Medias",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "usr": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Appui\\Medias",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "userId": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Appui\\Medias",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "opt_id": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Appui\\Medias",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "thumbsSizes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Appui\\Medias",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var array $thumbsSizes Keeping the thumbs sizes in memory by type",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "fs": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "bbn\\File\\System",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Appui\\Medias",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "path": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Appui\\Medias",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "img_extensions": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Appui\\Medias",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": [
                "jpeg",
                "jpg",
                "png",
                "gif",
                "webp"
            ]
        },
        "thumbs_sizes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Appui\\Medias",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": [
                [
                    500,
                    false
                ],
                [
                    250,
                    false
                ],
                [
                    125,
                    false
                ],
                [
                    96,
                    false
                ],
                [
                    48,
                    false
                ]
            ]
        },
        "defaultUrlType": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Appui\\Medias",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "class_cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array $class_cfg",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "imageRoot": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Appui\\Medias",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string $imageRoot",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "fileRoot": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Appui\\Medias",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string $fileRoot",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Db"
            },
            "declaring_trait": "bbn\\Models\\Tts\\References",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "dbClass"
                    }
                ]
            },
            "parent": {
                "name": "db",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Db"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Db",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "dbClass"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "references": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\References",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "references_select": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\References",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": ""
        },
        "references_join": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\References",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": ""
        },
        "_isInitClassCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var bool",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "fields": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_table": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_table_index": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "rootFilterCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Configuration for the root filter."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "dbTraitRelations": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Cached relations for the current table."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "dbTraitStructure": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Cached relations for the current table."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "isInitUrl": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Url",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "Remains false until initUrl is executed for preventing it's executed twice\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "urlType": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Url",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The default type for the links, must be set in the construct\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "urlTable": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Url",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The name of the table associating the items from the current class and the URLs\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "urlTableIdx": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Url",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The name of the index of the table in class_cfg (eg for media it's medias_url)\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "urlFields": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Url",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The array of fields\/columns for the urlTable\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "url": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Url",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The url object\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bbn\\Appui\\Url"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "taggerIsInit": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Tagger",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "False while initTagger has not been called."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "taggerTable": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Tagger",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "The name of the table where to insert tags relations."
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "taggerCols": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Tagger",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "The names of the columns where to insert tags relations (must have a id_tag and a id_element indexes)."
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "taggerObject": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Medias"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Tagger",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Tag",
                        "description": "The Tag object."
                    }
                ]
            },
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "default_class_cfg": {
            "table": "bbn_medias",
            "tables": {
                "medias": "bbn_medias",
                "medias_tags": "bbn_medias_tags",
                "medias_url": "bbn_medias_url",
                "medias_groups": "bbn_medias_groups",
                "medias_groups_medias": "bbn_medias_groups_medias"
            },
            "arch": {
                "medias": {
                    "id": "id",
                    "id_user": "id_user",
                    "type": "type",
                    "mimetype": "mimetype",
                    "name": "name",
                    "title": "title",
                    "description": "description",
                    "content": "content",
                    "private": "private",
                    "created": "created",
                    "edited": "edited",
                    "editor": "editor"
                },
                "medias_url": {
                    "id_media": "id_media",
                    "id_url": "id_url"
                },
                "medias_tags": {
                    "id_media": "id_media",
                    "id_tag": "id_tag"
                },
                "medias_groups": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "text": "text",
                    "cfg": "cfg"
                },
                "medias_groups_medias": {
                    "id_media": "id_media",
                    "id_group": "id_group",
                    "position": "position",
                    "link": "link"
                }
            },
            "urlItemField": "id_media",
            "urlTypeValue": "media"
        }
    },
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "bbn": "bbn",
        "bbn\\X": "X",
        "bbn\\Str": "Str",
        "bbn\\Db": "Db",
        "bbn\\Mvc": "Mvc",
        "bbn\\User": "User",
        "bbn\\File\\System": "System",
        "bbn\\File\\Image": "Image",
        "bbn\\Appui\\Option": "Option",
        "bbn\\Models\\Tts\\References": "References",
        "bbn\\Models\\Tts\\DbActions": "DbActions",
        "bbn\\Models\\Tts\\Url": "Url",
        "bbn\\Models\\Tts\\Tagger": "Tagger",
        "bbn\\Models\\Cls\\Db": "DbCls"
    },
    "dummyComments": [],
    "summary": "",
    "description": "",
    "description_parts": []
}