{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Medias",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\References",
        "bbn\\Models\\Tts\\Dbconfig"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Medias.php",
    "startLine": 8,
    "endLine": 775,
    "contentConstructor": {
        "file": "bbn\\Appui\\Medias",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db)\n  {\n    parent::__construct($db);\n    $this->_init_class_cfg();\n    $this->opt    = bbn\\Appui\\Option::getInstance();\n    $this->usr    = bbn\\User::getInstance();\n    $this->opt_id = $this->opt->fromRootCode('media', 'note', 'appui');\n  }",
            "startLine": 83,
            "endLine": 90,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Db",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bbn\\Db $db)\n  {\n    $this->db = $db;\n  }",
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ]
            },
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPath": {
            "name": "getPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $media = NULL)\n  {\n    if (!isset($this->path)) {\n      $this->path = bbn\\Mvc::getDataPath('appui-note').'media';\n    }\n\n    $path = $this->path;\n    if ($media && $media['content'] && $media['content']['path']) {\n      $path .= '\/'.$media['content']['path'].$media['id']\n              .'\/'.$media['name'];\n    }\n\n    return $path;\n  }",
            "startLine": 96,
            "endLine": 109,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "media",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "browse": {
            "name": "browse",
            "summary": "Gets an array of medias.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg, int $limit = 20, int $start = 0)\n  {\n    if ($user = bbn\\User::getInstance()) {\n      $cf = $this->getClassCfg();\n      $ct = $cf['arch']['medias'];\n      $filters = [];\n      if (isset($cfg['filters'], $cfg['filters']['conditions'])) {\n        $filters = $cfg['filters']['conditions'];\n      }\n      if (($pvtIdx = \\bbn\\X::find($filters, ['field' => $ct['private']])) === null) {\n        $filters[] = [\n          'field' => $ct['private'],\n          'value' => 0\n        ];\n      }\n      else {\n        $userIdx = \\bbn\\X::find($filters, ['field' => $ct['id_user']]);\n        $id_user = $user->getId();\n        if (!empty($filters[$pvtIdx]['value'])) {\n          if ($userIdx === null) {\n            $filters[] = [\n              'field' => $ct['id_user'],\n              'value' => $id_user\n            ];\n          }\n          else {\n            $filters[$userIdx]['value'] = $id_user;\n          }\n        }\n        else if ($userIdx !== null) {\n          unset($filters[$userIdx]);\n        }\n      }\n      if (isset($cfg['filters'], $cfg['filters']['conditions'])) {\n        $cfg['filters']['conditions'] = $filters;\n      }\n      else {\n        $cfg['filters'] = [\n          'logic' => 'AND',\n          'conditions' => $filters\n        ];\n      }\n      $grid = new Grid($this->db, $cfg, [\n        'table' => $cf['table'],\n        'fields' => [],\n        'join' => $cfg['join'] ?? null,\n        'limit' => $cfg['limit'] ?? $limit,\n        'start' => $cfg['start'] ?? $start\n      ]);\n      if ($data = $grid->getDatatable()) {\n        $url = bbn\\Mvc::getPluginUrl('appui-note').'\/media\/image\/';\n        foreach ($data['data'] as &$d) {\n          $d['is_image'] = false;\n          if ($d['content']) {\n            $d['content'] = json_decode($d['content'], true);\n            $full_path = $this->getPath($d);\n            $d['full_pat'] = $this->getThumbs($full_path);\n            $d['path'] = $url.$d['id'];\n            $d['is_image'] = $this->isImage($full_path);\n            if ($d['is_image']) {\n              $d['thumbs'] = $this->getThumbsSizes($d[$ct['id']]);\n            }\n          }\n        }\n        return $data;\n      }\n    }\n    return null;\n  }",
            "startLine": 120,
            "endLine": 188,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 20,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "browseByGroup": {
            "name": "browseByGroup",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idGroup, array $cfg, int $limit = 20, int $start = 0)\n  {\n    $cf = $this->getClassCfg();\n    $t = $cf['tables']['medias_groups_medias'];\n    $cfg['join'] = [[\n      'table' => $t,\n      'on' => [\n        'conditions' => [[\n          'field' => $this->db->cfn('id_media', $t),\n          'exp' => $this->db->cfn('id', $cf['tables']['medias'])\n        ], [\n          'field' => $this->db->cfn('id_group', $t),\n          'value' => $idGroup\n        ]]\n      ]\n    ]];\n    if (empty($cfg['order']) || !\\is_array($cfg['order'])) {\n      $cfg['order'] = [];\n    }\n    $cfg['order'][] = [\n      'field' => $this->db->cfn('position', $t),\n      'dir' => 'ASC'\n    ];\n    return $this->browse($cfg, $limit, $start);\n  }",
            "startLine": 191,
            "endLine": 215,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idGroup",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 20,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "count": {
            "name": "count",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $filter = [])\n  {\n    if ($user = bbn\\User::getInstance()) {\n      $cf = $this->getClassCfg();\n      $ct = $cf['arch']['medias'];\n      if (!isset($filter[$ct['private']])) {\n        $filter[$ct['private']] = 0;\n      }\n      elseif ($filter[$ct['private']]) {\n        $filter[$ct['id_user']] = $user->getId();\n      }\n\n      return $this->db->count($cf['table'], $filter);\n    }\n    return null;\n  }",
            "startLine": 222,
            "endLine": 237,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "insert": {
            "name": "insert",
            "summary": "Adds a new media",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $file, array $content = NULL, string $title = '', string $type = 'file', bool $private = false, string $excerpt = NULL)\n  {\n      array $content = null,\n      string $title = '',\n      string $type = 'file',\n      bool $private = false,\n      string $excerpt = null\n  ): ?string\n  {\n    $cf =& $this->class_cfg;\n    if (!empty($file)\n        && ($id_type = $this->opt->fromCode($type, $this->opt_id))\n        && ($ext = Str::fileExt($file))\n    ) {\n      $content = null;\n      $fs = new bbn\\File\\System();\n      if (!$fs->isFile($file)) {\n        throw new \\Exception(X::_(\"Impossible to find the file %s\", $file));\n      }\n\n      if ($private) {\n        if (!$this->usr->check()) {\n          return null;\n        }\n\n        $root = bbn\\Mvc::getUserDataPath($this->usr->getId(), 'appui-note');\n      }\n      else {\n        $root = bbn\\Mvc::getDataPath('appui-note');\n      }\n\n      $root   .= 'media\/';\n      $path    = bbn\\X::makeStoragePath($root, '', 0, $fs);\n      $dpath   = substr($path, strlen($root));\n      $name    = X::basename($file);\n      $mime    = mime_content_type($file) ?: null;\n      $content = [\n        'path' => $dpath,\n        'size' => $fs->filesize($file),\n        'extension' => $ext\n      ];\n      if (empty($title)) {\n        $title = trim(str_replace(['-', '_', '+'], ' ', X::basename($file, \".$ext\")));\n      }\n\n      if (!$this->db->insert(\n        $cf['table'],\n        [\n          $cf['arch']['medias']['id_user'] => $this->usr->getId() ?: BBN_EXTERNAL_USER_ID,\n          $cf['arch']['medias']['type'] => $id_type,\n          $cf['arch']['medias']['mimetype'] => $mime,\n          $cf['arch']['medias']['title'] => $title,\n          $cf['arch']['medias']['excerpt'] => $excerpt,\n          $cf['arch']['medias']['name'] => $name ?? null,\n          $cf['arch']['medias']['content'] => $content ? json_encode($content) : null,\n          $cf['arch']['medias']['private'] => $private ? 1 : 0,\n          $cf['arch']['medias']['created'] => date('Y-m-d H:i:s')\n        ]\n      )) {\n        throw new \\Exception(X::_(\"Impossible to insert the media in the database\"));\n      }\n\n      $id = $this->db->lastId();\n      if ($fs->createPath($path.$id)) {\n        $fs->move(\n          $file,\n          $path.$id\n        );\n        $new_file = $path.$id.'\/'.X::basename($file);\n        if (strpos($mime, 'image\/') === 0) {\n          $image = new \\bbn\\File\\Image($new_file, $fs);\n          $image->thumbs($path.$id, $this->thumbs_sizes);\n        }\n      }\n\n\n      return $id;\n    }\n\n    return null;\n  }",
            "startLine": 251,
            "endLine": 331,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 4,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "excerpt",
                    "position": 5,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getByUrl": {
            "name": "getByUrl",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $url)\n  {\n    $cf =& $this->class_cfg;\n    return $this->db->selectOne(\n      $cf['tables']['medias_url'],\n      $cf['arch']['medias_url']['id_media'],\n      [\n        $cf['arch']['medias_url']['url'] => $url\n      ]\n    );\n  }",
            "startLine": 341,
            "endLine": 351,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                }
            ]
        },
        "setUrl": {
            "name": "setUrl",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_media, string $url, int $shared = 0)\n  {\n    if ($this->exists($id_media)) {\n      $cf =& $this->class_cfg;\n      return $this->db->insertIgnore(\n        $cf['tables']['medias_url'],\n        [\n          $cf['arch']['medias_url']['id_media'] => $id_media,\n          $cf['arch']['medias_url']['url'] => $url,\n          $cf['arch']['medias_url']['shared'] => $shared\n        ]\n      );\n    }\n\n    return null;\n  }",
            "startLine": 361,
            "endLine": 376,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "url",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "shared",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getThumbsSizes": {
            "name": "getThumbsSizes",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if (\\bbn\\Str::isUid($id)\n      && ($path = $this->getMediaPath($id))\n      && ($list = \\bbn\\File\\Dir::getFiles(X::dirname($path)))\n      && (count($list) > 1)\n    ) {\n      $sizes = [];\n      foreach ($list as $l) {\n        preg_match('\/.*\\_w([0-9]*)\\.[a-zA-Z]*$\/', $l, $m);\n        if (!empty($m) && !empty($m[1])) {\n          $sizes[] = $m[1];\n        }\n      }\n      sort($sizes);\n      return $sizes;\n    }\n    return [];\n  }",
            "startLine": 383,
            "endLine": 401,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getThumbs": {
            "name": "getThumbs",
            "summary": "Returns the path to the img for the given $path and size",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, array $size = array (\n  0 => 60,\n  1 => 60,\n), $if_exists = true)\n  {\n    if (isset($size[0], $size[1]) && (Str::isInteger($size[0]) || Str::isInteger($size[1]))) {\n      $ext = '.'.Str::fileExt($path);\n      $file = substr($path, 0, - strlen($ext));\n      if ($size[0] && Str::isInteger($size[0])) {\n        $file .= '_w'.$size[0];\n      }\n\n      if ($size[1] && Str::isInteger($size[1])) {\n        $file .= '_h'.$size[1];\n      }\n\n      $file .= $ext;\n\n      if (!$if_exists || file_exists($file)) {\n        return $file;\n      }\n    }\n\n    return null;\n  }",
            "startLine": 408,
            "endLine": 429,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "size",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [
                        60,
                        60
                    ],
                    "default_name": ""
                },
                {
                    "name": "if_exists",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "getThumbsPath": {
            "name": "getThumbsPath",
            "summary": "If the thumbs files exists for this path it returns an array of the the thumbs filename",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path)\n  {\n    $res  = [];\n\n    if (file_exists($path) && $this->isImage($path)) {\n      foreach($this->thumbs_sizes as $size){\n        if (($result = $this->getThumbs($path, $size)) !== null) {\n          $res[] = $result;\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 438,
            "endLine": 451,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "removeThumbs": {
            "name": "removeThumbs",
            "summary": "Remove the thumbs files",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path)\n  {\n    if ($thumbs = $this->getThumbsPath($path)) {\n      foreach($thumbs as $th){\n        if(file_exists($th)) {\n          unlink($th);\n        }\n      }\n    }\n  }",
            "startLine": 460,
            "endLine": 469,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getThumbsName": {
            "name": "getThumbsName",
            "summary": "Returns the name of the thumb file corresponding to the given name and size",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $name, array $size = array (\n  0 => 60,\n  1 => 60,\n))\n  {\n    $tmp = explode('.', $name);\n    if (isset($tmp[1]) && $ext = '.'.$tmp[1]) {\n      return $tmp[0].'_w'.$size[0].'h'.$size[1].$ext;\n    }\n\n    return null;\n  }",
            "startLine": 477,
            "endLine": 485,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "size",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [
                        60,
                        60
                    ],
                    "default_name": ""
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes the given media",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if (\\bbn\\Str::isUid($id)) {\n      $cf    =& $this->class_cfg;\n      $media = $this->getMedia($id, true);\n      $fs    = new bbn\\File\\System();\n\n      if ($media\n          && ($path = X::dirname($media['file']))\n          && is_file($media['file'])\n          && $this->db->delete($cf['table'], [$cf['arch']['medias']['id'] => $id])\n      ) {\n        if ($fs->delete($path, false)) {\n          bbn\\X::cleanStoragePath($path);\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 494,
            "endLine": 515,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isImage": {
            "name": "isImage",
            "summary": "Returns true if the given path is an image",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path)\n  {\n    if (is_string($path) && is_file($path)) {\n      $content_type = mime_content_type($path);\n      if (strpos($content_type, 'image\/') === 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 524,
            "endLine": 534,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getMedia": {
            "name": "getMedia",
            "summary": "Returns the object of the media",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, bool $details = false, int $width = NULL)\n  {\n    $cf =& $this->class_cfg;\n    $fs = new \\bbn\\File\\System();\n    if (\\bbn\\Str::isUid($id)\n        && ($link_type = $this->opt->fromCode('link', $this->opt_id))\n        && ($media = $this->db->rselect($cf['table'], [], [$cf['arch']['medias']['id'] => $id]))\n        && ($link_type !== $media[$cf['arch']['medias']['type']])\n    ) {\n      if ($media[$cf['arch']['medias']['content']]) {\n        $tmp   = json_decode($media[$cf['arch']['medias']['content']], true);\n        $media = array_merge($tmp, $media);\n      }\n      $media['file'] = (\n        $media['private'] ? bbn\\Mvc::getUserDataPath($this->usr->getId(), 'appui-note') : bbn\\Mvc::getDataPath('appui-note')\n      ).'media\/'.($media['path'] ?? '').$id.'\/'.$media[$cf['arch']['medias']['name']];\n      if ($width && ($sizes = $this->getThumbsSizes($id))) {\n        $current = $width;\n        foreach ($sizes as $size) {\n          if ($size >= $current) {\n            $dot = strrpos($media['file'], '.');\n            $tmpFile = substr($media['file'], 0, $dot) . '_w' . $size .\n              strtolower(substr($media['file'], $dot));\n            if ($fs->isFile($tmpFile) && $this->isImage($tmpFile)) {\n              $media['file'] = $tmpFile;\n            }\n            break;\n          }\n        }\n      }\n      if ($fs->isFile($media['file']) && $this->isImage($media['file'])) {\n        $media['is_image'] = true;\n      }\n\n      return empty($details) ? $media['file'] : $media;\n    }\n\n    return false;\n  }",
            "startLine": 545,
            "endLine": 583,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "details",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "width",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "zip": {
            "name": "zip",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($medias, $dest)\n  {\n    if (is_string($medias)) {\n      $medias = [$medias];\n    }\n\n    if (is_array($medias)\n        && \\bbn\\File\\Dir::createPath(X::dirname($dest))\n        && ($zip = new \\ZipArchive())\n        && ((        is_file($dest)\n        && ($zip->open($dest, \\ZipArchive::OVERWRITE) === true))\n        || ($zip->open($dest, \\ZipArchive::CREATE) === true)        )\n    ) {\n      foreach ($medias as $media){\n        if ($file = $this->getMedia($media)) {\n          $zip->addFile($file, X::basename($file));\n        }\n      }\n\n      return $zip->close();\n    }\n\n    return false;\n  }",
            "startLine": 591,
            "endLine": 614,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "medias",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dest",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "update": {
            "name": "update",
            "summary": "updates the title or the name or the title of the given media at the level of the file and database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_media, string $name, string $title)\n  {\n    $new = [];\n    \/\/the old media\n    $fs   = new bbn\\File\\System();\n    $old  = $this->getMedia($id_media, true);\n    $root = bbn\\Mvc::getDataPath('appui-note').'media\/';\n    if ($old\n        && (($old['name'] !== $name) || ($old['title'] !== $title))\n    ) {\n        $content = json_decode($old['content'], true);\n        $path    = $root.$content['path'].'\/';\n\n      if ($fs->exists($path.$id_media.'\/'.$old['name'])) {\n        if ($old['name'] !== $name) {\n          \/\/if the media is an image has to update also the thumbs names\n          if ($this->isImage($path.$id_media.'\/'.$old['name'])) {\n            $thumbs_names = [\n              [\n                'old' => $this->getThumbsName($old['name'], [60,60]),\n                'new' => $this->getThumbsName($name, [60,60])\n              ],[\n                'old' => $this->getThumbsName($old['name'], [100,100]),\n                'new' => $this->getThumbsName($name, [100,100])\n              ],[\n                'old' => $this->getThumbsName($old['name'], [125,125]),\n                'new' => $this->getThumbsName($name, [125,125])\n              ]\n            ];\n            foreach ($thumbs_names as $t){\n              $fs->rename($path.$id_media.'\/'.$t['old'], $t['new'], true);\n            }\n          }\n\n          $fs->rename($path.$id_media.'\/'.$old['name'], $name, true);\n        }\n\n        if ($this->updateDb($id_media, $name, $title)) {\n          $new = $this->getMedia($id_media, true);\n        }\n      }\n\n      return $new;\n    }\n\n    return $new;\n  }",
            "startLine": 625,
            "endLine": 671,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "updateDb": {
            "name": "updateDb",
            "summary": "Updates the media on the databases",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_media, string $name, string $title, array $content = [])\n  {\n    $fields = [\n      $this->class_cfg['arch']['medias']['name'] => $name,\n            $this->class_cfg['arch']['medias']['title'] => $title\n    ];\n    if(!empty($content)) {\n      $fields[$this->class_cfg['arch']['medias']['content']] = json_encode($content);\n    }\n\n    return $this->db->update(\n      [\n      'table' => $this->class_cfg['table'],\n      'fields' => $fields,\n          'where' => [\n            'conditions' => [[\n              'field' => $this->class_cfg['arch']['medias']['id'],\n              'value' => $id_media\n            ]]\n          ]\n      ]\n    );\n  }",
            "startLine": 683,
            "endLine": 705,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "updateContent": {
            "name": "updateContent",
            "summary": "Updates the content of the media when it's deleted and replaced in the bbn-upload",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_media, int $ref, string $oldName, string $newName, string $title)\n  {\n    $tmp_path  = \\bbn\\Mvc::getUserTmpPath().$ref.'\/'.$oldName;\n    $fs        = new \\bbn\\File\\System();\n    $new_media = [];\n    if ($fs->isFile($tmp_path)) {\n      $file_content = file_get_contents($tmp_path);\n\n      if (($media = $this->getMedia($id_media, true))) {\n        $old_path  = $this->getMediaPath($id_media, $oldName);\n        $full_path = $this->getMediaPath($id_media, $newName);\n        if ($fs->putContents($full_path, $file_content)) {\n          if ($this->isImage($full_path)) {\n            $image = new \\bbn\\File\\Image($full_path);\n            $this->removeThumbs($old_path);\n            $image->thumbs(X::dirname($full_path), $this->thumbs_sizes, '_%s', true);\n            $media['is_image'] = true;\n          }\n        }\n\n        if($this->updateDb(\n          $id_media, $newName, $title, [\n            'path' => $media['path'],\n            'size' => $fs->filesize($full_path),\n            'extension' => X::pathinfo($full_path, PATHINFO_EXTENSION)\n          ]\n        )\n        ) {\n          $new_media = $this->getMedia($id_media, true);\n        }\n      }\n    }\n\n    return $new_media;\n\n  }",
            "startLine": 718,
            "endLine": 753,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 5,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "ref",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "oldName",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame"
                },
                {
                    "name": "newName",
                    "position": 3,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame"
                },
                {
                    "name": "title",
                    "position": 4,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getMediaPath": {
            "name": "getMediaPath",
            "summary": "Returns the path of the given id_media",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_media, string $name = NULL)\n  {\n    if ($media = $this->getMedia($id_media, true)) {\n      $content = json_decode($media['content'], true);\n      $path    = bbn\\Mvc::getDataPath('appui-note').'media\/'.$content['path'].$id_media.'\/'.($name ? $name : $media['name']);\n      return $path;\n    }\n\n    return null;\n  }",
            "startLine": 763,
            "endLine": 772,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 51,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 51,
                "endLine": 58,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 65,
            "endLine": 72,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 65,
                "endLine": 72,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->error;\n  }",
            "startLine": 86,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 86,
                "endLine": 89,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 92,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 92,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 98,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 98,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 115,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 115,
                "endLine": 126,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 132,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 132,
                "endLine": 135,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 142,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 142,
                "endLine": 145,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getReferences": {
            "name": "getReferences",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return [\n      'select' => $this->references_select,\n      'join' => $this->references_join\n    ];\n  }",
            "startLine": 55,
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "exists": {
            "name": "exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if (!$this->class_table_index) {\n      throw new \\Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $res = $this->db->count(\n      $this->class_table, [\n      $this->class_cfg['arch'][$this->class_table_index]['id'] => $id\n      ]\n    );\n    return (bool)$res;\n  }",
            "startLine": 35,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the class configuration.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->class_cfg;\n  }",
            "startLine": 55,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the fields of the main table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->fields;\n  }",
            "startLine": 66,
            "endLine": 69,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "select": {
            "name": "select",
            "summary": "Retrieves a row from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ($this->exists($id)) {\n      $f = $this->class_cfg['arch'][$this->class_table_index];\n      if ($arr = $this->db->rselect(\n        $this->class_table, array_values($f), [\n          $f['id'] => $id\n        ]\n      )) {\n        if (!empty($f['cfg']) && !empty($arr[$f['cfg']])) {\n          $cfg = json_decode($arr[$f['cfg']], true);\n          $arr = array_merge($cfg, $arr);\n          unset($arr[$f['cfg']]);\n        }\n\n        return $arr;\n      }\n    }\n\n    return null;\n\n  }",
            "startLine": 146,
            "endLine": 167,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "selectAll": {
            "name": "selectAll",
            "summary": "Returns an array of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Medias",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cond)\n  {\n    if (!$this->class_table_index) {\n      throw new \\Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if ($arrs = $this->db->rselectAll($this->class_table, array_values($f), $cond)) {\n      foreach ($arrs as &$arr) {\n        if (!empty($f['cfg']) && !empty($arr[$f['cfg']])) {\n          $cfg = json_decode($arr[$f['cfg']], true);\n          $arr = array_merge($cfg, $arr);\n          unset($arr[$f['cfg']]);\n        }\n      }\n      unset($arr);\n\n      return $arrs;\n    }\n\n    return [];\n  }",
            "startLine": 177,
            "endLine": 198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cond",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "img_extensions": {
            "visibility": "public",
            "value": [
                "jpeg",
                "jpg",
                "png",
                "gif"
            ]
        },
        "thumbs_sizes": {
            "visibility": "public",
            "value": [
                [
                    500,
                    false
                ],
                [
                    250,
                    false
                ],
                [
                    125,
                    false
                ],
                [
                    96,
                    false
                ],
                [
                    48,
                    false
                ]
            ]
        }
    },
    "staticProperties": {
        "default_class_cfg": {
            "table": "bbn_medias",
            "tables": {
                "medias": "bbn_medias",
                "medias_tags": "bbn_medias_tags",
                "medias_url": "bbn_medias_url",
                "medias_groups": "bbn_medias_groups",
                "medias_groups_medias": "bbn_medias_groups_medias"
            },
            "arch": {
                "medias": {
                    "id": "id",
                    "id_user": "id_user",
                    "type": "type",
                    "mimetype": "mimetype",
                    "name": "name",
                    "title": "title",
                    "excerpt": "excerpt",
                    "content": "content",
                    "private": "private",
                    "created": "created",
                    "edited": "edited",
                    "editor": "editor"
                },
                "medias_url": {
                    "id_media": "id_media",
                    "url": "url",
                    "shared": "shared"
                },
                "medias_tags": {
                    "id_media": "id_media",
                    "id_tag": "id_tag"
                },
                "medias_groups": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "text": "text",
                    "cfg": "cfg"
                },
                "medias_groups_medias": {
                    "id_media": "id_media",
                    "id_group": "id_group",
                    "position": "position"
                }
            }
        }
    },
    "constants": null,
    "numMethods": 35,
    "numProperties": 2,
    "numConstants": 0,
    "numStaticProperties": 1,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\References",
        "bbn\\Models\\Tts\\Dbconfig"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "table": "bbn_medias",
            "tables": {
                "medias": "bbn_medias",
                "medias_tags": "bbn_medias_tags",
                "medias_url": "bbn_medias_url",
                "medias_groups": "bbn_medias_groups",
                "medias_groups_medias": "bbn_medias_groups_medias"
            },
            "arch": {
                "medias": {
                    "id": "id",
                    "id_user": "id_user",
                    "type": "type",
                    "mimetype": "mimetype",
                    "name": "name",
                    "title": "title",
                    "excerpt": "excerpt",
                    "content": "content",
                    "private": "private",
                    "created": "created",
                    "edited": "edited",
                    "editor": "editor"
                },
                "medias_url": {
                    "id_media": "id_media",
                    "url": "url",
                    "shared": "shared"
                },
                "medias_tags": {
                    "id_media": "id_media",
                    "id_tag": "id_tag"
                },
                "medias_groups": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "text": "text",
                    "cfg": "cfg"
                },
                "medias_groups_medias": {
                    "id_media": "id_media",
                    "id_group": "id_group",
                    "position": "position"
                }
            }
        },
        "opt": null,
        "usr": null,
        "opt_id": null,
        "path": null,
        "img_extensions": [
            "jpeg",
            "jpg",
            "png",
            "gif"
        ],
        "thumbs_sizes": [
            [
                500,
                false
            ],
            [
                250,
                false
            ],
            [
                125,
                false
            ],
            [
                96,
                false
            ],
            [
                48,
                false
            ]
        ],
        "class_cfg": null,
        "db": null,
        "errors": [],
        "error": false,
        "debug": false,
        "log": [],
        "references": null,
        "references_select": "",
        "references_join": "",
        "_is_init_class_cfg": false,
        "fields": null,
        "class_table": null,
        "class_table_index": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Medias",
    "summary": "",
    "description": "",
    "description_parts": []
}