{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Project",
    "namespace": true,
    "realName": "Project",
    "realNamespace": "bbn\\Appui",
    "traits": [
        "bbn\\Models\\Tts\\Optional",
        "bbn\\Models\\Tts\\Cache"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Project.php",
    "startLine": 28,
    "endLine": 1640,
    "numMethods": 81,
    "numProperties": 27,
    "numConstants": 0,
    "numStaticProperties": 3,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "environments": [],
        "optional_is_init": false,
        "option_root_id": null,
        "fullTree": null,
        "id": null,
        "id_langs": null,
        "id_path": null,
        "projectInfo": null,
        "pathInfo": null,
        "appPath": null,
        "name": null,
        "lang": null,
        "code": null,
        "option": null,
        "repositories": null,
        "fs": null,
        "options": null,
        "appui": null,
        "db": null,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": [],
        "_cache_prefix": null,
        "cache_engine": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Project",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Construct the class Project",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(Db $db, string|null $id = null)\n  {\n    parent::__construct($db);\n    self::optionalInit();\n    self::cacheInit();\n    $this->options = Option::getInstance();\n    $this->fs      = new System();\n    if (Str::isUid($id)) {\n      $this->id = $id;\n    } elseif (\\is_string($id)) {\n      $this->id = $this->options->fromCode($id, 'list', 'project', 'appui');\n    } elseif (defined('BBN_APP_NAME')) {\n      $this->id = $this->options->fromCode(BBN_APP_NAME, 'list', 'project', 'appui');\n    }\n\n    if (!empty($this->id)) {\n      $this->setProjectInfo($this->id);\n    }\n  }",
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Db",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Db.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function __construct(dbClass $db)\n  {\n    $this->db = $db;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "__construct",
                "returns": [],
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "type_arr": [
                            "bbn\\Db"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ],
                "doc": {
                    "description": "Constructor.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "dbClass",
                            "name": "$db",
                            "description": "A database connection"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Constructor.\n   *\n   * @param dbClass $db A database connection\n   *\/"
            },
            "trait": false,
            "startLine": 73,
            "endLine": 91,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Construct the class Project\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Db",
                        "name": "$db"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Construct the class Project\n   *\n   * @param Db $db\n   * @param string $id\n   *\/"
        },
        "urlToPaths": {
            "name": "urlToPaths",
            "summary": "Gets the potential existing paths from an URL",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function urlToPaths(string $url) : array\n  {\n    $cfg = $this->urlToConfig($url, true);\n    if (!$cfg) {\n      throw new Exception(X::_('Impossible to find a configuration for the URL'));\n    }\n\n    $file = array_pop(X::split($cfg['file'], '\/'));\n    $res = [\n      'root' => $cfg['info']['parent_code'],\n      'path' => $cfg['path']\n    ];\n\n    if (!empty($cfg['typology']['tabs'])) {\n      $files = [];\n      foreach($cfg['typology']['tabs'] as $tab) {\n        if ($cfg['typology']['directories'] === true) {\n          $path = $cfg['typology']['code'].'\/'.$tab['path'].$file;\n        }\n        else {\n          $path = $cfg['typology']['code'].'\/'.$file.'\/'.$file;\n        }\n        $files[$tab['url']] = [\n          'path' => $path,\n          'extensions' => $tab['extensions']\n        ];\n      }\n      $res['files'] = $files;\n    }\n    else {\n      $res['files'] = $cfg['file'];\n      $res['extensions'] = $cfg['extensions'];\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 100,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "urlToPaths",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The file's URL\nreturn array"
                }
            ],
            "doc": {
                "description": "Gets the potential existing paths from an URL\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url",
                        "description": "The file's URL\nreturn array"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the potential existing paths from an URL\n   *\n   * @param string $url The file's URL\n   * return array\n   *\/"
        },
        "getGitDiff": {
            "name": "getGitDiff",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getGitDiff(string $path) {\n    $arr = [\n      'ide' => [],\n      'elements' => []\n    ];\n    \n    $git = new Git($path);\n    $fs = new System();\n    \n    try {\n      $difference_git = $git->diff();\n    }\n    catch (Exception $e) {\n      $difference_git = false;\n    }\n  \n    if ( !empty($difference_git) ){\n      $arr['elements'] = array_map(function($a) use($path){\n        return [\n          'ele' => $path.'\/'.(!empty($i = strpos($a['file'], ' -> ')) ? substr($a['file'], $i+4)  : $a['file']),\n          'state' => $a['action']\n        ];\n      }, $difference_git);\n    \n      $branches = [\n        'components' => ['.php','.js','.html', '.less', '.css'],\n        'mvc' => [\n          'public' => ['.php'],\n          'private' => ['.php'],\n          'model' => ['.php'],\n          'js' => ['.js'],\n          'html' => ['.php', '.html'],\n          'css' => ['.css', '.less']\n        ]\n      ];\n    \n      foreach ( $arr['elements'] as $val ){\n        $relative = str_replace($path.'\/src\/',\"\",$val['ele']);\n        $part = explode('\/', $relative);\n        $root = array_shift($part);\n        if ( $root === 'components' ){\n          if ( $fs->isFile($val['ele']) ){\n            $part = explode('.', $relative);\n            $relative = array_shift($part);\n          }\n          foreach( $branches['components'] as $ext ){\n            $info = [\n              'ele' => $path.'\/src\/'.$relative.$ext,\n              'state' => $val['state']\n            ];\n            if ( array_search($info, $arr['ide']) === false ){\n              $arr['ide'][] = $info;\n            }\n          }\n        }\n        elseif( $root === 'mvc' ){\n          $relative = explode(\"\/\", $relative);\n          array_shift($relative);\n          array_shift($relative);\n          $relative_origin = implode('\/', $relative);\n          foreach ( $branches['mvc'] as $folder => $exts ){\n            $element = $path.'\/src\/'. $root. '\/'.$folder.'\/';\n            if ( $fs->isFile($val['ele']) ){\n              $part = explode('.', $relative_origin);\n              $relative = array_shift($part);\n              foreach ( $exts as $ext ){\n                $element = $path.'\/src\/'. $root. '\/'.$folder.'\/'.$relative;\n                $element .= $ext;\n                $info = [\n                  'ele' => $element,\n                  'state' => $val['state']\n                ];\n                if ( array_search($info, $arr['ide']) === false ){\n                  $arr['ide'][] = $info;\n                }\n              }\n            }\n            else{\n              $info = [\n                'ele' => $element.$relative_origin,\n                'state' => $val['state']\n              ];\n              if ( array_search($info, $arr['ide']) === false ){\n                $arr['ide'][] = $info;\n              }\n            }\n          }\n        }\n        else{\n          if ( array_search($val, $arr['ide']) === false ){\n            $arr['ide'][] = $val;\n          }\n        }\n      }\n    }\n    return $arr;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 137,
            "endLine": 233,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getGitDiff",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "urlToConfig": {
            "name": "urlToConfig",
            "summary": "Gets the configuration of an URL",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function urlToConfig(string $url, bool $force = false) : ?array\n  {\n    \/\/ a typical url : lib\/appui-api\/js\/test\/_end_\/code\n    \/** @var array $bits each substring of the url *\/\n    $bits = X::split($url, '\/');\n    \/** @var string $root the first element must correspond to a path retriever function of mvc (app, lib, data, cdn) *\/\n    $root = array_shift($bits);\n    \/** @var string $path the code of the repository under $root (in the options) *\/\n    $path = array_shift($bits);\n    \/** @var array $info all the options for this project *\/\n    $info = $this->getProjectInfo();\n    \/** @var array $path_info full option for the current path *\/\n    $path_info = X::getRow($info['path'], ['parent_code' => $root, 'code' => $path]);\n\n    \/** @var string $type the last part of the url after _end_ *\/\n    $type = false;\n\n    if (in_array('_end_', $bits)) {\n      $type = array_pop($bits);\n      \/\/ the url structure with _end_ and $type is mandatory\n      if (array_pop($bits) !== '_end_') {\n        throw new Exception(\"Malformed URL $url\");\n      }\n    }\n    $mvc = Mvc::getInstance();\n    if ($path_info && method_exists($mvc, $root.'Path')) {\n      if ($path_info['path'] === '\/') {\n        $path_info['path'] = '';\n      }\n      elseif (substr($path_info['path'], -1) !== '\/') {\n        $path_info['path'] .= '\/';\n      }\n      $res = [\n        'root' => $mvc->{$root.'Path'}(true),\n        'path' => $path_info['path'],\n        'info' => $path_info\n      ];\n      \/** @var string $real the result of this function *\/\n      $real = $res['root'].$res['path'];\n      \/\/ case of folder is a component or a mvc\n      $path_info = $path_info['alias'];\n      $source_path = $path_info['sourcePath'] ?? '';\n      $real .= $source_path . $path_info['code'] === 'bbn-project' ? 'src\/' : '';\n      if (!empty($path_info['types'])) {\n        \/** @var string $path_type type found in the url (mvc, component, lib cli) *\/\n        $path_type = array_shift($bits);\n        \/** @var array $path_row option corresponding to the type $path_type *\/\n        $path_row = X::getRow($path_info['types'], ['url' => $path_type]);\n        if (!$path_row) {\n          throw new Exception(X::_('Impossible to find the type %s', $path_type));\n        }\n        if ($path_type === 'lib') {\n          $res['typology'] = $this->getType('cls');\n        } else {\n          $res['typology'] = $this->getType($path_type);\n        }\n\n        $real .= $path_type.'\/';\n        if ($force && !$type) {\n          if (!empty($res['typology']['tabs'])) {\n            if ($row = X::getRow($res['typology']['tabs'], ['default' => true])) {\n              $type = $row['url'];\n            }\n          }\n        }\n\n        if (!empty($res['typology']['tabs'])) {\n          $path_info = X::getRow($res['typology']['tabs'], ['url' => $type]);\n        } else {\n          $path_info = $res['typology'];\n        }\n        \/\/ add directly what remain in the url\n\n        if (!empty($res['typology']['directories'])) {\n          $real .= X::join($bits, '\/');\n        }\n        \/\/ add the directory to explore if 'directories' value is true (public, private, html, ...)\n        else {\n          if ($path_type === 'mvc') {\n            $real .= $path_info['path'];\n            if (!$this->fs->isDir($real)) {\n              throw new Exception(X::_(\"The directory %s doesn't exist\", $real));\n            }\n          }\n          elseif ($path_type === 'component') {\n            $real .= array_shift($bits) . '\/';\n            if (!$this->fs->isDir($real)) {\n              throw new Exception(X::_(\"The directory %s doesn't exist\", $real));\n            }\n          }\n          $real .= X::join($bits, '\/');\n        }\n      }\n      \/\/ case of a simple file\n      else {\n        $real .= '\/'.X::join($bits, '\/');\n        if ($type !== 'code') {\n          $real .= '\/';\n        }\n      }\n      $res['file'] = str_replace('\/\/', '\/', $real);;\n      $res['extensions'] = $path_info['extensions'];\n      return $res;\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 241,
            "endLine": 346,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "urlToConfig",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The file's URL"
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the configuration of an URL\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url",
                        "description": "The file's URL"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the configuration of an URL\n   *\n   * @param string $url The file's URL\n   * @return array|null\n   *\/"
        },
        "urlToReal": {
            "name": "urlToReal",
            "summary": "Gets the real file's path from an URL",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function urlToReal(string $url) : ?string\n  {\n    $res = $this->urlToConfig($url);\n    if ($url) {\n      foreach($res['extensions'] as $e) {\n        $file = $res['file'].'.'.$e['ext'];\n        if ($this->fs->exists($file)) {\n          return $file;\n        }\n      }\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 355,
            "endLine": 367,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "urlToReal",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The file's URL"
                }
            ],
            "doc": {
                "description": "Gets the real file's path from an URL\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url",
                        "description": "The file's URL"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$obj"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the real file's path from an URL\n   *\n   * @param string $url The file's URL\n   * @param bool   $obj\n   * @return string\n   *\/"
        },
        "getFullTree": {
            "name": "getFullTree",
            "summary": "function to get the full option tree of the project",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFullTree(bool $force = false): array\n  {\n    if (!$force && $this->fullTree) {\n      return $this->fullTree;\n    }\n\n    if (!$force && $this->cacheHas($this->id, 'full_tree')) {\n      $this->fullTree = $this->cacheGet($this->id, 'full_tree');\n      return $this->fullTree;\n    }\n\n    $opts = self::getOptionsObject()->fullOptions($this->id);\n    $res = [];\n    foreach ($opts as $t) {\n      if ($t['code'] !== 'db') {\n        $res[$t['code']] = self::getOptionsObject()->fullTree($t['id']);\n      }\n      else {\n        $res[$t['code']] = $t;\n        $res[$t['code']]['items'] = self::getOptionsObject()->fullOptions($t['id']);\n        foreach ($res[$t['code']]['items'] as &$it) {\n          $it['items'] = self::getOptionsObject()->fullOptions($it['id']);\n        }\n      }\n    }\n\n    $this->fullTree = $res;\n    $this->cacheSet($this->id, 'full_tree', $res, 3600);\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 374,
            "endLine": 403,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getFullTree",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "force",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "function to get the full option tree of the project\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * function to get the full option tree of the project\n   *\n   * @return array\n   *\/"
        },
        "getDbs": {
            "name": "getDbs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDbs(): array\n  {\n    $res = $this->getFullTree();\n    if (isset($res['db']) && !empty($res['db']['items'])) {\n      $o = self::getOptionsObject();\n      foreach ($res['db']['items'] as &$db) {\n        if (empty($db['text']) && !empty($db['alias'])) {\n          $db['text'] = $db['alias']['text'];\n        }\n        if (empty($db['code']) && !empty($db['alias'])) {\n          $db['code'] = $db['alias']['code'];\n        }\n\n        $db['items'] = $o->fullOptions('connections', $db['id_alias']);\n        if (!empty($db['items'])) {\n          $db['engine'] = $o->code($o->getIdParent($db['alias']['id_parent']));\n          foreach ($db['items'] as $j => $conn) {\n            if (empty($conn['text']) && !empty($conn['alias'])) {\n              $db['items'][$j]['text'] = $conn['alias']['text'];\n            }\n\n            if (empty($conn['code']) && !empty($conn['alias'])) {\n              $db['items'][$j]['code'] = $conn['alias']['code'];\n            }\n\n            $db['items'][$j]['engine'] = $db['engine'];\/\/$o->code($o->getIdParent($conn['alias']['id_parent']));\n          }\n        }\n      }\n\n      unset($db);\n      return $res['db'];\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 405,
            "endLine": 440,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDbs",
            "returns": [
                "array"
            ],
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    return parent::check() && !empty($this->id);\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 443,
            "endLine": 446,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": []
        },
        "getEnvironment": {
            "name": "getEnvironment",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getEnvironment($appPath = null): ?array\n  {\n    if (!$appPath) {\n      $appPath = $this->getAppPath();\n    }\n\n    if (!$appPath) {\n      throw new Exception(X::_(\"No application path given for app %s\", $this->name));\n    }\n\n    $file_environment = $appPath . 'cfg\/environment';\n    if ($this->fs->isFile($file_environment . '.json')) {\n      $envs = json_decode($this->fs->getContents($file_environment . '.json'), true);\n    }\n    elseif ($this->fs->isFile($file_environment . '.yml')) {\n      try {\n        $envs = yaml_parse($this->fs->getContents($file_environment . '.yml'));\n      } catch (Exception $e) {\n        throw new Exception(\n          \"Impossible to parse the file $file_environment.yaml\"\n            . PHP_EOL . $e->getMessage()\n        );\n      }\n      if ($envs === false) {\n        throw new Exception(X::_(\"Impossible to parse the file $file_environment.yaml\"));\n      }\n    }\n\n    if (!empty($envs)) {\n      foreach ($envs as $env) {\n        if ($env['app_path'] === X::dirname($appPath) . '\/') {\n          return $env;\n        }\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 449,
            "endLine": 486,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getEnvironment",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "appPath",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "changeProjectLang": {
            "name": "changeProjectLang",
            "summary": "Change the value of the property i18n on the option of the project",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function changeProjectLang(string $lang)\n  {\n    if ($cfg = $this->options->getCfg($this->id)) {\n      $cfg['i18n'] = $lang;\n      $this->lang  = $lang;\n      $success     = $this->options->setCfg($this->id, $cfg);\n      $this->options->deleteCache($this->id, true);\n      return $success;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 495,
            "endLine": 506,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "changeProjectLang",
            "returns": [],
            "arguments": [
                {
                    "name": "lang",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Change the value of the property i18n on the option of the project\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$lang"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Change the value of the property i18n on the option of the project\n   *\n   * @param string $lang\n   * @return bool\n   *\/"
        },
        "getProjectInfo": {
            "name": "getProjectInfo",
            "summary": "Returns the main infos of the given project",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getProjectInfo(bool $force = false)\n  {\n    if ($this->id) {\n      if (!$force && $this->projectInfo) {\n        return $this->projectInfo;\n      }\n\n      if (!$force && $this->cacheHas($this->id, 'project_info')) {\n        $this->projectInfo = $this->cacheGet($this->id, 'project_info');\n        return $this->projectInfo;\n      }\n\n      $path = $this->getPaths(true);\n      $langs = $this->getLangsIds();\n      $lang = $this->getLang();\n      $db = $this->getDbs();\n      $info = [\n        'id' => $this->id,\n        'code' => $this->getCode(),\n        'name' => $this->getName(),\n        'path' => $path,\n        'langs' => $langs,\n        'lang' => $lang,\n        'db' => $db,\n      ];\n\n      if (!empty($info['db']['items'])) {\n        $conn = '';\n        if (defined('BBN_DB_USER') && !empty(constant('BBN_DB_USER'))) {\n          $conn .= constant('BBN_DB_USER') . '@';\n        }\n        $conn .= constant('BBN_DB_HOST');\n\n        foreach ($info['db']['items'] as &$item) {\n          if (($item['engine'] === constant('BBN_DB_ENGINE')) && !empty($item['items'])) {\n            foreach ($item['items'] as &$it) {\n              if ($it['code'] === $conn) {\n                $it['default'] = true;\n              }\n            }\n            unset($it);\n          }\n        }\n        unset($item);\n      }\n\n      $this->cacheSet($this->id, 'project_info', $info, 3600*24);\n      $this->projectInfo = $info;\n      return $info;\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 517,
            "endLine": 569,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getProjectInfo",
            "returns": [],
            "arguments": [
                {
                    "name": "force",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the main infos of the given project\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the main infos of the given project\n   *\n   * @param string $id\n   * @return array\n   *\n   *\n   *\/"
        },
        "_getDifferenceGit": {
            "name": "_getDifferenceGit",
            "summary": "function to get difference between local and git version",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _getDifferenceGit()\n  {\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 577,
            "endLine": 580,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "_getDifferenceGit",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "function to get difference between local and git version\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * function to get difference between local and git version\n   *\n   * @return array\n   *\/"
        },
        "_checkGit": {
            "name": "_checkGit",
            "summary": "function to get git status of the element",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _checkGit($ele): bool\n  {\n    $difference_git = $this->_getDifferenceGit();\n    $info_git = false;\n    if (!empty($difference_git['ide'])) {\n      foreach($difference_git['ide'] as $commit){\n        $info_git = strpos($commit['ele'], $ele) === 0;\n        if (!empty($info_git)) {\n          return $info_git;\n        }\n      }\n    }\n    return $info_git;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 588,
            "endLine": 601,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_checkGit",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "ele",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "given element to check its status"
                }
            ],
            "doc": {
                "description": "function to get git status of the element\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$ele",
                        "description": "given element to check its status"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * function to get git status of the element\n   *\n   * @param bool $ele  given element to check its status\n   * @return bool\n   *\/"
        },
        "openTree": {
            "name": "openTree",
            "summary": "function to get array to fill the tree component",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function openTree(string $path, string $id_path, string|null $type = null): array\n  {\n    return $this->_getTree($path, $id_path, $type);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 611,
            "endLine": 614,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "openTree",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "given path of the file selected"
                },
                {
                    "name": "id_path",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "path  given id_path of the directory"
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "type given in order to fill the tree"
                }
            ],
            "doc": {
                "description": "function to get array to fill the tree component\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "given path of the file selected"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "path  given id_path of the directory"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "type given in order to fill the tree"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * function to get array to fill the tree component\n   *\n   * @param string $path  given path of the file selected\n   * @param string $id_path  given id_path of the directory\n   * @param string $type  type given in order to fill the tree\n   * @return array\n   *\/"
        },
        "_getTree": {
            "name": "_getTree",
            "summary": "function to get the tree array to fill tree component",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _getTree(string $path, string $id_path, string|null $type = null, bool $onlydirs = false): array\n  {\n    \/\/ get info of the current path selected in first dropdown\n    $currentPathArray = $this->getPath($id_path, true);\n    if (!$currentPathArray || !$currentPathArray['path'] || !$currentPathArray['id_alias']) {\n      X::ddump($currentPathArray);\n      throw new Exception('Invalid Path');\n    }\n\n    $path = Url::sanitize($path);\n\n    $o = self::getOptionsObject();\n    \/\/ get current path type options\n    $typePath = $o->option($currentPathArray['id_alias']);\n    \/\/ finalPath is the parameter for the getFiles function\n    $finalPath = $currentPathArray['parent'].$currentPathArray['path'].($typePath['code'] === 'bbn-project' ? '\/src' : '');\n    $isBbnProject = false;\n    $difference_git = [];\/\/$this->getGitDiff($currentPathArray['parent'].$currentPathArray['path']);\n  \n    $todo = [];\n    if (!empty($typePath['types'])) {\n      \/\/ do if the path is a bbn-project\n      $isBbnProject = true;\n      \/\/ check the type between mvc, component, classes and cli\n      $currentType = X::getRow($typePath['types'], ['type' => $type]);\n      if (!$currentType) {\n        throw new Exception('Invalid Type');\n      }\n      \/\/ concatenate finalPath with the path of the type\n      $finalPath .= '\/'.$currentType['path'];\n\n    }\n    else {\n      $currentType = $typePath;\n      $finalPath .= '\/';\n    }\n\n    $currentPathArray['id_path'] = $id_path;\n    $currentPathArray['type'] = $currentType;\n    $currentPathArray['publicPath'] = $path.'\/';\n\n    \/\/ fill $todo with MVC files \/ folders\n    if ($currentType['type'] === 'mvc') {\n      $todo = $this->retrieveMvcFiles($finalPath, $path, $onlydirs);\n    }\n    \/\/ fill $todo with Components files \/ folders\n    elseif ($currentType['type'] === 'components') {\n      \/\/ check if path is not empty\n      $todo = $this->retrieveComponentFiles($finalPath, $path, $onlydirs);\n    }\n    \/\/ fill $todo with all files \/ folders\n    else {\n      $todo = $this->retrieveAllFiles($finalPath.($path ?: ''), $onlydirs);\n    }\n  \n    $check_git = function ($ele) use ($difference_git) {\n      $info_git = false;\n      if (!empty($difference_git['ide'])) {\n        foreach($difference_git['ide'] as $commit){\n          $info_git = str_starts_with($commit['ele'], $ele);\n          if (!empty($info_git)) {\n            return true;\n          }\n        }\n      }\n    \n      return $info_git;\n    };\n    \n    if (is_array($todo)) {\n      \/\/we browse the element\n      $fs = new System();\n      $files = [];\n      $filtered = array_values(array_filter(\n        $todo,\n        function($a) use (&$files, &$fs, $check_git){\n          \/\/ get name and extension of each files\n          $ext  = Str::fileExt($a['name']);\n          $name = Str::fileExt($a['name'], 1)[0];\n          if ($fs->isDir($a['name'])) {\n            $name = '0' . $name;\n          } else {\n            $name = '1' . $name;\n          }\n          if (!isset($files[$name])) {\n            $files[$name] = true;\n            return true;\n          }\n          return false;\n        }\n      ));\n      $that =& $this;\n      $files = [];\n      $folders = [];\n      \/\/ launch _getNode on all path of $currentPathArray to get array of nodes\n      $fn = function($a) use (&$currentPathArray, $that, &$files,  &$folders, &$fs, $check_git) {\n        \n        $tmp = $that->_getNode($a, $currentPathArray);\n        if ($fs->isFile($a['name'])) {\n          $tmp['git'] = $check_git($a['name']);\n          $files['1' . $tmp['name']] = $tmp;\n        }\n        else {\n          $tmp['git'] = $check_git($a['name']);\n          $folders['0' . $tmp['name']] = $tmp;\n        }\n        return $tmp;\n      };\n      array_map($fn, $filtered);\n      if (ksort($folders, SORT_STRING | SORT_FLAG_CASE) && ksort($files, SORT_STRING | SORT_FLAG_CASE)) {\n        \/\/return merge of file and folder create in function get\n        \/\/X::ddump($folders, $files);\n        $tot = [...array_values($folders), ...array_values($files)];\n        return $tot;\n      }\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 628,
            "endLine": 746,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "_getTree",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "given path of the file selected"
                },
                {
                    "name": "id_path",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "path  given id_path of the directory"
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "type given in order to fill the tree"
                },
                {
                    "name": "onlydirs",
                    "position": 3,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "get files AND folders if it is true"
                }
            ],
            "doc": {
                "description": "function to get the tree array to fill tree component\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "given path of the file selected"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "path  given id_path of the directory"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "type given in order to fill the tree"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$onlydirs",
                        "description": "get files AND folders if it is true"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$color",
                        "description": "color given in order to set icon color"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$tab",
                        "description": "extension of the file"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$types",
                        "description": "types given in order to fill tree array"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * function to get the tree array to fill tree component\n   *\n   * @param string $path  given path of the file selected\n   * @param string $id_path  given id_path of the directory\n   * @param string $type  type given in order to fill the tree\n   * @param bool $onlydirs  get files AND folders if it is true\n   * @param string $color  color given in order to set icon color\n   * @param string $tab  extension of the file\n   * @param array $types  types given in order to fill tree array\n   * @return array\n   *\/"
        },
        "_getNode": {
            "name": "_getNode",
            "summary": "function to get node by info of the selected file\/folder",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _getNode(array $t, array $cfg): ?array {\n\n    if (!isset($t) || empty($t['name'])) {\n      return null;\n    }\n\n    $component = false;\n    $isComponent    = false;\n    $name      = $t['basename'];\n    \/\/if is type and is components\n    if ($cfg['type']['type'] === 'components') {\n      \/\/if is the component, with no subfolders\n      if(empty($this->fs->getDirs($t['name'])) && !empty($cnt = $this->fs->getFiles($t['name']))) {\n        $component = true;\n        $num       = 0;\n        $folder    = false;\n        if (is_array($cnt)) {\n          foreach($cnt as $f){\n            $item = explode(\".\", basename($f))[0];\n            if ($item === basename($t['name'])) {\n              $arr[]  = Str::fileExt($f);\n              $isComponent = true;\n            }\n          }\n        }\n      }\n      elseif (empty($this->fs->getFiles($t['name'], true))) {\n        $num       = 0;\n        $folder    = true;\n      }\n      \/\/else is folder\n      elseif (($cnt = $this->fs->getFiles($t['name'], true, true))) {\n        $excludeds = [\n          'public' => ['_super.php']\n        ];\n        $num       = \\count($cnt);\n        $folder    = true;\n        $arr       = [];\n        $component = false;\n        $num_check = 0;\n\n        if (is_array($cnt)) {\n          $num_check = 0;\n          foreach($cnt as $f){\n            \/\/$name = explode(\".\", basename($f))[0];\n            $ele  = explode(\".\", basename($f));\n            $item = $ele[0];\n            $ext  = isset($ele[1]) ? $ele[1] : false;\n            \/\/if is folder and component\n            if ($item === basename($t['name'])) {\n              $folder    = false;\n              $arr[]     = Str::fileExt($f);\n              $isComponent    = true;\n              $component = true;\n              if (!empty($ext) && (in_array($ext, $excludeds) === false)) {\n                $num_check++;\n              }\n            }\n          }\n\n          if($num > 0) {\n            \/\/for component in case file with name different or folder hidden\n            $element_exluded = 0;\n            if($num_check < $num) {\n              foreach($cnt as $f){\n                $ele  = explode(\".\", basename($f));\n                $item = $ele[0];\n                $ext  = isset($ele[1]) ? $ele[1] : false;\n                if (($this->fs->isDir($f) && (strpos(basename($f), '.') === 0))\n                    || ($this->fs->isFile($f) && (($item !== basename($t['name'])) || (!empty($ext) && (in_array($ext, $excludeds) === true))))\n                   ) {\n                  $element_exluded++;\n                }\n              }\n            }\n\n            \/\/check if the files of the component + those that have a different name or have hidden folders is the same as all the content, leaving only the possibility in case of folders not hidden\n            $num = $num - ($num_check + $element_exluded);\n          }\n        }\n\n        \/\/in this block check check if there is the file with the extension 'js' otherwise take the first from the list and if it is php then let's say that we are in the html\n        if (count($arr) > 0) {\n          if(array_search('js',$arr, true) !== false) {\n            $tab = 'js';\n          }\n          else{\n            $tab = $arr[0] === 'php' ? 'html' : $arr[0];\n          }\n        }\n      }\n    }\n\n    \/\/on the basis of various checks, set the icon\n    \/\/case file but no component\n    if (!empty($t['file']) && empty($component)) {\n      \/\/x::ddump($t, $cfg, $tab);\n      \/\/if (isset($cfg['alias']['types']) && ($row = X::getRow($cfg['alias']['types'], ))\n      if (!empty($t['tab'])) {\n        switch ($t['tab']) {\n          case 'php':\n            $icon = \"nf nf-md-language_php\";\n            break;\n          case 'private':\n            $icon = \"nf nf-md-language_php\";\n            break;\n          case 'model':\n            $icon = \"nf nf-md-database\";\n            break;\n          case 'html':\n            $icon = \"nf nf-md-language_html5\";\n            break;\n          case 'js':\n            $icon = \"nf nf-md-language_javascript\";\n            break;\n          case 'css':\n            $icon = \"nf nf-md-language_css3\";\n            break;\n        }\n      }\n      elseif ($t['ext'] === 'js') {\n        $icon = \"nf nf-md-language_javascript\";\n      }\n      elseif ($t['ext'] === 'less') {\n        $icon = 'nf nf-dev-less';\n      }\n      else{\n        $icon = \"icon-$t[ext]\";\n      }\n    }\n    \/\/case component o folder who contain other component\n    elseif (!empty($component) && !empty($isComponent)) {\n      $icon = \"nf nf-md-vuejs\";\n    }\n    \/\/case folder\n    else {\n      $icon = \"nf nf-fa-folder\";\n    }\n\n    $public_path = $cfg['publicPath'];\n\n    \/\/object return of a single node\n    $uid = $component === true ? $public_path.$name.'\/'.$name : $public_path.$name . ($t['dir'] ? '\/' : '');\n\n    $res = [\n      'text' => $name,\n      'name' => $name,\n      \/\/'git' => $check_git($t),\n      \/\/Previously the 'uid' property was called 'path'\n      \/** @todo check that it is working for directories *\/\n      \/\/ uid of the file depends to his type\n      'uid' => $uid,\n      'has_index' => !$t['file'] && Dir::hasFile($t['name'], 'index.php', 'index.html', 'index.htm'),\n      'is_svg' => $t['file'] && ($t['ext'] === 'svg'),\n      \/\/ $isComponent not use\n      'isComponent' => $isComponent,\n      'icon' => $icon,\n      'bcolor' => $cfg['bcolor'],\n      'folder' => $t['dir'],\n      'lazy' => $t['dir'] && ((empty($onlydirs) && $t['num']) || (!empty($onlydirs) && $this->fs->getDirs($t['name']))),\n      'numChildren' => $num ?? ($t['num'] ?? 0),\n      'type' => $cfg['type']['type'],\n      'id_path' => $cfg['id_path'],\n      'tab' => $tab ?? ($t['tab'] ?? null),\n      'ext' => $t['file'] ? $t['ext'] : false\n    ];\n\n\n    \/*if(!empty($tree_popup)) {\n      $cfg['tree_popup'] = !empty($tree_popup);\n    }*\/\n\n    \/\/based on various checks, we set the type by adding it to the cfg\n    \/*if ($cfg['type'] && !empty($types)) {\n      $res['type'] = !empty($types[$name]) ? $types[$name] : false;\n    }\n    elseif (!empty($type) && empty($types)) {\n      $cfg['type']['type'] = $type;\n    }\n    elseif (empty($type) && empty($types)) {\n      $cfg['type']['type'] = false;\n    }*\/\n\n    \/\/add to the list of folders or files so that we traced them for the next cycle\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 755,
            "endLine": 940,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_getNode",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "t",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "info of the file\/folder selected"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "config of the file\/folder to create result for tree"
                }
            ],
            "doc": {
                "description": "function to get node by info of the selected file\/folder\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$t",
                        "description": "info of the file\/folder selected"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "config of the file\/folder to create result for tree"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * function to get node by info of the selected file\/folder\n   *\n   * @param array $t  info of the file\/folder selected\n   * @param array $cfg  config of the file\/folder to create result for tree\n   * @return array\n   *\/"
        },
        "getType": {
            "name": "getType",
            "summary": "function to get a type by a code",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getType(string $code): array\n  {\n    $o = self::getOptionsObject();\n    return $o->option($code, 'types', 'ide', 'appui');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 949,
            "endLine": 953,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getType",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "code given to retrieve its type"
                }
            ],
            "doc": {
                "description": "function to get a type by a code\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code",
                        "description": "code given to retrieve its type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * function to get a type by a code\n   *\n   * @param string $code  code given to retrieve its type\n   * @return array\n   *\/"
        },
        "getIcon": {
            "name": "getIcon",
            "summary": "function to get a icon of a type",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIcon(string $code): string\n  {\n    $type = $this->getType($code);\n    if (!empty($type['icon'])) {\n      return $type['icon'];\n    }\n    return '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 961,
            "endLine": 968,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getIcon",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "code given to retrieve its icon"
                }
            ],
            "doc": {
                "description": "function to get a icon of a type\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code",
                        "description": "code given to retrieve its icon"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * function to get a icon of a type\n   *\n   * @param string $code  code given to retrieve its icon\n   * @return string\n   *\/"
        },
        "retrieveAllFiles": {
            "name": "retrieveAllFiles",
            "summary": "function to get all files by a path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function retrieveAllFiles(string $path, bool $onlydirs = false): array\n  {\n    if (!$this->fs->isDir($path)) {\n      throw new Exception(X::_('Invalid Path %s', $path));\n    }\n    return !empty($onlydirs) ? $this->fs->getDirs($path, false, 'tmce') : $this->fs->getFiles($path, true, false, false, 'tmce');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 977,
            "endLine": 983,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "retrieveAllFiles",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "path given to search files"
                },
                {
                    "name": "onlydirs",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "get files AND folders if it is true"
                }
            ],
            "doc": {
                "description": "function to get all files by a path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "path given to search files"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$onlydirs",
                        "description": "get files AND folders if it is true"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * function to get all files by a path\n   *\n   * @param string $path  path given to search files\n   * @param bool $onlydirs  get files AND folders if it is true\n   * @return array\n   *\/"
        },
        "retrieveComponentFiles": {
            "name": "retrieveComponentFiles",
            "summary": "function to get files refer to a component by a path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function retrieveComponentFiles(string $root, string $path, bool $onlydirs = false): array\n  {\n    return $this->fs->getDirs($root.$path, false, 'tmce');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 992,
            "endLine": 995,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "retrieveComponentFiles",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "root",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "path given to search files"
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "get files AND folders if it is true"
                },
                {
                    "name": "onlydirs",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "function to get files refer to a component by a path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "path given to search files"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$onlydirs",
                        "description": "get files AND folders if it is true"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * function to get files refer to a component by a path\n   *\n   * @param string $path  path given to search files\n   * @param bool $onlydirs  get files AND folders if it is true\n   * @return array\n   *\/"
        },
        "retrieveMvcFiles": {
            "name": "retrieveMvcFiles",
            "summary": "function to get files refer to a mvc by a path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function retrieveMvcFiles(string $root, string $path, bool $onlydirs = false): array\n  {\n    $currentTabs = $this->getType('mvc');\n    $todo = [];\n    if (!$this->fs->isDir($root)) {\n      throw new Exception(X::_('Invalid Root %s', $root));\n    }\n    if (!empty($currentTabs['tabs'])) {\n      foreach($currentTabs['tabs'] as $tab) {\n        if (empty($tab['fixed'])) {\n          $tmp = $root.$tab['path'].($path ? $path : '');\n          array_push(\n            $todo,\n            ...array_map(function($a) use ($tab) {\n              $a['tab'] = $tab['url'];\n              return $a;\n            }, !empty($onlydirs) ? $this->fs->getDirs($tmp, false, 'tmce') : $this->fs->getFiles($tmp, true, false, false, 'tmce'))\n          );\n        }\n      }\n    }\n    return $todo;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1005,
            "endLine": 1027,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "retrieveMvcFiles",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "root",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "adds"
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "path given to search files"
                },
                {
                    "name": "onlydirs",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "get files AND folders if it is true"
                }
            ],
            "doc": {
                "description": "function to get files refer to a mvc by a path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$root",
                        "description": "adds"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "path given to search files"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$onlydirs",
                        "description": "get files AND folders if it is true"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * function to get files refer to a mvc by a path\n   *\n   * @param string $root  adds\n   * @param string $path  path given to search files\n   * @param bool $onlydirs  get files AND folders if it is true\n   * @return array\n   *\/"
        },
        "getIdLang": {
            "name": "getIdLang",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIdLang()\n  {\n    return $this->id_langs;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1029,
            "endLine": 1032,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getIdLang",
            "returns": [],
            "arguments": []
        },
        "getLang": {
            "name": "getLang",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLang()\n  {\n    return $this->lang;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1035,
            "endLine": 1038,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLang",
            "returns": [],
            "arguments": []
        },
        "getId": {
            "name": "getId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getId()\n  {\n    return $this->id;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1041,
            "endLine": 1044,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getId",
            "returns": [],
            "arguments": []
        },
        "getCode": {
            "name": "getCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCode()\n  {\n    return $this->code;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1047,
            "endLine": 1050,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCode",
            "returns": [],
            "arguments": []
        },
        "getName": {
            "name": "getName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getName()\n  {\n    return $this->name;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1053,
            "endLine": 1056,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getName",
            "returns": [],
            "arguments": []
        },
        "getPaths": {
            "name": "getPaths",
            "summary": "function to get all path of the project and format each path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPaths(bool $withPath = false, bool $force = false): array\n  {\n    if ($force || !$this->pathInfo) {\n      $tree = $this->getFullTree();\n      $roots = $tree['path']['items'] ?: [];\n      $res = [];\n      foreach($roots as $root) {\n        $code = $root['code'] ?: $root['alias']['code'] ?: null;\n        if (!empty($root['items']) && defined(\"BBN_\".strtoupper($code).\"_PATH\")) {\n          $path = constant(\"BBN_\".strtoupper($code).\"_PATH\");\n          foreach($root['items'] as $option) {\n            $spath = $option['path'] ?? $option['alias']['path'] ?? $path;\n            if (!$spath) {\n              \/\/continue;\n              X::log([\"Project no path\", $code, $option]);\n              throw new Exception(X::_(\"No path in option for project for %s\", $option['code']));\n            }\n\n            $tmp = [\n              'id' => $option['id'],\n              'id_alias' => $option['id_alias'],\n              'parent_code' => $code,\n              'text' => $option['text'] ?: $option['alias']['text'],\n              'code' => $option['code'] ?: $option['alias']['code'],\n              'bcolor' => $option['bcolor'] ?? $option['alias']['bcolor'] ?? null,\n              'fcolor' => $option['fcolor'] ?? $option['alias']['fcolor'] ?? null,\n              'language' => $option['language'] ?? $option['alias']['language'] ?? BBN_LANG,\n              'alias' => $option['alias'],\n              'parent' => $path,\n              'path' => $spath === '\/' ? '\/' : $spath,\n              'id_option' => $option['id']\n            ];\n\n            $res[] = $tmp;\n          }\n        }\n      }\n\n      $this->pathInfo = $res;\n    }\n\n    if (!$withPath) {\n      $res = $this->pathInfo;\n      foreach($res as &$option) {\n        unset($option['parent']);\n        unset($option['path']);\n      }\n\n      unset($option);\n      return $res;\n    }\n\n    return $this->pathInfo;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1066,
            "endLine": 1119,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getPaths",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "withPath",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "ath  adds the full path to the results"
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "force update $this->pathInfo"
                }
            ],
            "doc": {
                "description": "function to get all path of the project and format each path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "ath  adds the full path to the results"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force",
                        "description": "force update $this->pathInfo"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * function to get all path of the project and format each path\n   *\n   * @param bool $withPath  adds the full path to the results\n   * @param bool $force  force update $this->pathInfo\n   * @return array\n   *\/"
        },
        "getPath": {
            "name": "getPath",
            "summary": "function to get a path by id",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPath(string $id, bool $withPath = false, bool $force = false): ?array\n  {\n    $paths = $this->getPaths($withPath, $force);\n    $row = X::getRow($paths, ['id' => $id]);\n    return $row ?: null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1129,
            "endLine": 1134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getPath",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "id of the path to get"
                },
                {
                    "name": "withPath",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "ath  adds the full path to the results"
                },
                {
                    "name": "force",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "force update $this->pathInfo"
                }
            ],
            "doc": {
                "description": "function to get a path by id\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "id of the path to get"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "ath  adds the full path to the results"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force",
                        "description": "force update $this->pathInfo"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * function to get a path by id\n   *\n   * @param string $id  id of the path to get\n   * @param bool $withPath  adds the full path to the results\n   * @param bool $force  force update $this->pathInfo\n   * @return array\n   *\/"
        },
        "getLangsIds": {
            "name": "getLangsIds",
            "summary": "Returns an array including the ids of the languages for which the project is configured or creates the options for the configured languages",
            "description": "( the arraay contains the id_alias of the options corresponding to the real option of the language)",
            "description_parts": [
                {
                    "type": "text",
                    "content": "( the arraay contains the id_alias of the options corresponding to the real option of the language)"
                }
            ],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLangsIds()\n  {\n    $ids = [];\n    $res = [];\n    \/\/ Why do we need to delete the cache here?\n    \/\/$this->options->deleteCache($this->id, true);\n    if ($this->check() && isset($this->id_langs)) {\n      if ($ids = array_keys($this->options->options($this->id_langs))) {\n        foreach ($ids as $i) {\n          if (!empty($this->options->alias($i))) {\n            $res[] = $this->options->alias($i);\n          }\n        }\n\n        return $res;\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1142,
            "endLine": 1161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLangsIds",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns an array including the ids of the languages for which the project is configured or creates the options for the configured languages\n( the arraay contains the id_alias of the options corresponding to the real option of the language)\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array including the ids of the languages for which the project is configured or creates the options for the configured languages\n   * ( the arraay contains the id_alias of the options corresponding to the real option of the language)\n   * @return array\n   *\/"
        },
        "getPrimariesLangs": {
            "name": "getPrimariesLangs",
            "summary": "Returns languages that have primary in cfg",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPrimariesLangs()\n  {\n    $uid_languages = $this->options->fromCode('languages', 'core', 'appui');\n    $languages     = $this->options->fullTree($uid_languages);\n    $primaries     = array_values(\n      array_filter(\n        $languages['items'],\n        function ($v) {\n          return !empty($v['primary']);\n        }\n      )\n    );\n    return $primaries ?: [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1169,
            "endLine": 1182,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getPrimariesLangs",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns languages that have primary in cfg\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns languages that have primary in cfg\n   *\n   * @return void\n   *\/"
        },
        "createsLangOptions": {
            "name": "createsLangOptions",
            "summary": "Creates the children of the option lang, if no arguments is given it uses the array of primaries languages",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createsLangOptions(array $langs = [])\n  {\n    if (empty($langs)) {\n      $primaries = $this->getPrimariesLangs();\n      $langs     = $primaries;\n    }\n    if (!empty($langs)) {\n      $res       = [];\n      foreach ($langs as $l) {\n        if ($id_opt = $this->options->add(\n          [\n            'text' => $l['text'],\n            'code' => $l['code'],\n            'id_parent' => $this->id_langs,\n            'id_alias' => $l['id'],\n          ]\n        )) {\n          $l['id'] = $id_opt;\n          $res[] = $l;\n        }\n      }\n\n      return $res;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1191,
            "endLine": 1215,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "createsLangOptions",
            "returns": [],
            "arguments": [
                {
                    "name": "langs",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Creates the children of the option lang, if no arguments is given it uses the array of primaries languages\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$langs"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates the children of the option lang, if no arguments is given it uses the array of primaries languages\n   *\n   * @param array $langs\n   * @return void\n   *\/"
        },
        "getRootPath": {
            "name": "getRootPath",
            "summary": "Gets the real root path from a repository's id as recorded in the options.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRootPath($rep): string\n  {\n    \/\/if only name else get info repository\n    $path       = '';\n    $repository = \\is_string($rep) ? $this->repositories[$rep] : $rep;\n    if ((!empty($repository)\n        && is_array($repository))\n      && !empty($repository['root'])\n      && X::hasProps($repository, ['path', 'root', 'code'], true)\n    ) {\n      if (strpos($repository['root'], '\/') === 0) {\n        $path = $repository['root'];\n      } else {\n        switch ($repository['root']) {\n          case 'app':\n            $path = $this->getAppPath();\n            break;\n          case 'lib':\n            $path  = $this->getLibPath();\n            $path .= $repository['path'];\n            if ($repository['alias_code'] === 'bbn-project') {\n              $path .= '\/src\/';\n            }\n            break;\n          case 'home':\n            if (!defined('BBN_HOME_PATH')) {\n              throw new Exception(X::_(\"BBN_HOME_PATH is not defined\"));\n            }\n\n            $path  = constant('BBN_HOME_PATH');\n            $path .= $repository['path'];\n            if ($repository['alias_code'] === 'bbn-project') {\n              $path .= '\/src\/';\n            }\n            break;\n            case 'cdn':\n            $path = $this->getCdnPath();\n            $path .= $repository['path'];\n            break;\n          case 'data':\n            $path = $this->getDataPath();\n            $path .= $repository['path'];\n            break;\n        }\n      }\n    }\n\n    if (!is_string($path)) {\n      throw new Exception(X::_(\"Impossible to determine the path for %s (root: %s -> %s)\", $rep, $repository['root'] ?? X::_('Unknown'), $this->getAppPath()));\n    }\n\n    if ($path && substr($path, -1) !== '\/') {\n      $path .= '\/';\n    }\n\n    return $path;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1224,
            "endLine": 1280,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getRootPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "rep",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The repository's name (code) or the repository's configuration"
                }
            ],
            "doc": {
                "description": "Gets the real root path from a repository's id as recorded in the options.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$repository",
                        "description": "The repository's name (code) or the repository's configuration"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the real root path from a repository's id as recorded in the options.\n   *\n   * @param string|array $repository The repository's name (code) or the repository's configuration\n   * @return string\n   *\/"
        },
        "getAppPath": {
            "name": "getAppPath",
            "summary": "Gets the app path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAppPath(): ?string\n  {\n    if (!$this->appPath) {\n      \/\/ Current project\n      if ($this->code === constant('BBN_APP_NAME')) {\n        $this->appPath = Mvc::getAppPath();\n      } else {\n        $envs = $this->options->fullOptions('env', $this->id);\n        if (empty($envs)) {\n          throw new Exception(X::_(\"Impossible to find environments for option %s (constant: %s = app name: %s)\", $this->id, constant('BBN_APP_NAME'), $this->code));\n        }\n\n        if ($env = X::getRow($envs, ['type' => constant('BBN_ENV')])) {\n          $this->appPath = $env['text'];\n          if (substr($this->appPath, -4) !== 'src\/') {\n            $this->appPath .= 'src\/';\n          }\n        }\n      }\n    }\n\n    return $this->appPath;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1288,
            "endLine": 1310,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getAppPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets the app path\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the app path\n   *\n   * @return string\n   *\/"
        },
        "getCdnPath": {
            "name": "getCdnPath",
            "summary": "Gets the CDN path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCdnPath(): string\n  {\n    if ($this->name === BBN_APP_NAME) {\n      if (defined('BBN_CDN_PATH')) {\n        return constant('BBN_CDN_PATH');\n      }\n    } elseif ($content = $this->getEnvironment()) {\n      return $content['app_path'] . 'src\/';\n    }\n\n    throw new \\Exception(X::_(\"Impossible to find the CDN path for %s\", $this->name));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1318,
            "endLine": 1329,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCdnPath",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets the CDN path\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the CDN path\n   *\n   * @return string\n   *\/"
        },
        "getLibPath": {
            "name": "getLibPath",
            "summary": "Gets the lib path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLibPath(): string\n  {\n    if ($this->name === BBN_APP_NAME) {\n      return Mvc::getLibPath();\n    } elseif ($content = $this->getEnvironment()) {\n      return $content['lib_path'] . 'bbn\\\/';\n    }\n\n    throw new Exception(X::_(\"Impossible to find the libraries path for %s\", $this->name));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1337,
            "endLine": 1346,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLibPath",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets the lib path\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the lib path\n   *\n   * @return string\n   *\/"
        },
        "getDataPath": {
            "name": "getDataPath",
            "summary": "Gets the data path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDataPath(string|null $plugin = null): string\n  {\n    if ($this->name === BBN_APP_NAME) {\n      return Mvc::getDataPath($plugin);\n    } elseif ($content = $this->getEnvironment()) {\n      $path = $content['data_path'];\n      if ($plugin) {\n        $path .= 'plugins\/' . $plugin . '\/';\n      }\n      return $path;\n    }\n\n    throw new \\Exception(X::_(\"Impossible to find the data path for %s\", $this->name));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1354,
            "endLine": 1367,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getDataPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the data path\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the data path\n   *\n   * @return string\n   *\/"
        },
        "getUserDataPath": {
            "name": "getUserDataPath",
            "summary": "Gets the data path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUserDataPath(string|null $plugin = null): string\n  {\n    if ($this->name === BBN_APP_NAME) {\n      return Mvc::getUserDataPath($plugin);\n    } elseif ($content = $this->getEnvironment()) {\n      $path = $content['data_path'];\n      if ($plugin) {\n        $path .= 'plugins\/' . $plugin . '\/';\n      }\n      return $path;\n    }\n\n    throw new \\Exception(X::_(\"Impossible to find the user path for %s\", $this->name));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1375,
            "endLine": 1388,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getUserDataPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the data path\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the data path\n   *\n   * @return string\n   *\/"
        },
        "getRepositories": {
            "name": "getRepositories",
            "summary": "Makes the repositories' configurations.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRepositories(string $project_name = ''): array\n  {\n    $cats         = [];\n    $repositories = [];\n    if (strlen($project_name) === 0) {\n      $project_name = $this->name;\n    }\n\n    $roots = $this->options->fullTree($this->options->fromCode('path', $project_name, 'list', 'project', 'appui'));\n    if (!empty($roots) && !empty($roots['items'])) {\n      $roots = $roots['items'];\n      foreach ($roots as $root) {\n        $paths = $this->options->fullTree($root['id']);\n        if (isset($paths['items']) && count($paths['items'])) {\n          foreach ($paths['items'] as $repository) {\n            if (empty($repository['id_alias'])) {\n              $this->log(['No id alias for repo', $repository, $project_name]);\n              continue;\n            }\n\n            $name = $paths['alias']['code'] . '\/' . $repository['code'];\n            if (!isset($cats[$repository['id_alias']])) {\n              if (isset($repository['alias'])) {\n                unset($repository['alias']['cfg']);\n                $cats[$repository['id_alias']] = $repository['alias'];\n              }\n            }\n\n            unset($repository['cfg']);\n            unset($repository['alias']);\n            $repositories[$name]               = $repository;\n            $repositories[$name]['title']      = $repository['text'];\n            $repositories[$name]['root']       = $paths['alias']['code'];\n            $repositories[$name]['name']       = $name;\n            $repositories[$name]['alias_code'] = $cats[$repository['id_alias']]['code'];\n            if (!empty($cats[$repository['id_alias']]['tabs'])) {\n              $repositories[$name]['tabs'] = $cats[$repository['id_alias']]['tabs'];\n            } elseif (!empty($cats[$repository['id_alias']]['extensions'])) {\n              $repositories[$name]['extensions'] = $cats[$repository['id_alias']]['extensions'];\n            } elseif (!empty($cats[$repository['id_alias']]['types'])) {\n              $repositories[$name]['types'] = $cats[$repository['id_alias']]['types'];\n            }\n\n            unset($repositories[$name]['alias']);\n          }\n        }\n      }\n    }\n\n    return $repositories;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1397,
            "endLine": 1447,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getRepositories",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "project_name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The repository's name (code)"
                }
            ],
            "doc": {
                "description": "Makes the repositories' configurations.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code",
                        "description": "The repository's name (code)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Makes the repositories' configurations.\n   *\n   * @param string $code The repository's name (code)\n   * @return array\n   *\/"
        },
        "repositoryById": {
            "name": "repositoryById",
            "summary": "Returns the repository object basing on the given id",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function repositoryById(string $id)\n  {\n    $idx = X::search($this->repositories, ['id' => $id]) ?: null;\n    if ($idx !== null) {\n      return $this->repositories[$idx];\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1456,
            "endLine": 1464,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "repositoryById",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the repository object basing on the given id\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the repository object basing on the given id\n   *\n   * @param string $id\n   * @return void\n   *\/"
        },
        "repository": {
            "name": "repository",
            "summary": "Gets a repository's configuration.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function repository($name)\n  {\n    if (\n      !empty($this->repositories)\n      && is_array($this->repositories)\n      && !empty(array_key_exists($name, $this->repositories))\n    ) {\n      return $this->repositories[$name];\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1473,
            "endLine": 1484,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "repository",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The repository's name (code)"
                }
            ],
            "doc": {
                "description": "Gets a repository's configuration.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code",
                        "description": "The repository's name (code)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets a repository's configuration.\n   *\n   * @param string $code The repository's name (code)\n   * @return array|bool\n   *\/"
        },
        "realToUrl": {
            "name": "realToUrl",
            "summary": "Returns the file's URL from the real file's path.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function realToUrl(string $file)\n  {\n    foreach ($this->repositories as $i => $d) {\n      $root = isset($d['root_path']) ? $d['root_path'] : $this->getRootPath($d['name']);\n      if (\n        $root\n        && (strpos($file, $root) === 0)\n      ) {\n        $rep = $i;\n        break;\n      }\n    }\n\n\n    if (isset($rep)) {\n      $res = $rep . '\/';\n      $bits = explode('\/', substr($file, \\strlen($root)));\n      $filename  = array_pop($bits);\n      $extension = Str::fileExt($filename);\n      $basename  = Str::fileExt($filename, 1)[0];\n      \/\/ MVC\n      if (!empty($d['tabs'])) {\n        \/\/ URL is interverted\n        if ($d['type'] === 'components') {\n          foreach ($d['tabs'] as $tab) {\n            foreach ($tab['extensions'] as $ext) {\n              if ($extension === $ext['ext']) {\n                $tab_path = $tab['url'];\n                break;\n              }\n            }\n\n            if (isset($tab_path)) {\n              break;\n            }\n          }\n        }\n        else {\n          $tab_path = array_shift($bits);\n        }\n\n        $res     .= implode('\/', $bits);\n        foreach ($d['tabs'] as $t) {\n          if (\n            empty($t['fixed'])\n            && ($t['path'] === $tab_path . '\/')\n          ) {\n            $res .= \"\/$filename\";\n            break;\n          }\n        }\n      }\n      \/\/ Normal file\n      else {\n        $res .= implode('\/', $bits) . '\/' . $basename . '.' . $extension;\n      }\n\n      return Str::parsePath($res);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1493,
            "endLine": 1554,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "realToUrl",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The real file's path"
                }
            ],
            "doc": {
                "description": "Returns the file's URL from the real file's path.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file",
                        "description": "The real file's path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the file's URL from the real file's path.\n   *\n   * @param string $file The real file's path\n   * @return bool|string\n   *\/"
        },
        "repositoryFromUrl": {
            "name": "repositoryFromUrl",
            "summary": "Returns the repository's name or object from an URL.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function repositoryFromUrl(string $url, bool $obj = false)\n  {\n    \/\/search repository\n    if (\n      is_array($this->repositories)\n      && count($this->repositories)\n    ) { \/\/if in url name of repository break loop\n      foreach ($this->repositories as $i => $d) {\n        if ((strpos($url, $i) === 0)) {\n          $repository = $i;\n          break;\n        }\n      }\n\n      \/\/if there is name repository or total info\n      if (!empty($repository)) {\n        return empty($obj) ? $repository : $this->repositories[$repository];\n      }\n    }\n\n    return false;\n    \/\/return $this->projects->repositoryFromUrl($url, $obj);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1565,
            "endLine": 1587,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "repositoryFromUrl",
            "returns": [],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "obj",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the repository's name or object from an URL.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$obj"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the repository's name or object from an URL.\n   *\n   * @param string $url\n   * @param bool   $obj\n   * @return bool|int|string\n   *\/"
        },
        "setProjectInfo": {
            "name": "setProjectInfo",
            "summary": "Defines the variables",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function setProjectInfo(string|null $id)\n  {\n    if ($o = $this->options->option($id ?: $this->id)) {\n      $cfg                = $this->options->getCfg($id ?: $this->id);\n      $this->name         = $o['text'];\n      $this->lang         = $cfg['i18n'] ?? '';\n      $this->code         = $o['code'];\n      $this->option       = $o;\n      $this->repositories = $this->getRepositories($o['code']);\n      \/\/$this->repositories = $this->getRepositories($o['text']);\n\n      \/\/the id of the child option 'lang' (children of this option are all languages for which the project is configured)\n      if (!$this->id_langs = $this->options->fromCode('lang', $id)) {\n        $this->setIdLangs();\n      }\n\n      \/\/the id of the child option 'path'\n      $this->id_path = $this->options->fromCode('path', $id) ?: null;\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1598,
            "endLine": 1620,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setProjectInfo",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Defines the variables\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$lang"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Defines the variables\n   *\n   * @param  $id\n   * @param string $name\n   * @param string $lang\n   * @return void\n   *\/"
        },
        "setIdLangs": {
            "name": "setIdLangs",
            "summary": "If the child option lang is not yet created it creates the option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Project.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function setIdLangs()\n  {\n    if (empty($this->id_langs)) {\n      $this->id_langs = $this->options->add(\n        [\n          'text' => 'Languages',\n          'code' => 'lang',\n          'id_parent' => $this->id,\n        ]\n      );\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1628,
            "endLine": 1639,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "setIdLangs",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "If the child option lang is not yet created it creates the option\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * If the child option lang is not yet created it creates the option\n   *\n   * @return void\n   *\/"
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        },
        "optionalInit": {
            "name": "optionalInit",
            "summary": "Returns the option's root ID for the current class based on {@link $option_root_code}",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function optionalInit(array|null $path = null)\n  {\n    if (!self::$optional_is_init) {\n      $opt = Option::getInstance();\n      $cls = false;\n      if (!$opt) {\n        throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n      }\n\n      if (!$path) {\n        $tmp = explode('\\\\', __CLASS__);\n        $cls = strtolower(end($tmp));\n        $path = [$cls, 'appui', 'plugins'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      \/\/X::ddump($path, self::$option_root_id);\n      if (!self::$option_root_id) {\n        if (empty($cls)) {\n          throw new Exception(\"Impossible to find the option \".json_encode($path).\" !!! for \".__CLASS__);\n        }\n\n        throw new Exception(\"Impossible to find the option $cls for \".__CLASS__);\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 41,
            "endLine": 68,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "optionalInit",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the option's root ID for the current class based on {@link $option_root_code}\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the option's root ID for the current class based on {@link $option_root_code}\n   *\n   * @return false|int\n   *\/"
        },
        "initOptionalGlobal": {
            "name": "initOptionalGlobal",
            "summary": "Sets only once all the constants used by the class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function initOptionalGlobal(Option $opt, array|null $path = null)\n  {\n    if (!self::$optional_is_init) {\n      if (!$path) {\n        $tmp                   = explode('\\\\', __CLASS__);\n        $cls                   = end($tmp);\n        $path                  = [$cls, 'appui'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      if (!self::$option_root_id) {\n        X::log(\"Impossible to find the option $cls for \".__CLASS__, 'errors');\n        return;\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 78,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "initOptionalGlobal",
            "returns": [],
            "arguments": [
                {
                    "name": "opt",
                    "position": 0,
                    "type": "bbn\\Appui\\Option",
                    "type_arr": [
                        "bbn\\Appui\\Option"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets only once all the constants used by the class.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Option",
                        "name": "$opt"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets only once all the constants used by the class.\n   *\n   * @param Option $opt\n   * @param array             $path\n   * @return void\n   *\/"
        },
        "initOptional": {
            "name": "initOptional",
            "summary": "Defines the options prop and launches the static init method.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initOptional(array|null $path = null)\n  {\n    $this->options = Option::getInstance();\n    if (!$this->options) {\n      throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n    }\n\n    self::initOptionalGlobal($this->options, $path);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 104,
            "endLine": 112,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initOptional",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Defines the options prop and launches the static init method.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Defines the options prop and launches the static init method.\n   *\n   * @param array $path\n   * @return void\n   *\/"
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionRoot()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 115,
            "endLine": 119,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionRoot",
            "returns": [],
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsObject(): Option\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 122,
            "endLine": 130,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsObject",
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionId(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fromCode(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 139,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionId",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns The option's ID of a category, i.e. direct children of option's root\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns The option's ID of a category, i.e. direct children of option's root\n   *\n   * @param string $code\n   * @return int|false\n   *\/"
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsIds(...$codes): array\n  {\n    $codes[] = self::getOptionRoot();\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...$codes),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 152,
            "endLine": 163,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsIds",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Undocumented function\n",
                "params": [],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Check it, it doesn't seem ok"
                }
            },
            "comments": "  \/**\n   * Undocumented function\n   *\n   * @todo Check it, it doesn't seem ok\n   * @return array\n   *\/"
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTree(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return ($tree = self::getOptionsObject()->fullTree(...$codes)) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 166,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTree",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTreeRef": {
            "name": "getOptionsTreeRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTreeRef(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return ($tree = self::getOptionsObject()->fullTreeRef(...$codes)) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 173,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTreeRef",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptions(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fullOptions(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 180,
            "endLine": 184,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptions",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getSimpleOptions": {
            "name": "getSimpleOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getSimpleOptions(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->options(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 187,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getSimpleOptions",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsRef": {
            "name": "getOptionsRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsRef(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fullOptionsRef(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 194,
            "endLine": 198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsRef",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOption(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->option(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 201,
            "endLine": 205,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOption",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValue(string|array $id, string $text = 'text', string $value = 'value', ...$additionalFields): array\n  {\n    if (is_string($id) && !Str::isUid($id)) {\n      $id = [$id];\n    }\n\n    if (is_array($id)) {\n      $id[] = self::getOptionRoot();\n    }\n\n    return $id ? self::getOptionsObject()->textValueOptions($id, $text, $value, ...$additionalFields) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 208,
            "endLine": 219,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTextValue",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": ""
                },
                {
                    "name": "additionalFields",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTextValueRef": {
            "name": "getOptionsTextValueRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValueRef(string|array $id, string $text = 'text', string $value = 'value', ...$additionalFields): array\n  {\n    if (is_string($id) && !Str::isUid($id)) {\n      $id = self::getOptionId($id);\n    }\n\n    return $id ? self::getOptionsObject()->textValueOptionsRef($id, $text, $value, ...$additionalFields) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 222,
            "endLine": 229,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTextValueRef",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": ""
                },
                {
                    "name": "additionalFields",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "cacheInit": {
            "name": "cacheInit",
            "summary": "Initializes the cache object, must be called in __construct",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheInit(): void\n  {\n    if ( \\is_null($this->cache_engine) ){\n      $this->cache_engine = CacheCls::getEngine();\n      $this->_cache_prefix = Str::encodeFilename(str_replace('\\\\', '\/', \\get_class($this)), true).'\/';\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 27,
            "endLine": 33,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheInit",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Initializes the cache object, must be called in __construct\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Initializes the cache object, must be called in __construct\n   *\n   * @return void\n   *\/"
        },
        "cacheCheck": {
            "name": "cacheCheck",
            "summary": "Throws an exception if the cache has not been initialized",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheCheck(): void\n  {\n    if (!$this->cache_engine) {\n      throw new Exception(X::_(\"The cache object has not been initialized\"));\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 41,
            "endLine": 46,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheCheck",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Throws an exception if the cache has not been initialized\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Throws an exception if the cache has not been initialized\n   *\n   * @return void\n   *\/"
        },
        "_cache_name": {
            "name": "_cache_name",
            "summary": "Generates a name for the cache based on the class name and the method called - or a gievn string",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _cache_name($uid, $method = '', string $locale = ''): string\n  {\n    $uid  = (string)$uid;\n    $path = Str::isUid($uid) ? substr($uid, 0, 3).'\/'.substr($uid, 3, 3).'\/'.substr($uid, 6) : $uid;\n    return $this->_cache_prefix.$path.(empty($method) ? '' : '\/'.(string)$method).(empty($locale) ? '' : \"-$locale\");\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 57,
            "endLine": 62,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "_cache_name",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Generates a name for the cache based on the class name and the method called - or a gievn string\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "[type]",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Generates a name for the cache based on the class name and the method called - or a gievn string\n   *\n   * @param [type] $uid\n   * @param string $method\n   * @param string $locale\n   * @return string\n   *\/"
        },
        "cacheDeleteAll": {
            "name": "cacheDeleteAll",
            "summary": "Deletes all the cache related to the current class",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDeleteAll(): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_prefix);\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 70,
            "endLine": 75,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheDeleteAll",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Deletes all the cache related to the current class\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes all the cache related to the current class\n   *\n   * @return self\n   *\/"
        },
        "cacheDelete": {
            "name": "cacheDelete",
            "summary": "Deletes the given cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDelete(string $uid, string $method = ''): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_name($uid, $method));\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 85,
            "endLine": 90,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheDelete",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the given cache\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the given cache\n   *\n   * @param string $uid\n   * @param string $method\n   * @return self\n   *\/"
        },
        "cacheDeleteLocale": {
            "name": "cacheDeleteLocale",
            "summary": "Deletes the given cache for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDeleteLocale(string $uid, string $locale, string $method = ''): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_name($uid, $method, $locale));\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 101,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheDeleteLocale",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the given cache for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the given cache for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @return self\n   *\/"
        },
        "cacheGet": {
            "name": "cacheGet",
            "summary": "Gets the cached data",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGet(string $uid, string $method = ''): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->get($this->_cache_name($uid, $method));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 116,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheGet",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cached data\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cached data\n   *\n   * @param string $uid\n   * @param string $method\n   * @return mixed\n   *\/"
        },
        "cacheGetLocale": {
            "name": "cacheGetLocale",
            "summary": "Gets the cached data for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetLocale(string $uid, string $locale, string $method = ''): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->get($this->_cache_name($uid, $method, $locale));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 131,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetLocale",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cached data for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cached data for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @return mixed\n   *\/"
        },
        "cacheSet": {
            "name": "cacheSet",
            "summary": "Sets the cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheSet(string $uid, string $method = '', $data = null, int $ttl = 0): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->set($this->_cache_name($uid, $method), $data, $ttl);\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 147,
            "endLine": 152,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheSet",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the cache\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the cache\n   *\n   * @param string $uid\n   * @param string $method\n   * @param array|null $data\n   * @param integer $ttl\n   * @return self\n   *\/"
        },
        "cacheSetLocale": {
            "name": "cacheSetLocale",
            "summary": "Sets the cache for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheSetLocale(string $uid, string $locale, string $method = '', $data = null, int $ttl = 0): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->set($this->_cache_name($uid, $method, $locale), $data, $ttl);\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 165,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheSetLocale",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the cache for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the cache for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @param array|null $data\n   * @param integer $ttl\n   * @return self\n   *\/"
        },
        "cacheGetSet": {
            "name": "cacheGetSet",
            "summary": "Gets the cache or creates it if needs to",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetSet(callable $fn, string $uid, $method = '', int $ttl = 0): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->getSet($fn, $this->_cache_name($uid, $method), $ttl);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 182,
            "endLine": 186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetSet",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cache or creates it if needs to\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$fn"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cache or creates it if needs to\n   *\n   * @param callable $fn\n   * @param string $uid\n   * @param string $method\n   * @param integer $ttl\n   * @return mixed\n   *\/"
        },
        "cacheGetSetLocale": {
            "name": "cacheGetSetLocale",
            "summary": "Gets the cache for a specific locale or creates it if needs to",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetSetLocale(callable $fn, string $uid, string $locale, $method = '', int $ttl = 0): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->getSet($fn, $this->_cache_name($uid, $method, $locale), $ttl);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 199,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 3,
            "shortName": "cacheGetSetLocale",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cache for a specific locale or creates it if needs to\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$fn"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cache for a specific locale or creates it if needs to\n   *\n   * @param callable $fn\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @param integer $ttl\n   * @return mixed\n   *\/"
        },
        "cacheHas": {
            "name": "cacheHas",
            "summary": "Checks whether the cache exists and is valid",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheHas(string $uid, string $method = ''): bool\n  {\n    $this->cacheCheck();\n    return $this->cacheGet($uid, $method) ? true : false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 213,
            "endLine": 217,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheHas",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the cache exists and is valid\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the cache exists and is valid\n   *\n   * @param string $uid\n   * @param string $method\n   * @return boolean\n   *\/"
        },
        "cacheHasLocale": {
            "name": "cacheHasLocale",
            "summary": "Checks whether the cache exists and is valid",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Project",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheHasLocale(string $uid, string $locale, string $method = ''): bool\n  {\n    $this->cacheCheck();\n    return $this->cacheGetLocale($uid, $locale, $method) ? true : false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 227,
            "endLine": 231,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheHasLocale",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the cache exists and is valid\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the cache exists and is valid\n   *\n   * @param string $uid\n   * @param string $method\n   * @return boolean\n   *\/"
        }
    },
    "properties": {
        "fullTree": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Appui\\Project",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "id": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Appui\\Project",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "id_langs": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Appui\\Project",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "id_path": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Appui\\Project",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "projectInfo": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Appui\\Project",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "pathInfo": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Appui\\Project",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "appPath": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Appui\\Project",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "name": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Appui\\Project",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "lang": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Appui\\Project",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "code": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Appui\\Project",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "option": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Appui\\Project",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "repositories": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Appui\\Project",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "fs": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Appui\\Project",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "options": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "appui": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Appui\\Project",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "environments": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Appui\\Project",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": []
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Db"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Db",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "dbClass"
                    }
                ]
            },
            "parent": {
                "name": "db",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Db"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Db",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "dbClass"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "optional_is_init": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Set as true from the moment a first instance has been initiated and has defined the constants."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "option_root_id": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The ID of the root option"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_cache_prefix": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Cache",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "cache_engine": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Project"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Cache",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "environments": [],
        "optional_is_init": false,
        "option_root_id": null
    },
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "bbn\\X": "X",
        "bbn\\Str": "Str",
        "bbn\\Mvc": "Mvc",
        "bbn\\Db": "Db",
        "bbn\\Models\\Tts\\Optional": "Optional",
        "bbn\\Models\\Tts\\Cache": "Cache",
        "bbn\\Models\\Cls\\Db": "DbCls",
        "bbn\\Appui\\Url": "Url",
        "bbn\\Appui\\Option": "Option",
        "bbn\\File\\System": "System",
        "bbn\\File\\Dir": "Dir",
        "bbn\\Api\\Git": "Git"
    },
    "dummyComments": [
        "\/**\n * Created by PhpStorm.\n * User: BBN\n * Date: 14\/12\/2017\n * Time: 17:34\n *\/"
    ],
    "summary": "",
    "description": "",
    "description_parts": []
}