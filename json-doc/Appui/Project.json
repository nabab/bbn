{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Project",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/Appui\/Project.php",
    "startLine": 17,
    "endLine": 698,
    "numMethods": 31,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 1,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "environments": [],
        "id": null,
        "id_langs": null,
        "id_path": null,
        "appPath": null,
        "name": null,
        "lang": null,
        "code": null,
        "option": null,
        "repositories": null,
        "fs": null,
        "appui": null,
        "db": null,
        "errors": [],
        "error": false,
        "debug": false,
        "log": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Project",
    "contentConstructor": {
        "file": "bbn\\Appui\\Project",
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Construct the class Project",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db, string $id = NULL)\n  {\n    parent::__construct($db);\n    $this->options = bbn\\Appui\\Option::getInstance();\n    $this->fs      = new \\bbn\\File\\System();\n    if (\\bbn\\Str::isUid($id)) {\n      $this->id = $id;\n    } elseif (\\is_string($id)) {\n      $this->id = $this->options->fromCode($id, 'list', 'project', 'appui');\n    } elseif (defined('BBN_APP_NAME')) {\n      $this->id = $this->options->fromCode(BBN_APP_NAME, 'list', 'project', 'appui');\n    }\n\n    if (!empty($this->id)) {\n      $this->setProjectInfo($this->id);\n    }\n  }",
            "startLine": 51,
            "endLine": 67,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Db",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bbn\\Db $db)\n  {\n    $this->db = $db;\n  }",
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ]
            },
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "check": {
            "name": "check",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return parent::check() && !empty($this->id);\n  }",
            "startLine": 70,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 65,
                "endLine": 72,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getEnvironment": {
            "name": "getEnvironment",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($appPath = NULL)\n  {\n    if (!$appPath) {\n      $appPath = $this->getAppPath();\n    }\n\n    if (!$appPath) {\n      throw new \\Exception(X::_(\"No application path given\"));\n    }\n\n    $file_environment = $appPath . 'cfg\/environment';\n    if ($this->fs->isFile($file_environment . '.json')) {\n      $envs = \\json_decode($this->fs->getContents($file_environment . '.json'), true);\n    }\n    elseif ($this->fs->isFile($file_environment . '.yml')) {\n      try {\n        $envs = yaml_parse($this->fs->getContents($file_environment . '.yml'));\n      } catch (\\Exception $e) {\n        throw new \\Exception(\n          \"Impossible to parse the file $file_environment.yaml\"\n            . PHP_EOL . $e->getMessage()\n        );\n      }\n      if ($envs === false) {\n        throw new \\Exception(X::_(\"Impossible to parse the file $file_environment.yaml\"));\n      }\n    }\n\n    if (!empty($envs)) {\n      foreach ($envs as $env) {\n        if ($env['app_path'] === X::dirname($appPath) . '\/') {\n          return $env;\n        }\n      }\n    }\n\n    return null;\n  }",
            "startLine": 76,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "appPath",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "changeProjectLang": {
            "name": "changeProjectLang",
            "summary": "Change the value of the property i18n on the option of the project",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $lang)\n  {\n    if ($cfg = $this->options->getCfg($this->id)) {\n      $cfg['i18n'] = $lang;\n      $this->lang  = $lang;\n      $success     = $this->options->setCfg($this->id, $cfg);\n      $this->options->deleteCache($this->id, true);\n      return $success;\n    }\n\n    return false;\n  }",
            "startLine": 122,
            "endLine": 133,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "lang",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getProjectInfo": {
            "name": "getProjectInfo",
            "summary": "Returns the main infos of the given project",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->id) {\n      return [\n        'path' => $this->getPaths(),\n        'langs' => $this->getLangsIds(),\n        'id' => $this->id,\n        'lang' => $this->getLang(),\n        'name' => $this->getName()\n      ];\n    }\n\n    return [];\n  }",
            "startLine": 142,
            "endLine": 155,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getIdLang": {
            "name": "getIdLang",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->id_langs;\n  }",
            "startLine": 158,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getLang": {
            "name": "getLang",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->lang;\n  }",
            "startLine": 164,
            "endLine": 167,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getId": {
            "name": "getId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->id;\n  }",
            "startLine": 170,
            "endLine": 173,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getName": {
            "name": "getName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->name;\n  }",
            "startLine": 176,
            "endLine": 179,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getPaths": {
            "name": "getPaths",
            "summary": "Returns an array containing about the repositories in  the project",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $paths = [];\n    if ($this->check() && $this->id_path && !empty($this->repositories)) {\n      foreach ($this->repositories as $rep) {\n        $paths[] = [\n          'id_option' => $rep['id'],\n          'path' => $this->getRootPath($rep['name']),\n          'code' => $rep['code'],\n          'text' => $rep['text'],\n          'language' => $rep['language'] ?? ''\n        ];\n      }\n    }\n\n    return $paths;\n  }",
            "startLine": 187,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getLangsIds": {
            "name": "getLangsIds",
            "summary": "Returns an array including the ids of the languages for which the project is configured or creates the options for the configured languages",
            "description": "( the arraay contains the id_alias of the options corresponding to the real option of the language)",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>( the arraay contains the id_alias of the options corresponding to the real option of the language)<\/p>"
                }
            ],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $ids = [];\n    $res = [];\n    $this->options->deleteCache($this->id, true);\n    if ($this->check() && isset($this->id_langs)) {\n      if ($ids = array_keys($this->options->options($this->id_langs))) {\n        foreach ($ids as $i) {\n          if (!empty($this->options->alias($i))) {\n            $res[] = $this->options->alias($i);\n          }\n        }\n\n        return $res;\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 211,
            "endLine": 229,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getPrimariesLangs": {
            "name": "getPrimariesLangs",
            "summary": "Returns languages that have primary in cfg",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $uid_languages = $this->options->fromCode('languages', 'i18n', 'appui');\n    $languages     = $this->options->fullTree($uid_languages);\n    $primaries     = array_values(\n      array_filter(\n        $languages['items'],\n        function ($v) {\n          return !empty($v['primary']);\n        }\n      )\n    );\n    return $primaries ?: [];\n  }",
            "startLine": 237,
            "endLine": 250,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "createsLangOptions": {
            "name": "createsLangOptions",
            "summary": "Creates the children of the option lang, if no arguments is given it uses the array of primaries languages",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $langs = [])\n  {\n    if (empty($langs)) {\n      $primaries = $this->getPrimariesLangs();\n      $langs     = $primaries;\n    }\n    if (!empty($langs)) {\n      $res       = [];\n      foreach ($langs as $l) {\n        if ($id_opt = $this->options->add(\n          [\n            'text' => $l['text'],\n            'code' => $l['code'],\n            'id_parent' => $this->id_langs,\n            'id_alias' => $l['id'],\n          ]\n        )) {\n          $l['id'] = $id_opt;\n          $res[] = $l;\n        }\n      }\n\n      return $res;\n    }\n  }",
            "startLine": 259,
            "endLine": 283,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "langs",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "getRootPath": {
            "name": "getRootPath",
            "summary": "Gets the real root path from a repository's id as recorded in the options.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($rep)\n  {\n    \/\/if only name else get info repository\n    $path       = '';\n    $repository = \\is_string($rep) ? $this->repositories[$rep] : $rep;\n    if ((!empty($repository)\n        && is_array($repository))\n      && !empty($repository['root'])\n      && X::hasProps($repository, ['path', 'root', 'code'], true)\n    ) {\n      if (strpos($repository['root'], '\/') === 0) {\n        $path = $repository['root'];\n      } else {\n        switch ($repository['root']) {\n          case 'app':\n            $path = $this->getAppPath();\n            break;\n          case 'lib':\n            $path  = $this->getLibPath();\n            $path .= $repository['path'];\n            if ($repository['alias_code'] === 'bbn-project') {\n              $path .= '\/src\/';\n            }\n            break;\n          case 'cdn':\n            $path = $this->getCdnPath();\n            $path .= $repository['path'];\n            break;\n          case 'data':\n            $path = $this->getDataPath();\n            $path .= $repository['path'];\n            break;\n        }\n      }\n    }\n\n    if (!is_string($path)) {\n      throw new \\Exception(X::_(\"Impossible to determine the path for %s\", $rep));\n    }\n\n    if ($path && substr($path, -1) !== '\/') {\n      $path .= '\/';\n    }\n\n    return $path;\n  }",
            "startLine": 292,
            "endLine": 337,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "rep",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The repository's name (code) or the repository's configuration"
                }
            ]
        },
        "getAppPath": {
            "name": "getAppPath",
            "summary": "Gets the app path",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->appPath) {\n      \/\/ Current project\n      if ($this->name === BBN_APP_NAME) {\n        $this->appPath = bbn\\Mvc::getAppPath();\n      } else {\n        $envs = $this->options->fullOptions('env', $this->id);\n        if (empty($envs)) {\n          throw new \\Exception(X::_(\"Impossible to find environments for option %s\", $this->id));\n        }\n\n        if ($env = X::getRow($envs, ['type' => BBN_ENV])) {\n          $this->appPath = $env['text'];\n          if (substr($this->appPath, -4) !== 'src\/') {\n            $this->appPath .= 'src\/';\n          }\n        }\n      }\n    }\n\n    return $this->appPath;\n  }",
            "startLine": 345,
            "endLine": 367,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getCdnPath": {
            "name": "getCdnPath",
            "summary": "Gets the CDN path",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->name === BBN_APP_NAME) {\n      if (defined('BBN_CDN_PATH')) {\n        return BBN_CDN_PATH;\n      }\n    } elseif ($content = $this->getEnvironment()) {\n      return $content['app_path'] . 'src\/';\n    }\n\n    throw new \\Exception(X::_(\"Impossible to find the CDN path for %s\", $this->name));\n  }",
            "startLine": 375,
            "endLine": 386,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getLibPath": {
            "name": "getLibPath",
            "summary": "Gets the lib path",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->name === BBN_APP_NAME) {\n      return \\bbn\\Mvc::getLibPath();\n    } elseif ($content = $this->getEnvironment()) {\n      return $content['lib_path'] . 'bbn\\\/';\n    }\n\n    throw new \\Exception(X::_(\"Impossible to find the libraries path for %s\", $this->name));\n  }",
            "startLine": 394,
            "endLine": 403,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getDataPath": {
            "name": "getDataPath",
            "summary": "Gets the data path",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin = NULL)\n  {\n    if ($this->name === BBN_APP_NAME) {\n      return \\bbn\\Mvc::getDataPath($plugin);\n    } elseif ($content = $this->getEnvironment()) {\n      $path = $content['data_path'];\n      if ($plugin) {\n        $path .= 'plugins\/' . $plugin . '\/';\n      }\n      return $path;\n    }\n\n    throw new \\Exception(X::_(\"Impossible to find the data path for %s\", $this->name));\n  }",
            "startLine": 411,
            "endLine": 424,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getUserDataPath": {
            "name": "getUserDataPath",
            "summary": "Gets the data path",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin = NULL)\n  {\n    if ($this->name === BBN_APP_NAME) {\n      return \\bbn\\Mvc::getUserDataPath($plugin);\n    } elseif ($content = $this->getEnvironment()) {\n      $path = $content['data_path'];\n      if ($plugin) {\n        $path .= 'plugins\/' . $plugin . '\/';\n      }\n      return $path;\n    }\n\n    throw new \\Exception(X::_(\"Impossible to find the user path for %s\", $this->name));\n  }",
            "startLine": 432,
            "endLine": 445,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getRepositories": {
            "name": "getRepositories",
            "summary": "Makes the repositories' configurations.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $project_name = '')\n  {\n    $cats         = [];\n    $repositories = [];\n    if (strlen($project_name) === 0) {\n      $project_name = $this->name;\n    }\n\n    $roots = $this->options->fullTree($this->options->fromCode('path', $project_name, 'list', 'project', 'appui'));\n    if (!empty($roots) && !empty($roots['items'])) {\n      $roots = $roots['items'];\n      foreach ($roots as $root) {\n        $paths = $this->options->fullTree($root['id']);\n        if (isset($paths['items']) && count($paths['items'])) {\n          foreach ($paths['items'] as $repository) {\n            if (empty($repository['id_alias'])) {\n              $this->log(['No id alias for repo', $repository, $project_name]);\n              continue;\n            }\n\n            $name = $paths['code'] . '\/' . $repository['code'];\n            if (!isset($cats[$repository['id_alias']])) {\n              if (isset($repository['alias'])) {\n                unset($repository['alias']['cfg']);\n                $cats[$repository['id_alias']] = $repository['alias'];\n              }\n            }\n\n            unset($repository['cfg']);\n            unset($repository['alias']);\n            $repositories[$name]               = $repository;\n            $repositories[$name]['title']      = $repository['text'];\n            $repositories[$name]['root']       = $paths['code'];\n            $repositories[$name]['name']       = $name;\n            $repositories[$name]['alias_code'] = $cats[$repository['id_alias']]['code'];\n            if (!empty($cats[$repository['id_alias']]['tabs'])) {\n              $repositories[$name]['tabs'] = $cats[$repository['id_alias']]['tabs'];\n            } elseif (!empty($cats[$repository['id_alias']]['extensions'])) {\n              $repositories[$name]['extensions'] = $cats[$repository['id_alias']]['extensions'];\n            } elseif (!empty($cats[$repository['id_alias']]['types'])) {\n              $repositories[$name]['types'] = $cats[$repository['id_alias']]['types'];\n            }\n\n            unset($repositories[$name]['alias']);\n          }\n        }\n      }\n    }\n\n    return $repositories;\n  }",
            "startLine": 454,
            "endLine": 504,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "project_name",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The repository's name (code)"
                }
            ]
        },
        "repositoryById": {
            "name": "repositoryById",
            "summary": "Returns the repository object basing on the given id",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    $idx = \\bbn\\X::find($this->repositories, ['id' => $id]) ?: '';\n    if ($idx !== null) {\n      return $this->repositories[$idx];\n    }\n\n    return [];\n  }",
            "startLine": 513,
            "endLine": 521,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "repository": {
            "name": "repository",
            "summary": "Gets a repository's configuration.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name)\n  {\n    if (\n      !empty($this->repositories)\n      && is_array($this->repositories)\n      && !empty(array_key_exists($name, $this->repositories))\n    ) {\n      return $this->repositories[$name];\n    }\n\n    return false;\n  }",
            "startLine": 530,
            "endLine": 541,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The repository's name (code)"
                }
            ]
        },
        "realToUrl": {
            "name": "realToUrl",
            "summary": "Returns the file's URL from the real file's path.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $file)\n  {\n    foreach ($this->repositories as $i => $d) {\n      $root = isset($d['root_path']) ? $d['root_path'] : $this->getRootPath($d['name']);\n      if (\n        $root\n        && (strpos($file, $root) === 0)\n      ) {\n        $rep = $i;\n        break;\n      }\n    }\n\n\n    if (isset($rep)) {\n      X::log([561, $file, $rep, $root], 'real');\n      $res = $rep . '\/';\n      $bits = explode('\/', substr($file, \\strlen($root)));\n      $filename  = array_pop($bits);\n      $extension = \\bbn\\Str::fileExt($filename);\n      $basename  = \\bbn\\Str::fileExt($filename, 1)[0];\n      \/\/ MVC\n      if (!empty($d['tabs'])) {\n        \/\/ URL is interverted\n        if ($d['type'] === 'components') {\n          foreach ($d['tabs'] as $tab) {\n            foreach ($tab['extensions'] as $ext) {\n              if ($extension === $ext['ext']) {\n                $tab_path = $tab['url'];\n                break;\n              }\n            }\n\n            if (isset($tab_path)) {\n              break;\n            }\n          }\n        }\n        else {\n          $tab_path = array_shift($bits);\n          X::log([$tab_path, $bits], 'real');\n        }\n\n        $res     .= implode('\/', $bits);\n        foreach ($d['tabs'] as $t) {\n          if (\n            empty($t['fixed'])\n            && ($t['path'] === $tab_path . '\/')\n          ) {\n            $res .= \"\/$filename\";\n            break;\n          }\n        }\n      }\n      \/\/ Normal file\n      else {\n        $res .= implode('\/', $bits) . '\/' . $basename . '.' . $extension;\n      }\n\n      return \\bbn\\Str::parsePath($res);\n    }\n\n    return false;\n  }",
            "startLine": 550,
            "endLine": 613,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The real file's path"
                }
            ]
        },
        "repositoryFromUrl": {
            "name": "repositoryFromUrl",
            "summary": "Returns the repository's name or object from an URL.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Project",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $url, bool $obj = false)\n  {\n    \/\/search repository\n    if (\n      is_array($this->repositories)\n      && count($this->repositories)\n    ) { \/\/if in url name of repository break loop\n      foreach ($this->repositories as $i => $d) {\n        if ((strpos($url, $i) === 0)) {\n          $repository = $i;\n          break;\n        }\n      }\n\n      \/\/if there is name repository or total info\n      if (!empty($repository)) {\n        return empty($obj) ? $repository : $this->repositories[$repository];\n      }\n    }\n\n    return false;\n    \/\/return $this->projects->repositoryFromUrl($url, $obj);\n  }",
            "startLine": 623,
            "endLine": 645,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "obj",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 51,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 51,
                "endLine": 58,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->error;\n  }",
            "startLine": 86,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 86,
                "endLine": 89,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 92,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 92,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 98,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 98,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 115,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 115,
                "endLine": 126,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 132,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 132,
                "endLine": 135,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 142,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 142,
                "endLine": 145,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": {
        "environments": []
    },
    "constants": null,
    "summary": "",
    "description": "",
    "description_parts": []
}