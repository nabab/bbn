{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\I18n",
    "namespace": true,
    "realName": "I18n",
    "realNamespace": "bbn\\Appui",
    "traits": [
        "bbn\\Models\\Tts\\Optional",
        "bbn\\Models\\Tts\\DbActions",
        "bbn\\Appui\\I18n\\Api"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/I18n.php",
    "startLine": 34,
    "endLine": 1874,
    "numMethods": 116,
    "numProperties": 37,
    "numConstants": 0,
    "numStaticProperties": 6,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Cache",
    "isSubclassOf": false,
    "defaultProperties": {
        "extensions": [
            "js",
            "json",
            "php",
            "html"
        ],
        "hashAlgo": "sha512",
        "default_class_cfg": {
            "table": "bbn_i18n",
            "tables": {
                "i18n": "bbn_i18n",
                "i18n_exp": "bbn_i18n_exp"
            },
            "arch": {
                "i18n": {
                    "id": "id",
                    "exp": "exp",
                    "lang": "lang",
                    "hash": "hash"
                },
                "i18n_exp": {
                    "id": "id",
                    "id_exp": "id_exp",
                    "lang": "lang",
                    "expression": "expression"
                }
            }
        },
        "optional_is_init": false,
        "option_root_id": null,
        "apis": {
            "libretranslate": "LibreTranslate"
        },
        "parser": null,
        "translations": [],
        "user": null,
        "options": null,
        "idProject": null,
        "poLoader": null,
        "moGenerator": null,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": [],
        "_isInitClassCfg": false,
        "fields": null,
        "class_cfg": null,
        "class_table": null,
        "class_table_index": null,
        "rootFilterCfg": [],
        "dbTraitFilterCfg": [],
        "dbTraitRelations": [],
        "dbTraitStructure": [],
        "api": null,
        "apiUrl": "https:\/\/localhost",
        "apiPort": "",
        "apiSourceLang": "en",
        "apiTargetLang": "fr",
        "apiAlternatives": 0
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "I18n",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Initialize the class I18n",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(Db $db, string|null $code = null, array $api = [])\n  {\n    parent::__construct($db);\n    $this->initClassCfg();\n    $this->user    = User::getInstance();\n    $this->options = Option::getInstance();\n    if (empty($code) || ($code === 'options')) {\n      if (\\defined('BBN_APP_NAME')) {\n        $code = CONSTANT('BBN_APP_NAME');\n      }\n      else {\n        throw new Exception(X::_(\"The project's ID\/Code is mandatory\"));\n      }\n    }\n\n    $this->idProject = $code;\n    if ($code !== 'options') {\n      if (Str::isUid($code)) {\n        $code = $this->options->code($code);\n      }\n      else {\n        $this->idProject = $this->options->fromCode($code, 'list', 'project', 'appui');\n      }\n    }\n\n    if (empty($this->idProject)) {\n      throw new Exception(X::_(\"Project's ID not found for code %s\", $code));\n    }\n\n    $this->parser  = Translations::create($code);\n    $this->poLoader = new PoLoader();\n    $this->moGenerator = new MoGenerator();\n    $this->options->preventI18n();\n    $this->options->preventI18n(false);\n\n    if (!empty($api)) {\n      $this->initApi($api);\n    }\n  }",
            "parent": {
                "name": "__construct",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function __construct(protected bbn\\Db $db)\n  {\n    $this->cacher = bbn\\Cache::getEngine();\n    $this->_cache_prefix = str_replace('\\\\', '\/', \\get_class($this)).'\/';\n  }",
                "parent": false,
                "trait": false,
                "startLine": 29,
                "endLine": 33,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "__construct",
                "returns": [],
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "type_arr": [
                            "bbn\\Db"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "promoted": "protected"
                    }
                ]
            },
            "trait": false,
            "startLine": 87,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "promoted": "protected"
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "api",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Initialize the class I18n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "db"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Initialize the class I18n\n   *\n   * @param db\n   *\/"
        },
        "analyzePhp": {
            "name": "analyzePhp",
            "summary": "Returns the strings contained in the given php file",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function analyzePhp(string $file): array\n  {\n    $res = [];\n    $domain = $this->parser->getDomain();\n    $parser = Translations::create($domain);\n    $scanner = new PhpScanner($parser);\n    $scanner->setDefaultDomain($domain);\n    $scanner->setFunctions([\n      '_' => 'gettext'\n    ]);\n    try {\n      $scanner->scanFile($file);\n    }\n    catch (Exception $e) {\n      X::log([\n        'method' => 'analyzePhp',\n        'file' => $file,\n        'error' => $e->getMessage(),\n      ], 'i18n');\n    }\n\n    foreach ($parser->getIterator() as $tr){\n      $res[] = $tr->getOriginal();\n    }\n\n    $res = array_unique($res);\n    if (!empty($res)) {\n      $this->parser = $this->parser->mergeWith($parser);\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 134,
            "endLine": 165,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "analyzePhp",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the strings contained in the given php file\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the strings contained in the given php file\n   *\n   * @param string $file\n   * @return array\n   *\/"
        },
        "analyzeJs": {
            "name": "analyzeJs",
            "summary": "Returns the strings contained in the given js file",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function analyzeJs(string $file): array\n  {\n    $res = [];\n    $domain = $this->parser->getDomain();\n    $parser = Translations::create($domain);\n    $scanner = new JsScanner($parser);\n    $scanner->setDefaultDomain($domain);\n    $scanner->setFunctions([\n      '_' => 'gettext',\n      'bbn._' => 'gettext'\n    ]);\n    $code = file_get_contents($file);\n    try {\n      $scanner->scanFile($file);\n    }\n    catch (Exception $e) {\n      X::log([\n        'method' => 'analyzeJs',\n        'file' => $file,\n        'error' => $e->getMessage(),\n      ], 'i18n');\n    }\n\n    if (preg_match_all('\/`([^`]*)`\/', $code, $matches)) {\n      foreach ($matches[0] as $c){\n        try {\n          $scanner->scanString($c, $file);\n        }\n        catch (Exception $e) {\n          X::log([\n            'method' => 'analyzeJs',\n            'file' => $file,\n            'error' => $e->getMessage(),\n          ], 'i18n');\n        }\n      }\n    }\n\n    foreach ($parser->getIterator() as $tr){\n      $res[] = $tr->getOriginal();\n    }\n\n    $res = array_unique($res);\n    if (!empty($res)) {\n      $this->parser = $this->parser->mergeWith($parser);\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 174,
            "endLine": 222,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "analyzeJs",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the strings contained in the given js file\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the strings contained in the given js file\n   *\n   * @param string $file\n   * @return array\n   *\/"
        },
        "analyzeJson": {
            "name": "analyzeJson",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function analyzeJson(string $file): array\n  {\n    $res = [];\n    $domain = $this->parser->getDomain();\n    $parser = Translations::create($domain);\n    $scanner = new JsScanner($parser);\n    $scanner->setDefaultDomain($domain);\n    $scanner->setFunctions([\n      '_' => 'gettext',\n      'bbn._' => 'gettext'\n    ]);\n    try {\n      $scanner->scanFile($file);\n    }\n    catch (Exception $e) {\n      X::log([\n        'method' => 'analyzeJson',\n        'file' => $file,\n        'error' => $e->getMessage(),\n      ], 'i18n');\n    }\n\n    foreach ($parser->getIterator() as $tr){\n      $res[] = $tr->getOriginal();\n    }\n\n    $res = array_unique($res);\n    if (!empty($res)) {\n      $this->parser = $this->parser->mergeWith($parser);\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 225,
            "endLine": 257,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "analyzeJson",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "analyzeHtml": {
            "name": "analyzeHtml",
            "summary": "Returns the strings contained in the given html file",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function analyzeHtml(string $file): array\n  {\n    $res = [];\n    $code = file_get_contents($file);\n    if (!empty($code)) {\n      $code = trim($code);\n      if ((Str::fileExt($file) === 'php')\n        && str_starts_with($code, '<?php')\n      ) {\n        return $res;\n      }\n\n      $domain = $this->parser->getDomain();\n      $parser = Translations::create($domain);\n      $scanner = new PhpScanner($parser);\n      $scanner->setDefaultDomain($domain);\n      $scanner->setFunctions([\n        '_' => 'gettext',\n        'bbn._' => 'gettext'\n      ]);\n      try {\n        \/\/$scanner->scanString('<template>'.$code.'<\/template>', $file);\n        $scanner->scanString($code, $file);\n      }\n      catch (Exception $e) {\n        X::log([\n          'method' => 'analyzeHtml',\n          'file' => $file,\n          'error' => $e->getMessage(),\n        ], 'i18n');\n      }\n\n      foreach ($parser->getIterator() as $tr){\n        $res[] = $tr->getOriginal();\n      }\n\n      $res = array_unique($res);\n      if (!empty($res)) {\n        $this->parser = $this->parser->mergeWith($parser);\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 266,
            "endLine": 309,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "analyzeHtml",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the strings contained in the given html file\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the strings contained in the given html file\n   *\n   * @param string $file\n   * @return array\n   *\/"
        },
        "analyzeFile": {
            "name": "analyzeFile",
            "summary": "Returns the strings contained in the given file",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function analyzeFile(string $file): array\n  {\n    $res = [];\n    $ext = Str::fileExt($file);\n    if (\\in_array($ext, self::$extensions, true) && is_file($file)) {\n      switch ($ext){\n        case 'html':\n          $res = $this->analyzeHtml($file);\n          break;\n        case 'php':\n          $res = \\array_unique(\\array_merge($this->analyzePhp($file), $this->analyzeHtml($file)));\n          break;\n        case 'js':\n          $res = $this->analyzeJs($file);\n          break;\n        \/*case 'json':\n          $res = $this->analyzeJson($file);\n          break;*\/\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 318,
            "endLine": 340,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "analyzeFile",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the strings contained in the given file\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the strings contained in the given file\n   *\n   * @param string $file\n   * @return array\n   *\/"
        },
        "analyzeFolder": {
            "name": "analyzeFolder",
            "summary": "Returns an array containing the strings found in the given folder",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function analyzeFolder(string $folder = '.', bool $deep = false): array\n  {\n    $res = [];\n    if (\\is_dir($folder)) {\n      $files = $deep ? Dir::scan($folder, 'file') : Dir::getFiles($folder);\n      foreach ($files as $f){\n        $words = $this->analyzeFile($f);\n        foreach ($words as $word){\n          if (!isset($res[$word])) {\n            $res[$word] = [];\n          }\n\n          if (!in_array($f, $res[$word])) {\n            $res[$word][] = $f;\n          }\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 350,
            "endLine": 370,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "analyzeFolder",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "folder",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": ".",
                    "default_name": ""
                },
                {
                    "name": "deep",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array containing the strings found in the given folder\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$folder"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$deep"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array containing the strings found in the given folder\n   *\n   * @param string  $folder\n   * @param boolean $deep\n   * @return array\n   *\/"
        },
        "getParser": {
            "name": "getParser",
            "summary": "Returns the parser",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getParser()\n  {\n    return $this->parser;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 378,
            "endLine": 381,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getParser",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the parser\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the parser\n   *\n   * @return void\n   *\/"
        },
        "result": {
            "name": "result",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function result()\n  {\n    foreach ($this->parser->getIterator() as $tr){\n      $this->translations[] = $tr->getOriginal();\n    }\n\n    return array_unique($this->translations);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 384,
            "endLine": 391,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "result",
            "returns": [],
            "arguments": []
        },
        "getIdProject": {
            "name": "getIdProject",
            "summary": "get the id of the project from the id_option of a path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIdProject($id_option, $projects)\n  {\n    foreach($projects as $i => $p){\n      foreach ($projects[$i]['path'] as $idx => $pa){\n        if ($projects[$i]['path'][$idx]['id_option'] === $id_option) {\n          return $projects[$i]['id'];\n        }\n      }\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 401,
            "endLine": 410,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getIdProject",
            "returns": [],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "projects",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "get the id of the project from the id_option of a path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id_option"
                    },
                    {
                        "tag": "param",
                        "type": "$projects"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * get the id of the project from the id_option of a path\n   *\n   * @param $id_option\n   * @param $projects\n   * @return void\n   *\/"
        },
        "getPrimariesLangs": {
            "name": "getPrimariesLangs",
            "summary": "Gets primaries langs from option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPrimariesLangs(bool $onlyCodes = false): array\n  {\n    if ($languages = $this->options->fullOptions('languages', 'i18n', 'appui')) {\n      $res = array_values(\n        array_filter(\n          $languages, function ($v) {\n            return !empty($v['primary']);\n          }\n        )\n      );\n      return $onlyCodes ? \\array_map(fn($l) => $l['code'], $res) : $res;\n    }\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 418,
            "endLine": 431,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getPrimariesLangs",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "onlyCodes",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets primaries langs from option\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets primaries langs from option\n   *\n   * @return array\n   *\/"
        },
        "getNumOptions": {
            "name": "getNumOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNumOptions()\n  {\n    \/** @var array $paths takes all options with i18n property setted*\/\n    $paths = $this->options->findI18n(null, true);\n    $data = [];\n    \/**\n    * creates the property data_widget that will have just num of items found for the option + 1 (the text of the option parent), the * * number of strings translated and the source language indexed to the language\n    *\/\n    $primaries = $this->getPrimariesLangs();\n    foreach ($paths as $p => $val){\n      $parent = $this->options->getIdParent($paths[$p]['id']);\n      foreach ($primaries as $p) {\n        $lang = $p['code'];\n        $count = 0;\n        $items = $paths[$p]['items'];\n        \/** push the text of the option into the array of strings *\/\n        $items[] = [\n          'id' => $paths[$p]['id'],\n          'text' => $paths[$p]['text'],\n          'id_parent' => $parent\n        ];\n        foreach ($items as $idx => $item){\n          if (($id = $this->getId($item['text'], $paths[$p]['language']))\n            && $this->hasTranslation($id, $lang)\n          ) {\n            $count++;\n          }\n        }\n        $paths[$p]['data_widget']['result'][$lang] = [\n          'num' => count($items),\n          'num_translations' => $count,\n          'lang' => $lang\n        ];\n      }\n      $paths[$p]['data_widget']['locale_dirs'] = [];\n      unset($paths[$p]['items']);\n      $data[] = $paths[$p];\n    }\n    return [\n      'data' => $data\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 440,
            "endLine": 481,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getNumOptions",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": "",
                "deprecated": {
                    "tag": "deprecated",
                    "text": "get the num of items['text'] in original language and num translations foreach lang in configured langs (for this project uses all primaries as configured langs)"
                }
            },
            "comments": "  \/**\n   * @deprecated\n   * get the num of items['text'] in original language and num translations foreach lang in configured langs (for this project uses all primaries as configured langs)\n   *\n   * @return void\n   *\/"
        },
        "getNumOption": {
            "name": "getNumOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNumOption($id)\n  {\n    \/** @var array $paths takes all options with i18n property setted*\/\n    $paths = $this->options->findI18nOption($id);\n    $data  = [];\n    \/**\n    * creates the property data_widget that will have just num of items found for the option + 1 (the text of the option parent), the * * number of strings translated and the source language indexed to the language\n    *\/\n    $primaries = $this->getPrimariesLangs();\n    foreach ($paths as $p => $val){\n      $parent = $this->options->getIdParent($paths[$p]['id']);\n      foreach ($primaries as $p) {\n        $lang = $p['code'];\n        $count = 0;\n        $items = $paths[$p]['items'];\n        \/** push the text of the option into the array of strings *\/\n        $items[] = [\n          'id' => $paths[$p]['id'],\n          'text' => $paths[$p]['text'],\n          'id_parent' => $parent\n        ];\n        foreach ($items as $item){\n          if (($id = $this->getId($item['text'], $paths[$p]['language']))\n            && $this->hasTranslation($id, $lang)\n          ) {\n            $count ++;\n          }\n        }\n        $paths[$p]['data_widget']['result'][$lang] = [\n          'num' => count($items),\n          'num_translations' => $count,\n          'lang' => $lang\n        ];\n      }\n      $paths[$p]['data_widget']['locale_dirs'] = [];\n      unset($paths[$p]['items']);\n      $data[] = $paths[$p];\n    }\n    return [\n      'data' => $data\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 490,
            "endLine": 531,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getNumOption",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [],
                "return": "",
                "deprecated": {
                    "tag": "deprecated",
                    "text": "get the num of items['text'] in original language and num translations foreach lang in configured langs (for this project uses all primaries as configured langs)"
                }
            },
            "comments": "  \/**\n   * @deprecated\n   * get the num of items['text'] in original language and num translations foreach lang in configured langs (for this project uses all primaries as configured langs)\n   *\n   * @return void\n   *\/"
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getOptions()\n  {\n    \/** @var array $paths get all options having i18n property setted and its items *\/\n    $paths = $this->options->findI18n(null, true);\n    $res   = [];\n    foreach ($paths as $p => $val){\n      $res[$p] = [\n        'text' => $paths[$p]['text'],\n        'opt_language' => $paths[$p]['language'],\n        'strings' => [],\n        'id_option' => $paths[$p]['id']\n      ];\n\n      \/** @todo AT THE MOMENT I'M NOT CONSIDERING LANGUAGES OF TRANSLATION *\/\n      foreach ($paths[$p]['items'] as $i => $value){\n        \/* check if the opt text is in bbn_i18n and takes translations from db *\/\n        if ($exp = $this->get($paths[$p]['items'][$i]['text'], $paths[$p]['language'])) {\n          if ($translated = $this->getTranslations($exp['id'])) {\n            \/** @var array $languages the array of languages found in db for the options*\/\n            $languages      = [];\n            $translated_exp = '';\n            foreach ($translated as $trans){\n              if (!in_array($trans['lang'], $translated)) {\n                $languages[] = $trans['lang'];\n              }\n\n              $translated_exp = $trans['expression'];\n            }\n\n            if (!empty($languages)) {\n              foreach ($languages as $lang){\n                $res[$p]['strings'][] = [\n                  $lang => [\n                    'id_exp' => $exp['id'],\n                    'exp' => $exp['exp'],\n                    'translation_db' => $translated_exp\n                  ]\n                ];\n              }\n            }\n          }\n        }\n        else if ($id = $this->insert($paths[$p]['items'][$i]['text'], $paths[$p]['language'])) {\n          $this->insertTranslation($id, $paths[$p]['language'], $paths[$p]['items'][$i]['text']);\n          $res[$p]['strings'][] = [\n            $paths[$p]['language'] => [\n              'id_exp' => $id,\n              'exp' => $paths[$p]['items'][$i]['text'],\n              'translation_db' => $paths[$p]['items'][$i]['text']\n            ]\n          ];\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 540,
            "endLine": 596,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptions",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": "",
                "deprecated": {
                    "tag": "deprecated",
                    "text": "Gets the option with the property i18n setted and its items"
                }
            },
            "comments": "  \/**\n   * @deprecated\n   * Gets the option with the property i18n setted and its items\n   *\n   * @return void\n   *\/"
        },
        "getLanguage": {
            "name": "getLanguage",
            "summary": "Gets the propriety language of the option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLanguage($id_option)\n  {\n    return $this->options->getProp($id_option,'language');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 604,
            "endLine": 607,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getLanguage",
            "returns": [],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the propriety language of the option\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "id_option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the propriety language of the option\n   *\n   * @param id_option\n   *\/"
        },
        "getTranslationsWidget": {
            "name": "getTranslationsWidget",
            "summary": "Gets the widgets initial data",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTranslationsWidget(string $idOption): array\n  {\n    $result = [];\n    $localeDirs = [];\n    if (($o = $this->options->option($idOption))\n      && !empty($o['language'])\n    ) {\n      \/\/ @var $localeDir the path to locale dir\n      $localeDir = $this->getLocaleDirPath($idOption);\n      \/\/the txt file in the locale folder\n      $index = $this->getIndexPath($idOption);\n      \/\/the text of the option . the number written in the $index file\n      $domain = $o['text'].(is_file($index) ? file_get_contents($index) : '');\n      \/\/ @var array $languages dirs in locale folder\n      $languages = [];\n      if (is_dir($localeDir)) {\n        \/\/ @var $dirs scans dirs existing in locale folder for this path\n        $dirs = Dir::getDirs($localeDir) ?: [];\n        if (!empty($dirs)) {\n          foreach ($dirs as $l){\n            $languages[] = X::basename($l);\n          }\n        }\n      }\n\n      if (!empty($languages)) {\n        foreach ($languages as $lng){\n          \/\/ the root to file po & mo\n          $po = $localeDir.'\/'.$lng.'\/LC_MESSAGES\/'.$domain.'.po';\n          \/\/ if a file po already exists takes its content\n          if (is_file($po)) {\n            $localeDirs[] = $lng;\n            $numTranslations = 0;\n            if ($translations = $this->parsePoFile($po)) {\n              foreach ($translations as $tr) {\n                if ($tr->getMsgStr()) {\n                  $numTranslations++;\n                }\n              }\n\n              $result[$lng] = [\n                'num' => count($translations),\n                'num_translations' => $numTranslations,\n                'lang' => $lng,\n                'num_translations_db' => $this->countTranslationsDb($idOption) ? $this->countTranslationsDb($idOption)[$lng] : 0\n              ];\n            }\n          }\n          else {\n            $countTranslations = 0;\n            if ($ctd = $this->countTranslationsDb($idOption)) {\n              $countTranslations = $ctd[$lng] ?? 0;\n            }\n\n            $result[$lng] = [\n              'num' => 0,\n              'num_translations' => 0,\n              'lang' => $lng,\n              'num_translations_db' => $countTranslations\n            ];\n          }\n        }\n      }\n    }\n\n    $ret = [\n      'locale_dirs' => $localeDirs,\n      'result' => $result\n    ];\n    $this->cacheSet($idOption, 'get_translations_widget', $ret);\n    return $ret;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 616,
            "endLine": 687,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTranslationsWidget",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "idOption",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ption"
                }
            ],
            "doc": {
                "description": "Gets the widgets initial data\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "ption"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the widgets initial data\n   *\n   * @param string $idOption\n   * @return array\n   *\/"
        },
        "getOptionsTranslationsWidget": {
            "name": "getOptionsTranslationsWidget",
            "summary": "Gets the widgets initial data for options",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getOptionsTranslationsWidget(string $idPath): array\n  {\n    $result = [];\n    $languages = [];\n    if ($localeDir = $this->getLocaleDirPath($idPath)) {\n      $languages  = $this->getPrimariesLangs(true);\n      foreach ($languages as $lang) {\n        $count = 0;\n        $countDB = 0;\n        if (\\is_file(\"$localeDir\/$lang\/options.json\")) {\n          $options = \\json_decode(\\file_get_contents(\"$localeDir\/$lang\/options.json\"), true);\n          foreach ($options as $exp => $opt) {\n            if (!empty($opt['translation'])) {\n              $count++;\n            }\n            if (($id = $this->getId($exp, $opt['language']))\n              && $this->hasTranslation($id, $lang)\n            ) {\n              $countDB++;\n            }\n          }\n        }\n        $result[$lang] = [\n          'lang' => $lang,\n          'num' => !empty($options) ? count($options) : 0,\n          'num_translations' => $count,\n          'num_translations_db' => $countDB\n        ];\n      }\n    }\n    $ret = [\n      'locale_dirs' => $languages,\n      'result' => $result\n    ];\n    $this->cacheSet($idPath, 'get_options_translations_widget', $ret);\n    return $ret;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 697,
            "endLine": 733,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTranslationsWidget",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "idPath",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "project"
                }
            ],
            "doc": {
                "description": "Gets the widgets initial data for options\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "project"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the widgets initial data for options\n   *\n   * @param string $id_project\n   * @param string $id_option\n   * @return void\n   *\/"
        },
        "getPoFiles": {
            "name": "getPoFiles",
            "summary": "Returns an array containing the po files found for the id_option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPoFiles($id_option)\n  {\n    if (!empty($id_option) && ($o = $this->options->option($id_option))\n        && ($parent = $this->options->parent($id_option))\n        && defined($parent['code'])\n    ) {\n      $tmp = [];\n      \/\/ @var  $locale_dir locale dir in the path\n      $locale_dir = $this->getLocaleDirPath($id_option);\n      $dirs       = Dir::getDirs($locale_dir) ?: [];\n      $languages  = array_map(\n        function ($a) {\n          return X::basename($a);\n        }, $dirs\n      ) ?: [];\n      if (!empty($languages)) {\n        foreach ($languages as $lng){\n          \/\/ the path of po and mo files\n          $idx = $this->getIndexValue($id_option) ?: 1;\n          if (is_file($locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$o['text'].$idx.'.po')) {\n            $tmp[$lng] = $locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$o['text'].$idx.'.po';\n          }\n        }\n      }\n\n      return $tmp;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 742,
            "endLine": 769,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPoFiles",
            "returns": [],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array containing the po files found for the id_option\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id_option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array containing the po files found for the id_option\n   *\n   * @param $id_option\n   * @return array\n   *\/"
        },
        "countTranslationsDb": {
            "name": "countTranslationsDb",
            "summary": "Count how many of the strings contained in po files are already in database",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function countTranslationsDb(string $idOption): array\n  {\n    $count = [];\n    $po = $this->getPoFiles($idOption);\n    $sourceLanguage = $this->getLanguage($idOption);\n    if (!empty($po)) {\n      foreach ($po as $lang => $file) {\n        $fromPo = $this->parsePoFile($file);\n        $count[$lang] = 0;\n        foreach ($fromPo as $o) {\n          if (($exp = $o->getMsgId())\n            && ($id = $this->getIdByHash($this->hashText($exp), $sourceLanguage))\n            && $this->hasTranslation($id, $lang)\n          ) {\n            $count[$lang]++;\n          }\n        }\n      }\n    }\n\n    return $count;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 778,
            "endLine": 799,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "countTranslationsDb",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "idOption",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ption"
                }
            ],
            "doc": {
                "description": "Count how many of the strings contained in po files are already in database\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "ption"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Count how many of the strings contained in po files are already in database\n   *\n   * @param string $idOption\n   * @return array\n   *\/"
        },
        "get": {
            "name": "get",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function get(string $idOrExp, ?string $lang = null): ?array\n  {\n    if (Str::isUid($idOrExp)) {\n      return $this->db->rselect($this->class_table, [], [\n        $this->fields['id'] => $idOrExp\n      ]);\n    }\n\n    if (!empty($lang)) {\n      return $this->db->rselect($this->class_table, [], [\n        $this->fields['hash'] => $this->hashText($idOrExp),\n        $this->fields['lang'] => $lang\n      ]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 802,
            "endLine": 818,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "get",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "idOrExp",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getId": {
            "name": "getId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getId(string $exp, string $lang): ?string\n  {\n    return $this->getIdByHash($this->hashText($exp), $lang);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 821,
            "endLine": 824,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getId",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "exp",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getIdByHash": {
            "name": "getIdByHash",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIdByHash(string $hash, string $lang): ?string\n  {\n    return $this->db->selectOne($this->class_table, $this->fields['id'], [\n      $this->fields['hash'] => $hash,\n      $this->fields['lang'] => $lang\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 827,
            "endLine": 833,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getIdByHash",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "hash",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hasTranslation": {
            "name": "hasTranslation",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasTranslation(string $idExp, string $lang): bool\n  {\n    $clsCfg = $this->getClassCfg();\n    return (bool)$this->db->count($clsCfg['tables']['i18n_exp'], [\n      $clsCfg['arch']['i18n_exp']['id_exp'] => $idExp,\n      $clsCfg['arch']['i18n_exp']['lang'] => $lang\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 836,
            "endLine": 843,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "hasTranslation",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "idExp",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTranslation": {
            "name": "getTranslation",
            "summary": "Get an expression translation for the given language",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTranslation(string $idExpOrExp, ?string $originalLang = null, string $transLang): ?string\n  {\n    $clsCfg = $this->getClassCfg();\n    if (Str::isUid($idExpOrExp)) {\n      return $this->db->selectOne([\n        'table' => $clsCfg['tables']['i18n_exp'],\n        'fields' => [$clsCfg['arch']['i18n_exp']['expression']],\n        'where' => [\n          $clsCfg['arch']['i18n_exp']['id_exp'] => $idExpOrExp,\n          $clsCfg['arch']['i18n_exp']['lang'] => $transLang\n        ]\n      ]) ?: null;\n    }\n\n    return $this->db->selectOne([\n      'table' => $this->class_table,\n      'fields' => [$this->db->cfn($clsCfg['arch']['i18n_exp']['expression'], $clsCfg['tables']['i18n_exp'])],\n      'join' => [[\n        'table' => $clsCfg['tables']['i18n_exp'],\n        'on' => [\n          'conditions' => [[\n            'field' => $this->db->cfn($this->fields['id'], $this->class_table),\n            'exp' => $this->db->cfn($clsCfg['arch']['i18n_exp']['id_exp'], $clsCfg['tables']['i18n_exp'])\n          ], [\n            'field' => $this->db->cfn($clsCfg['arch']['i18n_exp']['lang'], $clsCfg['tables']['i18n_exp']),\n            'value' => $transLang\n          ]]\n        ]\n      ]],\n      'where' => [\n        $this->db->cfn($this->fields['hash'], $this->class_table) => $this->hashText($idExpOrExp),\n        $this->db->cfn($this->fields['lang'], $this->class_table) => $originalLang\n      ]\n    ]) ?: null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 853,
            "endLine": 887,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "getTranslation",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "idExpOrExp",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The expression to be translated"
                },
                {
                    "name": "originalLang",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ang The original expression's language"
                },
                {
                    "name": "transLang",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ang the language of the translation"
                }
            ],
            "doc": {
                "description": "Get an expression translation for the given language\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$expression",
                        "description": "The expression to be translated"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$original",
                        "description": "ang The original expression's language"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$trans",
                        "description": "ang the language of the translation"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Get an expression translation for the given language\n   * @param string $expression The expression to be translated\n   * @param string $originalLang The original expression's language\n   * @param string $transLang the language of the translation\n   * @return string|null\n   *\/"
        },
        "getTranslationId": {
            "name": "getTranslationId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTranslationId(string $idExp, string $lang): ?string\n  {\n    $clsCfg = $this->getClassCfg();\n    return $this->db->selectOne($clsCfg['tables']['i18n_exp'], $clsCfg['arch']['i18n_exp']['id'], [\n      $clsCfg['arch']['i18n_exp']['id_exp'] => $idExp,\n      $clsCfg['arch']['i18n_exp']['lang'] => $lang\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 890,
            "endLine": 897,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getTranslationId",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "idExp",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTranslations": {
            "name": "getTranslations",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTranslations(string $idExp): ?array\n  {\n    $clsCfg = $this->getClassCfg();\n    return $this->db->rselectAll($clsCfg['tables']['i18n_exp'], [], [\n      $clsCfg['arch']['i18n_exp']['id_exp'] => $idExp\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 900,
            "endLine": 906,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTranslations",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "idExp",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getNumTranslations": {
            "name": "getNumTranslations",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNumTranslations(string $idExp, ?string $originalLocale = ''): int\n  {\n    if (!Str::isUid($idExp) && !empty($originalLocale)) {\n      $idExp = $this->getId($idExp, $originalLocale);\n    }\n\n    if (Str::isUid($idExp)) {\n      $clsCfg = $this->getClassCfg();\n      return $this->db->count([\n        'table' => $clsCfg['tables']['i18n_exp'],\n        'fields' => [],\n        'where' => [\n          'conditions' => [[\n            'field' => $clsCfg['arch']['i18n_exp']['id_exp'],\n            'value' => $idExp\n          ], [\n            'field' => $clsCfg['arch']['i18n_exp']['expression'],\n            'operator' => 'isnotnull'\n          ]]\n        ]\n      ]);\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 909,
            "endLine": 933,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getNumTranslations",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "idExp",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "originalLocale",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "insert": {
            "name": "insert",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insert(string $exp, string $lang): ?string\n  {\n    if ($this->db->insert($this->class_table, [\n      $this->fields['exp'] => $this->normlizeText($exp),\n      $this->fields['lang'] => $lang\n    ])) {\n      return $this->db->lastId();\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 936,
            "endLine": 946,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "insert",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "exp",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "insertTranslation": {
            "name": "insertTranslation",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insertTranslation(string $idExp, string $lang, string $translation): int\n  {\n    $clsCfg = $this->getClassCfg();\n    return (int)$this->db->insertIgnore($clsCfg['tables']['i18n_exp'], [\n      $clsCfg['arch']['i18n_exp']['id_exp'] => $idExp,\n      $clsCfg['arch']['i18n_exp']['lang'] => $lang,\n      $clsCfg['arch']['i18n_exp']['expression'] => $this->normlizeText($translation)\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 949,
            "endLine": 957,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "insertTranslation",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "idExp",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "translation",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "updateTranslation": {
            "name": "updateTranslation",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateTranslation(string $idExp, string $lang, string $translation): int\n  {\n    $clsCfg = $this->getClassCfg();\n    return (int)$this->db->update($clsCfg['tables']['i18n_exp'], [\n      $clsCfg['arch']['i18n_exp']['expression'] => $this->normlizeText($translation)\n    ], [\n      $clsCfg['arch']['i18n_exp']['id_exp'] => $idExp,\n      $clsCfg['arch']['i18n_exp']['lang'] => $lang\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 960,
            "endLine": 969,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "updateTranslation",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "idExp",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "translation",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTranslationsStrings": {
            "name": "getTranslationsStrings",
            "summary": "Returns the strings contained in the given path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTranslationsStrings($id_option, $source_language, $languages)\n  {\n    if (!empty($id_option)\n        && !empty($source_language)\n        \/\/ @var string $to_explore The path to explore path of mvc\n        && ($to_explore = $this->getPathToExplore($id_option))\n        \/\/the position of locale dir\n        && ($locale_dir = $this->getLocaleDirPath($id_option))\n    ) {\n      \/\/creates the array $to_explore_dirs containing mvc, plugins e components\n      if ($to_explore_dirs = Dir::getDirs($to_explore)) {\n        $current_dirs = array_values(\n          array_filter(\n            $to_explore_dirs, function ($a) {\n              $basename = X::basename($a);\n              if(( strpos($basename, 'locale') !== 0 )\n                  && ( strpos($basename, 'data') !== 0 )\n                  && ( strpos($basename, '.') !== 0 )\n              ) {\n                return $a;\n              }\n            }\n          )\n        );\n      }\n\n      $res = [];\n\n      \/\/case of generate called from table\n      if (empty($languages)) {\n        \/** @var (array) $languages based on locale dirs found in the path*\/\n        $languages = array_map(\n          function ($a) {\n            return X::basename($a);\n          }, Dir::getDirs($locale_dir)\n        ) ?: [];\n      }\n\n      if (!empty($current_dirs)) {\n        foreach ($current_dirs as $c){\n          if ($ana = $this->analyzeFolder($c, true)) {\n            foreach ($ana as $exp => $an) {\n              if (!isset($res[$exp])) {\n                $res[$exp] = $an;\n              }\n              else {\n                $res[$exp] = array_merge($res[$exp], $an);\n              }\n            }\n          }\n        }\n      }\n\n      $news = [];\n      $done = 0;\n\n      foreach ($res as $r => $val){\n        \/\/ for each string create a property 'path' containing the files' name in which the string is contained\n\n        $res[$r] = ['path' => $val];\n\n        \/\/ checks if the table bbn_i18n of db already contains the string $r for this $source_lang\n        if (!($id = $this->getId($r, $source_language))) {\n          \/\/ if the string $r is not in 'bbn_i18n' inserts the string\n          $id = $this->insert($r, $source_language);\n        }\n\n        \/\/ create the property 'id_exp' for the string $r\n        $res[$r]['id_exp'] = $id;\n\n        \/\/ puts the string $r into the property 'original_exp' (I'll use only array_values at the end) *\n        $res[$r]['original_exp'] = $r;\n\n        \/\/ checks in 'bbn_i18n_exp' if the string $r already exist for this $source_lang\n        if (!$this->hasTranslation($id, $source_language)) {\n          \/\/ if the string $r is not in 'bbn_i18n_exp' inserts the string\n          \/\/  $done will be the number of strings found in the folder $to_explore that haven't been found in the table\n          \/\/ 'bbn_i18n_exp' of db, so $done is the number of new strings inserted in in 'bbn_i18n_exp'\n          $done += $this->insertTranslation($id, $source_language, $r);\n          \/\/creates an array of new strings found in the folder;\n          $news[] = $r;\n        }\n\n        \/\/ $languages is the array of languages existing in locale dir\n        foreach ($languages as $lng){\n          \/\/  create a property indexed to the code of $lng containing the string $r from 'bbn_i18n_exp' in this $lng\n          $res[$r][$lng] = (string)$this->getTranslation($id, null, $lng) ?: '';\n        }\n      }\n\n      return [\n        'news' => $news,\n        'id_option' => $id_option,\n        'res' => array_values($res),\n        'done' => $done,\n        'languages' => $languages,\n        'path' => $to_explore,\n        'success' => true\n      ];\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 980,
            "endLine": 1080,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "getTranslationsStrings",
            "returns": [],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "source_language",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "languages",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the strings contained in the given path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id_option"
                    },
                    {
                        "tag": "param",
                        "type": "$source_language"
                    },
                    {
                        "tag": "param",
                        "type": "$languages"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the strings contained in the given path\n   *\n   * @param $id_option\n   * @param $source_language\n   * @param $languages\n   * @return void\n   *\/"
        },
        "getTranslationsTableComplete": {
            "name": "getTranslationsTableComplete",
            "summary": "Returns the informations relative to traslation of the given $id_option of a $id_project. The data is formatted to be shown in a table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTranslationsTableComplete($id_project, $id_option)\n  {\n    if (!empty($id_option)\n        && ($o = $this->options->option($id_option))\n        && ($parent = $this->options->parent($id_option))\n        && defined($parent['code'])\n    ) {\n      \/\/ @var string $path_source_lang the property language of the id_option (the path)\n      $path_source_lang = $this->options->getProp($id_option, 'language');\n\n      $locale_dir = $this->getLocaleDirPath($id_option);\n\n      $languages = array_map(\n        function ($a) {\n          return X::basename($a);\n        }, Dir::getDirs($locale_dir)\n      ) ?: [];\n\n      $i       = 0;\n      $res     = [];\n      $project = new Project($this->db, $id_project);\n      if (!empty($languages)) {\n        $po_file = [];\n        $success = false;\n        foreach ($languages as $lng){\n          \/\/ the path of po and mo files\n          $idx = $this->getIndexValue($id_option) ?: 1;\n          $po  = $locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$o['text'].$idx.'.po';\n          $mo  = $locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$o['text'].$idx.'.mo';\n\n          \/\/ if the file po exist takes its content\n          if ($translations = $this->parsePoFile($po)) {\n            foreach ($translations as $i => $t){\n              \/\/ @var  $original the original expression\n              $original = $t->getMsgId();\n\n              $po_file[$i][$lng]['original'] = $original;\n\n              \/\/ the translation of the string found in the po file\n              $po_file[$i][$lng]['translations_po'] = $t->getMsgStr();\n\n              \/\/ @var  $id takes the id of the original expression in db\n              if ($id = $this->getId($original ,$path_source_lang)) {\n                $po_file[$i][$lng]['translations_db'] = $this->getTranslation($id, null, $lng);\n\n                \/\/ the id of the string\n                $po_file[$i][$lng]['id_exp'] = $id;\n\n                \/\/ @var (array) takes $paths of files in which the string was found from the file po\n                $paths = $t->getReference();\n\n                \/\/ get the url to use it for the link to ide from the table\n                foreach ($paths as $p){\n                  $po_file[$i][$lng]['paths'][] = $project->realToUrl($p);\n                }\n\n                \/\/ the number of times the strings is found in the files of the path\n                $po_file[$i][$lng]['occurrence'] = !empty($po_file[$i][$path_source_lang]) ? count($po_file[$i][$path_source_lang]['paths']) : 0;\n              };\n            }\n\n            $success = true;\n          }\n        }\n      }\n\n      return [\n        'path_source_lang' => $path_source_lang,\n        'path' => $o['text'],\n        'success' => $success,\n        'languages' => $languages,\n        'total' => count(array_values($po_file)),\n        'strings' => array_values($po_file),\n        'id_option' => $id_option,\n      ];\n    }\n\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1090,
            "endLine": 1167,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getTranslationsTableComplete",
            "returns": [],
            "arguments": [
                {
                    "name": "id_project",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "project"
                },
                {
                    "name": "id_option",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "Returns the informations relative to traslation of the given $id_option of a $id_project. The data is formatted to be shown in a table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "project"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the informations relative to traslation of the given $id_option of a $id_project. The data is formatted to be shown in a table\n   *\n   * @param string $id_project\n   * @param string $id_option\n   * @return void\n   *\/"
        },
        "getTranslationsTable": {
            "name": "getTranslationsTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTranslationsTable($id_project, $id_option): array\n  {\n    $ret = [];\n    if (!empty($id_option)\n      && ($o = $this->options->option($id_option))\n    ) {\n      \/\/ @var string $path_source_lang the property language of the id_option (the path) on the option\n      $path_source_lang = $this->options->getProp($id_option, 'language');\n      \/\/the path of the locale dirs\n      $locale_dir = $this->getLocaleDirPath($id_option);\n      $languages = array_map(fn($a) => X::basename($a), Dir::getDirs($locale_dir)) ?: [];\n      $res = [];\n      $project = new Project($this->db, $id_project);\n      $errors = [];\n      if (!empty($languages)) {\n        $po_file = [];\n        $success = false;\n        foreach ($languages as $lng) {\n          \/\/ the path of po and mo files\n          $index = $this->getIndexValue($id_option) ?: 1;\n          $po = $locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$o['text'].$index.'.po';\n          \/\/ if the file po exist takes its content\n          if ($translations = $this->parsePoFile($po)) {\n            foreach ($translations as $t) {\n              $id = null;\n              \/\/ @var string $original the original expression\n              if ($original = stripslashes($t->getMsgId())) {\n                $idx = X::search($res, ['exp' => $original]);\n                if (is_null($idx)) {\n                  $todo = true;\n                  $row  = [];\n                }\n                else {\n                  $todo = false;\n                  $row =& $res[$idx];\n                }\n\n                \/\/ the translation of the string found in the po file\n                if (isset($row['id_exp'])) {\n                  $id = $row['id_exp'];\n                }\n\n                \/\/ @var  $id takes the id of the original expression in db\n                if (!isset($id)\n                  && !($id = $this->getId($original, $path_source_lang))\n                ) {\n                  $id = $this->insert($original, $path_source_lang);\n                  if (!$id) {\n                    throw new Exception(\n                      sprintf(\n                        _(\"Impossible to insert the original string << %s >> in the original language %s\"),\n                        $this->normlizeText($original),\n                        $path_source_lang\n                      )\n                    );\n                  }\n                }\n\n                if ($id) {\n                  $row[$lng.'_po'] = stripslashes($t->getMsgStr());\n                  $row[$lng.'_db'] = $this->getTranslation($id, null, $lng) ?: '';\n                  if (!empty($row[$lng.'_po']) && empty($row[$lng.'_db'])) {\n                    if ($this->insertTranslation($id, $lng, $row[$lng.'_po'])) {\n                      $row[$lng.'_db'] = $row[$lng.'_po'];\n                    }\n                    else {\n                      throw new Exception(\n                      sprintf(\n                        _(\"Impossible to insert the expression \\\"%s\\\" in %s\"),\n                        $row[$lng.'_po'],\n                        $lng\n                      )\n                    );\n                    }\n                  }\n\n                  if ($todo) {\n                    $row['id_exp'] = $id;\n                    $row['paths'] = [];\n                    $row['exp'] = $original;\n                    \/\/ @var array takes $paths of files in which the string was found from the file po\n                    $paths = $t->getReference();\n\n                    \/\/ get the url to use it for the link to ide from the table\n                    foreach ($paths as $p) {\n                      $row['paths'][] = $project->realToUrl($p);\n                    }\n\n                    \/\/ the number of times the strings is found in the files of the path\n                    $row['occurrence'] = count($row['paths']);\n                    $res[] = $row;\n                  }\n                }\n                else {\n                  die(\"Error 2\");\n                }\n              }\n            }\n\n            $success = true;\n          }\n        }\n      }\n\n      $ret = [\n        'path_source_lang' => $path_source_lang,\n        'path' => $o['text'],\n        'success' => $success,\n        'languages' => $languages,\n        'total' => count(array_values($po_file)),\n        'strings' => $res,\n        'id_option' => $id_option,\n        'errors' => $errors\n      ];\n    }\n\n    $this->cacheSet($id_option, 'get_translations_table', $ret);\n    return $ret;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1170,
            "endLine": 1288,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getTranslationsTable",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id_project",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_option",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTranslationsTable": {
            "name": "getOptionsTranslationsTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getOptionsTranslationsTable(string $idPath): array\n  {\n    $ret = [];\n    if ($localeDir = $this->getLocaleDirPath($idPath)) {\n      $languages  = \\array_map(fn($a) => X::basename($a), Dir::getDirs($localeDir) ?: []);\n      $rows = [];\n      $primaryLanguages = $this->getPrimariesLangs();\n      foreach ($languages as $lang) {\n        if (\\is_file(\"$localeDir\/$lang\/options.json\")) {\n          $options = \\json_decode(\\file_get_contents(\"$localeDir\/$lang\/options.json\"), true);\n          foreach ($options as $exp => $opt) {\n            $idx = X::search($rows, ['exp' => $exp]);\n            if (\\is_null($idx)) {\n              if (!($idExp = $this->getId($exp, $opt['language']))) {\n                $idExp = $this->insert($exp, $opt['language']);\n                if (empty($idExp)) {\n                  $langText = X::getField($primaryLanguages, ['code' => $lang], 'text');\n                  throw new Exception(X::_('Impossible to insert the original string %s in the original language %s', $this->normlizeText($exp), $langText));\n                }\n              }\n\n              if (!empty($idExp)) {\n                if (!$this->hasTranslation($idExp, $opt['language'])) {\n                  $this->insertOrUpdateTranslation($idExp, $exp, $opt['language']);\n                }\n\n                if (!empty($opt['translation'])\n                  && !$this->hasTranslation($idExp, $lang)\n                ) {\n                  $this->insertOrUpdateTranslation($idExp, $opt['translation'], $lang);\n                }\n\n                $r = [\n                  'id_exp' => $idExp,\n                  'exp' => $this->normlizeText($exp),\n                  $opt['language'] . '_po' => $exp,\n                  $opt['language'] . '_db' => $this->getTranslation($idExp, null, $opt['language']) ?: '',\n                  'occurrence' => count($opt['paths']),\n                  'paths' => $opt['paths']\n                ];\n                if ($lang !== $opt['language']) {\n                  $r[$lang . '_po'] = $opt['translation'];\n                  $r[$lang . '_db'] = '';\n                }\n                $rows[] = $r;\n              }\n            }\n            else {\n              if (($idExp = $this->getId($exp, $opt['language']))) {\n                if (!empty($opt['translation'])\n                  && !$this->hasTranslation($idExp, $lang)\n                ) {\n                  $this->insertOrUpdateTranslation($idExp, $opt['translation'], $lang);\n                }\n              }\n              $rows[$idx][$lang . '_po'] = $opt['translation'];\n              $rows[$idx][$lang . '_db'] = $this->getTranslation($rows[$idx]['id_exp'], null, $lang) ?: '';\n            }\n          }\n        }\n      }\n      $ret = [\n        \/\/'path_source_lang' => $lang,\n        'path' => ($o = $this->options->text($idPath)),\n        'languages' => $languages,\n        'total' => count($rows),\n        'strings' => $rows,\n        'id_option' => $idPath\n      ];\n      $this->cacheSet($idPath, 'get_options_translations_table', $ret);\n    }\n    return $ret;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1291,
            "endLine": 1363,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTranslationsTable",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "idPath",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getNotTranslated": {
            "name": "getNotTranslated",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNotTranslated(string $idOption, string $lang): ?array\n  {\n    if (($o = $this->options->option($idOption))\n      && !empty($o['language'])\n    ) {\n      $index = $this->getIndexPath($idOption);\n      $domain = $o['text'].(is_file($index) ? file_get_contents($index) : '');\n      $po = $this->getLocaleDirPath($idOption).\"\/$lang\/LC_MESSAGES\/$domain.po\";\n      $res = [];\n      if (is_file($po)\n        && ($translations = $this->parsePoFile($po))\n      ) {\n        foreach ($translations as $tr) {\n          if (!$tr->getMsgStr()) {\n            $res[] = $tr->getMsgId();\n          }\n        }\n\n        return $res;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1366,
            "endLine": 1389,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getNotTranslated",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "idOption",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPathToExplore": {
            "name": "getPathToExplore",
            "summary": "Returns the path to explore relative to the given id_option",
            "description": "It only works if i18n class is constructed by giving the id_project",
            "description_parts": [
                {
                    "type": "text",
                    "content": "It only works if i18n class is constructed by giving the id_project"
                }
            ],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPathToExplore(string $id_option) :? String\n  {\n    if ($this->idProject) {\n      \/** @var Project *\/\n      $project = new Project($this->db, $this->idProject);\n      \/\/the repository\n      $rep = $project->repositoryById($id_option);\n\n      \/\/the root of this repositoryu\n      $path = $project->getRootPath($rep);\n      return $path;\n    }\n\n    return '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1399,
            "endLine": 1413,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPathToExplore",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "Returns the path to explore relative to the given id_option\nIt only works if i18n class is constructed by giving the id_project\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the path to explore relative to the given id_option\n   * It only works if i18n class is constructed by giving the id_project\n   *\n   * @param string $id_option\n   * @return String|null\n   *\/"
        },
        "getLocaleDirPath": {
            "name": "getLocaleDirPath",
            "summary": "Returns the path of the locale dir of the given $id_option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLocaleDirPath(string $id_option) : String\n  {\n    if ($path = $this->getPathToExplore($id_option)) {\n      if (!str_ends_with($path, '\/')) {\n        $path .= '\/';\n      }\n    }\n\n    return $path.'locale';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1422,
            "endLine": 1431,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getLocaleDirPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "Returns the path of the locale dir of the given $id_option\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the path of the locale dir of the given $id_option\n   *\n   * @param string $id_option\n   * @return String\n   *\/"
        },
        "getIndexPath": {
            "name": "getIndexPath",
            "summary": "Returns the path of the file index.txt inside the locale folder",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIndexPath(string $id_option): string\n  {\n    return $this->getLocaleDirPath($id_option).'\/index.txt';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1440,
            "endLine": 1443,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getIndexPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "Returns the path of the file index.txt inside the locale folder\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the path of the file index.txt inside the locale folder\n   *\n   * @param string $id_option\n   * @return string\n   *\/"
        },
        "getIndexValue": {
            "name": "getIndexValue",
            "summary": "Returns the version number contained in the index.txt file inside the folder locale or 0 if the file doesn't exists",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIndexValue(string $idPath): int\n  {\n    $indexPath = $this->getIndexPath($idPath);\n    return \\is_file($indexPath) ? (int)\\file_get_contents($indexPath) : 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1451,
            "endLine": 1455,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getIndexValue",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "idPath",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ath"
                }
            ],
            "doc": {
                "description": "Returns the version number contained in the index.txt file inside the folder locale or 0 if the file doesn't exists\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "ath"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the version number contained in the index.txt file inside the folder locale or 0 if the file doesn't exists\n   * @param string $idPath\n   * @return int\n   *\/"
        },
        "insertOrUpdateTranslation": {
            "name": "insertOrUpdateTranslation",
            "summary": "Inserts or updates an expression translation for the given language",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insertOrUpdateTranslation(string $idExp, string $expression, string $lang): bool\n  {\n    if ($this->hasTranslation($idExp, $lang)) {\n      if ($this->updateTranslation($idExp, $lang, $expression)) {\n        return true;\n      }\n    }\n    else if ($this->insertTranslation($idExp, $lang, $expression)) {\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1465,
            "endLine": 1477,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "insertOrUpdateTranslation",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "idExp",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "xp The original expression's ID"
                },
                {
                    "name": "expression",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The translated expression"
                },
                {
                    "name": "lang",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The translation language"
                }
            ],
            "doc": {
                "description": "Inserts or updates an expression translation for the given language\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "xp The original expression's ID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$expression",
                        "description": "The translated expression"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$lang",
                        "description": "The translation language"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Inserts or updates an expression translation for the given language\n   * @param string $idExp The original expression's ID\n   * @param string $expression The translated expression\n   * @param string $lang The translation language\n   * @return bool\n   *\/"
        },
        "deleteTranslation": {
            "name": "deleteTranslation",
            "summary": "Deletes an expression translation for the give language",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteTranslation(string $idExp, string $lang): bool\n  {\n    $clsCfg = $this->getClassCfg();\n    return (bool)$this->db->delete($clsCfg['tables']['i18n_exp'], [\n      $clsCfg['arch']['i18n_exp']['id_exp'] => $idExp,\n      $clsCfg['arch']['i18n_exp']['lang'] => $lang\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1486,
            "endLine": 1493,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "deleteTranslation",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "idExp",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "xp The original expression's ID"
                },
                {
                    "name": "lang",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The translation language"
                }
            ],
            "doc": {
                "description": "Deletes an expression translation for the give language\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "xp The original expression's ID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$lang",
                        "description": "The translation language"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes an expression translation for the give language\n   * @param string $idExp The original expression's ID\n   * @param string $lang The translation language\n   * @return bool\n   *\/"
        },
        "generateFiles": {
            "name": "generateFiles",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function generateFiles(string $idPath, array $languages = [], string $mode = 'files')\n  {\n    if (!\\in_array($mode, ['files', 'options'], true)) {\n      throw new Exception(X::_(\"No valid mode %s\", $mode));\n    }\n    \/\/ The position of locale directory\n    $localeDir = $this->getLocaleDirPath($idPath);\n    \/** @var (array) $languages based on locale dirs found in the path *\/\n    $currentLangs = array_map('basename', Dir::getDirs($localeDir) ?: []);\n    if (empty($languages)) {\n      $languages = $currentLangs;\n    }\n\n    if (empty($languages)) {\n      $languages = $this->getPrimariesLangs(true);\n    }\n\n    $fromAction = [];\n    if (!empty($languages)) {\n      if ($toRemove = \\array_diff($currentLangs, $languages)) {\n        foreach ($toRemove as $d) {\n          \\array_splice($currentLangs, \\array_search($d, $currentLangs, true), 1);\n          switch ($mode) {\n            case 'files':\n              Dir::delete(\"$localeDir\/$d\/LC_MESSAGES\");\n              Dir::delete(\"$localeDir\/$d\/$d.json\");\n              break;\n            case 'options':\n              Dir::delete(\"$localeDir\/$d\/options.json\");\n              break;\n          }\n          if (!Dir::getFiles(\"$localeDir\/$d\")) {\n            Dir::delete(\"$localeDir\/$d\");\n          }\n        }\n      }\n      if ($toCreate = \\array_diff($languages, $currentLangs)) {\n        foreach ($toCreate as $d) {\n          $languages[] = $d;\n        }\n      }\n      Dir::createPath($localeDir);\n      switch ($mode) {\n        case 'files':\n          $fromAction = $this->generateFilesPo($idPath, $languages);\n          $this->generateFilesMo($idPath, $languages);\n          break;\n        case 'options':\n          $this->importFromFilesOptions($idPath, $languages);\n          $fromAction = $this->generateFilesOptions($idPath, $languages);\n          break;\n      }\n    }\n    return \\array_merge([\n      'locale' => $localeDir,\n      'languages' => $languages,\n      'new_dir' => $toCreate,\n      'ex_dir' => $toRemove,\n      'path' => $this->getPathToExplore($idPath)\n    ], $fromAction);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1496,
            "endLine": 1556,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "generateFiles",
            "returns": [],
            "arguments": [
                {
                    "name": "idPath",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "languages",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "files",
                    "default_name": ""
                }
            ]
        },
        "hashText": {
            "name": "hashText",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hashText(string $exp): string\n  {\n    return hash(static::$hashAlgo, $this->normlizeText($exp));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1559,
            "endLine": 1562,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "hashText",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "exp",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "generateFilesPo": {
            "name": "generateFilesPo",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function generateFilesPo(string $idPath, array $languages): array\n  {\n    \/** @var string $domain The domain on which will be bound gettext *\/\n    $domain = $this->options->text($idPath);\n    \/\/ The position of locale directory\n    $localeDir = $this->getLocaleDirPath($idPath);\n    \/** @var string $indexPath *\/\n    $indexPath = $this->getIndexPath($idPath);\n    \/\/ The version number contained in the txt file inside the folder locale\n    $versionNumber = $this->getIndexValue($idPath);\n    \\file_put_contents($indexPath, ++$versionNumber);\n    $domain .= $versionNumber;\n    $parent = $this->options->parent($idPath);\n    \/** @var bool $json Will be true if some translations are put into a JSON file *\/\n    $json = false;\n    \/** @var array $toJSON *\/\n    $toJSON = [];\n    \/** @var array $data Takes all strings found in the files of this path *\/\n    $data = $this->getTranslationsStrings($idPath, $this->getLanguage($idPath), $languages);\n    if (!empty($data['res'])) {\n      \\clearstatcache();\n      foreach ($languages as $lang) {\n        \/** @var string $dir The path of locale dir for this id_option foreach lang *\/\n        $dir = \"$localeDir\/$lang\/LC_MESSAGES\";\n        \/** creates the path of the dirs *\/\n        Dir::createPath($dir);\n        $files = Dir::getFiles($dir);\n        foreach ($files as $f) {\n          $ext = Str::fileExt($f);\n          if (($ext === 'po') || ($ext === 'mo')) {\n            \\unlink($f);\n          }\n        }\n        \/\/ the new files\n        $poFile = \"$dir\/$domain.po\";\n        \/\/create the file at the given path\n        \\fopen($poFile, 'x');\n        \/\/instantiate the parser\n        $fileHandler  = new FileSystem($poFile);\n        $poParser     = new Parser($fileHandler);\n        $catalog      = Parser::parseFile($poFile);\n        $compiler     = new PoCompiler();\n        $headersClass = new Header();\n        if ($catalog->getHeaders()) {\n          \/\/headers for new po file\n          $headers = [\n            \"Project-Id-Version: 1\",\n            \"Report-Msgid-Bugs-To: info@bbn.solutions\",\n            \"last-Translator: BBN Solutions <support@bbn.solutions>\",\n            \"Language-Team: \".strtoupper($lang).' <'.strtoupper($lang).'@li.org>',\n            \"MIME-Version: 1.0\",\n            \"Content-Type: text\/plain; charset=UTF-8\",\n            \"Content-Transfer-Encoding: 8bit\",\n            \"POT-Creation-Date: \".date('Y-m-d H:iO'),\n            \"POT-Revision-Date: \".date('Y-m-d H:iO'),\n            \"Language: \".$lang,\n            \"X-Domain: \".$domain,\n            \"Plural-Forms: nplurals=2; plural=n != 1;\"\n          ];\n          \/\/set the headers on the Catalog object\n          $headersClass->setHeaders($headers);\n          $catalog->addHeaders($headersClass);\n        }\n        $constroot = 'BBN_'.strtoupper($parent['code']).'_PATH';\n        if (!defined($constroot)) {\n          X::log($this->options->option($idPath));\n          throw new Exception(\"Impossible to find the root for option, see Misc log\");\n        }\n        $root = constant($constroot);\n        foreach ($data['res'] as $index => $r) {\n          if (!$catalog->getEntry($r['original_exp'])) {\n            \/\/prepare the new entry for the Catalog\n            $entry = new Entry($r['original_exp'], $r[$lang]);\n            \/\/ set the reference for the entry\n            if (!empty($r['path'])) {\n              $entry->setReference($r['path']);\n              foreach($r['path'] as $path){\n                $name = '';\n                $ext = Str::fileExt($path);\n                if (($ext === 'js')\n                  || ($ext === 'php')\n                  || ($ext === 'html')\n                ) {\n                  $tmp = \\substr($path, \\strlen($root), -(\\strlen($ext) + 1));\n                  if (\\strpos($tmp, 'components') === 0) {\n                    $name = \\dirname($tmp);\n                  }\n                  elseif (\\strpos($tmp, 'mvc') === 0) {\n                    if (\\strpos($tmp, 'js\/') === 4) {\n                      $name = \\preg_replace('\/js\\\/\/', '', $tmp, 1);\n                    }\n                    else if (\\strpos($tmp, 'html\/') === 4) {\n                      $name = \\preg_replace('\/html\\\/\/', '', $tmp, 1);\n                    }\n                  }\n                  elseif ((\\strpos($tmp, 'plugins') === 0) && ($root === BBN_APP_PATH)) {\n                    continue;\n                  }\n                  elseif (\\strpos($tmp, 'bbn\/') === 0) {\n                    $optCode = $this->options->code($idPath);\n                    $tmp  = \\str_replace($optCode.'\/', '', \\substr($tmp, 4));\n                    if (\\strpos($tmp, 'components') === 4) {\n                      $final = \\str_replace(\\substr($tmp, 0,4), '', $tmp);\n                      $name = \\dirname($final);\n                    }\n                    elseif (\\strpos($tmp, 'mvc') === 4) {\n                      if ((\\strpos($tmp, 'js\/') !== 8)\n                        && (\\strpos($tmp, 'html\/') !== 8)\n                      ) {\n                        continue;\n                      }\n                      $final = \\str_replace(substr($tmp, 0, 4), '', $tmp);\n                      $name  = \\preg_replace(['\/js\\\/\/', '\/html\\\/\/'], '', $final, 1);\n                    }\n                  }\n                  if (empty($toJSON[$lang][$name])) {\n                    $toJSON[$lang][$name] = [];\n                  }\n                  \/\/array of all js files found in po file\n                  $toJSON[$lang][$name][$data['res'][$index]['original_exp']] = $data['res'][$index][$lang];\n                }\n              }\n            }\n            \/\/add the prepared entry to the catalog\n            $catalog->addEntry($entry);\n          }\n        }\n        \/\/compile the catalog\n        $file = $compiler->compile($catalog);\n        \/\/save the catalog in the file\n        $fileHandler->save($file);\n        \\clearstatcache();\n        if (!empty($toJSON[$lang])) {\n          $file_name = \"$localeDir\/$lang\/$lang.json\";\n          Dir::createPath(dirname($file_name));\n          \/\/ put the content of the array js_files in a json file\n          $json = (boolean)\\file_put_contents($file_name, \\json_encode($toJSON[$lang], JSON_PRETTY_PRINT));\n        }\n      }\n      \\clearstatcache();\n      $this->getTranslationsTable($this->idProject, $idPath);\n      $this->getTranslationsWidget($idPath);\n    }\n    return [\n      'json' => $json,\n      'no_strings' => empty($data['res'])\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1565,
            "endLine": 1712,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "generateFilesPo",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "idPath",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "languages",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "generateFilesOptions": {
            "name": "generateFilesOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function generateFilesOptions(string $idPath, array $languages): array\n  {\n    if (($localeDir = $this->getLocaleDirPath($idPath))\n      && !empty($languages)\n      && ($code = $this->options->code($idPath))\n    ) {\n      $toJSON = [];\n      $options = [];\n      if (($parent = $this->options->parent($idPath))\n        && ($parentCode = $this->options->code($parent['id']))\n      ) {\n        if (($parentCode === 'lib')\n          && (\\strpos($code, 'appui-') === 0)\n        ) {\n          if ($idOpt = $this->options->fromCode(\\preg_replace('\/appui-\/', '', $code, 1), 'appui')) {\n            $options = $this->options->findI18n($idOpt);\n          }\n        }\n        else if (($parentCode === 'app')\n          && ($code === 'main')\n          && ($allOptions = $this->options->fullOptions(false))\n        ) {\n          foreach ($allOptions as $o) {\n            if ($o['code'] === 'appui') {\n              $idAlias = $this->options->fromCode('plugin', 'list', 'templates', 'option', 'appui');\n              if ($appuiOptions = $this->options->fullOptions($o['id'])) {\n                foreach ($appuiOptions as $ao) {\n                  if ($ao['id_alias'] !== $idAlias) {\n                    $options = X::mergeArrays($options, $this->options->findI18n($ao['id']));\n                  }\n                }\n              }\n            }\n            else {\n              $options = X::mergeArrays($options, $this->options->findI18n($o['id']));\n            }\n          }\n        }\n      }\n      if (!empty($options)) {\n        foreach ($options as $opt) {\n          $codePath = $this->options->getCodePath($opt['id']);\n          $text = $this->options->rawText($opt['id']);\n          if ($codePath && !empty($text)) {\n            $codePath = \\implode('\/', \\array_reverse($codePath));\n            foreach ($languages as $lang) {\n              if (!isset($toJSON[$lang])) {\n                $toJSON[$lang] = [];\n              }\n              $t = $this->normlizeText($text);\n              if (!isset($toJSON[$lang][$t])) {\n                $toJSON[$lang][$t] = [\n                  'language' => $opt['language'],\n                  'paths' => [$codePath],\n                  'original' => $t,\n                  'translation' => $this->getTranslation($t, $opt['language'], $lang) ?: ''\n                ];\n              }\n              else if (!\\in_array($codePath, $toJSON[$lang][$t]['paths'])) {\n                $toJSON[$lang][$t]['paths'][] = $codePath;\n              }\n            }\n          }\n        }\n      }\n      foreach ($toJSON as $lang => $str) {\n        Dir::createPath(\"$localeDir\/$lang\");\n        \\file_put_contents(\"$localeDir\/$lang\/options.json\", \\json_encode($str, JSON_PRETTY_PRINT));\n      }\n      $this->getOptionsTranslationsTable($idPath);\n      $this->getOptionsTranslationsWidget($idPath);\n    }\n    return [\n      'json' => !empty($toJSON),\n      'no_strings' => empty($options)\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1715,
            "endLine": 1791,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "generateFilesOptions",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "idPath",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "languages",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "importFromFilesOptions": {
            "name": "importFromFilesOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function importFromFilesOptions(string $idPath, array $languages): bool\n  {\n    if (($localeDir = $this->getLocaleDirPath($idPath))\n      && !empty($languages)\n    ){\n      $imported = 0;\n      foreach ($languages as $lang) {\n        if (\\is_file(\"$localeDir\/$lang\/options.json\")\n          && ($translations = \\json_decode(\\file_get_contents(\"$localeDir\/$lang\/options.json\"), true))\n        ) {\n          foreach ($translations as $trans) {\n            if (!empty($trans['original']) && !empty($trans['language'])) {\n              if (!$idExp = $this->getId($trans['original'], $trans['language'])) {\n                $idExp = $this->insert($trans['original'], $trans['language']);\n              }\n\n              if (!empty($idExp)) {\n                if (!$this->hasTranslation($idExp, $trans['language'])) {\n                  $imported += $this->insertTranslation($idExp, $trans['language'], $trans['original']);\n                }\n\n                if (!empty($trans['translation'])\n                  && !$this->hasTranslation($idExp, $lang)\n                ) {\n                  $imported += $this->insertTranslation($idExp, $lang, $trans['translation']);\n                }\n              }\n            }\n          }\n        }\n      }\n      return !empty($imported);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1794,
            "endLine": 1828,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "importFromFilesOptions",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "idPath",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "languages",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "generateFilesMo": {
            "name": "generateFilesMo",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function generateFilesMo(string $idPath, array $languages): bool\n  {\n    if (($domain = $this->options->text($idPath))\n      && ($localeDir = $this->getLocaleDirPath($idPath))\n      && ($indexPath = $this->getIndexPath($idPath))\n      && !empty($languages)\n    ) {\n      $versionNumber = $this->getIndexValue($idPath) ?: 1;\n      $success = true;\n      foreach ($languages as $lang) {\n        $file = \"$localeDir\/$lang\/LC_MESSAGES\/$domain$versionNumber.\";\n        if (\\is_file($file.'mo')) {\n          \\unlink($file.'mo');\n        }\n        if (\\is_file($file.'po')\n          && ($translations = $this->poLoader->loadFile($file.'po'))\n          && !$this->moGenerator->generateFile($translations, $file.'mo')\n        ) {\n          $success = false;\n        }\n      }\n      return $success;\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1831,
            "endLine": 1855,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "generateFilesMo",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "idPath",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "languages",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "normlizeText": {
            "name": "normlizeText",
            "summary": "Returns a normalized version of the given text",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function normlizeText(string $text): string\n  {\n    return \\trim(\\normalizer_normalize(stripslashes($text)));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1863,
            "endLine": 1866,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "normlizeText",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "text",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a normalized version of the given text\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$text"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a normalized version of the given text\n   * @param string $text\n   * @return string\n   *\/"
        },
        "parsePoFile": {
            "name": "parsePoFile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function parsePoFile(string $file): array\n  {\n    return \\is_file($file) ? Parser::parseFile($file)->getEntries() : [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1869,
            "endLine": 1872,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "parsePoFile",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_cache_name": {
            "name": "_cache_name",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "\tprotected function _cache_name($uid, $method = '', string $locale = ''){\n    if ( is_array($uid) ){\n      $uid = md5(serialize($uid));\n    }\n    else if ( is_object($uid) ){\n      $uid = md5(json_encode($uid));\n    }\n\t\treturn $this->_cache_prefix.(string)$uid.\n\t\t\t(empty($method) ? '' : '-'.(string)$method).\n\t\t\t(empty($locale) ? '' : '-'.(string)$locale);\n\t}",
            "parent": {
                "name": "_cache_name",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "\tprotected function _cache_name($uid, $method = '', string $locale = ''){\n    if ( is_array($uid) ){\n      $uid = md5(serialize($uid));\n    }\n    else if ( is_object($uid) ){\n      $uid = md5(json_encode($uid));\n    }\n\t\treturn $this->_cache_prefix.(string)$uid.\n\t\t\t(empty($method) ? '' : '-'.(string)$method).\n\t\t\t(empty($locale) ? '' : '-'.(string)$locale);\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 35,
                "endLine": 45,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "_cache_name",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 2,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 35,
            "endLine": 45,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "_cache_name",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "cacheDeleteAll": {
            "name": "cacheDeleteAll",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheDeleteAll(){\n\t\t$this->cacher->deleteAll($this->_cache_prefix);\n\t\treturn $this;\n\t}",
            "parent": {
                "name": "cacheDeleteAll",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheDeleteAll(){\n\t\t$this->cacher->deleteAll($this->_cache_prefix);\n\t\treturn $this;\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 47,
                "endLine": 50,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "cacheDeleteAll",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 47,
            "endLine": 50,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheDeleteAll",
            "returns": [],
            "arguments": []
        },
        "cacheDelete": {
            "name": "cacheDelete",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheDelete($uid){\n\t\t$this->cacher->deleteAll($this->_cache_name($uid));\n\t\treturn $this;\n\t}",
            "parent": {
                "name": "cacheDelete",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheDelete($uid){\n\t\t$this->cacher->deleteAll($this->_cache_name($uid));\n\t\treturn $this;\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 52,
                "endLine": 55,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheDelete",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 52,
            "endLine": 55,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheDelete",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "cacheGet": {
            "name": "cacheGet",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheGet($uid, $method = '', $ttl = 0){\n\t\treturn $this->cacher->get($this->_cache_name($uid, $method), $ttl);\n\t}",
            "parent": {
                "name": "cacheGet",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheGet($uid, $method = '', $ttl = 0){\n\t\treturn $this->cacher->get($this->_cache_name($uid, $method), $ttl);\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 59,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheGet",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 57,
            "endLine": 59,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheGet",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheGetLocale": {
            "name": "cacheGetLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheGetLocale($uid, string $locale, $method = '', $ttl = 0){\n\t\treturn $this->cacher->get($this->_cache_name($uid, $method, $locale), $ttl);\n\t}",
            "parent": {
                "name": "cacheGetLocale",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheGetLocale($uid, string $locale, $method = '', $ttl = 0){\n\t\treturn $this->cacher->get($this->_cache_name($uid, $method, $locale), $ttl);\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 61,
                "endLine": 63,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheGetLocale",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 61,
            "endLine": 63,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetLocale",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheSet": {
            "name": "cacheSet",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheSet($uid, $method = '', $data = null, $ttl = 0){\n\t\t$this->cacher->set($this->_cache_name($uid, $method), $data, $ttl);\n\t\treturn $this;\n\t}",
            "parent": {
                "name": "cacheSet",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheSet($uid, $method = '', $data = null, $ttl = 0){\n\t\t$this->cacher->set($this->_cache_name($uid, $method), $data, $ttl);\n\t\treturn $this;\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 65,
                "endLine": 68,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheSet",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "data",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 65,
            "endLine": 68,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheSet",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheSetLocale": {
            "name": "cacheSetLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheSetLocale($uid, string $locale, $method = '', $data = null, $ttl = 0){\n\t\t$this->cacher->set($this->_cache_name($uid, $method, $locale), $data, $ttl);\n\t\treturn $this;\n\t}",
            "parent": {
                "name": "cacheSetLocale",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheSetLocale($uid, string $locale, $method = '', $data = null, $ttl = 0){\n\t\t$this->cacher->set($this->_cache_name($uid, $method, $locale), $data, $ttl);\n\t\treturn $this;\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 70,
                "endLine": 73,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 5,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheSetLocale",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "data",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 4,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 70,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheSetLocale",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheGetSet": {
            "name": "cacheGetSet",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheGetSet(callable $fn, $uid, $method = '', $ttl = 0){\n\t\t$cn = $this->_cache_name($uid, $method);\n\t\treturn $this->cacher->getSet($fn, $cn, $ttl);\n\t}",
            "parent": {
                "name": "cacheGetSet",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheGetSet(callable $fn, $uid, $method = '', $ttl = 0){\n\t\t$cn = $this->_cache_name($uid, $method);\n\t\treturn $this->cacher->getSet($fn, $cn, $ttl);\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 75,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheGetSet",
                "returns": [],
                "arguments": [
                    {
                        "name": "fn",
                        "position": 0,
                        "type": "callable",
                        "type_arr": [
                            "callable"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "uid",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 75,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetSet",
            "returns": [],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheGetSetLocale": {
            "name": "cacheGetSetLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheGetSetLocale(callable $fn, $uid, string $locale, $method = '', $ttl = 0){\n\t\t$cn = $this->_cache_name($uid, $method, $locale);\n\t\treturn $this->cacher->getSet($fn, $cn, $ttl);\n\t}",
            "parent": {
                "name": "cacheGetSetLocale",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheGetSetLocale(callable $fn, $uid, string $locale, $method = '', $ttl = 0){\n\t\t$cn = $this->_cache_name($uid, $method, $locale);\n\t\treturn $this->cacher->getSet($fn, $cn, $ttl);\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 80,
                "endLine": 83,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 5,
                "numberOfRequiredParameters": 3,
                "shortName": "cacheGetSetLocale",
                "returns": [],
                "arguments": [
                    {
                        "name": "fn",
                        "position": 0,
                        "type": "callable",
                        "type_arr": [
                            "callable"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "uid",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 2,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 4,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 80,
            "endLine": 83,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 3,
            "shortName": "cacheGetSetLocale",
            "returns": [],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheHas": {
            "name": "cacheHas",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheHas($uid, $method = '', $ttl = 0){\n\n    return $this->cacheGet($uid, $method, $ttl) ? true : false;\n  }",
            "parent": {
                "name": "cacheHas",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheHas($uid, $method = '', $ttl = 0){\n\n    return $this->cacheGet($uid, $method, $ttl) ? true : false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 85,
                "endLine": 88,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheHas",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 85,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheHas",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheHasLocale": {
            "name": "cacheHasLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheHasLocale($uid, string $locale, $method = '', $ttl = 0){\n\n    return $this->cacheGetLocale($uid, $locale, $method, $ttl) ? true : false;\n  }",
            "parent": {
                "name": "cacheHasLocale",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheHasLocale($uid, string $locale, $method = '', $ttl = 0){\n\n    return $this->cacheGetLocale($uid, $locale, $method, $ttl) ? true : false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 90,
                "endLine": 93,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheHasLocale",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 90,
            "endLine": 93,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheHasLocale",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 71,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        },
        "optionalInit": {
            "name": "optionalInit",
            "summary": "Returns the option's root ID for the current class based on {@link $option_root_code}",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function optionalInit(array|null $path = null)\n  {\n    if (!self::$optional_is_init) {\n      $opt = Option::getInstance();\n      $cls = false;\n      if (!$opt) {\n        throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n      }\n\n      if (!$path) {\n        $tmp = explode('\\\\', __CLASS__);\n        $cls = strtolower(end($tmp));\n        $path = [$cls, 'appui', 'plugins'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      \/\/X::ddump($path, self::$option_root_id);\n      if (!self::$option_root_id) {\n        if (empty($cls)) {\n          throw new Exception(\"Impossible to find the option \".json_encode($path).\" !!! for \".__CLASS__);\n        }\n\n        throw new Exception(\"Impossible to find the option $cls for \".__CLASS__);\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 41,
            "endLine": 68,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "optionalInit",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the option's root ID for the current class based on {@link $option_root_code}\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the option's root ID for the current class based on {@link $option_root_code}\n   *\n   * @return false|int\n   *\/"
        },
        "initOptionalGlobal": {
            "name": "initOptionalGlobal",
            "summary": "Sets only once all the constants used by the class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function initOptionalGlobal(Option $opt, array|null $path = null)\n  {\n    if (!self::$optional_is_init) {\n      if (!$path) {\n        $tmp                   = explode('\\\\', __CLASS__);\n        $cls                   = end($tmp);\n        $path                  = [$cls, 'appui'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      if (!self::$option_root_id) {\n        X::log(\"Impossible to find the option $cls for \".__CLASS__, 'errors');\n        return;\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 78,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "initOptionalGlobal",
            "returns": [],
            "arguments": [
                {
                    "name": "opt",
                    "position": 0,
                    "type": "bbn\\Appui\\Option",
                    "type_arr": [
                        "bbn\\Appui\\Option"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets only once all the constants used by the class.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Option",
                        "name": "$opt"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets only once all the constants used by the class.\n   *\n   * @param Option $opt\n   * @param array             $path\n   * @return void\n   *\/"
        },
        "initOptional": {
            "name": "initOptional",
            "summary": "Defines the options prop and launches the static init method.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initOptional(array|null $path = null)\n  {\n    $this->options = Option::getInstance();\n    if (!$this->options) {\n      throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n    }\n\n    self::initOptionalGlobal($this->options, $path);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 104,
            "endLine": 112,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initOptional",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Defines the options prop and launches the static init method.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Defines the options prop and launches the static init method.\n   *\n   * @param array $path\n   * @return void\n   *\/"
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionRoot()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 115,
            "endLine": 119,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionRoot",
            "returns": [],
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsObject(): Option\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 122,
            "endLine": 130,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsObject",
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionId(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fromCode(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 139,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionId",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns The option's ID of a category, i.e. direct children of option's root\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns The option's ID of a category, i.e. direct children of option's root\n   *\n   * @param string $code\n   * @return int|false\n   *\/"
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsIds(...$codes): array\n  {\n    $codes[] = self::getOptionRoot();\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...$codes),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 152,
            "endLine": 163,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsIds",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Undocumented function\n",
                "params": [],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Check it, it doesn't seem ok"
                }
            },
            "comments": "  \/**\n   * Undocumented function\n   *\n   * @todo Check it, it doesn't seem ok\n   * @return array\n   *\/"
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTree(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return ($tree = self::getOptionsObject()->fullTree(...$codes)) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 166,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTree",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTreeRef": {
            "name": "getOptionsTreeRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTreeRef(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return ($tree = self::getOptionsObject()->fullTreeRef(...$codes)) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 173,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTreeRef",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getSimpleOptions": {
            "name": "getSimpleOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getSimpleOptions(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->options(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 187,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getSimpleOptions",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsRef": {
            "name": "getOptionsRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsRef(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fullOptionsRef(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 194,
            "endLine": 198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsRef",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOption(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->option(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 201,
            "endLine": 205,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOption",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValue(string|array $id, string $text = 'text', string $value = 'value', ...$additionalFields): array\n  {\n    if (is_string($id) && !Str::isUid($id)) {\n      $id = [$id];\n    }\n\n    if (is_array($id)) {\n      $id[] = self::getOptionRoot();\n    }\n\n    return $id ? self::getOptionsObject()->textValueOptions($id, $text, $value, ...$additionalFields) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 208,
            "endLine": 219,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTextValue",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": ""
                },
                {
                    "name": "additionalFields",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTextValueRef": {
            "name": "getOptionsTextValueRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValueRef(string|array $id, string $text = 'text', string $value = 'value', ...$additionalFields): array\n  {\n    if (is_string($id) && !Str::isUid($id)) {\n      $id = self::getOptionId($id);\n    }\n\n    return $id ? self::getOptionsObject()->textValueOptionsRef($id, $text, $value, ...$additionalFields) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 222,
            "endLine": 229,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTextValueRef",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": ""
                },
                {
                    "name": "additionalFields",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbTraitExists": {
            "name": "dbTraitExists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitExists($filter): bool\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (!empty($cfg) && $this->db->count(\n      $this->class_table,\n      $this->dbTraitGetFilterCfg($cfg)\n    )) {\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 25,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array|string $id\n   * @return bool\n   *\/"
        },
        "dbTraitInsert": {
            "name": "dbTraitInsert",
            "summary": "Inserts a new row in the table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitInsert(array $data, bool $ignore = false): ?string\n  {\n    if ($data = $this->dbTraitPrepare($data)) {\n      $ccfg = $this->getClassCfg();\n      if (!empty($ccfg['arch'][$this->class_table_index]['cfg'])) {\n        $col = $ccfg['arch'][$this->class_table_index]['cfg'];\n        if (isset($data[$col])) {\n          $data[$col] = json_encode($data[$col]);\n        }\n      }\n\n      if ($this->db->{$ignore ? 'insertIgnore' : 'insert'}($ccfg['table'], $data)) {\n        return $this->db->lastId();\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 56,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitInsert",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ignore",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Inserts a new row in the table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Inserts a new row in the table.\n   *\n   * @param array $data\n   *\n   * @return string|null\n   *\/"
        },
        "dbTraitDelete": {
            "name": "dbTraitDelete",
            "summary": "Deletes a single row from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitDelete(string|array $filter, bool $cascade = false): bool\n  {\n    if ($this->dbTraitExists($filter)) {\n      $cfg = $this->getClassCfg();\n      $f = $cfg['arch'][$this->class_table_index];\n\n      if (!is_array($filter) && !empty($f['id'])) {\n        $filter = [$f['id'] => $filter];\n      }\n\n      return (bool)$this->db->delete($cfg['table'], $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 83,
            "endLine": 97,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitDelete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cascade",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes a single row from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a single row from the table through its id.\n   *\n   * @param string $id\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitUpdate": {
            "name": "dbTraitUpdate",
            "summary": "Updates a single row in the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitUpdate(string|array $filter, array $data): int\n  {\n    $ccfg = $this->getClassCfg();\n    $f = $ccfg['arch'][$this->class_table_index];\n    if (!is_array($filter)) {\n      $filter = [$f['id'] => $filter];\n    }\n\n    if (!$this->dbTraitExists($filter)) {\n      throw new Exception(X::_(\"Impossible to find the given row\"));\n    }\n\n    if ($data = $this->dbTraitPrepare($data)) {\n      if (!empty($f['cfg'])) {\n        $col = $f['cfg'];\n        if (!empty($data[$col])) {\n          if (is_string($data[$col])) {\n            $data[$col] = json_decode($data[$col], true);\n          }\n\n          $jsonUpdate = 'JSON_SET(IFNULL(' . $this->db->csn($col, true) . ' ,\"{}\")';\n          foreach ($data[$col] as $k => $v) {\n            $jsonUpdate .= ', \"$.' . $k . '\", \"' . Str::escapeDquotes(is_iterable($v) ? json_encode($v) : $v) . '\"';\n          }\n\n          $jsonUpdate .= \")\";\n          $data[$col] = [null, $jsonUpdate];\n        }\n      }\n\n      return $this->db->update($ccfg['table'], $data, $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 109,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitUpdate",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Updates a single row in the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$add",
                        "description": "fg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates a single row in the table through its id.\n   *\n   * @param array $data\n   * @param string|array $filter\n   * @param bool $addCfg\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitSelectOne": {
            "name": "dbTraitSelectOne",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectOne(string $field, string|array $filter = [], array $order = [])\n  {\n    if ($res = $this->dbTraitSingleSelection($filter, $order, 'array', [$field])) {\n      return $res[$field] ?? null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 154,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectOne",
            "returns": [],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return mixed\n   *\/"
        },
        "dbTraitSelect": {
            "name": "dbTraitSelect",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelect(string|array $filter = [], array $order = [], array $fields = []): ?stdClass\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'object', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 172,
            "endLine": 175,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelect",
            "returns": [
                null,
                "stdClass"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return stdClass|null\n   *\/"
        },
        "dbTraitRselect": {
            "name": "dbTraitRselect",
            "summary": "Retrieves a row as an array from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselect(string|array $filter = [], array $order = [], array $fields = []): ?array\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'array', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 186,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselect",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an array from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an array from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return array|null\n   *\/"
        },
        "dbTraitSelectValues": {
            "name": "dbTraitSelectValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectValues(string $field, array $filter = [], array $order = [], int $limit = 0, int $start = 0): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'value', [$field]);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 191,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectValues",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitCount": {
            "name": "dbTraitCount",
            "summary": "Returns the number of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitCount(array $filter = []): int\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $req = $this->dbTraitGetRequestCfg($filter, [], 1, 0, [$this->fields['id']]);\n    return $this->db->count($req);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 204,
            "endLine": 212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitCount",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the number of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the number of rows from the table for the given conditions.\n   *\n   * @param array $filter\n   *\n   * @return int\n   *\/"
        },
        "dbTraitSelectAll": {
            "name": "dbTraitSelectAll",
            "summary": "Returns an array of rows as objects from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'object', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 225,
            "endLine": 228,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as objects from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as objects from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitRselectAll": {
            "name": "dbTraitRselectAll",
            "summary": "Returns an array of rows as arrays from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'array', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 241,
            "endLine": 244,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as arrays from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as arrays from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitGetRelations": {
            "name": "dbTraitGetRelations",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetRelations(string $id, string|null $table = null): ?array\n  {\n    if ($this->dbTraitExists($id)) {\n      $db =& $this->db;\n      $res = [];\n      foreach ($this->dbTraitGetTableRelations($table) as $rel) {\n        if ($all = $db->getColumnValues($rel['table'], $rel['primary'], [$rel['col'] => $id])) {\n          $res[$rel['table']] = [\n            'col' => $rel['col'],\n            'primary' => $rel['primary'],\n            'values' => $all\n          ];\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 246,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetRelations",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "dbTraitGetSearchFilter": {
            "name": "dbTraitGetSearchFilter",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetSearchFilter(string|int $filter, array $cols = [], bool $strict = false): array\n  {\n    $cfg = $this->getClassCfg();\n    $isNumber = Str::isNumber($filter);\n    $finalFilter = [\n      'logic' => 'OR',\n      'conditions' => []\n    ];\n    if (empty($cols)) {\n      $tableCols = $this->db->modelize($cfg['table'])['fields'];\n      foreach ($tableCols as $col => $colCfg) {\n        if ((strpos($colCfg['type'], 'text') !== false) || (strpos($colCfg['type'], 'char') !== false)) {\n          $cols[] = $col;\n        }\n        elseif ($isNumber && (strpos($colCfg['type'], 'int') !== false)) {\n          $cols[] = $col;\n        }\n      }\n    }\n\n    foreach ($cols as $col) {\n      $finalFilter['conditions'][] = [\n        'field' => $this->db->cfn($col, $cfg['table']),\n        'operator' => $strict ? '=' : 'contains',\n        'value' => $filter\n      ];\n    }\n\n    return $finalFilter;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 267,
            "endLine": 296,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetSearchFilter",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "string|int",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSearch": {
            "name": "dbTraitSearch",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSearch(array|string $filter, array $cols = [], array $fields = [], array $order = [], bool $strict = false, int $limit = 0, int $start = 0): array\n  {\n    if (is_array($filter)) {\n      $finalFilter = $filter;\n      if (empty($fields) && !empty($cols)) {\n        $fields = $cols;\n      }\n    }\n    else {\n      $finalFilter = $this->dbTraitGetSearchFilter($filter, $cols);\n    }\n\n    return $this->dbTraitRselectAll($finalFilter, $order, $limit, $start, $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 298,
            "endLine": 311,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSearch",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 4,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 5,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 6,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSingleSelection": {
            "name": "dbTraitSingleSelection",
            "summary": "Gets a single row and returns it",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitSingleSelection(\n    string|array $filter,\n    array $order,\n    string $mode = 'array',\n    array $fields = []\n  ): mixed\n  {\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (isset($cfg)\n        && ($res = $this->dbTraitSelection($cfg, $order, 1, 0, $mode, $fields))\n    ) {\n      return $res[0];\n    }\n\n    return null;\n\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 321,
            "endLine": 344,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitSingleSelection",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "array",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets a single row and returns it\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets a single row and returns it\n   *\n   * @param string|array $filter\n   * @param array $order\n   * @param string $mode\n   * @return mixed\n   *\/"
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the class configuration.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getClassCfg()\n  {\n    return $this->class_cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 37,
            "endLine": 40,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getClassCfg",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the class configuration.\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the class configuration.\n   * \n   * @return mixed\n   *\/"
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the fields of the main table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFields()\n  {\n    return $this->fields;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 48,
            "endLine": 51,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getFields",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the fields of the main table.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the fields of the main table.\n   *\n   * @return array\n   *\/"
        },
        "initClassCfg": {
            "name": "initClassCfg",
            "summary": "Sets the class configuration as defined in self::default_class_cfg",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initClassCfg(array|null $cfg = null)\n  {\n    $arr = [];\n    if (isset(self::$default_class_cfg)) {\n      $arr[] = self::$default_class_cfg;\n    }\n\n    if (isset(static::$default_class_cfg)) {\n      $arr[] = static::$default_class_cfg;\n    }\n    \n    if ($cfg) {\n      $arr[] = $cfg;\n    }\n\n    if (!count($arr)) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $cfg = count($arr) > 1 ? X::mergeArrays(...$arr) : $arr[0];\n\n    $table_index = array_flip($cfg['tables'])[$cfg['table']];\n    if (!$table_index || !isset($cfg['tables'], $cfg['table'], $cfg['arch'], $cfg['arch'][$table_index])) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $this->class_table = $cfg['table'];\n    \/\/ We completely replace the table structure, no merge\n    $props = [];\n    foreach ($cfg['arch'] as $t => &$fields){\n      if (!$this->class_table_index && isset($cfg['tables'][$t]) && ($cfg['tables'][$t] === $cfg['table']))  {\n        $this->class_table_index = $t;\n      }\n\n      foreach ($fields as $f => $it) {\n        if (is_array($it)) {\n          $props[$t][$f] = $it;\n          $fields[$f] = $it['name'] ?? $f;\n        }\n      }\n    }\n    unset($fields);\n    if (!empty($props)) {\n      $cfg['props'] = $props;\n    }\n\n\n\n    \/\/ The selection comprises the defined fields of the users table\n    \/\/ Plus a bunch of user-defined additional fields in the same table\n    $this->fields = $cfg['arch'][$this->class_table_index];\n\n    $this->class_cfg = $cfg;\n    $this->_isInitClassCfg = true;\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 59,
            "endLine": 115,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initClassCfg",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the class configuration as defined in self::default_class_cfg\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the class configuration as defined in self::default_class_cfg\n   * @param array $cfg\n   * @return $this\n   *\/"
        },
        "isInitClassCfg": {
            "name": "isInitClassCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isInitClassCfg(): bool\n  {\n    return $this->_isInitClassCfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 118,
            "endLine": 121,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isInitClassCfg",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "dbTraitPrepare": {
            "name": "dbTraitPrepare",
            "summary": "Prepares data before inserting or updating in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitPrepare(array $data): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (!empty($ccfg['cfg'])) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $res[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        unset($data[$f['cfg']]);\n      }\n      elseif (isset($ccfg['cfg'])) {\n        $cfg = [];\n        foreach ($ccfg['cfg'] as $k => $v) {\n          if (array_key_exists($v['field'], $data)) {\n            $cfg[$v['field']] = $data[$v['field']];\n            unset($data[$v['field']]);\n          }\n        }\n        if (!empty($cfg)) {\n          $res[$f['cfg']] = $cfg;\n        }\n      }\n    }\n\n    $structure = $this->dbTraitGetStructure();\n    foreach ($data as $k => $v) {\n      if (in_array($k, $f)) {\n        \/\/ Set the value to null if it's empty and not 0 and the field allows null\n        if (empty($v)\n          && ($v !== 0)\n          && $structure['fields'][$k]['null']\n        ) {\n          $v = null;\n        }\n\n        $res[$k] = $v;\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 41,
            "endLine": 94,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitPrepare",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The data to be prepared."
                }
            ],
            "doc": {
                "description": "Prepares data before inserting or updating in the database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data",
                        "description": "The data to be prepared."
                    }
                ],
                "return": "The prepared data.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the class config has not been initialized or is incorrect."
                }
            },
            "comments": "  \/**\n   * Prepares data before inserting or updating in the database.\n   *\n   * @param array $data The data to be prepared.\n   *\n   * @return array The prepared data.\n   * @throws Exception If the class config has not been initialized or is incorrect.\n   *\/"
        },
        "dbTraitTreat": {
            "name": "dbTraitTreat",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitTreat(array ...$rows): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (empty($f['cfg'])) {\n      return [...$rows];\n    }\n    foreach ($rows as &$data) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $data[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        if (!empty($ccfg['cfg'])) {\n          foreach ($ccfg['cfg'] as $k => $v) {\n            if (isset($v['field']) \n                && array_key_exists($v['field'], $data[$f['cfg']])\n                && !array_key_exists($v['field'], $data)) {\n              $data[$v['field']] = $data[$f['cfg']][$v['field']];\n            }\n          }\n          unset($data[$f['cfg']]);\n        }\n      }\n\n      $res[] = $data;\n    }\n\n    unset($data);\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 96,
            "endLine": 136,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitTreat",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "rows",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbTraitSetFilterCfg": {
            "name": "dbTraitSetFilterCfg",
            "summary": "Sets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSetFilterCfg(array $cfg): void\n  {\n    $this->dbTraitFilterCfg = $cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 144,
            "endLine": 147,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The filter configuration."
                }
            ],
            "doc": {
                "description": "Sets the filter configuration for database queries.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The filter configuration."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the filter configuration for database queries.\n   *\n   * @param array $cfg The filter configuration.\n   *\/"
        },
        "dbTraitResetFilterCfg": {
            "name": "dbTraitResetFilterCfg",
            "summary": "Resets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitResetFilterCfg(): void\n  {\n    $this->dbTraitFilterCfg = [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 152,
            "endLine": 155,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitResetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Resets the filter configuration for database queries.",
                "tags": []
            },
            "comments": "  \/**\n   * Resets the filter configuration for database queries.\n   *\/"
        },
        "dbTraitGetFilterCfg": {
            "name": "dbTraitGetFilterCfg",
            "summary": "Combines multiple filter configurations into a single array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetFilterCfg(array $cfg): array\n  {\n    $conditions = [];\n    if (!empty($this->rootFilterCfg)) {\n      $conditions[] = $this->rootFilterCfg;\n    }\n\n    if (!empty($this->dbTraitFilterCfg)) {\n      $conditions[] = $this->dbTraitFilterCfg;\n    }\n\n    if (!empty($cfg)) {\n      $conditions[] = $cfg;\n    }\n\n    \/\/ Return empty array if no conditions exist\n    if (empty($conditions)) {\n      return [];\n    }\n\n    \/\/ Return single condition if only one exists\n    if (count($conditions) === 1) {\n      return $conditions[0];\n    }\n\n    \/\/ Combine all conditions with 'AND' logic\n    return array_map(function ($a) {\n      return [\n        'logic' => 'AND',\n        'conditions' => $a\n      ];\n    }, $conditions);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 164,
            "endLine": 196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetFilterCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Additional filter configuration."
                }
            ],
            "doc": {
                "description": "Combines multiple filter configurations into a single array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "Additional filter configuration."
                    }
                ],
                "return": "The combined filter configuration."
            },
            "comments": "  \/**\n   * Combines multiple filter configurations into a single array.\n   *\n   * @param array $cfg Additional filter configuration.\n   *\n   * @return array The combined filter configuration.\n   *\/"
        },
        "dbTraitGetStructure": {
            "name": "dbTraitGetStructure",
            "summary": "Gets the structure of the specified table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetStructure(string|null $table = null): array\n  {\n    if (!$table) {\n      $cfg = $this->getClassCfg();\n      $table = $cfg['table'];\n    }\n\n    if (!isset($this->dbTraitStructure[$table])) {\n      $this->dbTraitStructure[$table] = $this->db->modelize($table);\n    }\n\n    return $this->dbTraitStructure[$table];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 205,
            "endLine": 217,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetStructure",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Gets the structure of the specified table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "The structure of the table."
            },
            "comments": "  \/**\n   * Gets the structure of the specified table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array The structure of the table.\n   *\/"
        },
        "dbTraitGetTableRelations": {
            "name": "dbTraitGetTableRelations",
            "summary": "Retrieves the relations for a given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetTableRelations(string|null $table = null): array\n  {\n    $cfg = $this->getClassCfg();\n    if (!$table) {\n      $table = $cfg['table'];\n    }\n    $idx = array_flip($cfg['tables'])[$table];\n    if ($idx && !isset($this->dbTraitRelations[$table])) {\n      $arc = &$cfg['arch'][$idx];\n      $this->dbTraitRelations[$table] = [];\n      if (!empty($arc['id'])) {\n        $refs = $this->db->findReferences($this->db->cfn($arc['id'], $table));\n        foreach ($refs as $ref) {\n          [$db, $tab, $col] = X::split($ref, '.');\n          $model = $this->db->modelize($tab);\n          $this->dbTraitRelations[$table][] = [\n            'db' => $db,\n            'table' => $tab,\n            'primary' => isset($model['keys']['PRIMARY']) && (count($model['keys']['PRIMARY']['columns']) === 1) ? $model['keys']['PRIMARY']['columns'][0] : null,\n            'col' => $col,\n            'model' => $model\n          ];\n        }\n      }\n    }\n\n    return $this->dbTraitRelations[$table];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 226,
            "endLine": 253,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetTableRelations",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Retrieves the relations for a given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "An array of relations."
            },
            "comments": "  \/**\n   * Retrieves the relations for a given table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array An array of relations.\n   *\/"
        },
        "dbTraitSelection": {
            "name": "dbTraitSelection",
            "summary": "Returns an array of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitSelection(\n    array $filter,\n    array $order,\n    int $limit,\n    int $start,\n    string $mode = 'array',\n    array $fields = []\n  ): array\n  {\n    $returnObject = $mode === 'object';\n    $req = $this->dbTraitGetRequestCfg($filter, $order, $limit, $start, $fields);\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    $method = $mode === 'object' ? 'selectAll' : ($mode === 'value' ? 'getColumnValues' : 'rselectAll');\n    $res = $this->db->$method($req);\n    if ($res) {\n      if (!empty($f['cfg'])) {\n        foreach ($res as &$r) {\n          if ($returnObject && !empty($r->{$f['cfg']})) {\n            $cfg = json_decode($r->{$f['cfg']});\n            $r = X::mergeObjects($cfg, $r);\n            unset($r->{$f['cfg']});\n          }\n          elseif (!$returnObject && !empty($r[$f['cfg']])) {\n            $cfg = json_decode($r[$f['cfg']], true);\n            $r = array_merge($cfg, $r);\n            unset($r[$f['cfg']]);\n          }\n        }\n\n        unset($r);\n      }\n\n      return $res;\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 267,
            "endLine": 303,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 4,
            "shortName": "dbTraitSelection",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Filter conditions."
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Order by conditions."
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Maximum number of rows to return."
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Offset of the first row to return."
                },
                {
                    "name": "mode",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "array",
                    "default_name": "",
                    "description": "The mode of result ('array', 'object', 'value')."
                },
                {
                    "name": "fields",
                    "position": 5,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Fields to select."
                }
            ],
            "doc": {
                "description": "Returns an array of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter",
                        "description": "Filter conditions."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "Order by conditions."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Maximum number of rows to return."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Offset of the first row to return."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode",
                        "description": "The mode of result ('array', 'object', 'value')."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "Fields to select."
                    }
                ],
                "return": "The result set."
            },
            "comments": "  \/**\n   * Returns an array of rows from the table for the given conditions.\n   *\n   * @param array $filter Filter conditions.\n   * @param array $order Order by conditions.\n   * @param int $limit Maximum number of rows to return.\n   * @param int $start Offset of the first row to return.\n   * @param string $mode The mode of result ('array', 'object', 'value').\n   * @param array $fields Fields to select.\n   *\n   * @return array The result set.\n   *\/"
        },
        "dbTraitGetRequestCfg": {
            "name": "dbTraitGetRequestCfg",
            "summary": "Prepares the request configuration for a database query.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitGetRequestCfg(\n    array $filter,\n    array $order,\n    int $limit,\n    int $start,\n    array $fields = []\n  ): array\n  {\n    \/\/ Ensure table index is defined\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    \/\/ Validate fields\n    if (!empty($fields)) {\n      foreach (array_values($fields) as $f) {\n        if (!in_array($f, $this->class_cfg['arch'][$this->class_table_index])) {\n          throw new Exception(X::_(\"The field %s does not exist\", $f));\n        }\n      }\n\n      $properFields = $fields;\n    }\n    else {\n      $fields = $this->class_cfg['arch'][$this->class_table_index];\n    }\n\n    $ccfg = $this->getClassCfg();\n    if (isset($fields['cfg']) && !empty($ccfg['cfg'])) {\n      $cfgCol = $fields['cfg'];\n      unset($fields['cfg']);\n      if (!isset($properFields)) {\n        $properFields = array_values($fields);\n      }\n\n      foreach ($ccfg['cfg'] as $v) {\n        if ($v['field'] && !in_array($v['field'], $properFields)) {\n          $properFields[$v['field']] = \"IF(JSON_EXTRACT(\"\n              . $this->db->csn($cfgCol, true) . \", '\\$.\" . $v['field']\n              . \"') = 'null', NULL, JSON_UNQUOTE(JSON_EXTRACT(\"\n              . $this->db->csn($cfgCol, true) . \", '\\$.\" . $v['field']\n              .\"')))\";\n        }\n      }\n    }\n    elseif (!isset($properFields)) {\n      $properFields = array_values($fields);\n    }\n\n    \/\/ Build the request configuration\n    $req = [\n      'table' => $this->class_table,\n      'fields' => $properFields,\n      'where' => $this->dbTraitGetFilterCfg($filter),\n      'order' => $order\n    ];\n\n    if ($limit) {\n      $req['limit'] = $limit;\n      $req['start'] = $start;\n    }\n\n    return $req;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 317,
            "endLine": 380,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 4,
            "shortName": "dbTraitGetRequestCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Filter conditions."
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Order by conditions."
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Maximum number of rows to return."
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Offset of the first row to return."
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Fields to select."
                }
            ],
            "doc": {
                "description": "Prepares the request configuration for a database query.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter",
                        "description": "Filter conditions."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "Order by conditions."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Maximum number of rows to return."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Offset of the first row to return."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "Fields to select."
                    }
                ],
                "return": "The request configuration.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the table index is not defined or a field does not exist."
                }
            },
            "comments": "  \/**\n   * Prepares the request configuration for a database query.\n   *\n   * @param array $filter Filter conditions.\n   * @param array $order Order by conditions.\n   * @param int $limit Maximum number of rows to return.\n   * @param int $start Offset of the first row to return.\n   * @param array $fields Fields to select.\n   *\n   * @return array The request configuration.\n   * @throws Exception If the table index is not defined or a field does not exist.\n   *\/"
        },
        "apiTranslate": {
            "name": "apiTranslate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n\/Api.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function apiTranslate(\n    string|array $string,\n    ?string $sourceLang = null,\n    ?string $targetLang = null,\n    ?int $alternatives = null\n  ): ?array\n  {\n    if (empty($this->api)) {\n      throw new Exception(_(\"No API initialized\"));\n    }\n\n    return $this->api->translate($string, $sourceLang, $targetLang, $alternatives);\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\I18n\\Api",
            "startLine": 27,
            "endLine": 39,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "apiTranslate",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "string",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "sourceLang",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "targetLang",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "alternatives",
                    "position": 3,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "apiSetSourceLang": {
            "name": "apiSetSourceLang",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n\/Api.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function apiSetSourceLang(string $lang){\n    $this->apiSourceLang = $lang;\n    if (!empty($this->api)) {\n      $this->api->setSourceLang($lang);\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\I18n\\Api",
            "startLine": 42,
            "endLine": 49,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "apiSetSourceLang",
            "returns": [],
            "arguments": [
                {
                    "name": "lang",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "apiSetTargetLang": {
            "name": "apiSetTargetLang",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n\/Api.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function apiSetTargetLang(string $lang){\n    $this->apiTargetLang = $lang;\n    if (!empty($this->api)) {\n      $this->api->setTargetLang($lang);\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\I18n\\Api",
            "startLine": 52,
            "endLine": 59,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "apiSetTargetLang",
            "returns": [],
            "arguments": [
                {
                    "name": "lang",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "apiSetAlternatives": {
            "name": "apiSetAlternatives",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n\/Api.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function apiSetAlternatives(int $num){\n    $this->apiAlternatives = $num;\n    if (!empty($this->api)) {\n      $this->api->setAlternatives($num);\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\I18n\\Api",
            "startLine": 62,
            "endLine": 69,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "apiSetAlternatives",
            "returns": [],
            "arguments": [
                {
                    "name": "num",
                    "position": 0,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "initApi": {
            "name": "initApi",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n\/Api.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function initApi(array $cfg): self\n  {\n    if (empty($cfg['service'])\n      || empty(static::$apis[$cfg['service']])\n      || !class_exists(\"\\\\bbn\\\\Appui\\\\I18n\\\\\".static::$apis[$cfg['service']])\n    ) {\n      throw new Exception(_(\"API service not found\"));\n    }\n\n    $this->apiUrl = $cfg['url'] ?? $this->apiUrl;\n    $this->apiPort = $cfg['port'] ?? $this->apiPort;\n    $this->apiSourceLang = $cfg['source'] ?? $this->apiSourceLang;\n    $this->apiTargetLang = $cfg['target'] ?? $this->apiTargetLang;\n    $this->apiAlternatives = $cfg['alternatives'] ?? $this->apiAlternatives;\n    $className = \"\\\\bbn\\\\Appui\\\\I18n\\\\\".static::$apis[$cfg['service']];\n\n    if (empty($this->apiUrl)) {\n      throw new \\Exception(_('API URL is not set'));\n    }\n\n    if (empty($this->apiSourceLang)) {\n      throw new \\Exception(_('API source language is not set'));\n    }\n\n    if (empty($this->apiTargetLang)) {\n      throw new \\Exception(_('API target language is not set'));\n    }\n\n    $this->api = new $className(\n      $this->apiUrl,\n      $this->apiPort,\n      $this->apiSourceLang,\n      $this->apiTargetLang,\n      $this->apiAlternatives\n    );\n\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\I18n\\Api",
            "startLine": 72,
            "endLine": 109,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "initApi",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "extensions": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": [
                "js",
                "json",
                "php",
                "html"
            ]
        },
        "parser": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "translations": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": []
        },
        "user": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "options": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "idProject": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "poLoader": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "moGenerator": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "hashAlgo": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": "sha512"
        },
        "default_class_cfg": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array $default_class_cfg",
                "tags": []
            },
            "parent": false,
            "value": {
                "table": "bbn_i18n",
                "tables": {
                    "i18n": "bbn_i18n",
                    "i18n_exp": "bbn_i18n_exp"
                },
                "arch": {
                    "i18n": {
                        "id": "id",
                        "exp": "exp",
                        "lang": "lang",
                        "hash": "hash"
                    },
                    "i18n_exp": {
                        "id": "id",
                        "id_exp": "id_exp",
                        "lang": "lang",
                        "expression": "expression"
                    }
                }
            }
        },
        "_cache_prefix": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "string",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Cache"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Cache",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": {
                "name": "_cache_prefix",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "string",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Cache"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Cache",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "@var string",
                    "tags": []
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "cacher": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "bbn\\Cache",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Cache"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Cache",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var $cacher cache",
                "tags": []
            },
            "parent": {
                "name": "cacher",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "bbn\\Cache",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Cache"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Cache",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "@var $cacher cache",
                    "tags": []
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "bbn\\Db",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Cache"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Cache",
            "promoted": true,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "db",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "bbn\\Db",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Cache"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Cache",
                "promoted": true,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": null
            },
            "value": null
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "optional_is_init": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Set as true from the moment a first instance has been initiated and has defined the constants."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "option_root_id": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The ID of the root option"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_isInitClassCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var bool",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "fields": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "class_table": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_table_index": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "rootFilterCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Configuration for the root filter."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "dbTraitFilterCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": []
        },
        "dbTraitRelations": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Cached relations for the current table."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "dbTraitStructure": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Cached relations for the current table."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "api": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n\\Api",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "apis": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n\\Api",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": {
                "libretranslate": "LibreTranslate"
            }
        },
        "apiUrl": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n\\Api",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": "https:\/\/localhost"
        },
        "apiPort": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n\\Api",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": ""
        },
        "apiSourceLang": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n\\Api",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": "en"
        },
        "apiTargetLang": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n\\Api",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": "fr"
        },
        "apiAlternatives": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n\\Api",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": 0
        }
    },
    "staticProperties": {
        "extensions": [
            "js",
            "json",
            "php",
            "html"
        ],
        "hashAlgo": "sha512",
        "default_class_cfg": {
            "table": "bbn_i18n",
            "tables": {
                "i18n": "bbn_i18n",
                "i18n_exp": "bbn_i18n_exp"
            },
            "arch": {
                "i18n": {
                    "id": "id",
                    "exp": "exp",
                    "lang": "lang",
                    "hash": "hash"
                },
                "i18n_exp": {
                    "id": "id",
                    "id_exp": "id_exp",
                    "lang": "lang",
                    "expression": "expression"
                }
            }
        },
        "optional_is_init": false,
        "option_root_id": null,
        "apis": {
            "libretranslate": "LibreTranslate"
        }
    },
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "bbn\\User": "User",
        "bbn\\Db": "Db",
        "bbn\\Str": "Str",
        "bbn\\X": "X",
        "bbn\\File\\Dir": "Dir",
        "bbn\\Appui\\Option": "Option",
        "bbn\\Appui\\Project": "Project",
        "bbn\\Models\\Tts\\Optional": "Optional",
        "bbn\\Models\\Tts\\DbActions": "DbActions",
        "bbn\\Models\\Cls\\Cache": "cacheCls",
        "Gettext\\Translations": "Translations",
        "Gettext\\Scanner\\PhpScanner": "PhpScanner",
        "Gettext\\Scanner\\JsScanner": "JsScanner",
        "Gettext\\Loader\\PoLoader": "PoLoader",
        "Gettext\\Generator\\MoGenerator": "MoGenerator",
        "Sepia\\PoParser\\Parser": "Parser",
        "Sepia\\PoParser\\SourceHandler\\FileSystem": "FileSystem",
        "Sepia\\PoParser\\PoCompiler": "PoCompiler",
        "Sepia\\PoParser\\Catalog\\Header": "Header",
        "Sepia\\PoParser\\Catalog\\Entry": "Entry",
        "bbn\\Appui\\I18n\\Api": "Api"
    },
    "dummyComments": [
        "\/**\n * Created by PhpStorm.\n * User: BBN\n * Date: 14\/12\/2017\n * Time: 17:34\n *\/"
    ],
    "summary": "",
    "description": "",
    "description_parts": []
}