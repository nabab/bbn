{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\I18n",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\Optional"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/I18n.php",
    "startLine": 14,
    "endLine": 1201,
    "numMethods": 55,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 4,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\Optional"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Cache",
    "isSubclassOf": false,
    "defaultProperties": {
        "extensions": [
            "js",
            "json",
            "php",
            "html"
        ],
        "optional_is_init": false,
        "option_root_id": null,
        "option_appui_id": null,
        "parser": null,
        "translations": [],
        "user": null,
        "options": null,
        "id_project": null,
        "errors": [],
        "error": false,
        "debug": false,
        "log": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "I18n",
    "contentConstructor": {
        "file": "bbn\\Appui\\I18n",
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Initialize the class I18n",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db, string $code = NULL)\n  {\n    parent::__construct($db);\n    $this->parser  = new \\Gettext\\Translations();\n    $this->user    = \\bbn\\User::getInstance();\n    $this->options = new \\bbn\\Appui\\Option($db);\n    if (empty($code)) {\n      $code = 'apst-app';\n    }\n\n    $this->id_project = \\bbn\\Str::isUid($code) ? $code : $this->options->fromCode($code, 'list', 'project', 'appui');\n  }",
            "startLine": 37,
            "endLine": 48,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": {
                "name": "__construct",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Cache",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bbn\\Db $db)\n  {\n    $this->cacher = bbn\\Cache::getEngine();\n    $this->_cache_prefix = str_replace('\\\\', '\/', \\get_class($this)).'\/';\n  }",
                "startLine": 29,
                "endLine": 33,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "analyzePhp": {
            "name": "analyzePhp",
            "summary": "Returns the strings contained in the given php file",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $file)\n  {\n    $res = [];\n    $php = file_get_contents($file);\n    if ($tmp = \\Gettext\\Translations::fromPhpCodeString(\n      $php, [\n      'functions' => ['_' => 'gettext'],\n      'file' => $file\n      ]\n    )\n    ) {\n      foreach ($tmp->getIterator() as $r => $tr){\n        $res[] = $tr->getOriginal();\n      }\n\n      $this->parser->mergeWith($tmp);\n    }\n\n    return array_unique($res);\n  }",
            "startLine": 57,
            "endLine": 76,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "analyzeJs": {
            "name": "analyzeJs",
            "summary": "Returns the strings contained in the given js file",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $file)\n  {\n    $res = [];\n    $js  = file_get_contents($file);\n    if ($tmp = \\Gettext\\Translations::fromJsCodeString(\n      $js, [\n      'functions' => [\n        '_' => 'gettext',\n        'bbn._' => 'gettext'\n      ],\n      'file' => $file\n      ]\n    )\n    ) {\n      foreach ($tmp->getIterator() as $r => $tr){\n        $res[] = $tr->getOriginal();\n      }\n\n      $this->parser->mergeWith($tmp);\n    }\n\n    if (preg_match_all('\/`([^`]*)`\/', $js, $matches)) {\n      foreach ($matches[0] as $st){\n        if ($tmp = \\Gettext\\Translations::fromVueJsString(\n          '<template>'.$st.'<\/template>', [\n          'functions' => [\n            '_' => 'gettext',\n            'bbn._' => 'gettext'\n          ],\n          'file' => $file\n          ]\n        )\n        ) {\n          foreach ($tmp->getIterator() as $r => $tr){\n            $res[] = $tr->getOriginal();\n          }\n\n          $this->parser->mergeWith($tmp);\n        }\n      }\n    }\n\n    \/*if($file === '\/home\/thomas\/domains\/apstapp2.thomas.lan\/_appui\/vendor\/bbn\/appui-task\/src\/components\/tab\/tracker\/tracker.js'){\n      die(\\bbn\\X::hdump($res, $js));\n    }*\/\n\n    return array_unique($res);\n  }",
            "startLine": 85,
            "endLine": 132,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "analyzeJson": {
            "name": "analyzeJson",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $file)\n  {\n    $res = [];\n    $js  = file_get_contents($file);\n    if ($tmp = \\Gettext\\Translations::fromJsCodeString(\n      $js, [\n      'functions' => [\n        '_' => 'gettext',\n        'bbn._' => 'gettext'\n      ],\n      'file' => $file\n      ]\n    )\n    ) {\n      foreach ($tmp->getIterator() as $r => $tr){\n        $res[] = $tr->getOriginal();\n      }\n\n      $this->parser->mergeWith($tmp);\n    }\n\n    return array_unique($res);\n  }",
            "startLine": 135,
            "endLine": 157,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "analyzeHtml": {
            "name": "analyzeHtml",
            "summary": "Returns the strings contained in the given html file",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $file)\n  {\n    $res = [];\n    $js  = file_get_contents($file);\n    if ($tmp = \\Gettext\\Translations::fromVueJsString(\n      '<template>'.$js.'<\/template>', [\n      'functions' => [\n        '_' => 'gettext',\n        'bbn._' => 'gettext'\n      ]\n      ]\n    )\n    ) {\n      foreach ($tmp->getIterator() as $r => $tr){\n        $res[] = $tr->getOriginal();\n      }\n\n      $this->parser->mergeWith($tmp);\n    }\n\n    return array_unique($res);\n  }",
            "startLine": 166,
            "endLine": 187,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "analyzeFile": {
            "name": "analyzeFile",
            "summary": "Returns the strings contained in the given file",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $file)\n  {\n    $res = [];\n    $ext = bbn\\Str::fileExt($file);\n    if (\\in_array($ext, self::$extensions, true) && is_file($file)) {\n      switch ($ext){\n        case 'html':\n          $res = $this->analyzeHtml($file);\n          break;\n        case 'php':\n          $res = $this->analyzePhp($file);\n          break;\n        case 'js':\n          $res = $this->analyzeJs($file);\n          break;\n        \/*case 'json':\n          $res = $this->analyzeJson($file);\n          break;*\/\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 196,
            "endLine": 218,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "analyzeFolder": {
            "name": "analyzeFolder",
            "summary": "Returns an array containing the strings found in the given folder",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $folder = '.', bool $deep = false)\n  {\n    $res = [];\n    if (\\is_dir($folder)) {\n      $files = $deep ? bbn\\File\\Dir::scan($folder, 'file') : bbn\\File\\Dir::getFiles($folder);\n      foreach ($files as $f){\n        $words = $this->analyzeFile($f);\n        foreach ($words as $word){\n          if (!isset($res[$word])) {\n            $res[$word] = [];\n          }\n\n          if (!in_array($f, $res[$word])) {\n            $res[$word][] = $f;\n          }\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 228,
            "endLine": 248,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "folder",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": ".",
                    "default_name": ""
                },
                {
                    "name": "deep",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getParser": {
            "name": "getParser",
            "summary": "Returns the parser",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->parser;\n  }",
            "startLine": 256,
            "endLine": 259,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "result": {
            "name": "result",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    foreach ($this->parser->getIterator() as $r => $tr){\n      $this->translations[] = $tr->getOriginal();\n    }\n\n    return array_unique($this->translations);\n  }",
            "startLine": 262,
            "endLine": 269,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getIdProject": {
            "name": "getIdProject",
            "summary": "get the id of the project from the id_option of a path",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option, $projects)\n  {\n    foreach($projects as $i => $p){\n      foreach ($projects[$i]['path'] as $idx => $pa){\n        if ($projects[$i]['path'][$idx]['id_option'] === $id_option) {\n          return $projects[$i]['id'];\n        }\n      }\n    }\n  }",
            "startLine": 279,
            "endLine": 288,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "projects",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPrimariesLangs": {
            "name": "getPrimariesLangs",
            "summary": "Gets primaries langs from option",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $uid_languages = $this->options->fromCode('languages', 'i18n', 'appui');\n    $languages     = $this->options->fullTree($uid_languages);\n    $primaries     = array_values(\n      array_filter(\n        $languages['items'], function ($v) {\n          return !empty($v['primary']);\n        }\n      )\n    );\n    return $primaries;\n  }",
            "startLine": 296,
            "endLine": 308,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getNumOptions": {
            "name": "getNumOptions",
            "summary": "get the num of items['text'] in original language and num translations foreach lang in configured langs (for this project uses all primaries as configured langs)",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    \/** @var  $paths takes all options with i18n property setted*\/\n    $paths = $this->options->findI18n();\n\n    $data = [];\n    \/**\n    * creates the property data_widget that will have just num of items found for the option + 1 (the text of the option parent), the * * number of strings translated and the source language indexed to the language\n    *\/\n    $primaries = $this->getPrimariesLangs();\n    foreach ($primaries as $p){\n      $configured_langs[] = $p['code'];\n    }\n\n    foreach ($paths as $p => $val){\n      $parent = $this->options->getIdParent($paths[$p]['id']);\n\n      foreach ($configured_langs as $lang) {\n        $count = 0;\n        $items = $paths[$p]['items'];\n        \/** push the text of the option into the array of strings *\/\n        $items[] = [\n          'id' => $paths[$p]['id'],\n          'text' => $paths[$p]['text'],\n          'id_parent' => $parent\n        ];\n        foreach ($items as $idx => $item){\n          if ($id = $this->db->selectOne(\n            'bbn_i18n', 'id', [\n            'exp' => $item['text'],\n            'lang' => $paths[$p]['language']\n            ]\n          )\n          ) {\n            if ($this->db->selectOne(\n              'bbn_i18n_exp', 'id_exp', [\n              'id_exp' => $id,\n              'lang' => $lang\n              ]\n            )\n            ) {\n              $count ++;\n            }\n          }\n        }\n\n        $paths[$p]['data_widget']['result'][$lang] = [\n          'num' => count($items),\n          'num_translations' => $count,\n          'lang' => $lang\n        ];\n      }\n\n      $paths[$p]['data_widget']['locale_dirs'] = [];\n\n      unset($paths[$p]['items']);\n      $data[] = $paths[$p];\n    }\n\n    return [\n      'data' => $data\n    ];\n  }",
            "startLine": 316,
            "endLine": 378,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getNumOption": {
            "name": "getNumOption",
            "summary": "get the num of items['text'] in original language and num translations foreach lang in configured langs (for this project uses all primaries as configured langs)",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    \/** @var  $paths takes all options with i18n property setted*\/\n    $paths = $this->options->findI18nOption($id);\n    $data  = [];\n    \/**\n    * creates the property data_widget that will have just num of items found for the option + 1 (the text of the option parent), the * * number of strings translated and the source language indexed to the language\n    *\/\n    $primaries = $this->getPrimariesLangs();\n    foreach ($primaries as $p){\n      $configured_langs[] = $p['code'];\n    }\n\n    foreach ($paths as $p => $val){\n      $parent = $this->options->getIdParent($paths[$p]['id']);\n      foreach ($configured_langs as $lang) {\n        $count = 0;\n        $items = $paths[$p]['items'];\n        \/** push the text of the option into the array of strings *\/\n        $items[] = [\n          'id' => $paths[$p]['id'],\n          'text' => $paths[$p]['text'],\n          'id_parent' => $parent\n        ];\n        foreach ($items as $idx => $item){\n          if ($id = $this->db->selectOne(\n            'bbn_i18n', 'id', [\n            'exp' => $item['text'],\n            'lang' => $paths[$p]['language']\n            ]\n          )\n          ) {\n            if ($this->db->selectOne(\n              'bbn_i18n_exp', 'id_exp', [\n              'id_exp' => $id,\n              'lang' => $lang\n              ]\n            )\n            ) {\n              $count ++;\n            }\n          }\n        }\n\n        $paths[$p]['data_widget']['result'][$lang] = [\n          'num' => count($items),\n          'num_translations' => $count,\n          'lang' => $lang\n        ];\n      }\n\n      $paths[$p]['data_widget']['locale_dirs'] = [];\n      unset($paths[$p]['items']);\n      $data[] = $paths[$p];\n    }\n\n    return [\n      'data' => $data\n    ];\n  }",
            "startLine": 386,
            "endLine": 445,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "Gets the option with the property i18n setted and its items",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    \/** @var ( array) $paths get all options having i18n property setted and its items *\/\n    $paths = $this->options->findI18n();\n    $res   = [];\n    foreach ($paths as $p => $val){\n      $res[$p] = [\n        'text' => $paths[$p]['text'],\n        'opt_language' => $paths[$p]['language'],\n        'strings' => [],\n        'id_option' => $paths[$p]['id']\n      ];\n\n      \/** @todo AT THE MOMENT I'M NOT CONSIDERING LANGUAGES OF TRANSLATION *\/\n      foreach ($paths[$p]['items'] as $i => $value){\n        \/* check if the opt text is in bbn_i18n and takes translations from db *\/\n        if ($exp = $this->db->rselect(\n          'bbn_i18n',['id', 'exp', 'lang'] , [\n            'exp' => $paths[$p]['items'][$i]['text'],\n            'lang' => $paths[$p]['language']\n          ]\n        )\n        ) {\n          $translated = $this->db->rselectAll('bbn_i18n_exp', ['id_exp', 'expression', 'lang'],  ['id_exp' => $exp['id'] ]);\n          if (!empty($translated)) {\n            \/** @var  $languages the array of languages found in db for the options*\/\n            $languages      = [];\n            $translated_exp = '';\n\n            foreach ($translated as $t => $trans){\n              if (!in_array($translated[$t]['lang'], $translated)) {\n                $languages[] = $translated[$t]['lang'];\n              }\n\n              $translated_exp = $translated[$t]['expression'];\n            }\n\n            if (!empty($languages)) {\n              foreach($languages as $lang){\n                $res[$p]['strings'][] = [\n                  $lang => [\n                    'id_exp' => $exp['id'],\n                    'exp' => $exp['exp'],\n                    'translation_db' => $translated_exp\n                  ]\n                ];\n              }\n            }\n          }\n        }\n        else {\n          if ($this->db->insert(\n            'bbn_i18n', [\n            'exp' => $paths[$p]['items'][$i]['text'],\n            'lang' => $paths[$p]['language'],\n            \/\/'id_user'=> $this->user->getId(),\n            \/\/'last_modified' => date('H-m-d H:i:s')\n\n            ]\n          )\n          ) {\n            $id = $this->db->lastId();\n            $this->db->insertIgnore(\n              'bbn_i18n_exp', [\n                'id_exp' => $id,\n                'expression' => $paths[$p]['items'][$i]['text'],\n                'lang' => $paths[$p]['language']\n              ]\n            );\n            $res[$p]['strings'][] = [\n              $paths[$p]['language'] => [\n                'id_exp' => $id,\n                'exp' => $paths[$p]['items'][$i]['text'],\n                'translation_db' => $paths[$p]['items'][$i]['text']\n              ]\n            ];\n          };\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 453,
            "endLine": 535,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getLanguage": {
            "name": "getLanguage",
            "summary": "Gets the propriety language of the option",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option)\n  {\n    return $this->options->getProp($id_option,'language');\n  }",
            "startLine": 543,
            "endLine": 546,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTranslationsWidget": {
            "name": "getTranslationsWidget",
            "summary": "Gets the widgets initial data",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_project, $id_option)\n  {\n    $success     = false;\n    $result      = [];\n    $locale_dirs = [];\n\n    if ($id_option\n        && ($o = $this->options->option($id_option))\n        && isset($o['language'])\n    ) {\n        \/\/ @var $to_explore the path to explore\n        $to_explore = $this->getPathToExplore($id_option);\n        \/\/ @var $locale_dir the path to locale dir\n        $locale_dir = $this->getLocaleDirPath($id_option);\n        \/\/die(var_dump($locale_dir, $to_explore));\n\n        \/\/the txt file in the locale folder\n        $index = $this->getIndexPath($id_option);\n\n        \/\/the text of the option . the number written in the $index file\n        $domain = $o['text'].(is_file($index) ? file_get_contents($index) : '');\n        \/\/ @var $dirs scans dirs existing in locale folder for this path\n      if (is_dir($locale_dir)) {\n        \/\/ @var array $languages dirs in locale folder\n        $dirs = \\bbn\\File\\Dir::getDirs($locale_dir) ?: [];\n        if (!empty($dirs)) {\n          foreach ($dirs as $l){\n            $languages[] = X::basename($l);\n          }\n        }\n      }\n\n        $new = 0;\n        $i   = 0;\n        \/\/ @var array the languages found in locale dir\n      if (!empty($languages)) {\n        $result = [];\n        foreach ($languages as $lng){\n          \/\/ the root to file po & mo\n          $po = $locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$domain.'.po';\n          $mo = $locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$domain.'.mo';\n          \/\/ if a file po already exists takes its content\n          if (is_file($po)) {\n            $fileHandler      = new \\Sepia\\PoParser\\SourceHandler\\FileSystem($po);\n            $poParser         = new \\Sepia\\PoParser\\Parser($fileHandler);\n            $Catalog          = \\Sepia\\PoParser\\Parser::parseFile($po);\n            $num_translations = 0;\n            if ($translations = $Catalog->getEntries()) {\n              foreach($translations as $tr){\n                if ($tr->getMsgStr()) {\n                  $num_translations ++;\n                }\n              }\n\n              $result[$lng] = [\n                'num' => count($translations),\n                'num_translations' => $num_translations,\n                'lang' => $lng,\n                'num_translations_db' => $this->countTranslationsDb($id_option) ? $this->countTranslationsDb($id_option)[$lng] : 0\n              ];\n            }\n          }\n          \/\/ if the file po for the $lng doesn't exist $result is an empty object\n          else{\n            if(!empty($this->countTranslationsDb($id_option)[$lng])) {\n              $count_translations = $this->countTranslationsDb($id_option)[$lng];\n            }\n            else{\n              $count_translations = 0;\n            }\n\n            $result[$lng] = [\n              'num' => 0,\n              'num_translations' => 0,\n              'lang' => $lng,\n              'num_translations_db' => $count_translations\n            ];\n          }\n        }\n      }\n\n      $i++;\n      $success = true;\n      if (!empty($languages)) {\n        $locale_dirs = $languages;\n      }\n    }\n\n    return [\n      'locale_dirs' => $locale_dirs,\n      'result' => $result,\n      'success' => $success,\n    ];\n  }",
            "startLine": 556,
            "endLine": 649,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_project",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "project"
                },
                {
                    "name": "id_option",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ]
        },
        "getPoFiles": {
            "name": "getPoFiles",
            "summary": "Returns an array containing the po files found for the id_option",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option)\n  {\n    if (!empty($id_option) && ($o = $this->options->option($id_option))\n        && ($parent = $this->options->parent($id_option))\n        && defined($parent['code'])\n    ) {\n      $tmp = [];\n      \/\/ @var  $to_explore the path to explore\n      $to_explore = $this->getPathToExplore($id_option);\n      \/\/ @var  $locale_dir locale dir in the path\n      $locale_dir = $this->getLocaleDirPath($id_option);\n      $dirs       = \\bbn\\File\\Dir::getDirs($locale_dir) ?: [];\n      $languages  = array_map(\n        function ($a) {\n          return X::basename($a);\n        }, $dirs\n      ) ?: [];\n      if (!empty($languages)) {\n        foreach ($languages as $lng){\n          \/\/ the path of po and mo files\n          $idx = is_file($locale_dir.'\/index.txt') ? file_get_contents($locale_dir.'\/index.txt') : '';\n          if (is_file($locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$o['text'].$idx.'.po')) {\n            $tmp[$lng] = $locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$o['text'].$idx.'.po';\n          }\n        }\n      }\n\n      return $tmp;\n    }\n  }",
            "startLine": 658,
            "endLine": 687,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "countTranslationsDb": {
            "name": "countTranslationsDb",
            "summary": "Count how many of the strings contained in po files are already in database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option)\n  {\n    $count = [];\n    $po    = $this->getPoFiles($id_option);\n    if (!empty($po)) {\n      foreach ($po as $lang => $file) {\n        $fileHandler     = new \\Sepia\\PoParser\\SourceHandler\\FileSystem($file);\n        $poParser        = new \\Sepia\\PoParser\\Parser($fileHandler);\n        $Catalog         = \\Sepia\\PoParser\\Parser::parseFile($file);\n        $fromPo          = $Catalog->getEntries();\n        $source_language = $this->getLanguage($id_option);\n\n        $count[$lang] = 0;\n        foreach($fromPo as $o){\n          if ($exp = $o->getMsgId()) {\n            $id = $this->db->selectOne('bbn_i18n', 'id', ['exp' => $exp, 'lang' => $source_language]);\n            if ($string = $this->db->selectOne(\n              'bbn_i18n_exp', 'expression', [\n              'id_exp' => $id,\n              'lang' => $lang\n              ]\n            )\n            ) {\n              $count[$lang]++;\n            }\n          }\n        }\n      }\n    }\n\n    return $count;\n  }",
            "startLine": 696,
            "endLine": 727,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ]
        },
        "getTranslationsStrings": {
            "name": "getTranslationsStrings",
            "summary": "Returns the strings contained in the given path",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option, $source_language, $languages)\n  {\n    if (!empty($id_option)\n        && !empty($source_language)\n        \/\/ @var string $to_explore The path to explore path of mvc\n        && ($to_explore = $this->getPathToExplore($id_option))\n        \/\/the position of locale dir\n        && ($locale_dir = $this->getLocaleDirPath($id_option))\n    ) {\n      \/\/creates the array $to_explore_dirs containing mvc, plugins e components\n      if ($to_explore_dirs = bbn\\File\\Dir::getDirs($to_explore)) {\n        $current_dirs = array_values(\n          array_filter(\n            $to_explore_dirs, function ($a) {\n              $basename = X::basename($a);\n              if(( strpos($basename, 'locale') !== 0 )\n                  && ( strpos($basename, 'data') !== 0 )\n                  && ( strpos($basename, '.') !== 0 )\n              ) {\n                return $a;\n              }\n            }\n          )\n        );\n      }\n\n      $res = [];\n\n      \/\/case of generate called from table\n      if (empty($languages)) {\n        \/** @var (array) $languages based on locale dirs found in the path*\/\n        $languages = array_map(\n          function ($a) {\n            return X::basename($a);\n          }, \\bbn\\File\\Dir::getDirs($locale_dir)\n        ) ?: [];\n      }\n\n      if (!empty($to_explore_dirs)) {\n        foreach ($to_explore_dirs as $c){\n          if ($ana = $this->analyzeFolder($c, true)) {\n            foreach ($ana as $exp => $an) {\n              if (!isset($res[$exp])) {\n                $res[$exp] = $an;\n              }\n              else {\n                $res[$exp] = array_merge($res[$exp], $an);\n              }\n            }\n          }\n        }\n      }\n\n      $news = [];\n      $done = 0;\n\n      foreach ($res as $r => $val){\n        \/\/ for each string create a property 'path' containing the files' name in which the string is contained\n\n        $res[$r] = ['path' => $val];\n\n        \/\/ checks if the table bbn_i18n of db already contains the string $r for this $source_lang\n        if (!($id = $this->db->selectOne(\n          'bbn_i18n', 'id', [\n          'exp' => $r,\n          'lang' => $source_language\n          ]\n        ))\n        ) {\n          \/\/ if the string $r is not in 'bbn_i18n' inserts the string\n          $this->db->insertIgnore(\n            'bbn_i18n', [\n            'exp' => stripslashes($r),\n            'lang' => $source_language,\n            ]\n          );\n          $id = $this->db->lastId();\n        }\n\n        \/\/ create the property 'id_exp' for the string $r\n        $res[$r]['id_exp'] = $id;\n\n        \/\/ puts the string $r into the property 'original_exp' (I'll use only array_values at the end) *\n        $res[$r]['original_exp'] = $r;\n\n        \/\/ checks in 'bbn_i18n_exp' if the string $r already exist for this $source_lang\n        if(!( $id_exp = $this->db->selectOne(\n          'bbn_i18n_exp', 'id_exp', [\n          'id_exp' => $id,\n          'lang' => $source_language\n          ]\n        ) )\n        ) {\n          \/\/ if the string $r is not in 'bbn_i18n_exp' inserts the string\n          \/\/  $done will be the number of strings found in the folder $to_explore that haven't been found in the table\n          \/\/ 'bbn_i18n_exp' of db, so $done is the number of new strings inserted in in 'bbn_i18n_exp'\n          $done += (int)$this->db->insertIgnore(\n            'bbn_i18n_exp', [\n            'id_exp' => $id,\n            'lang' => $source_language,\n            'expression' => stripslashes($r)\n            ]\n          );\n          \/\/creates an array of new strings found in the folder;\n          $news[] = $r;\n        }\n\n        \/\/ $languages is the array of languages existing in locale dir\n        foreach ($languages as $lng){\n          \/\/  create a property indexed to the code of $lng containing the string $r from 'bbn_i18n_exp' in this $lng\n          $res[$r][$lng] = (string)$this->db->selectOne(\n            'bbn_i18n_exp',\n            'expression',\n            [\n              'id_exp' => $id,\n              'lang' => $lng\n            ]\n          );\n        }\n      }\n\n      return [\n        'news' => $news,\n        'id_option' => $id_option,\n        'res' => array_values($res),\n        'done' => $done,\n        'languages' => $languages,\n        'path' => $to_explore,\n        'success' => true\n      ];\n    }\n  }",
            "startLine": 738,
            "endLine": 869,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "source_language",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "languages",
                    "position": 2,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTranslationsTableComplete": {
            "name": "getTranslationsTableComplete",
            "summary": "Returns the informations relative to traslation of the given $id_option of a $id_project. The data is formatted to be shown in a table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_project, $id_option)\n  {\n    if (!empty($id_option)\n        && ($o = $this->options->option($id_option))\n        && ($parent = $this->options->parent($id_option))\n        && defined($parent['code'])\n    ) {\n      \/\/ @var  $path_source_lang the property language of the id_option (the path)\n      $path_source_lang = $this->options->getProp($id_option, 'language');\n\n      \/\/ @var  $to_explore the path to explore\n      $to_explore = $this->getPathToExplore($id_option);\n\n      $locale_dir = $this->getLocaleDirPath($id_option);\n\n      $languages = array_map(\n        function ($a) {\n          return X::basename($a);\n        }, \\bbn\\File\\Dir::getDirs($locale_dir)\n      ) ?: [];\n\n      $i       = 0;\n      $res     = [];\n      $project = new bbn\\Appui\\Project($this->db, $id_project);\n      if (!empty($languages)) {\n        $po_file = [];\n        $success = false;\n        foreach ($languages as $lng){\n          \/\/ the path of po and mo files\n          $idx = is_file($locale_dir.'\/index.txt') ? file_get_contents($locale_dir.'\/index.txt') : '';\n          $po  = $locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$o['text'].$idx.'.po';\n          $mo  = $locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$o['text'].$idx.'.mo';\n\n          \/\/ if the file po exist takes its content\n          if (file_exists($po)) {\n            $fileHandler = new \\Sepia\\PoParser\\SourceHandler\\FileSystem($po);\n            $poParser    = new \\Sepia\\PoParser\\Parser($fileHandler);\n            $Catalog     = \\Sepia\\PoParser\\Parser::parseFile($po);\n\n            if (!empty($translations = $Catalog->getEntries())) {\n              foreach ($translations as $i => $t){\n                \/\/ @var  $original the original expression\n                $original = $t->getMsgId();\n\n                $po_file[$i][$lng]['original'] = $original;\n\n                \/\/ the translation of the string found in the po file\n                $po_file[$i][$lng]['translations_po'] = $t->getMsgStr();\n\n                \/\/ @var  $id takes the id of the original expression in db\n                if ($id = $this->db->selectOne(\n                  'bbn_i18n',\n                  'id',\n                  [\n                    'exp' => $original,\n                    'lang' => $path_source_lang\n                  ]\n                )\n                ) {\n                  $po_file[$i][$lng]['translations_db'] = $this->db->selectOne('bbn_i18n_exp', 'expression', ['id_exp' => $id, 'lang' => $lng]);\n\n                  \/\/ the id of the string\n                  $po_file[$i][$lng]['id_exp'] = $id;\n\n                  \/\/ @var (array) takes $paths of files in which the string was found from the file po\n                  $paths = $t->getReference();\n\n                  \/\/ get the url to use it for the link to ide from the table\n                  foreach ($paths as $p){\n                    $po_file[$i][$lng]['paths'][] = $project->real_to_url_i18n($p);\n                  }\n\n                  \/\/ the number of times the strings is found in the files of the path\n                  $po_file[$i][$lng]['occurrence'] = !empty($po_file[$i][$path_source_lang]) ? count($po_file[$i][$path_source_lang]['paths']) : 0;\n                };\n              }\n\n              $success = true;\n            }\n          }\n        }\n      }\n\n      return [\n        'path_source_lang' => $path_source_lang,\n        'path' => $o['text'],\n        'success' => $success,\n        'languages' => $languages,\n        'total' => count(array_values($po_file)),\n        'strings' => array_values($po_file),\n        'id_option' => $id_option,\n      ];\n    }\n\n  }",
            "startLine": 879,
            "endLine": 973,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_project",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "project"
                },
                {
                    "name": "id_option",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ]
        },
        "getTranslationsTable": {
            "name": "getTranslationsTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_project, $id_option)\n  {\n    if (!empty($id_option)\n        && ($o = $this->options->option($id_option))\n    ) {\n      \/\/ @var  $path_source_lang the property language of the id_option (the path)\n      \/\/on the option the property is language, on the project i18n\n      $path_source_lang = $this->options->getProp($id_option, 'language');\n\n      \/\/ @var  $to_explore the path to explore\n      $to_explore = $this->getPathToExplore($id_option);\n      \/\/the path of the locale dirs\n      $locale_dir = $this->getLocaleDirPath($id_option);\n      $languages  = array_map(\n        function ($a) {\n          return X::basename($a);\n        }, bbn\\File\\Dir::getDirs($locale_dir)\n      ) ?: [];\n\n      $i       = 0;\n      $res     = [];\n      $project = new Project($this->db, $id_project);\n\n      $errors = [];\n      if (!empty($languages)) {\n        $po_file = [];\n        $success = false;\n        foreach ($languages as $lng){\n          \/\/ the path of po and mo files\n          $idx = is_file($locale_dir.'\/index.txt') ? file_get_contents($locale_dir.'\/index.txt') : '';\n          $po  = $locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$o['text'].$idx.'.po';\n          $mo  = $locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$o['text'].$idx.'.mo';\n          \/\/ if the file po exist takes its content\n          if (file_exists($po)) {\n            $fileHandler = new \\Sepia\\PoParser\\SourceHandler\\FileSystem($po);\n            $poParser    = new \\Sepia\\PoParser\\Parser($fileHandler);\n            $Catalog     = \\Sepia\\PoParser\\Parser::parseFile($po);\n\n            if (!empty($translations = $Catalog->getEntries())) {\n              foreach ($translations as $i => $t){\n                \/\/ @var  $original the original expression\n                $id = null;\n                if ($original = stripslashes($t->getMsgId())) {\n                  $idx = \\bbn\\X::find($res, ['exp' => $original]);\n                  if ($idx !== null) {\n                    $todo = false;\n                    $row  =& $res[$idx];\n                  }\n                  else{\n                    $todo = true;\n                    $row  = [];\n                  }\n\n                  \/\/ the translation of the string found in the po file\n                  if (isset($row['id'])) {\n                    $id = $row['id'];\n                  }\n\n                  \/\/ @var  $id takes the id of the original expression in db\n                  if (!isset($id) && !($id = $this->db->selectOne(\n                    'bbn_i18n', 'id', [\n                      'exp' => $original,\n                      'lang' => $path_source_lang\n                    ]\n                  ))\n                  ) {\n                    if (!$this->db->insertIgnore(\n                      'bbn_i18n', [\n                        'exp' => $original,\n                        'lang' => $path_source_lang\n                      ]\n                    )\n                    ) {\n                      throw new \\Exception(\n                        sprintf(\n                          _(\"Impossible to insert the original string %s in the original language %s\"),\n                          $original,\n                          $path_source_lang\n                        )\n                      );\n                    }\n                    else {\n                      $id = $this->db->lastId();\n                    }\n                  }\n\n                  if ($id) {\n                    $row[$lng.'_po'] = stripslashes($t->getMsgStr());\n\n                    $row[$lng.'_db'] = $this->db->selectOne('bbn_i18n_exp', 'expression', ['id_exp' => $id, 'lang' => $lng]);\n                    if ($row[$lng.'_po'] && !$row[$lng.'_db']) {\n                      if ((($row[$lng.'_db'] === false)\n                          && $this->db->insert(\n                            'bbn_i18n_exp', [\n                            'expression' => $row[$lng.'_po'],\n                            'id_exp' => $id,\n                            'lang' => $lng\n                            ]\n                          ))\n                          || $this->db->update(\n                            'bbn_i18n_exp', [\n                            'expression' => $row[$lng.'_po']\n                            ], [\n                            'id_exp' => $id,\n                            'lang' => $lng\n                            ]\n                          )\n                      ) {\n                        $row[$lng.'_db'] = $row[$lng.'_po'];\n                      }\n                      else{\n                        throw new \\Exception(\n                          sprintf(\n                            _(\"Impossible to insert or update the expression \\\"%s\\\" in %s\"),\n                            $row[$lng.'_po'],\n                            $lng\n                          )\n                        );\n                      }\n                    }\n\n                    if (empty($row[$lng.'_db'])) {\n                      $row[$lng.'_db'] = '';\n                      \/\/ die(var_dump($row[$lng.'_db']));\n                    }\n\n                    if ($todo) {\n                      $row['id_exp'] = $id;\n                      $row['paths']  = [];\n                      $row['exp']    = $original;\n                      \/\/ @var (array) takes $paths of files in which the string was found from the file po\n                      $paths = $t->getReference();\n\n                      \/\/ get the url to use it for the link to ide from the table\n                      foreach ($paths as $p) {\n                        $row['paths'][] = $project->realToUrl($p);\n                      }\n\n                      \/\/ the number of times the strings is found in the files of the path\n                      $row['occurrence'] = count($row['paths']);\n                      $res[]             = $row;\n                    }\n                  }\n                  else{\n                    die(\"Error 2\");\n                  }\n                }\n              }\n\n              $success = true;\n            }\n          }\n        }\n      }\n\n      return [\n\n        'path_source_lang' => $path_source_lang,\n        'path' => $o['text'],\n        'success' => $success,\n        'languages' => $languages,\n        'total' => count(array_values($po_file)),\n        'strings' => $res,\n        'id_option' => $id_option,\n        'errors' => $errors\n      ];\n    }\n\n  }",
            "startLine": 976,
            "endLine": 1144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_project",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_option",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPathToExplore": {
            "name": "getPathToExplore",
            "summary": "Returns the path to explore relative to the given id_option",
            "description": "It only works if i18n class is constructed by giving the id_project",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>It only works if i18n class is constructed by giving the id_project<\/p>"
                }
            ],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_option)\n  {\n    if ($this->id_project) {\n      \/** @var bbn\\Appui\\Project *\/\n      $project = new Project($this->db, $this->id_project);\n      \/\/the repository\n      $rep = $project->repositoryById($id_option);\n\n      \/\/the root of this repositoryu\n      $path = $project->getRootPath($rep);\n      return $path;\n    }\n\n    return '';\n  }",
            "startLine": 1154,
            "endLine": 1168,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ]
        },
        "getLocaleDirPath": {
            "name": "getLocaleDirPath",
            "summary": "Returns the path of the locale dir of the given $id_option",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_option)\n  {\n    if ($path = $this->getPathToExplore($id_option)) {\n      if (substr($path, -1) !== '\/') {\n        $path .= '\/';\n      }\n    }\n\n    return $path.'locale';\n  }",
            "startLine": 1177,
            "endLine": 1186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ]
        },
        "getIndexPath": {
            "name": "getIndexPath",
            "summary": "Returns the path of the file index.txt inside the locale folder",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_option)\n  {\n    return $this->getLocaleDirPath($id_option).'\/index.txt';\n  }",
            "startLine": 1195,
            "endLine": 1198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ]
        },
        "cacheDeleteAll": {
            "name": "cacheDeleteAll",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\t\treturn $this;\n  }",
            "startLine": 46,
            "endLine": 49,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "cacheDeleteAll",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Cache",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\t\treturn $this;\n  }",
                "startLine": 46,
                "endLine": 49,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "cacheDelete": {
            "name": "cacheDelete",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($uid)\n  {\n\t\treturn $this;\n  }",
            "startLine": 51,
            "endLine": 54,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": {
                "name": "cacheDelete",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Cache",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($uid)\n  {\n\t\treturn $this;\n  }",
                "startLine": 51,
                "endLine": 54,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "cacheGet": {
            "name": "cacheGet",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($uid, $method = '', $ttl = 0)\n  {\n  }",
            "startLine": 56,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": {
                "name": "cacheGet",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Cache",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($uid, $method = '', $ttl = 0)\n  {\n  }",
                "startLine": 56,
                "endLine": 58,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 2,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheSet": {
            "name": "cacheSet",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($uid, $method = '', $data = NULL, $ttl = 0)\n  {\n\t\treturn $this;\n  }",
            "startLine": 60,
            "endLine": 63,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": {
                "name": "cacheSet",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Cache",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($uid, $method = '', $data = NULL, $ttl = 0)\n  {\n\t\treturn $this;\n  }",
                "startLine": 60,
                "endLine": 63,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 1,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "data",
                        "position": 2,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheGetSet": {
            "name": "cacheGetSet",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(callable $fn, $uid, $method = '', $ttl = 0)\n  {\n\t\treturn $this->cacher->getSet($fn, $cn, $ttl);\n  }",
            "startLine": 65,
            "endLine": 68,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": {
                "name": "cacheGetSet",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Cache",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(callable $fn, $uid, $method = '', $ttl = 0)\n  {\n\t\treturn $this->cacher->getSet($fn, $cn, $ttl);\n  }",
                "startLine": 65,
                "endLine": 68,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 2,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "fn",
                        "position": 0,
                        "type": "callable",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "uid",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheHas": {
            "name": "cacheHas",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($uid, $method = '', $ttl = 0)\n  {\n    return $this->cacheGet($uid, $method, $ttl) ? true : false;\n  }",
            "startLine": 70,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": {
                "name": "cacheHas",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Cache",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($uid, $method = '', $ttl = 0)\n  {\n    return $this->cacheGet($uid, $method, $ttl) ? true : false;\n  }",
                "startLine": 70,
                "endLine": 73,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 2,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 50,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 50,
                "endLine": 57,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 64,
            "endLine": 71,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 64,
                "endLine": 71,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->error;\n  }",
            "startLine": 85,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 85,
                "endLine": 88,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 91,
            "endLine": 94,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 91,
                "endLine": 94,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 97,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 97,
                "endLine": 106,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 114,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 114,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "startLine": 150,
            "endLine": 154,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getAppuiRoot": {
            "name": "getAppuiRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_appui_id;\n  }",
            "startLine": 157,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "startLine": 164,
            "endLine": 172,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "parent": false,
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 181,
            "endLine": 184,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...self::_treat_args(func_get_args())),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 193,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "startLine": 206,
            "endLine": 209,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOptionsTreeRef": {
            "name": "getOptionsTreeRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTreeRef(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "startLine": 212,
            "endLine": 215,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOptionsRef": {
            "name": "getOptionsRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptionsRef(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 224,
            "endLine": 227,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 230,
            "endLine": 233,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 236,
            "endLine": 239,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOptionsTextValueRef": {
            "name": "getOptionsTextValueRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptionsRef($id) : [];\n  }",
            "startLine": 242,
            "endLine": 245,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionId": {
            "name": "getAppuiOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 254,
            "endLine": 257,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsIds": {
            "name": "getAppuiOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(\n          ...self::_treat_args(func_get_args(), true)\n        ),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 260,
            "endLine": 272,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTree": {
            "name": "getAppuiOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args(), true)) ) ? $tree['items'] : [];\n  }",
            "startLine": 275,
            "endLine": 278,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptions": {
            "name": "getAppuiOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 281,
            "endLine": 284,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOption": {
            "name": "getAppuiOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 287,
            "endLine": 290,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTextValue": {
            "name": "getAppuiOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\I18n",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getAppuiOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 293,
            "endLine": 296,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        }
    },
    "properties": null,
    "staticProperties": {
        "extensions": [
            "js",
            "json",
            "php",
            "html"
        ],
        "optional_is_init": false,
        "option_root_id": null,
        "option_appui_id": null
    },
    "constants": null,
    "summary": "",
    "description": "",
    "description_parts": []
}