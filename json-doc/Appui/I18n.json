{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\I18n",
    "namespace": true,
    "realName": "I18n",
    "realNamespace": "bbn\\Appui",
    "traits": [
        "bbn\\Models\\Tts\\Optional"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/I18n.php",
    "startLine": 23,
    "endLine": 1795,
    "numMethods": 72,
    "numProperties": 17,
    "numConstants": 0,
    "numStaticProperties": 3,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Cache",
    "isSubclassOf": false,
    "defaultProperties": {
        "extensions": [
            "js",
            "json",
            "php",
            "html"
        ],
        "optional_is_init": false,
        "option_root_id": null,
        "parser": null,
        "translations": [],
        "user": null,
        "options": null,
        "id_project": null,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "I18n",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Initialize the class I18n",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(Db $db, string $code = null)\n  {\n    parent::__construct($db);\n    $this->user    = User::getInstance();\n    $this->options = new Option($db);\n    if (empty($code)) {\n      if (\\defined('BBN_APP_NAME')) {\n        $code = CONSTANT('BBN_APP_NAME');\n      }\n      else {\n        throw new Exception(X::_(\"The project's ID\/Code is mandatory\"));\n      }\n    }\n\n    $this->parser  = Translations::create($code);\n\n    $this->id_project = Str::isUid($code) ? $code : $this->options->fromCode($code, 'list', 'project', 'appui');\n    if (empty($this->id_project)) {\n      throw new Exception(X::_(\"Project's ID not found for code %s\", $this->options->fromCode('project', 'appui')));\n    }\n  }",
            "parent": {
                "name": "__construct",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function __construct(protected bbn\\Db $db)\n  {\n    $this->cacher = bbn\\Cache::getEngine();\n    $this->_cache_prefix = str_replace('\\\\', '\/', \\get_class($this)).'\/';\n  }",
                "parent": false,
                "trait": false,
                "startLine": 29,
                "endLine": 33,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "__construct",
                "returns": [],
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "type_arr": [
                            "bbn\\Db"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "promoted": "protected"
                    }
                ]
            },
            "trait": false,
            "startLine": 45,
            "endLine": 65,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "promoted": "protected"
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Initialize the class I18n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "db"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Initialize the class I18n\n   *\n   * @param db\n   *\/"
        },
        "analyzePhp": {
            "name": "analyzePhp",
            "summary": "Returns the strings contained in the given php file",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function analyzePhp(string $file): array\n  {\n    $res = [];\n    $php = file_get_contents($file);\n    if ($tmp = Translations::fromPhpCodeString(\n      $php, [\n      'functions' => [\n        '_' => 'gettext'\n      ],\n      'file' => $file\n      ]\n    )\n    ) {\n      foreach ($tmp->getIterator() as $r => $tr){\n        $res[] = $tr->getOriginal();\n      }\n\n      $this->parser->mergeWith($tmp);\n    }\n\n    return array_unique($res);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 74,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "analyzePhp",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the strings contained in the given php file\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the strings contained in the given php file\n   *\n   * @param string $file\n   * @return array\n   *\/"
        },
        "analyzeJs": {
            "name": "analyzeJs",
            "summary": "Returns the strings contained in the given js file",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function analyzeJs(string $file): array\n  {\n    $res = [];\n    $js  = file_get_contents($file);\n    if ($tmp = Translations::fromJsCodeString(\n      $js, [\n      'functions' => [\n        '_' => 'gettext',\n        'bbn._' => 'gettext'\n      ],\n      'file' => $file\n      ]\n    )\n    ) {\n      foreach ($tmp->getIterator() as $r => $tr){\n        $res[] = $tr->getOriginal();\n      }\n\n      $this->parser->mergeWith($tmp);\n    }\n\n    if (preg_match_all('\/`([^`]*)`\/', $js, $matches)) {\n      foreach ($matches[0] as $st){\n        if ($tmp = Translations::fromVueJsString(\n          '<template>'.$st.'<\/template>', [\n          'functions' => [\n            '_' => 'gettext',\n            'bbn._' => 'gettext'\n          ],\n          'file' => $file\n          ]\n        )\n        ) {\n          foreach ($tmp->getIterator() as $r => $tr){\n            $res[] = $tr->getOriginal();\n          }\n\n          $this->parser->mergeWith($tmp);\n        }\n      }\n    }\n\n    \/*if($file === '\/home\/thomas\/domains\/apstapp2.thomas.lan\/_appui\/vendor\/bbn\/appui-task\/src\/components\/tab\/tracker\/tracker.js'){\n      die(X::hdump($res, $js));\n    }*\/\n\n    return array_unique($res);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 104,
            "endLine": 151,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "analyzeJs",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the strings contained in the given js file\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the strings contained in the given js file\n   *\n   * @param string $file\n   * @return array\n   *\/"
        },
        "analyzeJson": {
            "name": "analyzeJson",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function analyzeJson(string $file): array\n  {\n    $res = [];\n    $js  = file_get_contents($file);\n    if ($tmp = Translations::fromJsCodeString(\n      $js, [\n      'functions' => [\n        '_' => 'gettext',\n        'bbn._' => 'gettext'\n      ],\n      'file' => $file\n      ]\n    )\n    ) {\n      foreach ($tmp->getIterator() as $r => $tr){\n        $res[] = $tr->getOriginal();\n      }\n\n      $this->parser->mergeWith($tmp);\n    }\n\n    return array_unique($res);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 154,
            "endLine": 176,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "analyzeJson",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "analyzeHtml": {
            "name": "analyzeHtml",
            "summary": "Returns the strings contained in the given html file",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function analyzeHtml(string $file): array\n  {\n    $res = [];\n    $js  = file_get_contents($file);\n    if (Str::fileExt($file) === 'php') {\n      $re = '\/\\<{1}\\?{1}(php){0,1}.*\\?{1}\\>{1}\/m';\n      $js = preg_replace($re, '', $js);\n    }\n    $js = Str::removeComments($js);\n    if ($tmp = Translations::fromVueJsString(\n      '<template>'.$js.'<\/template>', [\n      'functions' => [\n        '_' => 'gettext',\n        'bbn._' => 'gettext'\n      ],\n      'file' => $file\n      ]\n    )\n    ) {\n      foreach ($tmp->getIterator() as $r => $tr){\n        $res[] = $tr->getOriginal();\n      }\n\n      $this->parser->mergeWith($tmp);\n    }\n\n    return array_unique($res);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 185,
            "endLine": 212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "analyzeHtml",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the strings contained in the given html file\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the strings contained in the given html file\n   *\n   * @param string $file\n   * @return array\n   *\/"
        },
        "analyzeFile": {
            "name": "analyzeFile",
            "summary": "Returns the strings contained in the given file",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function analyzeFile(string $file): array\n  {\n    $res = [];\n    $ext = Str::fileExt($file);\n    if (\\in_array($ext, self::$extensions, true) && is_file($file)) {\n      switch ($ext){\n        case 'html':\n          $res = $this->analyzeHtml($file);\n          break;\n        case 'php':\n          $res = \\array_unique(\\array_merge($this->analyzePhp($file), $this->analyzeHtml($file)));\n          break;\n        case 'js':\n          $res = $this->analyzeJs($file);\n          break;\n        \/*case 'json':\n          $res = $this->analyzeJson($file);\n          break;*\/\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 221,
            "endLine": 243,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "analyzeFile",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the strings contained in the given file\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the strings contained in the given file\n   *\n   * @param string $file\n   * @return array\n   *\/"
        },
        "analyzeFolder": {
            "name": "analyzeFolder",
            "summary": "Returns an array containing the strings found in the given folder",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function analyzeFolder(string $folder = '.', bool $deep = false): array\n  {\n    $res = [];\n    if (\\is_dir($folder)) {\n      $files = $deep ? Dir::scan($folder, 'file') : Dir::getFiles($folder);\n      foreach ($files as $f){\n        $words = $this->analyzeFile($f);\n        foreach ($words as $word){\n          if (!isset($res[$word])) {\n            $res[$word] = [];\n          }\n\n          if (!in_array($f, $res[$word])) {\n            $res[$word][] = $f;\n          }\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 253,
            "endLine": 273,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "analyzeFolder",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "folder",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": ".",
                    "default_name": ""
                },
                {
                    "name": "deep",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array containing the strings found in the given folder\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$folder"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$deep"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array containing the strings found in the given folder\n   *\n   * @param string  $folder\n   * @param boolean $deep\n   * @return array\n   *\/"
        },
        "getParser": {
            "name": "getParser",
            "summary": "Returns the parser",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getParser()\n  {\n    return $this->parser;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 281,
            "endLine": 284,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getParser",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the parser\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the parser\n   *\n   * @return void\n   *\/"
        },
        "result": {
            "name": "result",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function result()\n  {\n    foreach ($this->parser->getIterator() as $r => $tr){\n      $this->translations[] = $tr->getOriginal();\n    }\n\n    return array_unique($this->translations);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 287,
            "endLine": 294,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "result",
            "returns": [],
            "arguments": []
        },
        "getIdProject": {
            "name": "getIdProject",
            "summary": "get the id of the project from the id_option of a path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIdProject($id_option, $projects)\n  {\n    foreach($projects as $i => $p){\n      foreach ($projects[$i]['path'] as $idx => $pa){\n        if ($projects[$i]['path'][$idx]['id_option'] === $id_option) {\n          return $projects[$i]['id'];\n        }\n      }\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 304,
            "endLine": 313,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getIdProject",
            "returns": [],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "projects",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "get the id of the project from the id_option of a path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id_option"
                    },
                    {
                        "tag": "param",
                        "type": "$projects"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * get the id of the project from the id_option of a path\n   *\n   * @param $id_option\n   * @param $projects\n   * @return void\n   *\/"
        },
        "getPrimariesLangs": {
            "name": "getPrimariesLangs",
            "summary": "Gets primaries langs from option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPrimariesLangs(bool $onlyCodes = false): array\n  {\n    if ($languages = $this->options->fullOptions('languages', 'i18n', 'appui')) {\n      $res = array_values(\n        array_filter(\n          $languages, function ($v) {\n            return !empty($v['primary']);\n          }\n        )\n      );\n      return $onlyCodes ? \\array_map(fn($l) => $l['code'], $res) : $res;\n    }\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 321,
            "endLine": 334,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getPrimariesLangs",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "onlyCodes",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets primaries langs from option\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets primaries langs from option\n   *\n   * @return array\n   *\/"
        },
        "getNumOptions": {
            "name": "getNumOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNumOptions()\n  {\n    \/** @var  $paths takes all options with i18n property setted*\/\n    $paths = $this->options->findI18n(null, true);\n    $data = [];\n    \/**\n    * creates the property data_widget that will have just num of items found for the option + 1 (the text of the option parent), the * * number of strings translated and the source language indexed to the language\n    *\/\n    $primaries = $this->getPrimariesLangs();\n    foreach ($paths as $p => $val){\n      $parent = $this->options->getIdParent($paths[$p]['id']);\n      foreach ($primaries as $p) {\n        $lang = $p['code'];\n        $count = 0;\n        $items = $paths[$p]['items'];\n        \/** push the text of the option into the array of strings *\/\n        $items[] = [\n          'id' => $paths[$p]['id'],\n          'text' => $paths[$p]['text'],\n          'id_parent' => $parent\n        ];\n        foreach ($items as $idx => $item){\n          if (($id = $this->db->selectOne('bbn_i18n', 'id', [\n              'exp' => $this->normlizeText($item['text']),\n              'lang' => $paths[$p]['language']\n            ]))\n            && $this->db->selectOne('bbn_i18n_exp', 'id_exp', [\n              'id_exp' => $id,\n              'lang' => $lang\n            ])\n          ) {\n            $count++;\n          }\n        }\n        $paths[$p]['data_widget']['result'][$lang] = [\n          'num' => count($items),\n          'num_translations' => $count,\n          'lang' => $lang\n        ];\n      }\n      $paths[$p]['data_widget']['locale_dirs'] = [];\n      unset($paths[$p]['items']);\n      $data[] = $paths[$p];\n    }\n    return [\n      'data' => $data\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 343,
            "endLine": 390,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getNumOptions",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": "",
                "deprecated": {
                    "tag": "deprecated",
                    "text": "get the num of items['text'] in original language and num translations foreach lang in configured langs (for this project uses all primaries as configured langs)"
                }
            },
            "comments": "  \/**\n   * @deprecated\n   * get the num of items['text'] in original language and num translations foreach lang in configured langs (for this project uses all primaries as configured langs)\n   *\n   * @return void\n   *\/"
        },
        "getNumOption": {
            "name": "getNumOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNumOption($id)\n  {\n    \/** @var  $paths takes all options with i18n property setted*\/\n    $paths = $this->options->findI18nOption($id);\n    $data  = [];\n    \/**\n    * creates the property data_widget that will have just num of items found for the option + 1 (the text of the option parent), the * * number of strings translated and the source language indexed to the language\n    *\/\n    $primaries = $this->getPrimariesLangs();\n    foreach ($paths as $p => $val){\n      $parent = $this->options->getIdParent($paths[$p]['id']);\n      foreach ($primaries as $p) {\n        $lang = $p['code'];\n        $count = 0;\n        $items = $paths[$p]['items'];\n        \/** push the text of the option into the array of strings *\/\n        $items[] = [\n          'id' => $paths[$p]['id'],\n          'text' => $paths[$p]['text'],\n          'id_parent' => $parent\n        ];\n        foreach ($items as $idx => $item){\n          if (($id = $this->db->selectOne('bbn_i18n', 'id', [\n              'exp' => $this->normlizeText($item['text']),\n              'lang' => $paths[$p]['language']\n            ]))\n            && $this->db->selectOne('bbn_i18n_exp', 'id_exp', [\n              'id_exp' => $id,\n              'lang' => $lang\n            ])\n          ) {\n            $count ++;\n          }\n        }\n        $paths[$p]['data_widget']['result'][$lang] = [\n          'num' => count($items),\n          'num_translations' => $count,\n          'lang' => $lang\n        ];\n      }\n      $paths[$p]['data_widget']['locale_dirs'] = [];\n      unset($paths[$p]['items']);\n      $data[] = $paths[$p];\n    }\n    return [\n      'data' => $data\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 399,
            "endLine": 446,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getNumOption",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [],
                "return": "",
                "deprecated": {
                    "tag": "deprecated",
                    "text": "get the num of items['text'] in original language and num translations foreach lang in configured langs (for this project uses all primaries as configured langs)"
                }
            },
            "comments": "  \/**\n   * @deprecated\n   * get the num of items['text'] in original language and num translations foreach lang in configured langs (for this project uses all primaries as configured langs)\n   *\n   * @return void\n   *\/"
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getOptions()\n  {\n    \/** @var ( array) $paths get all options having i18n property setted and its items *\/\n    $paths = $this->options->findI18n(null, true);\n    $res   = [];\n    foreach ($paths as $p => $val){\n      $res[$p] = [\n        'text' => $paths[$p]['text'],\n        'opt_language' => $paths[$p]['language'],\n        'strings' => [],\n        'id_option' => $paths[$p]['id']\n      ];\n\n      \/** @todo AT THE MOMENT I'M NOT CONSIDERING LANGUAGES OF TRANSLATION *\/\n      foreach ($paths[$p]['items'] as $i => $value){\n        \/* check if the opt text is in bbn_i18n and takes translations from db *\/\n        if ($exp = $this->db->rselect('bbn_i18n', [\n          'id',\n          'exp',\n          'lang'\n        ], [\n          'exp' => $this->normlizeText($paths[$p]['items'][$i]['text']),\n          'lang' => $paths[$p]['language']\n        ])) {\n          if ($translated = $this->db->rselectAll('bbn_i18n_exp', [\n            'id_exp',\n            'expression',\n            'lang'\n          ], [\n            'id_exp' => $exp['id']\n          ])) {\n            \/** @var  $languages the array of languages found in db for the options*\/\n            $languages      = [];\n            $translated_exp = '';\n            foreach ($translated as $t => $trans){\n              if (!in_array($translated[$t]['lang'], $translated)) {\n                $languages[] = $translated[$t]['lang'];\n              }\n\n              $translated_exp = $translated[$t]['expression'];\n            }\n\n            if (!empty($languages)) {\n              foreach($languages as $lang){\n                $res[$p]['strings'][] = [\n                  $lang => [\n                    'id_exp' => $exp['id'],\n                    'exp' => $exp['exp'],\n                    'translation_db' => $translated_exp\n                  ]\n                ];\n              }\n            }\n          }\n        }\n        else {\n          if ($this->db->insert('bbn_i18n', [\n            'exp' => $this->normlizeText($paths[$p]['items'][$i]['text']),\n            'lang' => $paths[$p]['language']\n          ])) {\n            $id = $this->db->lastId();\n            $this->db->insertIgnore('bbn_i18n_exp', [\n              'id_exp' => $id,\n              'expression' => $this->normlizeText($paths[$p]['items'][$i]['text']),\n              'lang' => $paths[$p]['language']\n            ]);\n            $res[$p]['strings'][] = [\n              $paths[$p]['language'] => [\n                'id_exp' => $id,\n                'exp' => $paths[$p]['items'][$i]['text'],\n                'translation_db' => $paths[$p]['items'][$i]['text']\n              ]\n            ];\n          };\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 455,
            "endLine": 534,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptions",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": "",
                "deprecated": {
                    "tag": "deprecated",
                    "text": "Gets the option with the property i18n setted and its items"
                }
            },
            "comments": "  \/**\n   * @deprecated\n   * Gets the option with the property i18n setted and its items\n   *\n   * @return void\n   *\/"
        },
        "getLanguage": {
            "name": "getLanguage",
            "summary": "Gets the propriety language of the option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLanguage($id_option)\n  {\n    return $this->options->getProp($id_option,'language');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 542,
            "endLine": 545,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getLanguage",
            "returns": [],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the propriety language of the option\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "id_option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the propriety language of the option\n   *\n   * @param id_option\n   *\/"
        },
        "getTranslationsWidget": {
            "name": "getTranslationsWidget",
            "summary": "Gets the widgets initial data",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTranslationsWidget($id_project, $id_option)\n  {\n    $success     = false;\n    $result      = [];\n    $locale_dirs = [];\n\n    if ($id_option\n        && ($o = $this->options->option($id_option))\n        && isset($o['language'])\n    ) {\n        \/\/ @var $locale_dir the path to locale dir\n        $locale_dir = $this->getLocaleDirPath($id_option);\n\n        \/\/the txt file in the locale folder\n        $index = $this->getIndexPath($id_option);\n\n        \/\/the text of the option . the number written in the $index file\n        $domain = $o['text'].(is_file($index) ? file_get_contents($index) : '');\n        \/\/ @var $dirs scans dirs existing in locale folder for this path\n      if (is_dir($locale_dir)) {\n        \/\/ @var array $languages dirs in locale folder\n        $dirs = Dir::getDirs($locale_dir) ?: [];\n        if (!empty($dirs)) {\n          foreach ($dirs as $l){\n            $languages[] = X::basename($l);\n          }\n        }\n      }\n\n        $new = 0;\n        $i   = 0;\n        \/\/ @var array the languages found in locale dir\n      if (!empty($languages)) {\n        $result = [];\n        foreach ($languages as $lng){\n          \/\/ the root to file po & mo\n          $po = $locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$domain.'.po';\n          \/\/ if a file po already exists takes its content\n          if (is_file($po)) {\n            $locale_dirs[] = $lng;\n            $num_translations = 0;\n            if ($translations = $this->parsePoFile($po)) {\n              foreach($translations as $tr){\n                if ($tr->getMsgStr()) {\n                  $num_translations ++;\n                }\n              }\n\n              $result[$lng] = [\n                'num' => count($translations),\n                'num_translations' => $num_translations,\n                'lang' => $lng,\n                'num_translations_db' => $this->countTranslationsDb($id_option) ? $this->countTranslationsDb($id_option)[$lng] : 0\n              ];\n            }\n          }\n          \/\/ if the file po for the $lng doesn't exist $result is an empty object\n          else{\n            if(!empty($this->countTranslationsDb($id_option)[$lng])) {\n              $count_translations = $this->countTranslationsDb($id_option)[$lng];\n            }\n            else{\n              $count_translations = 0;\n            }\n\n            $result[$lng] = [\n              'num' => 0,\n              'num_translations' => 0,\n              'lang' => $lng,\n              'num_translations_db' => $count_translations\n            ];\n          }\n        }\n      }\n\n      $i++;\n      $success = true;\n    }\n\n    $ret = [\n      'locale_dirs' => $locale_dirs,\n      'result' => $result,\n      'success' => $success,\n    ];\n    $this->cacheSet($id_option, 'get_translations_widget', $ret);\n    return $ret;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 555,
            "endLine": 641,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getTranslationsWidget",
            "returns": [],
            "arguments": [
                {
                    "name": "id_project",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "project"
                },
                {
                    "name": "id_option",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "Gets the widgets initial data\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "project"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the widgets initial data\n   *\n   * @param string $id_project\n   * @param string $id_option\n   * @return void\n   *\/"
        },
        "getOptionsTranslationsWidget": {
            "name": "getOptionsTranslationsWidget",
            "summary": "Gets the widgets initial data for options",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getOptionsTranslationsWidget(string $idPath): array\n  {\n    $result = [];\n    $languages = [];\n    if ($localeDir = $this->getLocaleDirPath($idPath)) {\n      $languages  = $this->getPrimariesLangs(true);\n      foreach ($languages as $lang) {\n        $count = 0;\n        $countDB = 0;\n        if (\\is_file(\"$localeDir\/$lang\/options.json\")) {\n          $options = \\json_decode(\\file_get_contents(\"$localeDir\/$lang\/options.json\"), true);\n          foreach ($options as $exp => $opt) {\n            if (!empty($opt['translation'])) {\n              $count++;\n            }\n            if (($id = $this->db->selectOne('bbn_i18n', 'id', [\n                'exp' => $this->normlizeText($exp),\n                'lang' => $opt['language']\n              ]))\n              && $this->db->selectOne('bbn_i18n_exp', 'id_exp', [\n                'id_exp' => $id,\n                'lang' => $lang\n              ])\n            ) {\n              $countDB++;\n            }\n          }\n        }\n        $result[$lang] = [\n          'lang' => $lang,\n          'num' => !empty($options) ? count($options) : 0,\n          'num_translations' => $count,\n          'num_translations_db' => $countDB\n        ];\n      }\n    }\n    $ret = [\n      'locale_dirs' => $languages,\n      'result' => $result\n    ];\n    $this->cacheSet($idPath, 'get_options_translations_widget', $ret);\n    return $ret;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 651,
            "endLine": 693,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTranslationsWidget",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "idPath",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "project"
                }
            ],
            "doc": {
                "description": "Gets the widgets initial data for options\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "project"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the widgets initial data for options\n   *\n   * @param string $id_project\n   * @param string $id_option\n   * @return void\n   *\/"
        },
        "getPoFiles": {
            "name": "getPoFiles",
            "summary": "Returns an array containing the po files found for the id_option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPoFiles($id_option)\n  {\n    if (!empty($id_option) && ($o = $this->options->option($id_option))\n        && ($parent = $this->options->parent($id_option))\n        && defined($parent['code'])\n    ) {\n      $tmp = [];\n      \/\/ @var  $locale_dir locale dir in the path\n      $locale_dir = $this->getLocaleDirPath($id_option);\n      $dirs       = Dir::getDirs($locale_dir) ?: [];\n      $languages  = array_map(\n        function ($a) {\n          return X::basename($a);\n        }, $dirs\n      ) ?: [];\n      if (!empty($languages)) {\n        foreach ($languages as $lng){\n          \/\/ the path of po and mo files\n          $idx = $this->getIndexValue($id_option) ?: 1;\n          if (is_file($locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$o['text'].$idx.'.po')) {\n            $tmp[$lng] = $locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$o['text'].$idx.'.po';\n          }\n        }\n      }\n\n      return $tmp;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 702,
            "endLine": 729,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPoFiles",
            "returns": [],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array containing the po files found for the id_option\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id_option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array containing the po files found for the id_option\n   *\n   * @param $id_option\n   * @return array\n   *\/"
        },
        "countTranslationsDb": {
            "name": "countTranslationsDb",
            "summary": "Count how many of the strings contained in po files are already in database",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function countTranslationsDb($id_option)\n  {\n    $count = [];\n    $po    = $this->getPoFiles($id_option);\n    if (!empty($po)) {\n      foreach ($po as $lang => $file) {\n        $fromPo          = $this->parsePoFile($file);\n        $source_language = $this->getLanguage($id_option);\n\n        $count[$lang] = 0;\n        foreach ($fromPo as $o) {\n          if (($exp = $o->getMsgId())\n            && ($id = $this->db->selectOne('bbn_i18n', 'id', [\n              'exp' => $this->normlizeText($exp),\n              'lang' => $source_language\n            ]))\n            && $this->db->selectOne('bbn_i18n_exp', 'expression', [\n              'id_exp' => $id,\n              'lang' => $lang\n            ])\n          ) {\n            $count[$lang]++;\n          }\n        }\n      }\n    }\n\n    return $count;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 738,
            "endLine": 766,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "countTranslationsDb",
            "returns": [],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "Count how many of the strings contained in po files are already in database\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Count how many of the strings contained in po files are already in database\n   *\n   * @param string $id_option\n   * @return void\n   *\/"
        },
        "getTranslation": {
            "name": "getTranslation",
            "summary": "Get an expression translation for the given language",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTranslation(string $expression, string $originalLang, string $transLang): ?string\n  {\n    return $this->db->selectOne([\n      'table' => 'bbn_i18n',\n      'fields' => ['bbn_i18n_exp.expression'],\n      'join' => [[\n        'table' => 'bbn_i18n_exp',\n        'on' => [\n          'conditions' => [[\n            'field' => 'bbn_i18n.id',\n            'exp' => 'bbn_i18n_exp.id_exp'\n          ], [\n            'field' => 'bbn_i18n_exp.lang',\n            'value' => $transLang\n          ]]\n        ]\n      ]],\n      'where' => [\n        'bbn_i18n.exp' => $this->normlizeText($expression),\n        'bbn_i18n.lang' => $originalLang\n      ]\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 776,
            "endLine": 798,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "getTranslation",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "expression",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The expression to be translated"
                },
                {
                    "name": "originalLang",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ang The original expression's language"
                },
                {
                    "name": "transLang",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ang the language of the translation"
                }
            ],
            "doc": {
                "description": "Get an expression translation for the given language\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$expression",
                        "description": "The expression to be translated"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$original",
                        "description": "ang The original expression's language"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$trans",
                        "description": "ang the language of the translation"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Get an expression translation for the given language\n   * @param string $expression The expression to be translated\n   * @param string $originalLang The original expression's language\n   * @param string $transLang the language of the translation\n   * @return string|null\n   *\/"
        },
        "getNumTranslations": {
            "name": "getNumTranslations",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNumTranslations(string $idExp, ?string $originalLocale = ''): int\n  {\n    if (!Str::isUid($idExp) && !empty($originalLocale)) {\n      $idExp = $this->db->selectOne('bbn_i18n', 'id', [\n        'exp' => $idExp,\n        'lang' => $originalLocale\n      ]);\n    }\n\n    if (Str::isUid($idExp)) {\n      return $this->db->count([\n        'table' => 'bbn_i18n_exp',\n        'fields' => [],\n        'where' => [\n          'conditions' => [[\n            'field' => 'id_exp',\n            'value' => $idExp\n          ], [\n            'field' => 'expression',\n            'operator' => 'isnotnull'\n          ]]\n        ]\n      ]);\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 801,
            "endLine": 827,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getNumTranslations",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "idExp",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "originalLocale",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTranslationsStrings": {
            "name": "getTranslationsStrings",
            "summary": "Returns the strings contained in the given path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTranslationsStrings($id_option, $source_language, $languages)\n  {\n    if (!empty($id_option)\n        && !empty($source_language)\n        \/\/ @var string $to_explore The path to explore path of mvc\n        && ($to_explore = $this->getPathToExplore($id_option))\n        \/\/the position of locale dir\n        && ($locale_dir = $this->getLocaleDirPath($id_option))\n    ) {\n      \/\/creates the array $to_explore_dirs containing mvc, plugins e components\n      if ($to_explore_dirs = Dir::getDirs($to_explore)) {\n        $current_dirs = array_values(\n          array_filter(\n            $to_explore_dirs, function ($a) {\n              $basename = X::basename($a);\n              if(( strpos($basename, 'locale') !== 0 )\n                  && ( strpos($basename, 'data') !== 0 )\n                  && ( strpos($basename, '.') !== 0 )\n              ) {\n                return $a;\n              }\n            }\n          )\n        );\n      }\n\n      $res = [];\n\n      \/\/case of generate called from table\n      if (empty($languages)) {\n        \/** @var (array) $languages based on locale dirs found in the path*\/\n        $languages = array_map(\n          function ($a) {\n            return X::basename($a);\n          }, Dir::getDirs($locale_dir)\n        ) ?: [];\n      }\n\n      if (!empty($current_dirs)) {\n        foreach ($current_dirs as $c){\n          if ($ana = $this->analyzeFolder($c, true)) {\n            foreach ($ana as $exp => $an) {\n              if (!isset($res[$exp])) {\n                $res[$exp] = $an;\n              }\n              else {\n                $res[$exp] = array_merge($res[$exp], $an);\n              }\n            }\n          }\n        }\n      }\n\n      $news = [];\n      $done = 0;\n\n      foreach ($res as $r => $val){\n        \/\/ for each string create a property 'path' containing the files' name in which the string is contained\n\n        $res[$r] = ['path' => $val];\n\n        \/\/ checks if the table bbn_i18n of db already contains the string $r for this $source_lang\n        if (!($id = $this->db->selectOne('bbn_i18n', 'id', [\n          'exp' => $this->normlizeText($r),\n          'lang' => $source_language\n        ]))) {\n          \/\/ if the string $r is not in 'bbn_i18n' inserts the string\n          if ($this->db->insertIgnore('bbn_i18n', [\n            'exp' => $this->normlizeText($r),\n            'lang' => $source_language,\n          ])) {\n            $id = $this->db->lastId();\n          }\n        }\n\n        \/\/ create the property 'id_exp' for the string $r\n        $res[$r]['id_exp'] = $id;\n\n        \/\/ puts the string $r into the property 'original_exp' (I'll use only array_values at the end) *\n        $res[$r]['original_exp'] = $r;\n\n        \/\/ checks in 'bbn_i18n_exp' if the string $r already exist for this $source_lang\n        if (!($id_exp = $this->db->selectOne('bbn_i18n_exp', 'id_exp', [\n          'id_exp' => $id,\n          'lang' => $source_language\n        ]))) {\n          \/\/ if the string $r is not in 'bbn_i18n_exp' inserts the string\n          \/\/  $done will be the number of strings found in the folder $to_explore that haven't been found in the table\n          \/\/ 'bbn_i18n_exp' of db, so $done is the number of new strings inserted in in 'bbn_i18n_exp'\n          $done += (int)$this->db->insertIgnore(\n            'bbn_i18n_exp', [\n            'id_exp' => $id,\n            'lang' => $source_language,\n            'expression' => $this->normlizeText($r)\n            ]\n          );\n          \/\/creates an array of new strings found in the folder;\n          $news[] = $r;\n        }\n\n        \/\/ $languages is the array of languages existing in locale dir\n        foreach ($languages as $lng){\n          \/\/  create a property indexed to the code of $lng containing the string $r from 'bbn_i18n_exp' in this $lng\n          $res[$r][$lng] = (string)$this->db->selectOne('bbn_i18n_exp', 'expression', [\n            'id_exp' => $id,\n            'lang' => $lng\n          ]);\n        }\n      }\n\n      return [\n        'news' => $news,\n        'id_option' => $id_option,\n        'res' => array_values($res),\n        'done' => $done,\n        'languages' => $languages,\n        'path' => $to_explore,\n        'success' => true\n      ];\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 838,
            "endLine": 958,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "getTranslationsStrings",
            "returns": [],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "source_language",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "languages",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the strings contained in the given path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id_option"
                    },
                    {
                        "tag": "param",
                        "type": "$source_language"
                    },
                    {
                        "tag": "param",
                        "type": "$languages"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the strings contained in the given path\n   *\n   * @param $id_option\n   * @param $source_language\n   * @param $languages\n   * @return void\n   *\/"
        },
        "getTranslationsTableComplete": {
            "name": "getTranslationsTableComplete",
            "summary": "Returns the informations relative to traslation of the given $id_option of a $id_project. The data is formatted to be shown in a table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTranslationsTableComplete($id_project, $id_option)\n  {\n    if (!empty($id_option)\n        && ($o = $this->options->option($id_option))\n        && ($parent = $this->options->parent($id_option))\n        && defined($parent['code'])\n    ) {\n      \/\/ @var  $path_source_lang the property language of the id_option (the path)\n      $path_source_lang = $this->options->getProp($id_option, 'language');\n\n      $locale_dir = $this->getLocaleDirPath($id_option);\n\n      $languages = array_map(\n        function ($a) {\n          return X::basename($a);\n        }, Dir::getDirs($locale_dir)\n      ) ?: [];\n\n      $i       = 0;\n      $res     = [];\n      $project = new Project($this->db, $id_project);\n      if (!empty($languages)) {\n        $po_file = [];\n        $success = false;\n        foreach ($languages as $lng){\n          \/\/ the path of po and mo files\n          $idx = $this->getIndexValue($id_option) ?: 1;\n          $po  = $locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$o['text'].$idx.'.po';\n          $mo  = $locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$o['text'].$idx.'.mo';\n\n          \/\/ if the file po exist takes its content\n          if ($translations = $this->parsePoFile($po)) {\n            foreach ($translations as $i => $t){\n              \/\/ @var  $original the original expression\n              $original = $t->getMsgId();\n\n              $po_file[$i][$lng]['original'] = $original;\n\n              \/\/ the translation of the string found in the po file\n              $po_file[$i][$lng]['translations_po'] = $t->getMsgStr();\n\n              \/\/ @var  $id takes the id of the original expression in db\n              if ($id = $this->db->selectOne('bbn_i18n', 'id', [\n                'exp' => $this->normlizeText($original),\n                'lang' => $path_source_lang\n              ])) {\n                $po_file[$i][$lng]['translations_db'] = $this->db->selectOne('bbn_i18n_exp', 'expression', ['id_exp' => $id, 'lang' => $lng]);\n\n                \/\/ the id of the string\n                $po_file[$i][$lng]['id_exp'] = $id;\n\n                \/\/ @var (array) takes $paths of files in which the string was found from the file po\n                $paths = $t->getReference();\n\n                \/\/ get the url to use it for the link to ide from the table\n                foreach ($paths as $p){\n                  $po_file[$i][$lng]['paths'][] = $project->real_to_url_i18n($p);\n                }\n\n                \/\/ the number of times the strings is found in the files of the path\n                $po_file[$i][$lng]['occurrence'] = !empty($po_file[$i][$path_source_lang]) ? count($po_file[$i][$path_source_lang]['paths']) : 0;\n              };\n            }\n\n            $success = true;\n          }\n        }\n      }\n\n      return [\n        'path_source_lang' => $path_source_lang,\n        'path' => $o['text'],\n        'success' => $success,\n        'languages' => $languages,\n        'total' => count(array_values($po_file)),\n        'strings' => array_values($po_file),\n        'id_option' => $id_option,\n      ];\n    }\n\n  }",
            "parent": false,
            "trait": false,
            "startLine": 968,
            "endLine": 1048,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getTranslationsTableComplete",
            "returns": [],
            "arguments": [
                {
                    "name": "id_project",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "project"
                },
                {
                    "name": "id_option",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "Returns the informations relative to traslation of the given $id_option of a $id_project. The data is formatted to be shown in a table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "project"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the informations relative to traslation of the given $id_option of a $id_project. The data is formatted to be shown in a table\n   *\n   * @param string $id_project\n   * @param string $id_option\n   * @return void\n   *\/"
        },
        "getTranslationsTable": {
            "name": "getTranslationsTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTranslationsTable($id_project, $id_option): array\n  {\n    $ret = [];\n    if (!empty($id_option)\n        && ($o = $this->options->option($id_option))\n    ) {\n      \/\/ @var  $path_source_lang the property language of the id_option (the path)\n      \/\/on the option the property is language, on the project i18n\n      $path_source_lang = $this->options->getProp($id_option, 'language');\n\n      \/\/the path of the locale dirs\n      $locale_dir = $this->getLocaleDirPath($id_option);\n      $languages  = array_map(\n        function ($a) {\n          return X::basename($a);\n        }, Dir::getDirs($locale_dir)\n      ) ?: [];\n\n      $i       = 0;\n      $res     = [];\n      $project = new Project($this->db, $id_project);\n\n      $errors = [];\n      if (!empty($languages)) {\n        $po_file = [];\n        $success = false;\n        foreach ($languages as $lng){\n          \/\/ the path of po and mo files\n          $idx = $this->getIndexValue($id_option) ?: 1;\n          $po  = $locale_dir.'\/'.$lng.'\/LC_MESSAGES\/'.$o['text'].$idx.'.po';\n          \/\/ if the file po exist takes its content\n          if ($translations = $this->parsePoFile($po)) {\n            foreach ($translations as $i => $t){\n              \/\/ @var  $original the original expression\n              $id = null;\n              if ($original = stripslashes($t->getMsgId())) {\n                $idx = X::find($res, ['exp' => $original]);\n                if ($idx !== null) {\n                  $todo = false;\n                  $row  =& $res[$idx];\n                }\n                else{\n                  $todo = true;\n                  $row  = [];\n                }\n\n                \/\/ the translation of the string found in the po file\n                if (isset($row['id'])) {\n                  $id = $row['id'];\n                }\n\n                \/\/ @var  $id takes the id of the original expression in db\n                if (!isset($id)\n                  && !($id = $this->db->selectOne('bbn_i18n', 'id', [\n                    'exp' => $this->normlizeText($original),\n                    'lang' => $path_source_lang\n                  ]))\n                ) {\n                  if (!$this->db->insertIgnore('bbn_i18n', [\n                    'exp' => $this->normlizeText($original),\n                    'lang' => $path_source_lang\n                  ])) {\n                    throw new Exception(\n                      sprintf(\n                        _(\"Impossible to insert the original string %s in the original language %s\"),\n                        $this->normlizeText($original),\n                        $path_source_lang\n                      )\n                    );\n                  }\n                  else {\n                    $id = $this->db->lastId();\n                  }\n                }\n\n                if ($id) {\n                  $row[$lng.'_po'] = stripslashes($t->getMsgStr());\n                  $row[$lng.'_db'] = $this->db->selectOne('bbn_i18n_exp', 'expression', ['id_exp' => $id, 'lang' => $lng]);\n                  if ($row[$lng.'_po'] && !$row[$lng.'_db']) {\n                    if ((($row[$lng.'_db'] === false)\n                        && $this->db->insert('bbn_i18n_exp', [\n                          'expression' => $this->normlizeText($row[$lng.'_po']),\n                          'id_exp' => $id,\n                          'lang' => $lng\n                        ]))\n                      || $this->db->update('bbn_i18n_exp', [\n                        'expression' => $this->normlizeText($row[$lng.'_po'])\n                      ], [\n                        'id_exp' => $id,\n                        'lang' => $lng\n                      ])\n                    ) {\n                      $row[$lng.'_db'] = $row[$lng.'_po'];\n                    }\n                    else{\n                      throw new Exception(\n                        sprintf(\n                          _(\"Impossible to insert or update the expression \\\"%s\\\" in %s\"),\n                          $row[$lng.'_po'],\n                          $lng\n                        )\n                      );\n                    }\n                  }\n\n                  if (empty($row[$lng.'_db'])) {\n                    $row[$lng.'_db'] = '';\n                    \/\/ die(var_dump($row[$lng.'_db']));\n                  }\n\n                  if ($todo) {\n                    $row['id_exp'] = $id;\n                    $row['paths']  = [];\n                    $row['exp']    = $original;\n                    \/\/ @var (array) takes $paths of files in which the string was found from the file po\n                    $paths = $t->getReference();\n\n                    \/\/ get the url to use it for the link to ide from the table\n                    foreach ($paths as $p) {\n                      $row['paths'][] = $project->realToUrl($p);\n                    }\n\n                    \/\/ the number of times the strings is found in the files of the path\n                    $row['occurrence'] = count($row['paths']);\n                    $res[]             = $row;\n                  }\n                }\n                else{\n                  die(\"Error 2\");\n                }\n              }\n            }\n\n            $success = true;\n          }\n        }\n      }\n\n      $ret = [\n        'path_source_lang' => $path_source_lang,\n        'path' => $o['text'],\n        'success' => $success,\n        'languages' => $languages,\n        'total' => count(array_values($po_file)),\n        'strings' => $res,\n        'id_option' => $id_option,\n        'errors' => $errors\n      ];\n    }\n    $this->cacheSet($id_option, 'get_translations_table', $ret);\n    return $ret;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1051,
            "endLine": 1202,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getTranslationsTable",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id_project",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_option",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTranslationsTable": {
            "name": "getOptionsTranslationsTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getOptionsTranslationsTable(string $idPath): array\n  {\n    $ret = [];\n    if ($localeDir = $this->getLocaleDirPath($idPath)) {\n      $languages  = \\array_map(fn($a) => X::basename($a), Dir::getDirs($localeDir) ?: []);\n      $rows = [];\n      $primaryLanguages = $this->getPrimariesLangs();\n      foreach ($languages as $lang) {\n        if (\\is_file(\"$localeDir\/$lang\/options.json\")) {\n          $options = \\json_decode(\\file_get_contents(\"$localeDir\/$lang\/options.json\"), true);\n          foreach ($options as $exp => $opt) {\n            $idx = X::find($rows, ['exp' => $exp]);\n            if (\\is_null($idx)) {\n              if (!($idExp = $this->db->selectOne('bbn_i18n', 'id', [\n                'exp' => $this->normlizeText($exp),\n                'lang' => $opt['language']\n              ]))) {\n                if ($this->db->insert('bbn_i18n', [\n                  'exp' => $this->normlizeText($exp),\n                  'lang' => $opt['language']\n                ])) {\n                  $idExp = $this->db->lastId();\n                }\n                else {\n                  $langText = X::getField($primaryLanguages, ['code' => $lang], 'text');\n                  throw new Exception(X::_('Impossible to insert the original string %s in the original language %s', $this->normlizeText($exp), $langText));\n                }\n              }\n              if (!empty($idExp)) {\n                if (!$this->db->selectOne('bbn_i18n_exp', 'id', [\n                  'id_exp' => $idExp,\n                  'lang' => $opt['language']\n                ])) {\n                  $this->insertOrUpdateTranslation($idExp, $exp, $opt['language']);\n                }\n                if (!empty($opt['translation'])\n                  && !$this->db->selectOne('bbn_i18n_exp', 'id', [\n                    'id_exp' => $idExp,\n                    'lang' => $lang\n                  ])\n                ) {\n                  $this->insertOrUpdateTranslation($idExp, $opt['translation'], $lang);\n                }\n                $r = [\n                  'id_exp' => $idExp,\n                  'exp' => $this->normlizeText($exp),\n                  $opt['language'] . '_po' => $exp,\n                  $opt['language'] . '_db' => $this->db->selectOne('bbn_i18n_exp', 'expression', [\n                    'id_exp' => $idExp,\n                    'lang' => $opt['language']\n                  ]) ?: '',\n                  'occurrence' => count($opt['paths']),\n                  'paths' => $opt['paths']\n                ];\n                if ($lang !== $opt['language']) {\n                  $r[$lang . '_po'] = $opt['translation'];\n                  $r[$lang . '_db'] = '';\n                }\n                $rows[] = $r;\n              }\n            }\n            else {\n              if (($idExp = $this->db->selectOne('bbn_i18n', 'id', [\n                'exp' => $this->normlizeText($exp),\n                'lang' => $opt['language']\n              ]))) {\n                if (!empty($opt['translation'])\n                  && !$this->db->selectOne('bbn_i18n_exp', 'id', [\n                    'id_exp' => $idExp,\n                    'lang' => $lang\n                  ])\n                ) {\n                  $this->insertOrUpdateTranslation($idExp, $opt['translation'], $lang);\n                }\n              }\n              $rows[$idx][$lang . '_po'] = $opt['translation'];\n              $rows[$idx][$lang . '_db'] = $this->db->selectOne('bbn_i18n_exp', 'expression', [\n                'id_exp' => $rows[$idx]['id_exp'],\n                'lang' => $lang\n              ]) ?: '';\n            }\n          }\n        }\n      }\n      $ret = [\n        \/\/'path_source_lang' => $lang,\n        'path' => ($o = $this->options->text($idPath)),\n        'languages' => $languages,\n        'total' => count($rows),\n        'strings' => $rows,\n        'id_option' => $idPath\n      ];\n      $this->cacheSet($idPath, 'get_options_translations_table', $ret);\n    }\n    return $ret;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1205,
            "endLine": 1300,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTranslationsTable",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "idPath",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPathToExplore": {
            "name": "getPathToExplore",
            "summary": "Returns the path to explore relative to the given id_option",
            "description": "It only works if i18n class is constructed by giving the id_project",
            "description_parts": [
                {
                    "type": "text",
                    "content": "It only works if i18n class is constructed by giving the id_project"
                }
            ],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPathToExplore(string $id_option) :? String\n  {\n    if ($this->id_project) {\n      \/** @var Project *\/\n      $project = new Project($this->db, $this->id_project);\n      \/\/the repository\n      $rep = $project->repositoryById($id_option);\n\n      \/\/the root of this repositoryu\n      $path = $project->getRootPath($rep);\n      return $path;\n    }\n\n    return '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1310,
            "endLine": 1324,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPathToExplore",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "Returns the path to explore relative to the given id_option\nIt only works if i18n class is constructed by giving the id_project\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the path to explore relative to the given id_option\n   * It only works if i18n class is constructed by giving the id_project\n   *\n   * @param string $id_option\n   * @return String|null\n   *\/"
        },
        "getLocaleDirPath": {
            "name": "getLocaleDirPath",
            "summary": "Returns the path of the locale dir of the given $id_option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLocaleDirPath(string $id_option) : String\n  {\n    if ($path = $this->getPathToExplore($id_option)) {\n      if (substr($path, -1) !== '\/') {\n        $path .= '\/';\n      }\n    }\n\n    return $path.'locale';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1333,
            "endLine": 1342,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getLocaleDirPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "Returns the path of the locale dir of the given $id_option\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the path of the locale dir of the given $id_option\n   *\n   * @param string $id_option\n   * @return String\n   *\/"
        },
        "getIndexPath": {
            "name": "getIndexPath",
            "summary": "Returns the path of the file index.txt inside the locale folder",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIndexPath(string $id_option): string\n  {\n    return $this->getLocaleDirPath($id_option).'\/index.txt';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1351,
            "endLine": 1354,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getIndexPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "Returns the path of the file index.txt inside the locale folder\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the path of the file index.txt inside the locale folder\n   *\n   * @param string $id_option\n   * @return string\n   *\/"
        },
        "getIndexValue": {
            "name": "getIndexValue",
            "summary": "Returns the version number contained in the index.txt file inside the folder locale or 0 if the file doesn't exists",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIndexValue(string $idPath): int\n  {\n    $indexPath = $this->getIndexPath($idPath);\n    return \\is_file($indexPath) ? (int)\\file_get_contents($indexPath) : 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1362,
            "endLine": 1366,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getIndexValue",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "idPath",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ath"
                }
            ],
            "doc": {
                "description": "Returns the version number contained in the index.txt file inside the folder locale or 0 if the file doesn't exists\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "ath"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the version number contained in the index.txt file inside the folder locale or 0 if the file doesn't exists\n   * @param string $idPath\n   * @return int\n   *\/"
        },
        "insertOrUpdateTranslation": {
            "name": "insertOrUpdateTranslation",
            "summary": "Inserts or updates an expression translation for the given language",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insertOrUpdateTranslation(string $idExp, string $expression, string $lang): bool\n  {\n    if ($id = $this->db->selectOne('bbn_i18n_exp', 'id', [\n      'id_exp' => $idExp,\n      'lang' => $lang\n    ])) {\n      if ($this->db->update('bbn_i18n_exp', ['expression' => $this->normlizeText($expression)], ['id' => $id])) {\n        return true;\n      }\n    }\n    \/** INSERT in DB *\/\n    else if ($this->db->insert('bbn_i18n_exp', [\n      'expression' => $this->normlizeText($expression),\n      'id_exp' => $idExp,\n      'lang' => $lang\n    ])) {\n      return true;\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1376,
            "endLine": 1395,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "insertOrUpdateTranslation",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "idExp",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "xp The original expression's ID"
                },
                {
                    "name": "expression",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The translated expression"
                },
                {
                    "name": "lang",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The translation language"
                }
            ],
            "doc": {
                "description": "Inserts or updates an expression translation for the given language\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "xp The original expression's ID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$expression",
                        "description": "The translated expression"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$lang",
                        "description": "The translation language"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Inserts or updates an expression translation for the given language\n   * @param string $idExp The original expression's ID\n   * @param string $expression The translated expression\n   * @param string $lang The translation language\n   * @return bool\n   *\/"
        },
        "deleteTranslation": {
            "name": "deleteTranslation",
            "summary": "Deletes an expression translation for the give language",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteTranslation(string $idExp, string $lang): bool\n  {\n    return (bool)$this->db->delete('bbn_i18n_exp', [\n      'id_exp' => $idExp,\n      'lang' => $lang\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1404,
            "endLine": 1410,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "deleteTranslation",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "idExp",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "xp The original expression's ID"
                },
                {
                    "name": "lang",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The translation language"
                }
            ],
            "doc": {
                "description": "Deletes an expression translation for the give language\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "xp The original expression's ID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$lang",
                        "description": "The translation language"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes an expression translation for the give language\n   * @param string $idExp The original expression's ID\n   * @param string $lang The translation language\n   * @return bool\n   *\/"
        },
        "generateFiles": {
            "name": "generateFiles",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function generateFiles(string $idPath, array $languages = [], string $mode = 'files')\n  {\n    if (!\\in_array($mode, ['files', 'options'], true)) {\n      throw new Exception(X::_(\"No valid mode %s\", $mode));\n    }\n    \/\/ The position of locale directory\n    $localeDir = $this->getLocaleDirPath($idPath);\n    \/** @var (array) $languages based on locale dirs found in the path *\/\n    $currentLangs = array_map('basename', Dir::getDirs($localeDir) ?: []);\n    if (empty($languages)) {\n      $languages = $currentLangs;\n    }\n    if (empty($languages)) {\n      $languages = $this->getPrimariesLangs(true);\n    }\n    $fromAction = [];\n    if (!empty($languages)) {\n      if ($toRemove = \\array_diff($currentLangs, $languages)) {\n        foreach ($toRemove as $d) {\n          \\array_splice($currentLangs, \\array_search($d, $currentLangs, true), 1);\n          switch ($mode) {\n            case 'files':\n              Dir::delete(\"$localeDir\/$d\/LC_MESSAGES\");\n              Dir::delete(\"$localeDir\/$d\/$d.json\");\n              break;\n            case 'options':\n              Dir::delete(\"$localeDir\/$d\/options.json\");\n              break;\n          }\n          if (!Dir::getFiles(\"$localeDir\/$d\")) {\n            Dir::delete(\"$localeDir\/$d\");\n          }\n        }\n      }\n      if ($toCreate = \\array_diff($languages, $currentLangs)) {\n        foreach ($toCreate as $d) {\n          $languages[] = $d;\n        }\n      }\n      Dir::createPath($localeDir);\n      switch ($mode) {\n        case 'files':\n          $fromAction = $this->generateFilesPo($idPath, $languages);\n          $this->generateFilesMo($idPath, $languages);\n          break;\n        case 'options':\n          $this->importFromFilesOptions($idPath, $languages);\n          $fromAction = $this->generateFilesOptions($idPath, $languages);\n          break;\n      }\n    }\n    return \\array_merge([\n      'locale' => $localeDir,\n      'languages' => $languages,\n      'new_dir' => $toCreate,\n      'ex_dir' => $toRemove,\n      'path' => $this->getPathToExplore($idPath)\n    ], $fromAction);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1413,
            "endLine": 1471,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "generateFiles",
            "returns": [],
            "arguments": [
                {
                    "name": "idPath",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "languages",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "files",
                    "default_name": ""
                }
            ]
        },
        "generateFilesPo": {
            "name": "generateFilesPo",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function generateFilesPo(string $idPath, array $languages): array\n  {\n    \/** @var string $domain The domain on which will be bound gettext *\/\n    $domain = $this->options->text($idPath);\n    \/\/ The position of locale directory\n    $localeDir = $this->getLocaleDirPath($idPath);\n    \/** @var string $indexPath *\/\n    $indexPath = $this->getIndexPath($idPath);\n    \/\/ The version number contained in the txt file inside the folder locale\n    $versionNumber = $this->getIndexValue($idPath);\n    \\file_put_contents($indexPath, ++$versionNumber);\n    $domain .= $versionNumber;\n    $parent = $this->options->parent($idPath);\n    \/** @var bool $json Will be true if some translations are put into a JSON file *\/\n    $json = false;\n    \/** @var array $toJSON *\/\n    $toJSON = [];\n    \/** @var array $data Takes all strings found in the files of this path *\/\n    $data = $this->getTranslationsStrings($idPath, $this->getLanguage($idPath), $languages);\n    if (!empty($data['res'])) {\n      \\clearstatcache();\n      foreach ($languages as $lang) {\n        \/** @var string $dir The path of locale dir for this id_option foreach lang *\/\n        $dir = \"$localeDir\/$lang\/LC_MESSAGES\";\n        \/** creates the path of the dirs *\/\n        Dir::createPath($dir);\n        \/** @var  $po & $mo files path *\/\n        $files = Dir::getFiles($dir);\n        foreach ($files as $f) {\n          $ext = Str::fileExt($f);\n          if (($ext === 'po') || ($ext === 'mo')) {\n            \\unlink($f);\n          }\n        }\n        \/\/ the new files\n        $poFile = \"$dir\/$domain.po\";\n        \/\/create the file at the given path\n        \\fopen($poFile, 'x');\n        \/\/instantiate the parser\n        $fileHandler  = new \\Sepia\\PoParser\\SourceHandler\\FileSystem($poFile);\n        $poParser     = new \\Sepia\\PoParser\\Parser($fileHandler);\n        $catalog      = \\Sepia\\PoParser\\Parser::parseFile($poFile);\n        $compiler     = new \\Sepia\\PoParser\\PoCompiler();\n        $headersClass = new \\Sepia\\PoParser\\Catalog\\Header();\n        if ($catalog->getHeaders()) {\n          \/\/headers for new po file\n          $headers = [\n            \"Project-Id-Version: 1\",\n            \"Report-Msgid-Bugs-To: info@bbn.so\",\n            \"last-Translator: BBN Solutions <support@bbn.solutions>\",\n            \"Language-Team: \".strtoupper($lang).' <'.strtoupper($lang).'@li.org>',\n            \"MIME-Version: 1.0\",\n            \"Content-Type: text\/plain; charset=UTF-8\",\n            \"Content-Transfer-Encoding: 8bit\",\n            \"POT-Creation-Date: \".date('Y-m-d H:iO'),\n            \"POT-Revision-Date: \".date('Y-m-d H:iO'),\n            \"Language: \".$lang,\n            \"X-Domain: \".$domain,\n            \"Plural-Forms: nplurals=2; plural=n != 1;\"\n          ];\n          \/\/set the headers on the Catalog object\n          $headersClass->setHeaders($headers);\n          $catalog->addHeaders($headersClass);\n        }\n        $constroot = 'BBN_'.strtoupper($parent['code']).'_PATH';\n        if (!defined($constroot)) {\n          X::log($this->options->option($idPath));\n          throw new Exception(\"Impossible to find the root for option, see Misc log\");\n        }\n        $root = constant($constroot);\n        foreach ($data['res'] as $index => $r) {\n          if (!$catalog->getEntry($r['original_exp'])) {\n            \/\/prepare the new entry for the Catalog\n            $entry = new \\Sepia\\PoParser\\Catalog\\Entry($r['original_exp'], $r[$lang]);\n            \/\/ set the reference for the entry\n            if (!empty($r['path'])) {\n              $entry->setReference($r['path']);\n              foreach($r['path'] as $path){\n                $name = '';\n                $ext = Str::fileExt($path);\n                if (($ext === 'js')\n                  || ($ext === 'php')\n                  || ($ext === 'html')\n                ) {\n                  $tmp = \\substr($path, \\strlen($root), -(\\strlen($ext) + 1));\n                  if (\\strpos($tmp, 'components') === 0) {\n                    $name = \\dirname($tmp);\n                  }\n                  elseif (\\strpos($tmp, 'mvc') === 0) {\n                    if (\\strpos($tmp, 'js\/') === 4) {\n                      $name = \\preg_replace('\/js\\\/\/', '', $tmp, 1);\n                    }\n                    else if (\\strpos($tmp, 'html\/') === 4) {\n                      $name = \\preg_replace('\/html\\\/\/', '', $tmp, 1);\n                    }\n                  }\n                  elseif ((\\strpos($tmp, 'plugins') === 0) && ($root === BBN_APP_PATH)) {\n                    continue;\n                  }\n                  elseif (\\strpos($tmp, 'bbn\/') === 0) {\n                    $optCode = $this->options->code($idPath);\n                    $tmp  = \\str_replace($optCode.'\/', '', \\substr($tmp, 4));\n                    if (\\strpos($tmp, 'components') === 4) {\n                      $final = \\str_replace(\\substr($tmp, 0,4), '', $tmp);\n                      $name = \\dirname($final);\n                    }\n                    elseif (\\strpos($tmp, 'mvc') === 4) {\n                      if ((\\strpos($tmp, 'js\/') !== 8)\n                        && (\\strpos($tmp, 'html\/') !== 8)\n                      ) {\n                        continue;\n                      }\n                      $final = \\str_replace(substr($tmp, 0, 4), '', $tmp);\n                      $name  = \\preg_replace(['\/js\\\/\/', '\/html\\\/\/'], '', $final, 1);\n                    }\n                  }\n                  if (empty($toJSON[$lang][$name])) {\n                    $toJSON[$lang][$name] = [];\n                  }\n                  \/\/array of all js files found in po file\n                  $toJSON[$lang][$name][$data['res'][$index]['original_exp']] = $data['res'][$index][$lang];\n                }\n              }\n            }\n            \/\/add the prepared entry to the catalog\n            $catalog->addEntry($entry);\n          }\n        }\n        \/\/compile the catalog\n        $file = $compiler->compile($catalog);\n        \/\/save the catalog in the file\n        $fileHandler->save($file);\n        \\clearstatcache();\n        if (!empty($toJSON[$lang])) {\n          $file_name = \"$localeDir\/$lang\/$lang.json\";\n          Dir::createPath(dirname($file_name));\n          \/\/ put the content of the array js_files in a json file\n          $json = (boolean)\\file_put_contents($file_name, \\json_encode($toJSON[$lang], JSON_PRETTY_PRINT));\n        }\n      }\n      \\clearstatcache();\n      $this->getTranslationsTable($this->id_project, $idPath);\n      $this->getTranslationsWidget($this->id_project, $idPath);\n    }\n    return [\n      'json' => $json,\n      'no_strings' => empty($data['res'])\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1474,
            "endLine": 1622,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "generateFilesPo",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "idPath",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "languages",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "generateFilesOptions": {
            "name": "generateFilesOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function generateFilesOptions(string $idPath, array $languages): array\n  {\n    if (($localeDir = $this->getLocaleDirPath($idPath))\n      && !empty($languages)\n      && ($code = $this->options->code($idPath))\n    ) {\n      $toJSON = [];\n      $options = [];\n      if (($parent = $this->options->parent($idPath))\n        && ($parentCode = $this->options->code($parent['id']))\n      ) {\n        if (($parentCode === 'lib')\n          && (\\strpos($code, 'appui-') === 0)\n        ) {\n          if ($idOpt = $this->options->fromCode(\\preg_replace('\/appui-\/', '', $code, 1), 'appui')) {\n            $options = $this->options->findI18n($idOpt);\n          }\n        }\n        else if (($parentCode === 'app')\n          && ($code === 'main')\n          && ($allOptions = $this->options->fullOptions(false))\n        ) {\n          foreach ($allOptions as $o) {\n            if ($o['code'] === 'appui') {\n              $idAlias = $this->options->fromCode('plugin', 'list', 'templates', 'option', 'appui');\n              if ($appuiOptions = $this->options->fullOptions($o['id'])) {\n                foreach ($appuiOptions as $ao) {\n                  if ($ao['id_alias'] !== $idAlias) {\n                    $options = X::mergeArrays($options, $this->options->findI18n($ao['id']));\n                  }\n                }\n              }\n            }\n            else {\n              $options = X::mergeArrays($options, $this->options->findI18n($o['id']));\n            }\n          }\n        }\n      }\n      if (!empty($options)) {\n        foreach ($options as $opt) {\n          $codePath = $this->options->getCodePath($opt['id']);\n          $text = $this->options->rawText($opt['id']);\n          if ($codePath && !empty($text)) {\n            $codePath = \\implode('\/', \\array_reverse($codePath));\n            foreach ($languages as $lang) {\n              if (!isset($toJSON[$lang])) {\n                $toJSON[$lang] = [];\n              }\n              $t = $this->normlizeText($text);\n              if (!isset($toJSON[$lang][$t])) {\n                $toJSON[$lang][$t] = [\n                  'language' => $opt['language'],\n                  'paths' => [$codePath],\n                  'original' => $t,\n                  'translation' => $this->getTranslation($t, $opt['language'], $lang) ?: ''\n                ];\n              }\n              else if (!\\in_array($codePath, $toJSON[$lang][$t]['paths'])) {\n                $toJSON[$lang][$t]['paths'][] = $codePath;\n              }\n            }\n          }\n        }\n      }\n      foreach ($toJSON as $lang => $str) {\n        Dir::createPath(\"$localeDir\/$lang\");\n        \\file_put_contents(\"$localeDir\/$lang\/options.json\", \\json_encode($str, JSON_PRETTY_PRINT));\n      }\n      $this->getOptionsTranslationsTable($idPath);\n      $this->getOptionsTranslationsWidget($idPath);\n    }\n    return [\n      'json' => !empty($toJSON),\n      'no_strings' => empty($options)\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1625,
            "endLine": 1701,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "generateFilesOptions",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "idPath",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "languages",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "importFromFilesOptions": {
            "name": "importFromFilesOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function importFromFilesOptions(string $idPath, array $languages): bool\n  {\n    if (($localeDir = $this->getLocaleDirPath($idPath))\n      && !empty($languages)\n    ){\n      $imported = 0;\n      foreach ($languages as $lang) {\n        if (\\is_file(\"$localeDir\/$lang\/options.json\")\n          && ($translations = \\json_decode(\\file_get_contents(\"$localeDir\/$lang\/options.json\"), true))\n        ) {\n          foreach ($translations as $trans) {\n            if (!empty($trans['original']) && !empty($trans['language'])) {\n              if (!($idExp = $this->db->selectOne('bbn_i18n', 'id', ['exp' => $this->normlizeText($trans['original'])]))\n                && $this->db->insert('bbn_i18n', [\n                  'exp' => $this->normlizeText($trans['original']),\n                  'lang' => $trans['language']\n                ])\n              ) {\n                $idExp = $this->db->lastId();\n              }\n              if (!empty($idExp)) {\n                if (!$this->db->selectOne('bbn_i18n_exp', 'id', ['id_exp' => $idExp, 'lang' => $trans['language']])) {\n                  $imported += $this->db->insert('bbn_i18n_exp', [\n                    'id_exp' => $idExp,\n                    'lang' => $trans['language'],\n                    'expression' => $trans['original']\n                  ]);\n                }\n                if (!empty($trans['translation'])\n                  && !$this->db->selectOne('bbn_i18n_exp', 'id', ['id_exp' => $idExp, 'lang' => $lang])\n                ) {\n                  $imported += $this->db->insert('bbn_i18n_exp', [\n                    'id_exp' => $idExp,\n                    'lang' => $lang,\n                    'expression' => $trans['translation']\n                  ]);\n                }\n              }\n            }\n          }\n        }\n      }\n      return !empty($imported);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1704,
            "endLine": 1749,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "importFromFilesOptions",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "idPath",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "languages",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "generateFilesMo": {
            "name": "generateFilesMo",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function generateFilesMo(string $idPath, array $languages): bool\n  {\n    if (($domain = $this->options->text($idPath))\n      && ($localeDir = $this->getLocaleDirPath($idPath))\n      && ($indexPath = $this->getIndexPath($idPath))\n      && !empty($languages)\n    ) {\n      $versionNumber = $this->getIndexValue($idPath) ?: 1;\n      $success = true;\n      foreach ($languages as $lang) {\n        $file = \"$localeDir\/$lang\/LC_MESSAGES\/$domain$versionNumber.\";\n        if (\\is_file($file.'mo')) {\n          \\unlink($file.'mo');\n        }\n        if (\\is_file($file.'po')\n          && ($translations = Translations::fromPoFile($file.'po'))\n          && !$translations->toMoFile($file.'mo')\n        ) {\n          $success = false;\n        }\n      }\n      return $success;\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1752,
            "endLine": 1776,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "generateFilesMo",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "idPath",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "languages",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "normlizeText": {
            "name": "normlizeText",
            "summary": "Returns a normalized version of the given text",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function normlizeText(string $text): string\n  {\n    return \\trim(\\normalizer_normalize(stripslashes($text)));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1784,
            "endLine": 1787,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "normlizeText",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "text",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a normalized version of the given text\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$text"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a normalized version of the given text\n   * @param string $text\n   * @return string\n   *\/"
        },
        "parsePoFile": {
            "name": "parsePoFile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/I18n.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function parsePoFile(string $file): array\n  {\n    return \\is_file($file) ? \\Sepia\\PoParser\\Parser::parseFile($file)->getEntries() : [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1790,
            "endLine": 1793,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "parsePoFile",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_cache_name": {
            "name": "_cache_name",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "\tprotected function _cache_name($uid, $method = '', string $locale = ''){\n    if ( is_array($uid) ){\n      $uid = md5(serialize($uid));\n    }\n    else if ( is_object($uid) ){\n      $uid = md5(json_encode($uid));\n    }\n\t\treturn $this->_cache_prefix.(string)$uid.\n\t\t\t(empty($method) ? '' : '-'.(string)$method).\n\t\t\t(empty($locale) ? '' : '-'.(string)$locale);\n\t}",
            "parent": {
                "name": "_cache_name",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "\tprotected function _cache_name($uid, $method = '', string $locale = ''){\n    if ( is_array($uid) ){\n      $uid = md5(serialize($uid));\n    }\n    else if ( is_object($uid) ){\n      $uid = md5(json_encode($uid));\n    }\n\t\treturn $this->_cache_prefix.(string)$uid.\n\t\t\t(empty($method) ? '' : '-'.(string)$method).\n\t\t\t(empty($locale) ? '' : '-'.(string)$locale);\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 35,
                "endLine": 45,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "_cache_name",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 2,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 35,
            "endLine": 45,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "_cache_name",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "cacheDeleteAll": {
            "name": "cacheDeleteAll",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheDeleteAll(){\n\t\t$this->cacher->deleteAll($this->_cache_prefix);\n\t\treturn $this;\n\t}",
            "parent": {
                "name": "cacheDeleteAll",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheDeleteAll(){\n\t\t$this->cacher->deleteAll($this->_cache_prefix);\n\t\treturn $this;\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 47,
                "endLine": 50,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "cacheDeleteAll",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 47,
            "endLine": 50,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheDeleteAll",
            "returns": [],
            "arguments": []
        },
        "cacheDelete": {
            "name": "cacheDelete",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheDelete($uid){\n\t\t$this->cacher->deleteAll($this->_cache_name($uid));\n\t\treturn $this;\n\t}",
            "parent": {
                "name": "cacheDelete",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheDelete($uid){\n\t\t$this->cacher->deleteAll($this->_cache_name($uid));\n\t\treturn $this;\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 52,
                "endLine": 55,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheDelete",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 52,
            "endLine": 55,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheDelete",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "cacheGet": {
            "name": "cacheGet",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheGet($uid, $method = '', $ttl = 0){\n\t\treturn $this->cacher->get($this->_cache_name($uid, $method), $ttl);\n\t}",
            "parent": {
                "name": "cacheGet",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheGet($uid, $method = '', $ttl = 0){\n\t\treturn $this->cacher->get($this->_cache_name($uid, $method), $ttl);\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 59,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheGet",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 57,
            "endLine": 59,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheGet",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheGetLocale": {
            "name": "cacheGetLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheGetLocale($uid, string $locale, $method = '', $ttl = 0){\n\t\treturn $this->cacher->get($this->_cache_name($uid, $method, $locale), $ttl);\n\t}",
            "parent": {
                "name": "cacheGetLocale",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheGetLocale($uid, string $locale, $method = '', $ttl = 0){\n\t\treturn $this->cacher->get($this->_cache_name($uid, $method, $locale), $ttl);\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 61,
                "endLine": 63,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheGetLocale",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 61,
            "endLine": 63,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetLocale",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheSet": {
            "name": "cacheSet",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheSet($uid, $method = '', $data = null, $ttl = 0){\n\t\t$this->cacher->set($this->_cache_name($uid, $method), $data, $ttl);\n\t\treturn $this;\n\t}",
            "parent": {
                "name": "cacheSet",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheSet($uid, $method = '', $data = null, $ttl = 0){\n\t\t$this->cacher->set($this->_cache_name($uid, $method), $data, $ttl);\n\t\treturn $this;\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 65,
                "endLine": 68,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheSet",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "data",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 65,
            "endLine": 68,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheSet",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheSetLocale": {
            "name": "cacheSetLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheSetLocale($uid, string $locale, $method = '', $data = null, $ttl = 0){\n\t\t$this->cacher->set($this->_cache_name($uid, $method, $locale), $data, $ttl);\n\t\treturn $this;\n\t}",
            "parent": {
                "name": "cacheSetLocale",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheSetLocale($uid, string $locale, $method = '', $data = null, $ttl = 0){\n\t\t$this->cacher->set($this->_cache_name($uid, $method, $locale), $data, $ttl);\n\t\treturn $this;\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 70,
                "endLine": 73,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 5,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheSetLocale",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "data",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 4,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 70,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheSetLocale",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheGetSet": {
            "name": "cacheGetSet",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheGetSet(callable $fn, $uid, $method = '', $ttl = 0){\n\t\t$cn = $this->_cache_name($uid, $method);\n\t\treturn $this->cacher->getSet($fn, $cn, $ttl);\n\t}",
            "parent": {
                "name": "cacheGetSet",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheGetSet(callable $fn, $uid, $method = '', $ttl = 0){\n\t\t$cn = $this->_cache_name($uid, $method);\n\t\treturn $this->cacher->getSet($fn, $cn, $ttl);\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 75,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheGetSet",
                "returns": [],
                "arguments": [
                    {
                        "name": "fn",
                        "position": 0,
                        "type": "callable",
                        "type_arr": [
                            "callable"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "uid",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 75,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetSet",
            "returns": [],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheGetSetLocale": {
            "name": "cacheGetSetLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheGetSetLocale(callable $fn, $uid, string $locale, $method = '', $ttl = 0){\n\t\t$cn = $this->_cache_name($uid, $method, $locale);\n\t\treturn $this->cacher->getSet($fn, $cn, $ttl);\n\t}",
            "parent": {
                "name": "cacheGetSetLocale",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheGetSetLocale(callable $fn, $uid, string $locale, $method = '', $ttl = 0){\n\t\t$cn = $this->_cache_name($uid, $method, $locale);\n\t\treturn $this->cacher->getSet($fn, $cn, $ttl);\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 80,
                "endLine": 83,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 5,
                "numberOfRequiredParameters": 3,
                "shortName": "cacheGetSetLocale",
                "returns": [],
                "arguments": [
                    {
                        "name": "fn",
                        "position": 0,
                        "type": "callable",
                        "type_arr": [
                            "callable"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "uid",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 2,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 4,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 80,
            "endLine": 83,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 3,
            "shortName": "cacheGetSetLocale",
            "returns": [],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheHas": {
            "name": "cacheHas",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheHas($uid, $method = '', $ttl = 0){\n\n    return $this->cacheGet($uid, $method, $ttl) ? true : false;\n  }",
            "parent": {
                "name": "cacheHas",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheHas($uid, $method = '', $ttl = 0){\n\n    return $this->cacheGet($uid, $method, $ttl) ? true : false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 85,
                "endLine": 88,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheHas",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 85,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheHas",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheHasLocale": {
            "name": "cacheHasLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheHasLocale($uid, string $locale, $method = '', $ttl = 0){\n\n    return $this->cacheGetLocale($uid, $locale, $method, $ttl) ? true : false;\n  }",
            "parent": {
                "name": "cacheHasLocale",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheHasLocale($uid, string $locale, $method = '', $ttl = 0){\n\n    return $this->cacheGetLocale($uid, $locale, $method, $ttl) ? true : false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 90,
                "endLine": 93,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheHasLocale",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 90,
            "endLine": 93,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheHasLocale",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 71,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        },
        "optionalInit": {
            "name": "optionalInit",
            "summary": "Returns the option's root ID for the current class based on {@link $option_root_code}",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function optionalInit(array $path = null)\n  {\n    if (!self::$optional_is_init) {\n      $opt = Option::getInstance();\n      if (!$opt) {\n        throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n      }\n\n      $justDefined = false;\n      if (!\\defined(\"BBN_APPUI\")) {\n        $justDefined = true;\n        \\define('BBN_APPUI', $opt->fromCode('appui', 'plugins'));\n      }\n\n      if (!$path) {\n        if (!BBN_APPUI) {\n          throw new Exception('Impossible to find the option appui for ' . __CLASS__ . ($justDefined ? '' : 'not') . ' defined ' . ($opt->fromCode('appui', 'plugins') ?: '') . ($opt->fromCode('appui') ?: '') . ' ' . $opt->getRoot() . ' ' . $opt->getDefault() . X::getDump($opt->option($opt->getRoot())));\n        }\n\n        $tmp                   = explode('\\\\', __CLASS__);\n        $cls                   = strtolower(end($tmp));\n        $path                  = [$cls, 'appui'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      if (!self::$option_root_id) {\n        if (!$cls) {\n          throw new Exception(\"Impossible to find the option \".json_encode($path).\" !!! for \".__CLASS__);\n        }\n        throw new Exception(\"Impossible to find the option $cls for \".__CLASS__);\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 41,
            "endLine": 75,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "optionalInit",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the option's root ID for the current class based on {@link $option_root_code}\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the option's root ID for the current class based on {@link $option_root_code}\n   *\n   * @return false|int\n   *\/"
        },
        "initOptionalGlobal": {
            "name": "initOptionalGlobal",
            "summary": "Sets only once all the constants used by the class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function initOptionalGlobal(Option $opt, array $path = null)\n  {\n    if (!self::$optional_is_init) {\n      if (!\\defined(\"BBN_APPUI\")) {\n        \\define('BBN_APPUI', $opt->fromCode('appui', 'plugins'));\n      }\n\n      if (!$path) {\n        if (!BBN_APPUI) {\n          X::log('Impossible to find the option appui for '.__CLASS__, 'errors');\n          return;\n        }\n\n        $tmp                   = explode('\\\\', __CLASS__);\n        $cls                   = end($tmp);\n        $path                  = [$cls, 'appui'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n            if (!self::$option_root_id) {\n        X::log(\"Impossible to find the option $cls for \".__CLASS__, 'errors');\n        return;\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 85,
            "endLine": 111,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "initOptionalGlobal",
            "returns": [],
            "arguments": [
                {
                    "name": "opt",
                    "position": 0,
                    "type": "bbn\\Appui\\Option",
                    "type_arr": [
                        "bbn\\Appui\\Option"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets only once all the constants used by the class.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Option",
                        "name": "$opt"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets only once all the constants used by the class.\n   *\n   * @param Option $opt\n   * @param array             $path\n   * @return void\n   *\/"
        },
        "initOptional": {
            "name": "initOptional",
            "summary": "Defines the options prop and launches the static init method.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initOptional(array $path = null)\n  {\n    $this->options = Option::getInstance();\n    if (!$this->options) {\n      throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n    }\n\n    self::initOptionalGlobal($this->options, $path);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 120,
            "endLine": 128,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initOptional",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Defines the options prop and launches the static init method.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Defines the options prop and launches the static init method.\n   *\n   * @param array $path\n   * @return void\n   *\/"
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionRoot()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 131,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionRoot",
            "returns": [],
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsObject(): Option\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 138,
            "endLine": 146,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsObject",
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionId()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 155,
            "endLine": 158,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionId",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns The option's ID of a category, i.e. direct children of option's root\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns The option's ID of a category, i.e. direct children of option's root\n   *\n   * @param string $code\n   * @return int|false\n   *\/"
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsIds(): array\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...self::_treat_args(func_get_args())),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 167,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsIds",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Undocumented function\n",
                "params": [],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Check it, it doesn't seem ok"
                }
            },
            "comments": "  \/**\n   * Undocumented function\n   *\n   * @todo Check it, it doesn't seem ok\n   * @return array\n   *\/"
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTree()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 180,
            "endLine": 183,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTree",
            "returns": [],
            "arguments": []
        },
        "getOptionsTreeRef": {
            "name": "getOptionsTreeRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTreeRef()\n  {\n    return ($tree = self::getOptionsObject()->fullTreeRef(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 186,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTreeRef",
            "returns": [],
            "arguments": []
        },
        "getOptionsRef": {
            "name": "getOptionsRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsRef()\n  {\n    return self::getOptionsObject()->fullOptionsRef(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 198,
            "endLine": 201,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsRef",
            "returns": [],
            "arguments": []
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOption()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 204,
            "endLine": 207,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOption",
            "returns": [],
            "arguments": []
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValue()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 210,
            "endLine": 213,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTextValue",
            "returns": [],
            "arguments": []
        },
        "getOptionsTextValueRef": {
            "name": "getOptionsTextValueRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValueRef()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptionsRef($id) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 216,
            "endLine": 219,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTextValueRef",
            "returns": [],
            "arguments": []
        },
        "_treat_args": {
            "name": "_treat_args",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\I18n",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function _treat_args(array $args, $appui = false): array\n  {\n    $hasUid = Str::isUid(end($args));\n    if (count($args) && !$hasUid) {\n      self::optionalInit();\n      if (!in_array($args[0], ['permissions', 'options', 'plugins'])) {\n        $args[] = 'options';\n      }\n    }\n\n    if (!$hasUid) {\n      $args[] = self::$option_root_id;\n    }\n\n    return $args;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 223,
            "endLine": 238,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_treat_args",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "appui",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "extensions": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": [
                "js",
                "json",
                "php",
                "html"
            ]
        },
        "parser": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "translations": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": []
        },
        "user": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "options": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "id_project": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Appui\\I18n",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "_cache_prefix": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "string",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Cache"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Cache",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": {
                "name": "_cache_prefix",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "string",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Cache"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Cache",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "@var string",
                    "tags": []
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "cacher": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "bbn\\Cache",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Cache"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Cache",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var $cacher cache",
                "tags": []
            },
            "parent": {
                "name": "cacher",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "bbn\\Cache",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Cache"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Cache",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "@var $cacher cache",
                    "tags": []
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "bbn\\Db",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Cache"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Cache",
            "promoted": true,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "db",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "bbn\\Db",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Cache"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Cache",
                "promoted": true,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": null
            },
            "value": null
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "optional_is_init": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Set as true from the moment a first instance has been initiated and has defined the constants."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "option_root_id": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\I18n"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The ID of the root option"
                    }
                ]
            },
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "extensions": [
            "js",
            "json",
            "php",
            "html"
        ],
        "optional_is_init": false,
        "option_root_id": null
    },
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "bbn\\User": "User",
        "bbn\\Db": "Db",
        "bbn\\Str": "Str",
        "bbn\\X": "X",
        "bbn\\File\\Dir": "Dir",
        "bbn\\Appui\\Option": "Option",
        "bbn\\Appui\\Project": "Project",
        "bbn\\Models\\Tts\\Optional": "Optional",
        "bbn\\Models\\Cls\\Cache": "cacheCls",
        "Gettext\\Translations": "Translations"
    },
    "dummyComments": [
        "\/**\n * Created by PhpStorm.\n * User: BBN\n * Date: 14\/12\/2017\n * Time: 17:34\n *\/"
    ],
    "summary": "",
    "description": "",
    "description_parts": []
}