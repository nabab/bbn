{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Planning",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\Dbconfig"
    ],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Planning.php",
    "startLine": 5,
    "endLine": 541,
    "contentConstructor": {
        "file": "bbn\\Appui\\Planning",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Planning",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db)\n  {\n    $this->db = $db;\n    $this->_init_class_cfg();\n    $this->events = new \\bbn\\Appui\\Event($this->db);\n    $this->ecfg = $this->events->getClassCfg();\n    $this->options = new \\bbn\\Appui\\Option($this->db);\n    $this->ocfg = $this->options->getClassCfg();\n  }",
            "startLine": 50,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getEvents": {
            "name": "getEvents",
            "summary": "Returns the bbn\\Appui\\Events instance",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Planning",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 64,
            "endLine": 66,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "insert": {
            "name": "insert",
            "summary": "Inserts an event for the given staff id",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Planning",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_staff, array $event, string $id_alias = NULL, string $alias = NULL)\n  {\n    if ( \n      \\bbn\\Str::isUid($id_staff) &&\n      (\\bbn\\Str::isUid($id_alias) || \\is_null($id_alias)) &&\n      (\\bbn\\Str::isDateSql($alias) || \\is_null($alias)) &&\n      ($id_event = $this->events->insert($event)) &&\n      $this->db->insert($this->class_table, [\n        $this->fields['id_event'] => $id_event,\n        $this->fields['id_staff'] => $id_staff,\n        $this->fields['id_alias'] => $id_alias,\n        $this->fields['alias'] => \\bbn\\Str::isDateSql($alias) ? date('Y-m-d', strtotime($alias)) : null\n      ])\n    ){\n      return $this->db->lastId();\n    }\n    return null;\n  }",
            "startLine": 76,
            "endLine": 93,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_staff",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "staff"
                },
                {
                    "name": "event",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_alias",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "alias"
                },
                {
                    "name": "alias",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "update": {
            "name": "update",
            "summary": "Updates a planning row and, if necessary, the linked event",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Planning",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_planning, string $id_staff, $event, string $id_alias = NULL, string $alias = NULL)\n  {\n    if ( \n      \\bbn\\Str::isUid($id_planning) &&\n      \\bbn\\Str::isUid($id_staff) &&\n      (\n        \\bbn\\Str::isUid($event) || \n        (\\is_array($event) && \\bbn\\Str::isUid($event[$this->ecfg['arch']['events']['id']]))\n      ) &&\n      (\\bbn\\Str::isUid($id_alias) || \\is_null($id_alias)) &&\n      (\\bbn\\Str::isDateSql($alias) || \\is_null($alias))\n    ){\n      $id_event = \\is_array($event) ? $event[$this->ecfg['arch']['events']['id']] : $event;\n      $ok = $this->db->update($this->class_table, [\n        $this->fields['id_staff'] => $id_staff,\n        $this->fields['id_event'] => $id_event,\n        $this->fields['id_alias'] => $id_alias,\n        $this->fields['alias'] => \\bbn\\Str::isDateSql($alias) ? date('Y-m-d', strtotime($alias)) : null\n      ], [\n        $this->fields['id'] => $id_planning\n      ]);\n      $ok2 = \\is_array($event) ? $this->events->edit($id_event, $event) : false;\n      return !!$ok || !!$ok2;\n    }\n    return false;\n  }",
            "startLine": 104,
            "endLine": 129,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 3,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_planning",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "planning"
                },
                {
                    "name": "id_staff",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "staff"
                },
                {
                    "name": "event",
                    "position": 2,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_alias",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "alias"
                },
                {
                    "name": "alias",
                    "position": 4,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes a planning row and the linked event",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Planning",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_planning, array $event = NULL)\n  {\n    if ( \n      \\bbn\\Str::isUid($id_planning) &&\n      \/\/ Get the id_event linked to this planning\n      ($id_event = $this->getIdEvent($id_planning)) &&\n      \/\/ Get the old event linked to this planning\n      ($old_event = $this->events->getFull($id_event)) &&\n      \/\/ Events table fields\n      ($ef =& $this->ecfg['arch']['events']) &&\n      \/\/ Exceptions table fields\n      ($exf =& $this->ecfg['arch']['exceptions']) &&\n      \/\/ Events extra fields\n      ($extf =& $this->ecfg['extra'])\n    ){\n      if ( !empty($event) ){\n        \/\/ Check if the \"action\" property is set\n        if ( empty($event[$extf['action']]) ){\n          die('The \"'.$extf['action'].'\" property is mandatory!');\n        }\n        switch ( $event[$extf['action']] ){\n          case 'this':\n            \/\/ Check if the event is recurring\n            if ( !empty($old_event[$ef['recurring']]) ){\n              \/\/ Check if the event is a recurrence\n              if ( !empty($event[$extf['recurrence']]) ){\n                return $this->events->addException($id_event, [\n                  $exf['day'] => $event[$ef['start']],\n                  $exf['start'] => $event[$ef['start']],\n                  $exf['end'] => $event[$ef['end']],\n                  $exf['deleted'] => 1\n                ]);\n              }\n              else if ( \n                \/\/ Get the first event's recurrence\n                ($first_recc = $this->events->getFirstRecurrence($old_event, true, true)) &&\n                \/\/ Make the recurrences fields structure\n                ($event_next = $this->events->makeRecurrencesFields($old_event, [$first_recc]))\n              ){\n                $event_next = $event_next[0];\n                return !!$this->events->edit($id_event, $event_next);\n              }\n            }\n            else {\n              return $this->_delete($id_planning, $id_event);\n            }\n            break;\n          case 'all':\n            return $this->_delete($id_planning, $id_event);\n          case 'future':\n            if ( !empty($event[$extf['recurrence']]) ){\n              $until = date('Y-m-d', strtotime('-1 day', strtotime($event[$ef['start']])));\n              return $this->events->setUntil($id_event, $until);\n            }\n            else {\n              return $this->_delete($id_planning, $id_event);\n            }\n        }\n      }\n      else{\n        return $this->_delete($id_planning, $id_event);\n      }\n    }\n    return false;\n  }",
            "startLine": 137,
            "endLine": 201,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_planning",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "planning"
                },
                {
                    "name": "event",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getAll": {
            "name": "getAll",
            "summary": "Gets all events of a period.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Planning",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $start, string $end, string $id_staff = NULL)\n  {\n    $et = $this->ecfg['table'];\n    $ef = $this->ecfg['arch']['events'];\n    $rt = $this->ecfg['tables']['recurring'];\n    $rf = $this->ecfg['arch']['recurring'];\n    $where = [\n      'logic' => 'OR',\n      'conditions' => [[\n        'conditions' => [[\n          'field' => $this->db->colFullName($ef['start'], $et),\n          'operator' => '<=',\n          'value' => $end\n        ], [\n          'logic' => 'OR',\n          'conditions' => [[\n            'field' => $this->db->colFullName($ef['end'], $et),\n            'operator' => '>=',\n            'value' => $start\n          ], [\n            'field' => $this->db->colFullName($ef['end'], $et),\n            'operator' => 'isnull'\n          ]]\n        ]]\n      ], [\n        'conditions' => [[\n          'field' => $this->db->colFullName($ef['start'], $et),\n          'operator' => '<=',\n          'value' => $start\n        ], [\n          'field' => $this->db->colFullName($ef['recurring'], $et),\n          'value' => 1\n        ]]\n      ]]\n    ];\n    if ( \\bbn\\Str::isUid($id_staff) ){\n      $where = [\n        'conditions' => [[\n          'field' => $this->db->colFullName($this->fields['id_staff'], $this->class_table),\n          'value' => $id_staff  \n        ], $where]\n      ];\n    }\n    if ( $events = $this->db->rselectAll([\n      'table' => $this->class_table,\n      'fields' => [\n        $this->db->colFullName($this->fields['id'], $this->class_table),\n        $this->db->colFullName($this->fields['id_staff'], $this->class_table),\n        $this->db->colFullName($this->fields['id_event'], $this->class_table),\n        $this->db->colFullName($this->fields['id_alias'], $this->class_table),\n        $this->db->colFullName($this->fields['alias'], $this->class_table),\n        $this->db->colFullName($ef['id_parent'], $et),\n        $ef['id_type'],\n        $ef['start'],\n        $ef['end'],\n        $ef['name'],\n        $ef['recurring'],\n        $ef['cfg'],\n        $rf['type'],\n        $rf['interval'],\n        $rf['occurrences'],\n        $rf['until'],\n        $rf['wd'],\n        $rf['mw'],\n        $rf['md'],\n        $rf['ym']\n      ],\n      'join' => [[\n        'table' => $et,\n        'on' => [\n          'conditions' => [[\n            'field' => $this->db->colFullName($ef['id'], $et),\n            'exp' => $this->db->colFullName($this->fields['id_event'], $this->class_table)\n          ]]\n        ]\n      ], [\n        'table' => $rt,\n        'type' => 'left',\n        'on' => [\n          'conditions' => [[\n            'field' => $this->db->colFullName($ef['id'], $et),\n            'exp' => $this->db->colFullName($rf['id_event'], $rt),\n          ]]\n        ]\n      ], [\n        'table' => $this->ocfg['table'],\n        'on' => [\n          'conditions' => [[\n            'field' => $this->db->colFullName($ef['id_type'], $et),\n            'exp' => $this->db->colFullName($this->ocfg['arch']['options']['id'], $this->ocfg['table']),\n          ]]\n        ]\n      ]],\n      'where' => $where\n    ]) ){\n      return $this->analyze($start, $end, $events);\n    }\n    return [];\n  }",
            "startLine": 209,
            "endLine": 307,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "start",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "end",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_staff",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getAllByAlias": {
            "name": "getAllByAlias",
            "summary": "Gets all events of a period.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Planning",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_alias, string $start = NULL, string $end = NULL, string $id_staff = NULL)\n  {\n    $et = $this->ecfg['table'];\n    $ef = $this->ecfg['arch']['events'];\n    $rt = $this->ecfg['tables']['recurring'];\n    $rf = $this->ecfg['arch']['recurring'];\n    $where = [\n      'conditions' => [[\n        'field' => $this->db->colFullName($this->fields['id_alias'], $this->class_table),\n        'value' => $id_alias\n      ]]\n    ];\n    if ( \\bbn\\Str::isUid($id_staff) ){\n      $where['conditions'][] = [\n        'field' => $this->db->colFullName($this->fields['id_staff'], $this->class_table),\n        'value' => $id_staff  \n      ];\n    }\n    if ( !empty($start) && !empty($end) ){\n      $where['conditions'][] = [\n        'logic' => 'OR',\n        'conditions' => [[\n          'conditions' => [[\n            'field' => $this->db->colFullName($ef['start'], $et),\n            'operator' => '<=',\n            'value' => $end\n          ], [\n            'logic' => 'OR',\n            'conditions' => [[\n              'field' => $this->db->colFullName($ef['end'], $et),\n              'operator' => '>=',\n              'value' => $start\n            ], [\n              'field' => $this->db->colFullName($ef['end'], $et),\n              'operator' => 'isnull'\n            ]]\n          ]]\n        ], [\n          'conditions' => [[\n            'field' => $this->db->colFullName($ef['start'], $et),\n            'operator' => '<=',\n            'value' => $start\n          ], [\n            'field' => $this->db->colFullName($ef['recurring'], $et),\n            'value' => 1\n          ]]\n        ]]\n      ];\n    }\n    if ( $events = $this->db->rselectAll([\n      'table' => $this->class_table,\n      'fields' => [\n        $this->db->colFullName($this->fields['id'], $this->class_table),\n        $this->db->colFullName($this->fields['id_staff'], $this->class_table),\n        $this->db->colFullName($this->fields['id_event'], $this->class_table),\n        $this->db->colFullName($this->fields['id_alias'], $this->class_table),\n        $this->db->colFullName($this->fields['alias'], $this->class_table),\n        $this->db->colFullName($ef['id_parent'], $et),\n        $ef['id_type'],\n        $ef['start'],\n        $ef['end'],\n        $ef['name'],\n        $ef['recurring'],\n        $ef['cfg'],\n        $rf['type'],\n        $rf['interval'],\n        $rf['occurrences'],\n        $rf['until'],\n        $rf['wd'],\n        $rf['mw'],\n        $rf['md'],\n        $rf['ym']\n      ],\n      'join' => [[\n        'table' => $et,\n        'on' => [\n          'conditions' => [[\n            'field' => $this->db->colFullName($ef['id'], $et),\n            'exp' => $this->db->colFullName($this->fields['id_event'], $this->class_table)\n          ]]\n        ]\n      ], [\n        'table' => $rt,\n        'type' => 'left',\n        'on' => [\n          'conditions' => [[\n            'field' => $this->db->colFullName($ef['id'], $et),\n            'exp' => $this->db->colFullName($rf['id_event'], $rt),\n          ]]\n        ]\n      ], [\n        'table' => $this->ocfg['table'],\n        'on' => [\n          'conditions' => [[\n            'field' => $this->db->colFullName($ef['id_type'], $et),\n            'exp' => $this->db->colFullName($this->ocfg['arch']['options']['id'], $this->ocfg['table']),\n          ]]\n        ]\n      ]],\n      'where' => $where\n    ]) ){\n      if ( !empty($start) && !empty($end) ){\n        return $this->analyze($start, $end, $events);\n      }\n      return $events;\n    }\n    return [];\n  }",
            "startLine": 317,
            "endLine": 424,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_alias",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "alias"
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "end",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "id_staff",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "staff"
                }
            ]
        },
        "analyze": {
            "name": "analyze",
            "summary": "Analyzes an events list and returns it.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Planning",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $start, string $end, array $events)\n  {\n    $ret = [];\n    foreach ( $events as $event ){\n      \/\/ Recurring event\n      if ( \n        !empty($event[$this->ecfg['arch']['events']['recurring']]) &&\n        ($rec = $this->events->getRecurrences($start, $end, $event))\n      ){\n        array_push($ret, ...$rec);\n      }\n      \/\/ Normal event\n      if ( \n        ($event[$this->ecfg['arch']['events']['start']] >= $start) && \n        ($event[$this->ecfg['arch']['events']['start']] <= $end) \n      ){\n        $event['recurrence'] = 0;\n        $ret[] = $event;\n      }\n    }\n    return $ret;\n  }",
            "startLine": 432,
            "endLine": 453,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "start",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "end",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "events",
                    "position": 2,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getIdEvent": {
            "name": "getIdEvent",
            "summary": "Gets the planning's id_event.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Planning",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ( \\bbn\\Str::isUid($id) ){\n      return $this->db->selectOne($this->class_table, $this->fields['id_event'], [$this->fields['id'] => $id]);\n    }\n    return null;\n  }",
            "startLine": 460,
            "endLine": 466,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getIdStaff": {
            "name": "getIdStaff",
            "summary": "Gets the planning's id_staff.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Planning",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ( \\bbn\\Str::isUid($id) ){\n      return $this->db->selectOne($this->class_table, $this->fields['id_staff'], [$this->fields['id'] => $id]);\n    }\n    return null;\n  }",
            "startLine": 473,
            "endLine": 479,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isAvailable": {
            "name": "isAvailable",
            "summary": "Checks if the staff is available on the given period",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Planning",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_staff, string $start, string $end)\n  {\n    $set = $this->class_cfg['tables']['staff_events'];\n    $sef = $this->class_cfg['arch']['staff_events'];\n    $ecfg = $this->getEvents()->getClassCfg();\n    $et = $ecfg['tables']['events'];\n    $ef = $ecfg['arch']['events'];\n    return !$this->db->rselect([\n      'table' => $set,\n      'fields' => [$this->db->colFullName($sef['id_event'], $set)],\n      'join' => [[\n        'table' => $et,\n        'on' => [\n          'conditions' => [[\n            'field' => $this->db->colFullName($ef['id'], $et),\n            'exp' => $this->db->colFullName($sef['id_event'], $set)\n          ], [\n            'field' => $this->db->colFullName($ef['start'], $et),\n            'operator' => '<=',\n            'value' => $start\n          ], [\n            'field' => $this->db->colFullName($ef['end'], $et),\n            'operator' => '>=',\n            'value' => $end\n          ]]\n        ]\n      ]],\n      'where' => [\n        'conditions' => [[\n          'field' => $this->db->colFullName($sef['id_staff'], $set),\n          'value' => $id_staff\n        ], [\n          'field' => $this->db->colFullName($sef['status'], $set),\n          'value' => 'accepted'\n        ]]\n      ]\n    ]);\n\n  }",
            "startLine": 488,
            "endLine": 526,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_staff",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "staff"
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "end",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isReplaced": {
            "name": "isReplaced",
            "summary": "Checks if the staff event is replaced on the given day",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Planning",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_planning, string $day)\n  {\n    $t =& $this;\n    return !!array_filter($this->getAllByAlias($id_planning), function($a) use($day, $t){\n      return $a[$t->fields['alias']] === date('Y-m-d', strtotime($day));\n    });\n  }",
            "startLine": 534,
            "endLine": 540,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_planning",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "planning"
                },
                {
                    "name": "day",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "exists": {
            "name": "exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Planning",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if (!$this->class_table_index) {\n      throw new \\Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $res = $this->db->count(\n      $this->class_table, [\n      $this->class_cfg['arch'][$this->class_table_index]['id'] => $id\n      ]\n    );\n    return (bool)$res;\n  }",
            "startLine": 35,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the class configuration.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Planning",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->class_cfg;\n  }",
            "startLine": 55,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the fields of the main table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Planning",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->fields;\n  }",
            "startLine": 66,
            "endLine": 69,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "select": {
            "name": "select",
            "summary": "Retrieves a row from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Planning",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ($this->exists($id)) {\n      $f = $this->class_cfg['arch'][$this->class_table_index];\n      if ($arr = $this->db->rselect(\n        $this->class_table, array_values($f), [\n          $f['id'] => $id\n        ]\n      )) {\n        if (!empty($f['cfg']) && !empty($arr[$f['cfg']])) {\n          $cfg = json_decode($arr[$f['cfg']], true);\n          $arr = array_merge($cfg, $arr);\n          unset($arr[$f['cfg']]);\n        }\n\n        return $arr;\n      }\n    }\n\n    return null;\n\n  }",
            "startLine": 146,
            "endLine": 167,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "selectAll": {
            "name": "selectAll",
            "summary": "Returns an array of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Planning",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cond)\n  {\n    if (!$this->class_table_index) {\n      throw new \\Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if ($arrs = $this->db->rselectAll($this->class_table, array_values($f), $cond)) {\n      foreach ($arrs as &$arr) {\n        if (!empty($f['cfg']) && !empty($arr[$f['cfg']])) {\n          $cfg = json_decode($arr[$f['cfg']], true);\n          $arr = array_merge($cfg, $arr);\n          unset($arr[$f['cfg']]);\n        }\n      }\n      unset($arr);\n\n      return $arrs;\n    }\n\n    return [];\n  }",
            "startLine": 177,
            "endLine": 198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cond",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": {
        "default_class_cfg": {
            "table": "bbn_hr_planning",
            "tables": {
                "planning": "bbn_hr_planning",
                "staff_events": "bbn_hr_staff_events"
            },
            "arch": {
                "planning": {
                    "id": "id",
                    "id_staff": "id_staff",
                    "id_event": "id_event",
                    "id_alias": "id_alias",
                    "alias": "alias"
                },
                "staff_events": {
                    "id_staff": "id_staff",
                    "id_event": "id_event",
                    "note": "note",
                    "status": "status"
                }
            }
        }
    },
    "constants": null,
    "numMethods": 17,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 1,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\Dbconfig"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "table": "bbn_hr_planning",
            "tables": {
                "planning": "bbn_hr_planning",
                "staff_events": "bbn_hr_staff_events"
            },
            "arch": {
                "planning": {
                    "id": "id",
                    "id_staff": "id_staff",
                    "id_event": "id_event",
                    "id_alias": "id_alias",
                    "alias": "alias"
                },
                "staff_events": {
                    "id_staff": "id_staff",
                    "id_event": "id_event",
                    "note": "note",
                    "status": "status"
                }
            }
        },
        "db": null,
        "events": null,
        "ecfg": null,
        "options": null,
        "ocfg": null,
        "_is_init_class_cfg": false,
        "fields": null,
        "class_cfg": null,
        "class_table": null,
        "class_table_index": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Planning",
    "summary": ""
}