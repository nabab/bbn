{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Event",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\Dbconfig"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Event.php",
    "startLine": 6,
    "endLine": 692,
    "contentConstructor": {
        "file": "bbn\\Appui\\Event",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db)\n  {\n    $this->_init_class_cfg();\n    $this->opt = bbn\\Appui\\Option::getInstance();\n    $this->usr = bbn\\User::getInstance();\n    \/\/$this->opt_id = $this->opt->fromRootCode('event', 'appui');\n  }",
            "startLine": 141,
            "endLine": 147,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Db",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bbn\\Db $db)\n  {\n    $this->db = $db;\n  }",
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ]
            },
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "insert": {
            "name": "insert",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $event)\n  {\n    $f =& $this->fields;\n    if ( (bbn\\X::hasProps($event, [$f['id_type']], true) ) && (array_key_exists($this->fields['start'], $event))){\n      if ( \n        !empty($event[$f['cfg']]) &&\n        !\\bbn\\Str::isJson($event[$f['cfg']])\n      ){\n        $event[$f['cfg']] = json_encode($event[$f['cfg']]);\n      }\n      \/\/ Check if the event is recurring\n      if ( $is_rec = !empty($event[$f['recurring']]) ){\n        $rf =& $this->class_cfg['arch']['recurring'];\n        \/\/ If the event's start date is different of its first recurrence to change the start date\n        if (\n          ($first = $this->getFirstRecurrence($event, false)) &&\n          ($event[$f['start']] !== $first)\n        ){\n          \/\/ Check if the event has an end date and to change it\n          if ( !empty($event[$f['end']]) ){\n            $diff = date_diff(new DateTime($event[$f['start']]), new DateTime($event[$f['end']]));\n            $end = new DateTime($first);\n            $event[$f['end']] = $end->add($diff)->format('Y-m-d H:i:s');  \n          }\n          $event[$f['start']] = $first;\n        }\n      }\n      if ( \n        $this->db->insert($this->class_table, [\n          $f['id_parent'] => $event[$f['id_parent']] ?? null,\n          $f['id_type'] => $event[$f['id_type']],\n          $f['start'] => $event[$f['start']],\n          $f['end'] => $event[$f['end']] ?? null,\n          $f['name'] => $event[$f['name']] ?? null,\n          $f['recurring'] => (int)$is_rec,\n          $f['cfg'] => $event[$f['cfg']] ?? null\n        ]) &&\n        ($id = $this->db->lastId())\n      ){\n        if ( $is_rec ){\n          $this->db->insert($this->class_cfg['tables']['recurring'], [\n            $rf['id_event'] => $id,\n            $rf['type'] => $event[$rf['type']],\n            $rf['interval'] => $event[$rf['interval']] ?? null,\n            $rf['occurrences'] => $event[$rf['occurrences']] ?? null,\n            $rf['until'] => $event[$rf['until']] ?? null,\n            $rf['wd'] => !empty($event[$rf['wd']]) ? (\\bbn\\Str::isJson($event[$rf['wd']]) ? $event[$rf['wd']] : json_encode($event[$rf['wd']])) : null,\n            $rf['mw'] => !empty($event[$rf['mw']]) ? (\\bbn\\Str::isJson($event[$rf['mw']]) ? $event[$rf['mw']] : json_encode($event[$rf['mw']])) : null,\n            $rf['md'] => !empty($event[$rf['md']]) ? (\\bbn\\Str::isJson($event[$rf['md']]) ? $event[$rf['md']] : json_encode($event[$rf['md']])) : null,\n            $rf['ym'] => !empty($event[$rf['ym']]) ? (\\bbn\\Str::isJson($event[$rf['ym']]) ? $event[$rf['ym']] : json_encode($event[$rf['ym']])) : null\n          ]);\n        }\n        return $id; \n      }\n    }\n    return null;\n  }",
            "startLine": 154,
            "endLine": 210,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "event",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "edit": {
            "name": "edit",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, array $event)\n  {\n    if ( \\bbn\\Str::isUid($id) ){\n      $f =& $this->fields;\n      $rf =& $this->class_cfg['arch']['recurring'];\n      $ok = 0;\n      $old_is_rec = $this->db->selectOne($this->class_table, $this->fields['recurring'], [\n        $this->fields['id'] => $id\n      ]);\n      if ( array_key_exists($f['id'], $event) ){\n        unset($event[$f['id']]);\n      }\n      if ( \n        !empty($event[$f['cfg']]) &&\n        !\\bbn\\Str::isJson($event[$f['cfg']])\n      ){\n        $event[$f['cfg']] = json_encode($event[$f['cfg']]);\n      }\n\n      $ok2 = $this->db->update($this->class_table, [\n        $f['id_type'] => $event[$f['id_type']],\n        $f['start'] => $event[$f['start']],\n        $f['end'] => $event[$f['end']] ?? null,\n        $f['name'] => $event[$f['name']] ?? null,\n        $f['recurring'] => $event[$f['recurring']] ?? 0,\n        $f['cfg'] => $event[$f['cfg']] ?? null\n      ], [\n\t      $f['id'] => $id\n      ]);\n      if ( !empty($event[$f['recurring']]) ){\n        $ok = $this->db->insertUpdate($this->class_cfg['tables']['recurring'], [\n          $rf['id_event'] => $id,\n          $rf['type'] => $event[$rf['type']],\n          $rf['interval'] => $event[$rf['interval']] ?? null,\n          $rf['occurrences'] => $event[$rf['occurrences']] ?? null,\n          $rf['until'] => $event[$rf['until']] ?? null,\n          $rf['wd'] => !empty($event[$rf['wd']]) ? (\\bbn\\Str::isJson($event[$rf['wd']]) ? $event[$rf['wd']] : json_encode($event[$rf['wd']])) : null,\n          $rf['mw'] => !empty($event[$rf['mw']]) ? (\\bbn\\Str::isJson($event[$rf['mw']]) ? $event[$rf['mw']] : json_encode($event[$rf['mw']])) : null,\n          $rf['md'] => !empty($event[$rf['md']]) ? (\\bbn\\Str::isJson($event[$rf['md']]) ? $event[$rf['md']] : json_encode($event[$rf['md']])) : null,\n          $rf['ym'] => !empty($event[$rf['ym']]) ? (\\bbn\\Str::isJson($event[$rf['ym']]) ? $event[$rf['ym']] : json_encode($event[$rf['ym']])) : null\n        ]);\n      }\n      else if ( !empty($old_is_rec) ){\n        $this->deleteRecurrences($id);\n      }\n\n      return $ok || $ok2;\n    }\n\n    return null;\n  }",
            "startLine": 217,
            "endLine": 267,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "event",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ( \\bbn\\Str::isUid($id) ){\n      return (bool)$this->db->delete($this->class_table, [$this->fields['id'] => $id]);\n    }\n\n    return false;\n  }",
            "startLine": 273,
            "endLine": 280,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get": {
            "name": "get",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ( \\bbn\\Str::isUid($id) ){\n      $t =& $this;\n\n      return $this->db->rselect([\n        'table' => $this->class_table,\n        'fields' => array_map(function($f) use($t){\n          return $this->db->colFullName($f, $t->class_table);\n        }, $this->fields),\n        'join' => [[\n          'table' => $this->class_cfg['tables']['options'],\n          'on' => [\n            'conditions' => [[\n              'field' => $this->db->colFullName($this->class_cfg['arch']['options']['id'], $this->class_cfg['tables']['options']),\n              'exp' => $this->fields['id_type']\n            ]]\n          ]\n        ]],\n        'where' => [\n          $this->db->colFullName($this->fields['id'], $this->class_table) => $id\n        ]\n      ]);\n    }\n\n    return null;\n  }",
            "startLine": 286,
            "endLine": 312,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getFull": {
            "name": "getFull",
            "summary": "Gets an event with the recurring details.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ( \\bbn\\Str::isUid($id) ){\n      $rt =& $this->class_cfg['tables']['recurring'];\n      $rf =& $this->class_cfg['arch']['recurring'];\n      $ot =& $this->class_cfg['tables']['options'];\n      return $this->db->rselect([\n        'table' => $this->class_table,\n        'fields' => [\n          $this->db->colFullName($this->fields['id'], $this->class_table),\n          $this->db->colFullName($this->fields['id_parent'], $this->class_table),\n          $this->fields['id_type'],\n          $this->fields['start'],\n          $this->fields['end'],\n          $this->fields['name'],\n          $this->fields['recurring'],\n          $this->fields['cfg'],\n          $rf['type'],\n          $rf['interval'],\n          $rf['occurrences'],\n          $rf['until'],\n          $rf['wd'],\n          $rf['mw'],\n          $rf['md'],\n          $rf['ym']\n        ],\n        'join' => [[\n          'table' => $rt,\n          'type' => 'left',\n          'on' => [\n            'conditions' => [[\n              'field' => $this->db->colFullName($this->fields['id'], $this->class_table),\n              'exp' => $this->db->colFullName($rf['id_event'], $rt),\n            ]]\n          ]\n        ], [\n          'table' => $ot,\n          'on' => [\n            'conditions' => [[\n              'field' => $this->fields['id_type'],\n              'exp' => $this->db->colFullName($this->class_cfg['arch']['options']['id'], $ot),\n            ]]\n          ]\n        ]],\n        'where' => [\n          $this->db->colFullName($this->fields['id'], $this->class_table) => $id\n        ]\n      ]);\n    }\n\n    return null;\n  }",
            "startLine": 319,
            "endLine": 370,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getRecurrences": {
            "name": "getRecurrences",
            "summary": "Returns an array of all event's recurrences in a period",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $start, string $end, array &$event)\n  {\n    \/\/ Recurring table fields\n    $rf =& $this->class_cfg['arch']['recurring'];\n    \/\/ Events table fields\n    $ef =& $this->class_cfg['arch']['events'];\n    \/\/ When object instance\n    $when = $this->getWhenObject($event);\n    \/\/ Get occurrences\n    $occ = $this->makeRecurrencesFields($event, $when->getOccurrencesBetween(new \\DateTime($start), new \\DateTime($end)));\n    \/\/ Specific month's week\n    if ( !empty($event[$rf['mw']]) ){\n      $occ = $this->filterRecurrencesByMonthWeek($occ, $event[$rf['mw']]);\n    }\n\n    return $this->filterRecurrencesByExceptions($occ);\n  }",
            "startLine": 379,
            "endLine": 395,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "start",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "end",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "event",
                    "position": 2,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "makeRecurrencesFields": {
            "name": "makeRecurrencesFields",
            "summary": "Makes the fields structure on the given event recurrences",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $event, array $recurrences)\n  {\n    $ef =& $this->class_cfg['arch']['events'];\n    \/\/ Calculate the diff between the event start and the event end\n    $diff = !empty($event[$ef['end']]) ? date_diff(new DateTime($event[$ef['start']]), new DateTime($event[$ef['end']])) : false;\n    \/\/ Fix fields\n    return array_map(function($d) use($event, $ef, $diff){\n      $d = \\is_string($d) ? $d : $d->format('Y-m-d H:i:s');\n      $e = null;\n      if ( $diff ){\n        $e = new DateTime($d);\n        $e = $e->add($diff)->format('Y-m-d H:i:s');\n      }\n      return array_merge($event, [\n        $ef['start'] => $d,\n        $ef['end'] => $e,\n        'recurrence' => (int)($event[$ef['start']] !== $d)\n      ]);\n    }, $recurrences);\n  }",
            "startLine": 403,
            "endLine": 422,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "event",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "recurrences",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getFirstRecurrence": {
            "name": "getFirstRecurrence",
            "summary": "Returns the date of the first recurrence of a recurring event.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $event, $omitstart = true, $exceptions = false)\n  {\n    if ( \n      $exceptions &&\n      ($excs = $this->getExceptions($event[$this->fields['id']]))\n    ){\n      $t =& $this;\n      $event[$this->class_cfg['extra']['exceptions']] = array_map(function($e) use($t){\n        return $e[$t->class_cfg['arch']['exceptions']['day']].' '.$e[$t->class_cfg['arch']['exceptions']['start']];\n      }, $excs);\n    }\n    $when = $this->getWhenObject($event);\n    if ( $r = $when->getNextOccurrence($when->startDate, $omitstart) ){\n      return $r->format('Y-m-d H:i:s');\n    }\n\n    return null;\n  }",
            "startLine": 431,
            "endLine": 448,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "event",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "omitstart",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "Default: true"
                },
                {
                    "name": "exceptions",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "Default: false"
                }
            ]
        },
        "deleteRecurrences": {
            "name": "deleteRecurrences",
            "summary": "Deletes the recurrences of the given event",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ( \\bbn\\Str::isUid($id) ){\n      $todelete = $this->db->count($this->class_cfg['tables']['recurring'], [$this->class_cfg['arch']['recurring']['id_event'] => $id]);\n      return $this->db->delete($this->class_cfg['tables']['recurring'], [$this->class_cfg['arch']['recurring']['id_event'] => $id]) === $todelete;\n    }\n\n    return false;\n  }",
            "startLine": 455,
            "endLine": 463,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getWhenObject": {
            "name": "getWhenObject",
            "summary": "Makes a When object by an event.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array &$event)\n  {\n    \/\/ Recurring table fields\n    $rf =& $this->class_cfg['arch']['recurring'];\n    \/\/ Events table fields\n    $ef =& $this->class_cfg['arch']['events'];\n    \/\/ Extra fields\n    $extf =& $this->class_cfg['arch']['extra'];\n    \/\/ When object instance\n    $when = new \\When\\When($event[$ef['start']]);\n    \/\/ Trick to have the possibility to set the start date different to the first occurrence\n    $when->RFC5545_COMPLIANT = 2;\n    \/\/ Set the frequency\n    $when->freq($event[$rf['type']]);\n    \/\/ Remove the original event from the occurrences\n    $excs = $event[$ef['start']];\n    \/\/ If the exceptions are present add them to exclusions list\n    if ( !empty($event[$extf['exceptions']]) ){\n      if ( \\is_array($event[$extf['exceptions']]) ){\n        $excs .= implode(',', $event[$extf['exceptions']]);\n      }\n      else if ( \\is_string($event[$extf['exceptions']]) ){\n        $excs .= $event[$extf['exceptions']];\n      }\n    }\n    $when->exclusions($excs);\n    \/\/ Interval\n    if ( !empty($event[$rf['interval']]) ){\n      $when->interval($event[$rf['interval']] + 1);\n    }\n    \/\/ Number of occurrences\n    if ( !empty($event[$rf['occurrences']]) ){\n      $when->count($event[$rf['occurrences']]);\n    }\n    \/\/ Until\n    if ( !empty($event[$rf['until']]) ){\n      $until = new \\DateTime($event[$rf['until']]);\n      $until->add(new \\DateInterval('P1D'));\n      $when->until($until);\n    }\n    \/\/ Specific week's day\n    if ( \\is_null($event[$rf['wd']]) ){\n      $event[$rf['wd']] = [];\n    }\n    else if (\\bbn\\Str::isJson($event[$rf['wd']]) ){\n      $event[$rf['wd']] = json_decode($event[$rf['wd']], true);\n    }\n    if ( !empty($event[$rf['wd']]) ){\n      $wds =& $this->weekdays;\n      $days = array_map(function($d) use($wds){\n        return substr($wds[$d], 0, 2);\n      }, $event[$rf['wd']]);\n      $when->byday($days);\n    }\n    \/\/ Specific month's day\n    if ( \\is_null($event[$rf['md']]) ){\n      $event[$rf['md']] = [];\n    }\n    else if (\\bbn\\Str::isJson($event[$rf['md']]) ){\n      $event[$rf['md']] = json_decode($event[$rf['md']], true);\n    }\n    if ( !empty($event[$rf['md']]) ){\n      $when->bymonthday($event[$rf['md']]);\n    }\n    \/\/ Specific year's month\n    if ( \\is_null($event[$rf['ym']]) ){\n      $event[$rf['ym']] = [];\n    }\n    else if (\\bbn\\Str::isJson($event[$rf['ym']]) ){\n      $event[$rf['ym']] = json_decode($event[$rf['ym']], true);\n    }\n    if ( !empty($event[$rf['ym']]) ){\n      $when->bymonth($event[$rf['ym']]);\n    }\n    \/\/ Specific month's week\n    if ( \\is_null($event[$rf['mw']]) ){\n      $event[$rf['mw']] = [];\n    }\n    else if (\\bbn\\Str::isJson($event[$rf['mw']]) ){\n      $event[$rf['mw']] = json_decode($event[$rf['mw']], true);\n    }\n    return $when;\n  }",
            "startLine": 470,
            "endLine": 552,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "event",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "filterRecurrencesByExceptions": {
            "name": "filterRecurrencesByExceptions",
            "summary": "Filters the event's recurrences by exceptions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $recurrences)\n  {\n    if ( \n      !empty($recurrences) &&\n      \/\/ Recurring table fields\n      ($rf =& $this->class_cfg['arch']['recurring']) &&\n      \/\/ Exception table fields\n      ($ef =& $this->class_cfg['arch']['events']) &&\n      \/\/ Events table fields\n      ($rt =& $this->class_cfg['tables']['exceptions']) &&\n      \/\/ Exception table fields\n      ($exf =& $this->class_cfg['arch']['exceptions']) &&\n      \/\/ Get exceptions\n      ($ex = $this->getExceptions($recurrences[0][$rf['id_event']])) \n    ){\n      return array_filter($recurrences, function($r) use($ex, $ef, $exf){\n        return \\bbn\\X::find($ex, [$exf['day'] => date('Y-m-d', strtotime($r[$ef['start']]))]) === null;\n      });    \n    }\n    return $recurrences;\n  }",
            "startLine": 559,
            "endLine": 579,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "recurrences",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setUntil": {
            "name": "setUntil",
            "summary": "Setz the event's until property",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, string $until = NULL)\n  {\n    if ( \n      \\bbn\\Str::isUid($id) &&\n      (\n        \\is_null($until) ||\n        \\bbn\\Str::isDateSql($until)\n      )\n    ){\n      return (bool)$this->db->update($this->class_cfg['tables']['recurring'], [\n        $this->class_cfg['arch']['recurring']['until'] => $until\n      ], [\n        $this->class_cfg['arch']['recurring']['id_event'] => $id\n      ]);\n    }\n    return false;\n  }",
            "startLine": 587,
            "endLine": 603,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "until",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "unsetUntil": {
            "name": "unsetUntil",
            "summary": "Sets the event's until property to null",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    return $this->setUntil($id);\n  }",
            "startLine": 609,
            "endLine": 612,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addException": {
            "name": "addException",
            "summary": "Adds an event recurring exception",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_event, array $exc)\n  {\n    if ( \n      \\bbn\\Str::isUid($id_event) &&\n      ($ext =& $this->class_cfg['tables']['exceptions']) &&\n      ($exf =& $this->class_cfg['arch']['exceptions']) &&\n      $this->get($id_event) && \n      !empty($exc[$exf['day']]) &&\n      !empty($exc[$exf['start']]) &&\n      !empty($exc[$exf['end']]) &&\n      (\n        !empty($exc[$exf['deleted']]) ||\n        !empty($exc[$exf['rescheduled']])\n      )\n    ){\n      if ( empty($exc[$exf['id_event']]) ){\n        $exc[$exf['id_event']] = $id_event;\n      }\n      $exc[$exf['day']] = date('Y-m-d', strtotime($exc[$exf['day']]));\n      $exc[$exf['start']] = date('H:i:s', strtotime($exc[$exf['start']]));\n      $exc[$exf['end']] = date('H:i:s', strtotime($exc[$exf['end']]));\n      $exc[$exf['id_user']] = !empty($exc[$exf['id_user']]) ? $exc[$exf['id_user']] : \\bbn\\User::getInstance()->getId();\n      $exc[$exf['creation']] = \\bbn\\Str::isDateSql($exc[$exf['creation']]) ?\n        $exc[$exf['creation']] : date('Y-m-d H:i:s');\n      return (bool)$this->db->insert($ext, $exc);\n    }\n    return false;\n  }",
            "startLine": 620,
            "endLine": 647,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_event",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "event"
                },
                {
                    "name": "exc",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "copyExceptions": {
            "name": "copyExceptions",
            "summary": "Copies the event's exceptions to an other one.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $from_event, string $to_event)\n  {\n    if (\n      \\bbn\\Str::isUid($from_event) &&\n      \\bbn\\Str::isUid($to_event) &&\n      ($table =& $this->class_cfg['tables']['exceptions']) &&\n      ($fields =& $this->class_cfg['arch']['exceptions'])\n    ){\n      $exc = array_map(function($e) use($fields, $to_event){\n        unset($e[$fields['id']]);\n        $e[$fields['id_event']] = $to_event;\n        return $e;\n      }, $this->db->rselectAll($table, [], [$fields['id_event'] => $from_event]));\n      $inserted = 0;\n      foreach ( $exc as $e ){\n        $inserted += $this->db->insert($table, $e);\n      }\n      return count($exc) === $inserted;\n    }\n    return false;\n  }",
            "startLine": 655,
            "endLine": 675,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "from_event",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "event"
                },
                {
                    "name": "to_event",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "event"
                }
            ]
        },
        "getExceptions": {
            "name": "getExceptions",
            "summary": "Gets the event's exceptions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ( \\bbn\\Str::isUid($id) ){\n      return $this->db->rselectAll($this->class_cfg['tables']['exceptions'], [], [\n        $this->class_cfg['arch']['exceptions']['id_event'] => $id\n      ]);\n    }\n    return null;\n  }",
            "startLine": 682,
            "endLine": 690,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 51,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 51,
                "endLine": 58,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 65,
            "endLine": 72,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 65,
                "endLine": 72,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->error;\n  }",
            "startLine": 86,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 86,
                "endLine": 89,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 92,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 92,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 98,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 98,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 115,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 115,
                "endLine": 126,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 132,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 132,
                "endLine": 135,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 142,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 142,
                "endLine": 145,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "exists": {
            "name": "exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($filter)\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (!empty($cfg) && $arr = $this->db->count(\n      $this->class_table,\n      $cfg\n    )) {\n      return true;\n    }\n\n    return false;\n  }",
            "startLine": 37,
            "endLine": 59,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the class configuration.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->class_cfg;\n  }",
            "startLine": 67,
            "endLine": 70,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the fields of the main table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->fields;\n  }",
            "startLine": 78,
            "endLine": 81,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "update": {
            "name": "update",
            "summary": "Updates a single row in the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, array $data, bool $addCfg = false)\n  {\n    if (!$this->exists($id)) {\n      throw new Exception(X::_(\"Impossible to find the given row\"));\n    }\n\n    if ($addCfg) {\n      $data = array_merge($this->rselect($id), $data);\n    }\n\n    if ($data = $this->prepare($data)) {\n      $ccfg = $this->getClassCfg();\n      $f = $ccfg['arch'][$this->class_table_index];\n      return (bool)$this->db->update($ccfg['table'], $data, [$f['id'] => $id]);\n    }\n\n    return false;\n  }",
            "startLine": 131,
            "endLine": 148,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "addCfg",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "selectOne": {
            "name": "selectOne",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $field, $filter, array $order = [])\n  {\n    if ($res = $this->dbConfigSingleSelection($filter, $order, false, [$field])) {\n      return $res[$field] ?? null;\n    }\n\n    return null;\n  }",
            "startLine": 159,
            "endLine": 166,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "select": {
            "name": "select",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($filter, array $order = [])\n  {\n    return $this->dbConfigSingleSelection($filter, $order, true);\n  }",
            "startLine": 177,
            "endLine": 180,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "rselect": {
            "name": "rselect",
            "summary": "Retrieves a row as an array from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($filter, array $order = [])\n  {\n    return $this->dbConfigSingleSelection($filter, $order, false);\n  }",
            "startLine": 191,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "count": {
            "name": "count",
            "summary": "Returns the number of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $filter = [])\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    return $this->db->count($this->class_table, $filter);\n  }",
            "startLine": 204,
            "endLine": 211,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "selectAll": {
            "name": "selectAll",
            "summary": "Returns an array of rows as objects from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $filter, array $order = [], int $limit = 0, int $start = 0)\n  {\n    return $this->dbConfigSelection($filter, $order, $limit, $start, true);\n  }",
            "startLine": 224,
            "endLine": 227,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "rselectAll": {
            "name": "rselectAll",
            "summary": "Returns an array of rows as arrays from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Event",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $filter, array $order = [], int $limit = 0, int $start = 0)\n  {\n    return $this->dbConfigSelection($filter, $order, $limit, $start, false);\n  }",
            "startLine": 240,
            "endLine": 243,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": {
        "default_class_cfg": {
            "table": "bbn_events",
            "tables": {
                "events": "bbn_events",
                "recurring": "bbn_events_recurring",
                "exceptions": "bbn_events_exceptions",
                "options": "bbn_options"
            },
            "arch": {
                "events": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "id_type": "id_type",
                    "start": "start",
                    "end": "end",
                    "name": "name",
                    "recurring": "recurring",
                    "cfg": "cfg"
                },
                "recurring": {
                    "id": "id",
                    "id_event": "id_event",
                    "type": "type",
                    "interval": "interval",
                    "occurrences": "occurrences",
                    "until": "until",
                    "wd": "wd",
                    "mw": "mw",
                    "md": "md",
                    "ym": "ym"
                },
                "exceptions": {
                    "id": "id",
                    "id_event": "id_event",
                    "id_user": "id_user",
                    "creation": "creation",
                    "day": "day",
                    "start": "start",
                    "end": "end",
                    "rescheduled": "rescheduled",
                    "deleted": "deleted"
                },
                "options": {
                    "id": "id"
                }
            },
            "extra": {
                "action": "action",
                "recurrence": "recurrence",
                "exception": "exception",
                "old_start": "old_start",
                "old_end": "old_end",
                "exceptions": "exceptions"
            }
        }
    },
    "constants": null,
    "numMethods": 35,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 1,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\Dbconfig"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "table": "bbn_events",
            "tables": {
                "events": "bbn_events",
                "recurring": "bbn_events_recurring",
                "exceptions": "bbn_events_exceptions",
                "options": "bbn_options"
            },
            "arch": {
                "events": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "id_type": "id_type",
                    "start": "start",
                    "end": "end",
                    "name": "name",
                    "recurring": "recurring",
                    "cfg": "cfg"
                },
                "recurring": {
                    "id": "id",
                    "id_event": "id_event",
                    "type": "type",
                    "interval": "interval",
                    "occurrences": "occurrences",
                    "until": "until",
                    "wd": "wd",
                    "mw": "mw",
                    "md": "md",
                    "ym": "ym"
                },
                "exceptions": {
                    "id": "id",
                    "id_event": "id_event",
                    "id_user": "id_user",
                    "creation": "creation",
                    "day": "day",
                    "start": "start",
                    "end": "end",
                    "rescheduled": "rescheduled",
                    "deleted": "deleted"
                },
                "options": {
                    "id": "id"
                }
            },
            "extra": {
                "action": "action",
                "recurrence": "recurrence",
                "exception": "exception",
                "old_start": "old_start",
                "old_end": "old_end",
                "exceptions": "exceptions"
            }
        },
        "opt": null,
        "usr": null,
        "opt_id": null,
        "recurrences": [
            "daily,",
            "weekly",
            "monthly",
            "yearly"
        ],
        "weekdays": {
            "1": "monday",
            "2": "tuesday",
            "3": "wednesday",
            "4": "thursday",
            "5": "friday",
            "6": "saturday",
            "7": "sunday"
        },
        "class_cfg": null,
        "db": null,
        "errors": [],
        "error": false,
        "debug": false,
        "log": [],
        "_is_init_class_cfg": false,
        "fields": null,
        "class_table": null,
        "class_table_index": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Event",
    "summary": "",
    "description": "",
    "description_parts": []
}