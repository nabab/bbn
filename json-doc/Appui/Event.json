{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Event",
    "namespace": true,
    "realName": "Event",
    "realNamespace": "bbn\\Appui",
    "traits": [
        "bbn\\Models\\Tts\\DbActions",
        "bbn\\Models\\Tts\\Optional"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Event.php",
    "startLine": 15,
    "endLine": 791,
    "numMethods": 77,
    "numProperties": 25,
    "numConstants": 0,
    "numStaticProperties": 3,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "table": "bbn_events",
            "tables": {
                "events": "bbn_events",
                "recurring": "bbn_events_recurring",
                "exceptions": "bbn_events_exceptions",
                "options": "bbn_options"
            },
            "arch": {
                "events": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "id_type": "id_type",
                    "start": "start",
                    "end": "end",
                    "name": "name",
                    "recurring": "recurring",
                    "cfg": "cfg"
                },
                "recurring": {
                    "id": "id",
                    "id_event": "id_event",
                    "type": "type",
                    "interval": "interval",
                    "occurrences": "occurrences",
                    "until": "until",
                    "wd": "wd",
                    "mw": "mw",
                    "md": "md",
                    "ym": "ym"
                },
                "exceptions": {
                    "id": "id",
                    "id_event": "id_event",
                    "id_user": "id_user",
                    "creation": "creation",
                    "day": "day",
                    "start": "start",
                    "end": "end",
                    "rescheduled": "rescheduled",
                    "deleted": "deleted"
                },
                "options": {
                    "id": "id"
                }
            },
            "extra": {
                "action": "action",
                "recurrence": "recurrence",
                "exception": "exception",
                "old_start": "old_start",
                "old_end": "old_end",
                "exceptions": "exceptions"
            }
        },
        "optional_is_init": false,
        "option_root_id": null,
        "opt": null,
        "usr": null,
        "opt_id": null,
        "recurrences": [
            "daily,",
            "weekly",
            "monthly",
            "yearly"
        ],
        "weekdays": {
            "1": "monday",
            "2": "tuesday",
            "3": "wednesday",
            "4": "thursday",
            "5": "friday",
            "6": "saturday",
            "7": "sunday"
        },
        "class_cfg": null,
        "db": null,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": [],
        "_isInitClassCfg": false,
        "fields": null,
        "class_table": null,
        "class_table_index": null,
        "rootFilterCfg": [],
        "dbTraitFilterCfg": [],
        "dbTraitRelations": [],
        "dbTraitStructure": [],
        "options": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Event",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(Db $db){\n    parent::__construct($db);\n    $this->initClassCfg();\n    self::optionalInit();\n    $this->opt = Option::getInstance();\n    $this->usr = User::getInstance();\n    \/\/$this->opt_id = $this->opt->fromCode('event', 'appui');\n  }",
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Db",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Db.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function __construct(dbClass $db)\n  {\n    $this->db = $db;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "__construct",
                "returns": [],
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "type_arr": [
                            "bbn\\Db"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ],
                "doc": {
                    "description": "Constructor.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "dbClass",
                            "name": "$db",
                            "description": "A database connection"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Constructor.\n   *\n   * @param dbClass $db A database connection\n   *\/"
            },
            "trait": false,
            "startLine": 104,
            "endLine": 111,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "insert": {
            "name": "insert",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insert(array $event): ?string\n  {\n    $f =& $this->fields;\n    if ( (X::hasProps($event, [$f['id_type']], true) ) && (array_key_exists($this->fields['start'], $event))){\n      if ( \n        !empty($event[$f['cfg']]) &&\n        !Str::isJson($event[$f['cfg']])\n      ){\n        $event[$f['cfg']] = json_encode($event[$f['cfg']]);\n      }\n      \/\/ Check if the event is recurring\n      if ( $is_rec = !empty($event[$f['recurring']]) ){\n        $rf =& $this->class_cfg['arch']['recurring'];\n        \/\/ If the event's start date is different of its first recurrence to change the start date\n        if (\n          ($first = $this->getFirstRecurrence($event, false)) &&\n          ($event[$f['start']] !== $first)\n        ){\n          \/\/ Check if the event has an end date and to change it\n          if ( !empty($event[$f['end']]) ){\n            $diff = date_diff(new DateTime($event[$f['start']]), new DateTime($event[$f['end']]));\n            $end = new DateTime($first);\n            $event[$f['end']] = $end->add($diff)->format('Y-m-d H:i:s');  \n          }\n          $event[$f['start']] = $first;\n        }\n      }\n      if ( \n        $this->db->insert($this->class_table, [\n          $f['id_parent'] => $event[$f['id_parent']] ?? null,\n          $f['id_type'] => $event[$f['id_type']],\n          $f['start'] => $event[$f['start']],\n          $f['end'] => empty($event[$f['end']]) ? null : $event[$f['end']],\n          $f['name'] => empty($event[$f['name']]) ? null : $event[$f['name']],\n          $f['recurring'] => (int)$is_rec,\n          $f['cfg'] => $event[$f['cfg']] ?? null\n        ]) &&\n        ($id = $this->db->lastId())\n      ){\n        if ( $is_rec ){\n          $this->db->insert($this->class_cfg['tables']['recurring'], [\n            $rf['id_event'] => $id,\n            $rf['type'] => $event[$rf['type']],\n            $rf['interval'] => $event[$rf['interval']] ?? null,\n            $rf['occurrences'] => $event[$rf['occurrences']] ?? null,\n            $rf['until'] => $event[$rf['until']] ?? null,\n            $rf['wd'] => !empty($event[$rf['wd']]) ? (Str::isJson($event[$rf['wd']]) ? $event[$rf['wd']] : json_encode($event[$rf['wd']])) : null,\n            $rf['mw'] => !empty($event[$rf['mw']]) ? (Str::isJson($event[$rf['mw']]) ? $event[$rf['mw']] : json_encode($event[$rf['mw']])) : null,\n            $rf['md'] => !empty($event[$rf['md']]) ? (Str::isJson($event[$rf['md']]) ? $event[$rf['md']] : json_encode($event[$rf['md']])) : null,\n            $rf['ym'] => !empty($event[$rf['ym']]) ? (Str::isJson($event[$rf['ym']]) ? $event[$rf['ym']] : json_encode($event[$rf['ym']])) : null\n          ]);\n        }\n        return $id; \n      }\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 118,
            "endLine": 174,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "insert",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "event",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$event"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param array $event\n   * @return string|null\n   * @throws Exception\n   *\/"
        },
        "edit": {
            "name": "edit",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function edit(string $id, array $event): ?int\n  {\n    if ( Str::isUid($id) ){\n      $f =& $this->fields;\n      $rf =& $this->class_cfg['arch']['recurring'];\n      $ok = 0;\n      $old_is_rec = $this->db->selectOne($this->class_table, $this->fields['recurring'], [\n        $this->fields['id'] => $id\n      ]);\n      if ( array_key_exists($f['id'], $event) ){\n        unset($event[$f['id']]);\n      }\n      if ( \n        !empty($event[$f['cfg']]) &&\n        !Str::isJson($event[$f['cfg']])\n      ){\n        $event[$f['cfg']] = json_encode($event[$f['cfg']]);\n      }\n\n      $ok2 = $this->db->update($this->class_table, [\n        $f['id_type'] => $event[$f['id_type']],\n        $f['start'] => $event[$f['start']],\n        $f['end'] => $event[$f['end']] ?? null,\n        $f['name'] => $event[$f['name']] ?? null,\n        $f['recurring'] => $event[$f['recurring']] ?? 0,\n        $f['cfg'] => $event[$f['cfg']] ?? null\n      ], [\n\t      $f['id'] => $id\n      ]);\n      if ( !empty($event[$f['recurring']]) ){\n        $ok = $this->db->insertUpdate($this->class_cfg['tables']['recurring'], [\n          $rf['id_event'] => $id,\n          $rf['type'] => $event[$rf['type']],\n          $rf['interval'] => $event[$rf['interval']] ?? null,\n          $rf['occurrences'] => $event[$rf['occurrences']] ?? null,\n          $rf['until'] => $event[$rf['until']] ?? null,\n          $rf['wd'] => !empty($event[$rf['wd']]) ? (Str::isJson($event[$rf['wd']]) ? $event[$rf['wd']] : json_encode($event[$rf['wd']])) : null,\n          $rf['mw'] => !empty($event[$rf['mw']]) ? (Str::isJson($event[$rf['mw']]) ? $event[$rf['mw']] : json_encode($event[$rf['mw']])) : null,\n          $rf['md'] => !empty($event[$rf['md']]) ? (Str::isJson($event[$rf['md']]) ? $event[$rf['md']] : json_encode($event[$rf['md']])) : null,\n          $rf['ym'] => !empty($event[$rf['ym']]) ? (Str::isJson($event[$rf['ym']]) ? $event[$rf['ym']] : json_encode($event[$rf['ym']])) : null\n        ]);\n      }\n      else if ( !empty($old_is_rec) ){\n        $this->deleteRecurrences($id);\n      }\n\n      return $ok || $ok2;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 181,
            "endLine": 231,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "edit",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "event",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$event"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @param array $event\n   * @return int|null\n   *\/"
        },
        "delete": {
            "name": "delete",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function delete(string $id): bool\n  {\n    if ( Str::isUid($id) ){\n      return (bool)$this->db->delete($this->class_table, [$this->fields['id'] => $id]);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 237,
            "endLine": 244,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "delete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @return bool\n   *\/"
        },
        "get": {
            "name": "get",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function get(string $id): ?array\n  {\n    if ( Str::isUid($id) ){\n      $t =& $this;\n\n      return $this->db->rselect([\n        'table' => $this->class_table,\n        'fields' => array_map(function($f) use($t){\n          return $this->db->colFullName($f, $t->class_table);\n        }, $this->fields),\n        'join' => [[\n          'table' => $this->class_cfg['tables']['options'],\n          'on' => [\n            'conditions' => [[\n              'field' => $this->db->colFullName($this->class_cfg['arch']['options']['id'], $this->class_cfg['tables']['options']),\n              'exp' => $this->fields['id_type']\n            ]]\n          ]\n        ]],\n        'where' => [\n          $this->db->colFullName($this->fields['id'], $this->class_table) => $id\n        ]\n      ]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 250,
            "endLine": 276,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "get",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @return array|null\n   *\/"
        },
        "getLastIds": {
            "name": "getLastIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastIds(array $filter = [], string|null $from = null, int $num = 1): array\n  {\n    return $this->getIds('last', $filter, $from, $num);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 279,
            "endLine": 282,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "getLastIds",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "from",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ]
        },
        "getNextIds": {
            "name": "getNextIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNextIds(array $filter = [], string|null $from = null, int $num = 1): array\n  {\n    return $this->getIds('next', $filter, $from, $num);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 285,
            "endLine": 288,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "getNextIds",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "from",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ]
        },
        "getLast": {
            "name": "getLast",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLast(array $filter = [], string|null $from = null, int $num = 1): ?array\n  {\n    return $this->getOnes('last', $filter, $from, $num);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 291,
            "endLine": 294,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "getLast",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "from",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ]
        },
        "getNext": {
            "name": "getNext",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNext(array $filter = [], string|null $from = null, int $num = 1): ?array\n  {\n    return $this->getOnes('next', $filter, $from, $num);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 297,
            "endLine": 300,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "getNext",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "from",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ]
        },
        "getFull": {
            "name": "getFull",
            "summary": "Gets an event with the recurring details.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFull(string $id): ?array\n  {\n    if ( Str::isUid($id) ){\n      $rt =& $this->class_cfg['tables']['recurring'];\n      $rf =& $this->class_cfg['arch']['recurring'];\n      $ot =& $this->class_cfg['tables']['options'];\n      return $this->db->rselect([\n        'table' => $this->class_table,\n        'fields' => [\n          $this->db->colFullName($this->fields['id'], $this->class_table),\n          $this->db->colFullName($this->fields['id_parent'], $this->class_table),\n          $this->fields['id_type'],\n          $this->fields['start'],\n          $this->fields['end'],\n          $this->fields['name'],\n          $this->fields['recurring'],\n          $this->fields['cfg'],\n          $rf['type'],\n          $rf['interval'],\n          $rf['occurrences'],\n          $rf['until'],\n          $rf['wd'],\n          $rf['mw'],\n          $rf['md'],\n          $rf['ym']\n        ],\n        'join' => [[\n          'table' => $rt,\n          'type' => 'left',\n          'on' => [\n            'conditions' => [[\n              'field' => $this->db->colFullName($this->fields['id'], $this->class_table),\n              'exp' => $this->db->colFullName($rf['id_event'], $rt),\n            ]]\n          ]\n        ], [\n          'table' => $ot,\n          'on' => [\n            'conditions' => [[\n              'field' => $this->fields['id_type'],\n              'exp' => $this->db->colFullName($this->class_cfg['arch']['options']['id'], $ot),\n            ]]\n          ]\n        ]],\n        'where' => [\n          $this->db->colFullName($this->fields['id'], $this->class_table) => $id\n        ]\n      ]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 308,
            "endLine": 359,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getFull",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets an event with the recurring details.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets an event with the recurring details.\n   * @param string $id\n   * @return array|null\n   *\/"
        },
        "getRecurrences": {
            "name": "getRecurrences",
            "summary": "Returns an array of all event's recurrences in a period",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRecurrences(string $start, string $end, array &$event): array\n  {\n    \/\/ Recurring table fields\n    $rf =& $this->class_cfg['arch']['recurring'];\n    \/\/ Events table fields\n    $ef =& $this->class_cfg['arch']['events'];\n    \/\/ When object instance\n    $when = $this->getWhenObject($event);\n    \/\/ Get occurrences\n    $occ = $this->makeRecurrencesFields($event, $when->getOccurrencesBetween(new \\DateTime($start), new \\DateTime($end)));\n    \/\/ Specific month's week\n    if ( !empty($event[$rf['mw']]) ){\n      $occ = $this->filterRecurrencesByMonthWeek($occ, $event[$rf['mw']]);\n    }\n\n    return $this->filterRecurrencesByExceptions($occ);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 368,
            "endLine": 384,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "getRecurrences",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "start",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "end",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "event",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": true,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of all event's recurrences in a period\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$start"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$end"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$event"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of all event's recurrences in a period\n   * @param string $start\n   * @param string $end\n   * @param array $event\n   * @return array\n   *\/"
        },
        "makeRecurrencesFields": {
            "name": "makeRecurrencesFields",
            "summary": "Makes the fields structure on the given event recurrences",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function makeRecurrencesFields(array $event, array $recurrences): array\n  {\n    $ef =& $this->class_cfg['arch']['events'];\n    \/\/ Calculate the diff between the event start and the event end\n    $diff = !empty($event[$ef['end']]) ? date_diff(new DateTime($event[$ef['start']]), new DateTime($event[$ef['end']])) : false;\n    \/\/ Fix fields\n    return array_map(function($d) use($event, $ef, $diff){\n      $d = \\is_string($d) ? $d : $d->format('Y-m-d H:i:s');\n      $e = null;\n      if ( $diff ){\n        $e = new DateTime($d);\n        $e = $e->add($diff)->format('Y-m-d H:i:s');\n      }\n      return array_merge($event, [\n        $ef['start'] => $d,\n        $ef['end'] => $e,\n        'recurrence' => (int)($event[$ef['start']] !== $d)\n      ]);\n    }, $recurrences);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 392,
            "endLine": 411,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "makeRecurrencesFields",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "event",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "recurrences",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Makes the fields structure on the given event recurrences\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$event"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$recurrences"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Makes the fields structure on the given event recurrences\n   * @param array $event \n   * @param array $recurrences\n   * @return array\n   *\/"
        },
        "getFirstRecurrence": {
            "name": "getFirstRecurrence",
            "summary": "Returns the date of the first recurrence of a recurring event.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFirstRecurrence(array $event, $omitstart = true, $exceptions = false): ?string \n  {\n    if ( \n      $exceptions &&\n      ($excs = $this->getExceptions($event[$this->fields['id']]))\n    ){\n      $t =& $this;\n      $event[$this->class_cfg['extra']['exceptions']] = array_map(function($e) use($t){\n        return $e[$t->class_cfg['arch']['exceptions']['day']].' '.$e[$t->class_cfg['arch']['exceptions']['start']];\n      }, $excs);\n    }\n    $when = $this->getWhenObject($event);\n    if ( $r = $when->getNextOccurrence($when->startDate, $omitstart) ){\n      return $r->format('Y-m-d H:i:s');\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 420,
            "endLine": 437,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getFirstRecurrence",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "event",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "omitstart",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "Default: true"
                },
                {
                    "name": "exceptions",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "Default: false"
                }
            ],
            "doc": {
                "description": "Returns the date of the first recurrence of a recurring event.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$event"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$omitstart",
                        "description": "Default: true"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$exceptions",
                        "description": "Default: false"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the date of the first recurrence of a recurring event.\n   * @param array $event\n   * @param bool $omitstart Default: true\n   * @param bool $exceptions Default: false\n   * @return string|null\n   *\/"
        },
        "deleteRecurrences": {
            "name": "deleteRecurrences",
            "summary": "Deletes the recurrences of the given event",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteRecurrences(string $id): bool\n  {\n    if ( Str::isUid($id) ){\n      $todelete = $this->db->count($this->class_cfg['tables']['recurring'], [$this->class_cfg['arch']['recurring']['id_event'] => $id]);\n      return $this->db->delete($this->class_cfg['tables']['recurring'], [$this->class_cfg['arch']['recurring']['id_event'] => $id]) === $todelete;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 444,
            "endLine": 452,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteRecurrences",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the recurrences of the given event\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the recurrences of the given event\n   * @param string $id\n   * @return int\n   *\/"
        },
        "getWhenObject": {
            "name": "getWhenObject",
            "summary": "Makes a When object by an event.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getWhenObject(array &$event): \\When\\When\n  {\n    \/\/ Recurring table fields\n    $rf =& $this->class_cfg['arch']['recurring'];\n    \/\/ Events table fields\n    $ef =& $this->class_cfg['arch']['events'];\n    \/\/ Extra fields\n    $extf =& $this->class_cfg['arch']['extra'];\n    \/\/ When object instance\n    $when = new \\When\\When($event[$ef['start']]);\n    \/\/ Trick to have the possibility to set the start date different to the first occurrence\n    $when->RFC5545_COMPLIANT = 2;\n    \/\/ Set the frequency\n    $when->freq($event[$rf['type']]);\n    \/\/ Remove the original event from the occurrences\n    $excs = $event[$ef['start']];\n    \/\/ If the exceptions are present add them to exclusions list\n    if ( !empty($event[$extf['exceptions']]) ){\n      if ( \\is_array($event[$extf['exceptions']]) ){\n        $excs .= implode(',', $event[$extf['exceptions']]);\n      }\n      else if ( \\is_string($event[$extf['exceptions']]) ){\n        $excs .= $event[$extf['exceptions']];\n      }\n    }\n    $when->exclusions($excs);\n    \/\/ Interval\n    if ( !empty($event[$rf['interval']]) ){\n      $when->interval($event[$rf['interval']] + 1);\n    }\n    \/\/ Number of occurrences\n    if ( !empty($event[$rf['occurrences']]) ){\n      $when->count($event[$rf['occurrences']]);\n    }\n    \/\/ Until\n    if ( !empty($event[$rf['until']]) ){\n      $until = new \\DateTime($event[$rf['until']]);\n      $until->add(new \\DateInterval('P1D'));\n      $when->until($until);\n    }\n    \/\/ Specific week's day\n    if ( \\is_null($event[$rf['wd']]) ){\n      $event[$rf['wd']] = [];\n    }\n    else if (Str::isJson($event[$rf['wd']]) ){\n      $event[$rf['wd']] = json_decode($event[$rf['wd']], true);\n    }\n    if ( !empty($event[$rf['wd']]) ){\n      $wds =& $this->weekdays;\n      $days = array_map(function($d) use($wds){\n        return substr($wds[$d], 0, 2);\n      }, $event[$rf['wd']]);\n      $when->byday($days);\n    }\n    \/\/ Specific month's day\n    if ( \\is_null($event[$rf['md']]) ){\n      $event[$rf['md']] = [];\n    }\n    else if (Str::isJson($event[$rf['md']]) ){\n      $event[$rf['md']] = json_decode($event[$rf['md']], true);\n    }\n    if ( !empty($event[$rf['md']]) ){\n      $when->bymonthday($event[$rf['md']]);\n    }\n    \/\/ Specific year's month\n    if ( \\is_null($event[$rf['ym']]) ){\n      $event[$rf['ym']] = [];\n    }\n    else if (Str::isJson($event[$rf['ym']]) ){\n      $event[$rf['ym']] = json_decode($event[$rf['ym']], true);\n    }\n    if ( !empty($event[$rf['ym']]) ){\n      $when->bymonth($event[$rf['ym']]);\n    }\n    \/\/ Specific month's week\n    if ( \\is_null($event[$rf['mw']]) ){\n      $event[$rf['mw']] = [];\n    }\n    else if (Str::isJson($event[$rf['mw']]) ){\n      $event[$rf['mw']] = json_decode($event[$rf['mw']], true);\n    }\n    return $when;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 459,
            "endLine": 541,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getWhenObject",
            "returns": [
                "When\\When"
            ],
            "arguments": [
                {
                    "name": "event",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": true,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Makes a When object by an event.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$event"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Makes a When object by an event.\n   * @param array $event\n   * @return \\When\\When\n   *\/"
        },
        "filterRecurrencesByExceptions": {
            "name": "filterRecurrencesByExceptions",
            "summary": "Filters the event's recurrences by exceptions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function filterRecurrencesByExceptions(array $recurrences): array\n  {\n    if ( \n      !empty($recurrences) &&\n      \/\/ Recurring table fields\n      ($rf =& $this->class_cfg['arch']['recurring']) &&\n      \/\/ Exception table fields\n      ($ef =& $this->class_cfg['arch']['events']) &&\n      \/\/ Events table fields\n      ($rt =& $this->class_cfg['tables']['exceptions']) &&\n      \/\/ Exception table fields\n      ($exf =& $this->class_cfg['arch']['exceptions']) &&\n      \/\/ Get exceptions\n      ($ex = $this->getExceptions($recurrences[0][$rf['id_event']])) \n    ){\n      return array_filter($recurrences, function($r) use($ex, $ef, $exf){\n        return X::search($ex, [$exf['day'] => date('Y-m-d', strtotime($r[$ef['start']]))]) === null;\n      });    \n    }\n    return $recurrences;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 548,
            "endLine": 568,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "filterRecurrencesByExceptions",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "recurrences",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Filters the event's recurrences by exceptions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$recurrences"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Filters the event's recurrences by exceptions.\n   * @param array $recurrences\n   * @return array\n   *\/"
        },
        "setUntil": {
            "name": "setUntil",
            "summary": "Setz the event's until property",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setUntil(string $id, string|null $until = null): bool\n  {\n    if ( \n      Str::isUid($id) &&\n      (\n        \\is_null($until) ||\n        Str::isDateSql($until)\n      )\n    ){\n      return (bool)$this->db->update($this->class_cfg['tables']['recurring'], [\n        $this->class_cfg['arch']['recurring']['until'] => $until\n      ], [\n        $this->class_cfg['arch']['recurring']['id_event'] => $id\n      ]);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 576,
            "endLine": 592,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setUntil",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "until",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Setz the event's until property\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$until"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Setz the event's until property\n   * @param string $id\n   * @param string $until\n   * @return bool\n   *\/"
        },
        "unsetUntil": {
            "name": "unsetUntil",
            "summary": "Sets the event's until property to null",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unsetUntil(string $id): bool\n  {\n    return $this->setUntil($id);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 598,
            "endLine": 601,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "unsetUntil",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the event's until property to null\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/** Sets the event's until property to null\n   * @param string $id\n   * @return bool\n   *\/"
        },
        "addException": {
            "name": "addException",
            "summary": "Adds an event recurring exception",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addException(string $id_event, array $exc): bool\n  {\n    if ( \n      Str::isUid($id_event) &&\n      ($ext =& $this->class_cfg['tables']['exceptions']) &&\n      ($exf =& $this->class_cfg['arch']['exceptions']) &&\n      $this->get($id_event) && \n      !empty($exc[$exf['day']]) &&\n      !empty($exc[$exf['start']]) &&\n      !empty($exc[$exf['end']]) &&\n      (\n        !empty($exc[$exf['deleted']]) ||\n        !empty($exc[$exf['rescheduled']])\n      )\n    ){\n      if ( empty($exc[$exf['id_event']]) ){\n        $exc[$exf['id_event']] = $id_event;\n      }\n      $exc[$exf['day']] = date('Y-m-d', strtotime($exc[$exf['day']]));\n      $exc[$exf['start']] = date('H:i:s', strtotime($exc[$exf['start']]));\n      $exc[$exf['end']] = date('H:i:s', strtotime($exc[$exf['end']]));\n      $exc[$exf['id_user']] = !empty($exc[$exf['id_user']]) ? $exc[$exf['id_user']] : User::getInstance()->getId();\n      $exc[$exf['creation']] = Str::isDateSql($exc[$exf['creation']]) ?\n        $exc[$exf['creation']] : date('Y-m-d H:i:s');\n      return (bool)$this->db->insert($ext, $exc);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 609,
            "endLine": 636,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "addException",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_event",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "event"
                },
                {
                    "name": "exc",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds an event recurring exception\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "event"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$exc"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Adds an event recurring exception\n   * @param string $id_event\n   * @param array $exc\n   * @return bool\n   *\/"
        },
        "copyExceptions": {
            "name": "copyExceptions",
            "summary": "Copies the event's exceptions to an other one.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function copyExceptions(string $from_event, string $to_event): bool\n  {\n    if (\n      Str::isUid($from_event) &&\n      Str::isUid($to_event) &&\n      ($table =& $this->class_cfg['tables']['exceptions']) &&\n      ($fields =& $this->class_cfg['arch']['exceptions'])\n    ){\n      $exc = array_map(function($e) use($fields, $to_event){\n        unset($e[$fields['id']]);\n        $e[$fields['id_event']] = $to_event;\n        return $e;\n      }, $this->db->rselectAll($table, [], [$fields['id_event'] => $from_event]));\n      $inserted = 0;\n      foreach ( $exc as $e ){\n        $inserted += $this->db->insert($table, $e);\n      }\n      return count($exc) === $inserted;\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 644,
            "endLine": 664,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "copyExceptions",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "from_event",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "event"
                },
                {
                    "name": "to_event",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "event"
                }
            ],
            "doc": {
                "description": "Copies the event's exceptions to an other one.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$from",
                        "description": "event"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$to",
                        "description": "event"
                    },
                    {
                        "tag": "param",
                        "type": "bool"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Copies the event's exceptions to an other one.\n   * @param string $from_event\n   * @param string $to_event\n   * @param bool\n   *\/"
        },
        "getExceptions": {
            "name": "getExceptions",
            "summary": "Gets the event's exceptions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getExceptions(string $id): ?array\n  {\n    if ( Str::isUid($id) ){\n      return $this->db->rselectAll($this->class_cfg['tables']['exceptions'], [], [\n        $this->class_cfg['arch']['exceptions']['id_event'] => $id\n      ]);\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 671,
            "endLine": 679,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getExceptions",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the event's exceptions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the event's exceptions.\n   * @param string $id\n   * @return array|null\n   *\/"
        },
        "getList": {
            "name": "getList",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getList(array $filter = [], array $order = [], int $limit = 50, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitRselectAll($filter, $order, $limit, $start, $fields);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 681,
            "endLine": 684,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "getList",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 50,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "filterRecurrencesByMonthWeek": {
            "name": "filterRecurrencesByMonthWeek",
            "summary": "Filters the recurrences of an event by the month's week.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function filterRecurrencesByMonthWeek(array $recurrences, int $monthweek): array\n  {\n    $t =& $this;\n    \/\/ Recurring table fields\n    $rf =& $this->class_cfg['arch']['recurring'];\n    \/\/ Events table fields\n    $ef =& $this->class_cfg['arch']['events'];\n    return array_filter($recurrences, function($o) use($ef, $rf, $t, $monthweek){\n      $tstart = strtotime(date('Y-m-d', strtotime($o[$ef['start']])));\n      \/\/ Get the last day of the month\n      $lastday = strtotime('last day of this month', $tstart);\n      \/\/ Get the first day of the month\n      $firstday = strtotime('first day of this month', $tstart);\n      \/\/ Get the week number of the recurrence\n      $week = Date::getMonthWeek(date('Y-m-d', $tstart));\n      \/\/From the end\n      if ( $monthweek < 0 ){\n        \/\/ Get the day in the last week of the month\n        $lastwd = strtotime($t->weekdays[$o[$rf['wd']]] . ' this week', $lastday);\n        if ( $lastwd > $lastday ){\n          \/\/ If the day is outside the month to decrease the week\n          $lastwd = strtotime('-1 week', $lastwd);\n        }\n        \/\/ Get the corrected week number\n        $lwd = Date::getMonthWeek(date('Y-m-d', strtotime('-' . abs($monthweek + 1) .' week', $lastwd)));\n        return $lwd === $week;\n      }\n      \/\/ From the start\n      else {\n        \/\/ Get the day in the first week of the month\n        $firstwd = strtotime($t->weekdays[$o[$rf['wd']]] . ' this week', $firstday);\n        \/\/ If the day is outside the month to increase the week\n        if ( $firstwd < $firstday ){\n          $firstwd = strtotime('+1 week', $firstwd);\n        }\n        \/\/ Get the corrected week number\n        $fwd = Date::getMonthWeek(date('Y-m-d', strtotime('+' . ($monthweek - 1) .' week', $firstwd)));\n        return $fwd === $week;\n      }\n    });\n  }",
            "parent": false,
            "trait": false,
            "startLine": 693,
            "endLine": 733,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "filterRecurrencesByMonthWeek",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "recurrences",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "monthweek",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Filters the recurrences of an event by the month's week.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$recurrences"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$monthweek"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Filters the recurrences of an event by the month's week.\n   * @param array $recurrences\n   * @param int $monthweek\n   * @return array\n   *\/"
        },
        "getIds": {
            "name": "getIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function getIds(string $mode = 'next', array $filter = [], string|null $from = null, int $num = 1): array\n  {\n    $timeFilter = [\n      'logic' => 'AND',\n      'conditions' => [\n        [\n          'field' => $this->fields['start'],\n          'operator' => $mode === 'next' ? '>' : '<',\n          'value' => Str::isDateSQL($from) ?: date('Y-m-d H:i:s')\n        ]\n      ]\n    ];\n    if (!empty($filter)) {\n      $tmp = $filter;\n      if (!isset($tmp['conditions'])) {\n        $tmp = [\n          'logic' => 'AND',\n          'conditions' => $tmp\n        ];\n      }\n      $filter = $timeFilter;\n      $filter['conditions'][] = $tmp;\n    }\n    else {\n      $filter = $timeFilter;\n    }\n\n    $args = [\n      $this->class_table,\n      $this->fields['id'],\n      $filter,\n      [$this->fields['start'] => 'DESC'],\n      $num\n    ];\n    return $this->db->getColumnValues(...$args);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 735,
            "endLine": 770,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "shortName": "getIds",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "mode",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "next",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "from",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ]
        },
        "getOnes": {
            "name": "getOnes",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Event.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function getOnes(string $mode = 'next', array $filter = [], string|null $from = null, int $num = 1): ?array\n  {\n    $ids = $this->getIds($mode, $filter, $from, $num);\n    if ($num === 1) {\n      if (!$ids) {\n        return null;\n      }\n\n      return $this->get($ids[0]);\n    }\n\n    $res = [];\n    foreach ($ids as $id) {\n      $res[] = $this->get($id);\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 773,
            "endLine": 790,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "shortName": "getOnes",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "mode",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "next",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "from",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 71,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        },
        "dbTraitExists": {
            "name": "dbTraitExists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitExists($filter): bool\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (!empty($cfg) && $this->db->count(\n      $this->class_table,\n      $this->dbTraitGetFilterCfg($cfg)\n    )) {\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 25,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array|string $id\n   * @return bool\n   *\/"
        },
        "dbTraitInsert": {
            "name": "dbTraitInsert",
            "summary": "Inserts a new row in the table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitInsert(array $data, bool $ignore = false): ?string\n  {\n    if ($data = $this->dbTraitPrepare($data)) {\n      $ccfg = $this->getClassCfg();\n      if (!empty($ccfg['arch'][$this->class_table_index]['cfg'])) {\n        $col = $ccfg['arch'][$this->class_table_index]['cfg'];\n        if (isset($data[$col])) {\n          $data[$col] = json_encode($data[$col]);\n        }\n      }\n\n      if ($this->db->{$ignore ? 'insertIgnore' : 'insert'}($ccfg['table'], $data)) {\n        return $this->db->lastId();\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 56,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitInsert",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ignore",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Inserts a new row in the table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Inserts a new row in the table.\n   *\n   * @param array $data\n   *\n   * @return string|null\n   *\/"
        },
        "dbTraitDelete": {
            "name": "dbTraitDelete",
            "summary": "Deletes a single row from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitDelete(string|array $filter, bool $cascade = false): bool\n  {\n    if ($this->dbTraitExists($filter)) {\n      $cfg = $this->getClassCfg();\n      $f = $cfg['arch'][$this->class_table_index];\n\n      if (!is_array($filter) && !empty($f['id'])) {\n        $filter = [$f['id'] => $filter];\n      }\n\n      return (bool)$this->db->delete($cfg['table'], $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 83,
            "endLine": 97,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitDelete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cascade",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes a single row from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a single row from the table through its id.\n   *\n   * @param string $id\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitUpdate": {
            "name": "dbTraitUpdate",
            "summary": "Updates a single row in the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitUpdate(string|array $filter, array $data): int\n  {\n    $ccfg = $this->getClassCfg();\n    $f = $ccfg['arch'][$this->class_table_index];\n    if (!is_array($filter)) {\n      $filter = [$f['id'] => $filter];\n    }\n\n    if (!$this->dbTraitExists($filter)) {\n      throw new Exception(X::_(\"Impossible to find the given row\"));\n    }\n\n    if ($data = $this->dbTraitPrepare($data)) {\n      if (!empty($f['cfg'])) {\n        $col = $f['cfg'];\n        if (!empty($data[$col])) {\n          if (is_string($data[$col])) {\n            $data[$col] = json_decode($data[$col], true);\n          }\n\n          $jsonUpdate = 'JSON_SET(IFNULL(' . $this->db->csn($col, true) . ' ,\"{}\")';\n          foreach ($data[$col] as $k => $v) {\n            $jsonUpdate .= ', \"$.' . $k . '\", \"' . Str::escapeDquotes(is_iterable($v) ? json_encode($v) : $v) . '\"';\n          }\n\n          $jsonUpdate .= \")\";\n          $data[$col] = [null, $jsonUpdate];\n        }\n      }\n\n      return $this->db->update($ccfg['table'], $data, $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 109,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitUpdate",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Updates a single row in the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$add",
                        "description": "fg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates a single row in the table through its id.\n   *\n   * @param array $data\n   * @param string|array $filter\n   * @param bool $addCfg\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitSelectOne": {
            "name": "dbTraitSelectOne",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectOne(string $field, string|array $filter = [], array $order = [])\n  {\n    if ($res = $this->dbTraitSingleSelection($filter, $order, 'array', [$field])) {\n      return $res[$field] ?? null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 154,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectOne",
            "returns": [],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return mixed\n   *\/"
        },
        "dbTraitSelect": {
            "name": "dbTraitSelect",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelect(string|array $filter = [], array $order = [], array $fields = []): ?stdClass\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'object', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 172,
            "endLine": 175,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelect",
            "returns": [
                null,
                "stdClass"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return stdClass|null\n   *\/"
        },
        "dbTraitRselect": {
            "name": "dbTraitRselect",
            "summary": "Retrieves a row as an array from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselect(string|array $filter = [], array $order = [], array $fields = []): ?array\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'array', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 186,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselect",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an array from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an array from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return array|null\n   *\/"
        },
        "dbTraitSelectValues": {
            "name": "dbTraitSelectValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectValues(string $field, array $filter = [], array $order = [], int $limit = 0, int $start = 0): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'value', [$field]);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 191,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectValues",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitCount": {
            "name": "dbTraitCount",
            "summary": "Returns the number of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitCount(array $filter = []): int\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $req = $this->dbTraitGetRequestCfg($filter, [], 1, 0, [$this->fields['id']]);\n    return $this->db->count($req);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 204,
            "endLine": 212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitCount",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the number of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the number of rows from the table for the given conditions.\n   *\n   * @param array $filter\n   *\n   * @return int\n   *\/"
        },
        "dbTraitSelectAll": {
            "name": "dbTraitSelectAll",
            "summary": "Returns an array of rows as objects from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'object', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 225,
            "endLine": 228,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as objects from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as objects from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitRselectAll": {
            "name": "dbTraitRselectAll",
            "summary": "Returns an array of rows as arrays from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'array', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 241,
            "endLine": 244,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as arrays from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as arrays from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitGetRelations": {
            "name": "dbTraitGetRelations",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetRelations(string $id, string|null $table = null): ?array\n  {\n    if ($this->dbTraitExists($id)) {\n      $db =& $this->db;\n      $res = [];\n      foreach ($this->dbTraitGetTableRelations($table) as $rel) {\n        if ($all = $db->getColumnValues($rel['table'], $rel['primary'], [$rel['col'] => $id])) {\n          $res[$rel['table']] = [\n            'col' => $rel['col'],\n            'primary' => $rel['primary'],\n            'values' => $all\n          ];\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 246,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetRelations",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "dbTraitGetSearchFilter": {
            "name": "dbTraitGetSearchFilter",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetSearchFilter(string|int $filter, array $cols = [], bool $strict = false): array\n  {\n    $cfg = $this->getClassCfg();\n    $isNumber = Str::isNumber($filter);\n    $finalFilter = [\n      'logic' => 'OR',\n      'conditions' => []\n    ];\n    if (empty($cols)) {\n      $tableCols = $this->db->modelize($cfg['table'])['fields'];\n      foreach ($tableCols as $col => $colCfg) {\n        if ((strpos($colCfg['type'], 'text') !== false) || (strpos($colCfg['type'], 'char') !== false)) {\n          $cols[] = $col;\n        }\n        elseif ($isNumber && (strpos($colCfg['type'], 'int') !== false)) {\n          $cols[] = $col;\n        }\n      }\n    }\n\n    foreach ($cols as $col) {\n      $finalFilter['conditions'][] = [\n        'field' => $this->db->cfn($col, $cfg['table']),\n        'operator' => $strict ? '=' : 'contains',\n        'value' => $filter\n      ];\n    }\n\n    return $finalFilter;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 267,
            "endLine": 296,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetSearchFilter",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "string|int",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSearch": {
            "name": "dbTraitSearch",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSearch(array|string $filter, array $cols = [], array $fields = [], array $order = [], bool $strict = false, int $limit = 0, int $start = 0): array\n  {\n    if (is_array($filter)) {\n      $finalFilter = $filter;\n      if (empty($fields) && !empty($cols)) {\n        $fields = $cols;\n      }\n    }\n    else {\n      $finalFilter = $this->dbTraitGetSearchFilter($filter, $cols);\n    }\n\n    return $this->dbTraitRselectAll($finalFilter, $order, $limit, $start, $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 298,
            "endLine": 311,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSearch",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 4,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 5,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 6,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSingleSelection": {
            "name": "dbTraitSingleSelection",
            "summary": "Gets a single row and returns it",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitSingleSelection(\n    string|array $filter,\n    array $order,\n    string $mode = 'array',\n    array $fields = []\n  ): mixed\n  {\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (isset($cfg)\n        && ($res = $this->dbTraitSelection($cfg, $order, 1, 0, $mode, $fields))\n    ) {\n      return $res[0];\n    }\n\n    return null;\n\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 321,
            "endLine": 344,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitSingleSelection",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "array",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets a single row and returns it\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets a single row and returns it\n   *\n   * @param string|array $filter\n   * @param array $order\n   * @param string $mode\n   * @return mixed\n   *\/"
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the class configuration.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getClassCfg()\n  {\n    return $this->class_cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 37,
            "endLine": 40,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getClassCfg",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the class configuration.\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the class configuration.\n   * \n   * @return mixed\n   *\/"
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the fields of the main table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFields()\n  {\n    return $this->fields;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 48,
            "endLine": 51,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getFields",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the fields of the main table.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the fields of the main table.\n   *\n   * @return array\n   *\/"
        },
        "initClassCfg": {
            "name": "initClassCfg",
            "summary": "Sets the class configuration as defined in self::default_class_cfg",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initClassCfg(array|null $cfg = null)\n  {\n    $arr = [];\n    if (isset(self::$default_class_cfg)) {\n      $arr[] = self::$default_class_cfg;\n    }\n\n    if (isset(static::$default_class_cfg)) {\n      $arr[] = static::$default_class_cfg;\n    }\n    \n    if ($cfg) {\n      $arr[] = $cfg;\n    }\n\n    if (!count($arr)) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $cfg = count($arr) > 1 ? X::mergeArrays(...$arr) : $arr[0];\n\n    $table_index = array_flip($cfg['tables'])[$cfg['table']];\n    if (!$table_index || !isset($cfg['tables'], $cfg['table'], $cfg['arch'], $cfg['arch'][$table_index])) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $this->class_table = $cfg['table'];\n    \/\/ We completely replace the table structure, no merge\n    $props = [];\n    foreach ($cfg['arch'] as $t => &$fields){\n      if (!$this->class_table_index && isset($cfg['tables'][$t]) && ($cfg['tables'][$t] === $cfg['table']))  {\n        $this->class_table_index = $t;\n      }\n\n      foreach ($fields as $f => $it) {\n        if (is_array($it)) {\n          $props[$t][$f] = $it;\n          $fields[$f] = $it['name'] ?? $f;\n        }\n      }\n    }\n    unset($fields);\n    if (!empty($props)) {\n      $cfg['props'] = $props;\n    }\n\n\n\n    \/\/ The selection comprises the defined fields of the users table\n    \/\/ Plus a bunch of user-defined additional fields in the same table\n    $this->fields = $cfg['arch'][$this->class_table_index];\n\n    $this->class_cfg = $cfg;\n    $this->_isInitClassCfg = true;\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 59,
            "endLine": 115,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initClassCfg",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the class configuration as defined in self::default_class_cfg\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the class configuration as defined in self::default_class_cfg\n   * @param array $cfg\n   * @return $this\n   *\/"
        },
        "isInitClassCfg": {
            "name": "isInitClassCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isInitClassCfg(): bool\n  {\n    return $this->_isInitClassCfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 118,
            "endLine": 121,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isInitClassCfg",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "dbTraitPrepare": {
            "name": "dbTraitPrepare",
            "summary": "Prepares data before inserting or updating in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitPrepare(array $data): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (!empty($ccfg['cfg'])) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $res[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        unset($data[$f['cfg']]);\n      }\n      elseif (isset($ccfg['cfg'])) {\n        $cfg = [];\n        foreach ($ccfg['cfg'] as $k => $v) {\n          if (array_key_exists($v['field'], $data)) {\n            $cfg[$v['field']] = $data[$v['field']];\n            unset($data[$v['field']]);\n          }\n        }\n        if (!empty($cfg)) {\n          $res[$f['cfg']] = $cfg;\n        }\n      }\n    }\n\n    $structure = $this->dbTraitGetStructure();\n    foreach ($data as $k => $v) {\n      if (in_array($k, $f)) {\n        \/\/ Set the value to null if it's empty and not 0 and the field allows null\n        if (empty($v)\n          && ($v !== 0)\n          && $structure['fields'][$k]['null']\n        ) {\n          $v = null;\n        }\n\n        $res[$k] = $v;\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 41,
            "endLine": 94,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitPrepare",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The data to be prepared."
                }
            ],
            "doc": {
                "description": "Prepares data before inserting or updating in the database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data",
                        "description": "The data to be prepared."
                    }
                ],
                "return": "The prepared data.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the class config has not been initialized or is incorrect."
                }
            },
            "comments": "  \/**\n   * Prepares data before inserting or updating in the database.\n   *\n   * @param array $data The data to be prepared.\n   *\n   * @return array The prepared data.\n   * @throws Exception If the class config has not been initialized or is incorrect.\n   *\/"
        },
        "dbTraitTreat": {
            "name": "dbTraitTreat",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitTreat(array ...$rows): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (empty($f['cfg'])) {\n      return [...$rows];\n    }\n    foreach ($rows as &$data) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $data[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        if (!empty($ccfg['cfg'])) {\n          foreach ($ccfg['cfg'] as $k => $v) {\n            if (isset($v['field']) \n                && array_key_exists($v['field'], $data[$f['cfg']])\n                && !array_key_exists($v['field'], $data)) {\n              $data[$v['field']] = $data[$f['cfg']][$v['field']];\n            }\n          }\n          unset($data[$f['cfg']]);\n        }\n      }\n\n      $res[] = $data;\n    }\n\n    unset($data);\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 96,
            "endLine": 136,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitTreat",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "rows",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbTraitSetFilterCfg": {
            "name": "dbTraitSetFilterCfg",
            "summary": "Sets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSetFilterCfg(array $cfg): void\n  {\n    $this->dbTraitFilterCfg = $cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 144,
            "endLine": 147,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The filter configuration."
                }
            ],
            "doc": {
                "description": "Sets the filter configuration for database queries.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The filter configuration."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the filter configuration for database queries.\n   *\n   * @param array $cfg The filter configuration.\n   *\/"
        },
        "dbTraitResetFilterCfg": {
            "name": "dbTraitResetFilterCfg",
            "summary": "Resets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitResetFilterCfg(): void\n  {\n    $this->dbTraitFilterCfg = [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 152,
            "endLine": 155,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitResetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Resets the filter configuration for database queries.",
                "tags": []
            },
            "comments": "  \/**\n   * Resets the filter configuration for database queries.\n   *\/"
        },
        "dbTraitGetFilterCfg": {
            "name": "dbTraitGetFilterCfg",
            "summary": "Combines multiple filter configurations into a single array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetFilterCfg(array $cfg): array\n  {\n    $conditions = [];\n    if (!empty($this->rootFilterCfg)) {\n      $conditions[] = $this->rootFilterCfg;\n    }\n\n    if (!empty($this->dbTraitFilterCfg)) {\n      $conditions[] = $this->dbTraitFilterCfg;\n    }\n\n    if (!empty($cfg)) {\n      $conditions[] = $cfg;\n    }\n\n    \/\/ Return empty array if no conditions exist\n    if (empty($conditions)) {\n      return [];\n    }\n\n    \/\/ Return single condition if only one exists\n    if (count($conditions) === 1) {\n      return $conditions[0];\n    }\n\n    \/\/ Combine all conditions with 'AND' logic\n    return array_map(function ($a) {\n      return [\n        'logic' => 'AND',\n        'conditions' => $a\n      ];\n    }, $conditions);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 164,
            "endLine": 196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetFilterCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Additional filter configuration."
                }
            ],
            "doc": {
                "description": "Combines multiple filter configurations into a single array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "Additional filter configuration."
                    }
                ],
                "return": "The combined filter configuration."
            },
            "comments": "  \/**\n   * Combines multiple filter configurations into a single array.\n   *\n   * @param array $cfg Additional filter configuration.\n   *\n   * @return array The combined filter configuration.\n   *\/"
        },
        "dbTraitGetStructure": {
            "name": "dbTraitGetStructure",
            "summary": "Gets the structure of the specified table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetStructure(string|null $table = null): array\n  {\n    if (!$table) {\n      $cfg = $this->getClassCfg();\n      $table = $cfg['table'];\n    }\n\n    if (!isset($this->dbTraitStructure[$table])) {\n      $this->dbTraitStructure[$table] = $this->db->modelize($table);\n    }\n\n    return $this->dbTraitStructure[$table];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 205,
            "endLine": 217,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetStructure",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Gets the structure of the specified table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "The structure of the table."
            },
            "comments": "  \/**\n   * Gets the structure of the specified table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array The structure of the table.\n   *\/"
        },
        "dbTraitGetTableRelations": {
            "name": "dbTraitGetTableRelations",
            "summary": "Retrieves the relations for a given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetTableRelations(string|null $table = null): array\n  {\n    $cfg = $this->getClassCfg();\n    if (!$table) {\n      $table = $cfg['table'];\n    }\n    $idx = array_flip($cfg['tables'])[$table];\n    if ($idx && !isset($this->dbTraitRelations[$table])) {\n      $arc = &$cfg['arch'][$idx];\n      $this->dbTraitRelations[$table] = [];\n      if (!empty($arc['id'])) {\n        $refs = $this->db->findReferences($this->db->cfn($arc['id'], $table));\n        foreach ($refs as $ref) {\n          [$db, $tab, $col] = X::split($ref, '.');\n          $model = $this->db->modelize($tab);\n          $this->dbTraitRelations[$table][] = [\n            'db' => $db,\n            'table' => $tab,\n            'primary' => isset($model['keys']['PRIMARY']) && (count($model['keys']['PRIMARY']['columns']) === 1) ? $model['keys']['PRIMARY']['columns'][0] : null,\n            'col' => $col,\n            'model' => $model\n          ];\n        }\n      }\n    }\n\n    return $this->dbTraitRelations[$table];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 226,
            "endLine": 253,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetTableRelations",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Retrieves the relations for a given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "An array of relations."
            },
            "comments": "  \/**\n   * Retrieves the relations for a given table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array An array of relations.\n   *\/"
        },
        "dbTraitSelection": {
            "name": "dbTraitSelection",
            "summary": "Returns an array of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitSelection(\n    array $filter,\n    array $order,\n    int $limit,\n    int $start,\n    string $mode = 'array',\n    array $fields = []\n  ): array\n  {\n    $returnObject = $mode === 'object';\n    $req = $this->dbTraitGetRequestCfg($filter, $order, $limit, $start, $fields);\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    $method = $mode === 'object' ? 'selectAll' : ($mode === 'value' ? 'getColumnValues' : 'rselectAll');\n    $res = $this->db->$method($req);\n    if ($res) {\n      if (!empty($f['cfg'])) {\n        foreach ($res as &$r) {\n          if ($returnObject && !empty($r->{$f['cfg']})) {\n            $cfg = json_decode($r->{$f['cfg']});\n            $r = X::mergeObjects($cfg, $r);\n            unset($r->{$f['cfg']});\n          }\n          elseif (!$returnObject && !empty($r[$f['cfg']])) {\n            $cfg = json_decode($r[$f['cfg']], true);\n            $r = array_merge($cfg, $r);\n            unset($r[$f['cfg']]);\n          }\n        }\n\n        unset($r);\n      }\n\n      return $res;\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 267,
            "endLine": 303,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 4,
            "shortName": "dbTraitSelection",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Filter conditions."
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Order by conditions."
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Maximum number of rows to return."
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Offset of the first row to return."
                },
                {
                    "name": "mode",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "array",
                    "default_name": "",
                    "description": "The mode of result ('array', 'object', 'value')."
                },
                {
                    "name": "fields",
                    "position": 5,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Fields to select."
                }
            ],
            "doc": {
                "description": "Returns an array of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter",
                        "description": "Filter conditions."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "Order by conditions."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Maximum number of rows to return."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Offset of the first row to return."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode",
                        "description": "The mode of result ('array', 'object', 'value')."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "Fields to select."
                    }
                ],
                "return": "The result set."
            },
            "comments": "  \/**\n   * Returns an array of rows from the table for the given conditions.\n   *\n   * @param array $filter Filter conditions.\n   * @param array $order Order by conditions.\n   * @param int $limit Maximum number of rows to return.\n   * @param int $start Offset of the first row to return.\n   * @param string $mode The mode of result ('array', 'object', 'value').\n   * @param array $fields Fields to select.\n   *\n   * @return array The result set.\n   *\/"
        },
        "dbTraitGetRequestCfg": {
            "name": "dbTraitGetRequestCfg",
            "summary": "Prepares the request configuration for a database query.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitGetRequestCfg(\n    array $filter,\n    array $order,\n    int $limit,\n    int $start,\n    array $fields = []\n  ): array\n  {\n    \/\/ Ensure table index is defined\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    \/\/ Validate fields\n    if (!empty($fields)) {\n      foreach (array_values($fields) as $f) {\n        if (!in_array($f, $this->class_cfg['arch'][$this->class_table_index])) {\n          throw new Exception(X::_(\"The field %s does not exist\", $f));\n        }\n      }\n\n      $properFields = $fields;\n    }\n    else {\n      $fields = $this->class_cfg['arch'][$this->class_table_index];\n    }\n\n    $ccfg = $this->getClassCfg();\n    if (isset($fields['cfg']) && !empty($ccfg['cfg'])) {\n      $cfgCol = $fields['cfg'];\n      unset($fields['cfg']);\n      if (!isset($properFields)) {\n        $properFields = array_values($fields);\n      }\n\n      foreach ($ccfg['cfg'] as $v) {\n        if ($v['field'] && !in_array($v['field'], $properFields)) {\n          $properFields[$v['field']] = \"IF(JSON_EXTRACT(\"\n              . $this->db->csn($cfgCol, true) . \", '\\$.\" . $v['field']\n              . \"') = 'null', NULL, JSON_UNQUOTE(JSON_EXTRACT(\"\n              . $this->db->csn($cfgCol, true) . \", '\\$.\" . $v['field']\n              .\"')))\";\n        }\n      }\n    }\n    elseif (!isset($properFields)) {\n      $properFields = array_values($fields);\n    }\n\n    \/\/ Build the request configuration\n    $req = [\n      'table' => $this->class_table,\n      'fields' => $properFields,\n      'where' => $this->dbTraitGetFilterCfg($filter),\n      'order' => $order\n    ];\n\n    if ($limit) {\n      $req['limit'] = $limit;\n      $req['start'] = $start;\n    }\n\n    return $req;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 317,
            "endLine": 380,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 4,
            "shortName": "dbTraitGetRequestCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Filter conditions."
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Order by conditions."
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Maximum number of rows to return."
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Offset of the first row to return."
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Fields to select."
                }
            ],
            "doc": {
                "description": "Prepares the request configuration for a database query.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter",
                        "description": "Filter conditions."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "Order by conditions."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Maximum number of rows to return."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Offset of the first row to return."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "Fields to select."
                    }
                ],
                "return": "The request configuration.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the table index is not defined or a field does not exist."
                }
            },
            "comments": "  \/**\n   * Prepares the request configuration for a database query.\n   *\n   * @param array $filter Filter conditions.\n   * @param array $order Order by conditions.\n   * @param int $limit Maximum number of rows to return.\n   * @param int $start Offset of the first row to return.\n   * @param array $fields Fields to select.\n   *\n   * @return array The request configuration.\n   * @throws Exception If the table index is not defined or a field does not exist.\n   *\/"
        },
        "optionalInit": {
            "name": "optionalInit",
            "summary": "Returns the option's root ID for the current class based on {@link $option_root_code}",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function optionalInit(array|null $path = null)\n  {\n    if (!self::$optional_is_init) {\n      $opt = Option::getInstance();\n      $cls = false;\n      if (!$opt) {\n        throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n      }\n\n      if (!$path) {\n        $tmp = explode('\\\\', __CLASS__);\n        $cls = strtolower(end($tmp));\n        $path = [$cls, 'appui', 'plugins'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      \/\/X::ddump($path, self::$option_root_id);\n      if (!self::$option_root_id) {\n        if (empty($cls)) {\n          throw new Exception(\"Impossible to find the option \".json_encode($path).\" !!! for \".__CLASS__);\n        }\n\n        throw new Exception(\"Impossible to find the option $cls for \".__CLASS__);\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 41,
            "endLine": 68,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "optionalInit",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the option's root ID for the current class based on {@link $option_root_code}\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the option's root ID for the current class based on {@link $option_root_code}\n   *\n   * @return false|int\n   *\/"
        },
        "initOptionalGlobal": {
            "name": "initOptionalGlobal",
            "summary": "Sets only once all the constants used by the class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function initOptionalGlobal(Option $opt, array|null $path = null)\n  {\n    if (!self::$optional_is_init) {\n      if (!$path) {\n        $tmp                   = explode('\\\\', __CLASS__);\n        $cls                   = end($tmp);\n        $path                  = [$cls, 'appui'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      if (!self::$option_root_id) {\n        X::log(\"Impossible to find the option $cls for \".__CLASS__, 'errors');\n        return;\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 78,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "initOptionalGlobal",
            "returns": [],
            "arguments": [
                {
                    "name": "opt",
                    "position": 0,
                    "type": "bbn\\Appui\\Option",
                    "type_arr": [
                        "bbn\\Appui\\Option"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets only once all the constants used by the class.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Option",
                        "name": "$opt"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets only once all the constants used by the class.\n   *\n   * @param Option $opt\n   * @param array             $path\n   * @return void\n   *\/"
        },
        "initOptional": {
            "name": "initOptional",
            "summary": "Defines the options prop and launches the static init method.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initOptional(array|null $path = null)\n  {\n    $this->options = Option::getInstance();\n    if (!$this->options) {\n      throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n    }\n\n    self::initOptionalGlobal($this->options, $path);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 104,
            "endLine": 112,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initOptional",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Defines the options prop and launches the static init method.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Defines the options prop and launches the static init method.\n   *\n   * @param array $path\n   * @return void\n   *\/"
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionRoot()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 115,
            "endLine": 119,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionRoot",
            "returns": [],
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsObject(): Option\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 122,
            "endLine": 130,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsObject",
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionId(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fromCode(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 139,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionId",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns The option's ID of a category, i.e. direct children of option's root\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns The option's ID of a category, i.e. direct children of option's root\n   *\n   * @param string $code\n   * @return int|false\n   *\/"
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsIds(...$codes): array\n  {\n    $codes[] = self::getOptionRoot();\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...$codes),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 152,
            "endLine": 163,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsIds",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Undocumented function\n",
                "params": [],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Check it, it doesn't seem ok"
                }
            },
            "comments": "  \/**\n   * Undocumented function\n   *\n   * @todo Check it, it doesn't seem ok\n   * @return array\n   *\/"
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTree(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return ($tree = self::getOptionsObject()->fullTree(...$codes)) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 166,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTree",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTreeRef": {
            "name": "getOptionsTreeRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTreeRef(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return ($tree = self::getOptionsObject()->fullTreeRef(...$codes)) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 173,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTreeRef",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptions(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fullOptions(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 180,
            "endLine": 184,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptions",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getSimpleOptions": {
            "name": "getSimpleOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getSimpleOptions(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->options(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 187,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getSimpleOptions",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsRef": {
            "name": "getOptionsRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsRef(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fullOptionsRef(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 194,
            "endLine": 198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsRef",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOption(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->option(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 201,
            "endLine": 205,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOption",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValue(string|array $id, string $text = 'text', string $value = 'value', ...$additionalFields): array\n  {\n    if (is_string($id) && !Str::isUid($id)) {\n      $id = [$id];\n    }\n\n    if (is_array($id)) {\n      $id[] = self::getOptionRoot();\n    }\n\n    return $id ? self::getOptionsObject()->textValueOptions($id, $text, $value, ...$additionalFields) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 208,
            "endLine": 219,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTextValue",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": ""
                },
                {
                    "name": "additionalFields",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTextValueRef": {
            "name": "getOptionsTextValueRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Event",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValueRef(string|array $id, string $text = 'text', string $value = 'value', ...$additionalFields): array\n  {\n    if (is_string($id) && !Str::isUid($id)) {\n      $id = self::getOptionId($id);\n    }\n\n    return $id ? self::getOptionsObject()->textValueOptionsRef($id, $text, $value, ...$additionalFields) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 222,
            "endLine": 229,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTextValueRef",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": ""
                },
                {
                    "name": "additionalFields",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "default_class_cfg": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Event"
            },
            "declaring_trait": "bbn\\Appui\\Event",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array $default_class_cfg",
                "tags": []
            },
            "parent": false,
            "value": {
                "table": "bbn_events",
                "tables": {
                    "events": "bbn_events",
                    "recurring": "bbn_events_recurring",
                    "exceptions": "bbn_events_exceptions",
                    "options": "bbn_options"
                },
                "arch": {
                    "events": {
                        "id": "id",
                        "id_parent": "id_parent",
                        "id_type": "id_type",
                        "start": "start",
                        "end": "end",
                        "name": "name",
                        "recurring": "recurring",
                        "cfg": "cfg"
                    },
                    "recurring": {
                        "id": "id",
                        "id_event": "id_event",
                        "type": "type",
                        "interval": "interval",
                        "occurrences": "occurrences",
                        "until": "until",
                        "wd": "wd",
                        "mw": "mw",
                        "md": "md",
                        "ym": "ym"
                    },
                    "exceptions": {
                        "id": "id",
                        "id_event": "id_event",
                        "id_user": "id_user",
                        "creation": "creation",
                        "day": "day",
                        "start": "start",
                        "end": "end",
                        "rescheduled": "rescheduled",
                        "deleted": "deleted"
                    },
                    "options": {
                        "id": "id"
                    }
                },
                "extra": {
                    "action": "action",
                    "recurrence": "recurrence",
                    "exception": "exception",
                    "old_start": "old_start",
                    "old_end": "old_end",
                    "exceptions": "exceptions"
                }
            }
        },
        "opt": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Event"
            },
            "declaring_trait": "bbn\\Appui\\Event",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var Option $opt",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "usr": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Event"
            },
            "declaring_trait": "bbn\\Appui\\Event",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var User $user",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "opt_id": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Event"
            },
            "declaring_trait": "bbn\\Appui\\Event",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string $id_opt",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "recurrences": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Event"
            },
            "declaring_trait": "bbn\\Appui\\Event",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var array $recurrences",
                "tags": []
            },
            "parent": false,
            "value": [
                "daily,",
                "weekly",
                "monthly",
                "yearly"
            ]
        },
        "weekdays": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Event"
            },
            "declaring_trait": "bbn\\Appui\\Event",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": {
                "1": "monday",
                "2": "tuesday",
                "3": "wednesday",
                "4": "thursday",
                "5": "friday",
                "6": "saturday",
                "7": "sunday"
            }
        },
        "class_cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Event"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array $class_cfg",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Db"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Db",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "dbClass"
                    }
                ]
            },
            "parent": {
                "name": "db",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Db"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Db",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "dbClass"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "_isInitClassCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Event"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var bool",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "fields": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Event"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_table": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Event"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_table_index": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Event"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "rootFilterCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Event"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Configuration for the root filter."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "dbTraitFilterCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Event"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": []
        },
        "dbTraitRelations": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Event"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Cached relations for the current table."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "dbTraitStructure": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Event"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Cached relations for the current table."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "optional_is_init": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Event"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Set as true from the moment a first instance has been initiated and has defined the constants."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "option_root_id": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Event"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The ID of the root option"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "options": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Event"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Option",
                        "description": "The Option object"
                    }
                ]
            },
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "default_class_cfg": {
            "table": "bbn_events",
            "tables": {
                "events": "bbn_events",
                "recurring": "bbn_events_recurring",
                "exceptions": "bbn_events_exceptions",
                "options": "bbn_options"
            },
            "arch": {
                "events": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "id_type": "id_type",
                    "start": "start",
                    "end": "end",
                    "name": "name",
                    "recurring": "recurring",
                    "cfg": "cfg"
                },
                "recurring": {
                    "id": "id",
                    "id_event": "id_event",
                    "type": "type",
                    "interval": "interval",
                    "occurrences": "occurrences",
                    "until": "until",
                    "wd": "wd",
                    "mw": "mw",
                    "md": "md",
                    "ym": "ym"
                },
                "exceptions": {
                    "id": "id",
                    "id_event": "id_event",
                    "id_user": "id_user",
                    "creation": "creation",
                    "day": "day",
                    "start": "start",
                    "end": "end",
                    "rescheduled": "rescheduled",
                    "deleted": "deleted"
                },
                "options": {
                    "id": "id"
                }
            },
            "extra": {
                "action": "action",
                "recurrence": "recurrence",
                "exception": "exception",
                "old_start": "old_start",
                "old_end": "old_end",
                "exceptions": "exceptions"
            }
        },
        "optional_is_init": false,
        "option_root_id": null
    },
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "DateTime": "DateTime",
        "bbn\\X": "X",
        "bbn\\Str": "Str",
        "bbn\\Db": "Db",
        "bbn\\User": "User",
        "bbn\\Date": "Date",
        "bbn\\Models\\Tts\\DbActions": "DbActions",
        "bbn\\Models\\Tts\\Optional": "Optional",
        "bbn\\Models\\Cls\\Db": "modelDb",
        "bbn\\Appui\\Option": "Option"
    },
    "dummyComments": [],
    "summary": "",
    "description": "",
    "description_parts": []
}