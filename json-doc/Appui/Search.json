{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Search",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\Dbconfig",
        "bbn\\Models\\Tts\\Cache"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Search.php",
    "startLine": 15,
    "endLine": 452,
    "contentConstructor": {
        "file": "bbn\\Appui\\Search",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Search",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Mvc\\Model $model, array $cfg = [])\n  {\n    \/\/$this->ctrl   = $ctrl;\n    \/\/ $ctrl->getCustomModelGroup('', 'appui-search'), $ctrl->data['value'], $search->get($ctrl->data['value'])\n    $this->db     = Db::getInstance();\n    $this->user   = User::getInstance();\n\n    if (!$this->db) {\n      throw new \\Exception('Db instance cannot be found!');\n    }\n\n    if (!$this->user) {\n      throw new \\Exception(X::_('User is not logged in!'));\n    }\n\n    $this->_init_class_cfg($cfg);\n    $this->cacheInit();\n    $this->timer      = new Timer();\n    $model->getCustomModelGroup('', 'appui-search');\n  }",
            "startLine": 95,
            "endLine": 114,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "model",
                    "position": 0,
                    "type": "bbn\\Mvc\\Model",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "get": {
            "name": "get",
            "summary": "Launch the search and return the results.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Search",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $search_value, int $step = 0, $start = 0, $limit = 100)\n  {\n    $cache_name = sprintf($this->search_cache_name, $search_value);\n\n    \/\/ Check if same search is saved for the user\n    if (!($config_array = $this->cacheGet($this->user->getId(), $cache_name))) {\n\n      \/\/ Execute all functions with the given search string\n      $config_array = $this->executeFunctions($search_value);\n\n      \/\/ Save it in cache\n      $this->cacheSet($this->user->getId(), $cache_name, $config_array);\n    }\n\n    $results = [\n      'done' => [],\n      'data' => []\n    ];\n\n    $this->timer->start('search');\n\n    \/\/ If the search value has been done by the user before\n    if (($previous_search_id = $this->getPreviousSearchId($search_value))\n        && ($previous_search_results = $this->getPreviousSearchResults($previous_search_id))\n    ) {\n      $results_arch  = $this->class_cfg['arch']['search_results'];\n      foreach ($previous_search_results as $r) {\n        $item          = X::getRow($config_array, ['signature' => $r['signature']]);\n        $processed_cfg = $this->db->processCfg($item['cfg']);\n        \/\/ Get the results saved in the json field `result`\n        if (($previous_result = json_decode($r[$results_arch['result']], true))\n            && (X::hasProps($previous_result, $processed_cfg['fields']))\n        ) {\n          $cfg          = $item['cfg'];\n          $cfg['where'] = [\n            'logic' => 'AND',\n            'conditions' => [\n              $processed_cfg['filters'],\n              [\n                'conditions' => array_map(\n                  function ($value, $key) {\n                    return [\n                      'field' => $key,\n                      'operator' => '=',\n                      'value' => $value\n                    ];\n                  },\n                  $previous_result, array_keys($previous_result)\n                )\n              ]\n            ]\n          ];\n\n          if ($add_to_top = $this->db->rselect($cfg)) {\n            $results['data'] = array_merge($results['data'], [$add_to_top]);\n          }\n        }\n      }\n    }\n\n    \/\/X::ddump($config_array, \"DDDD\", $this->executeFunctions($search_value), $search_value, $this->search_cfg);\n    $num_cfg = count($config_array);\n    if (!$start && !$step) {\n      array_walk($config_array, function ($a) {\n        $a['cfg']['start'] = 0;\n      });\n    }\n\n    for ($i = $step; $i < $num_cfg; $i++) {\n      if (empty($config_array[$i]['cfg'])) {\n        continue;\n      }\n\n      $item = $config_array[$i];\n      X::log($item, 'search');\n      $item['cfg']['limit'] = $limit - count($results['data']);\n      if ($search_results = $this->db->rselectAll($item['cfg'])) {\n        array_walk($search_results, function (&$a) use ($item) {\n          $a['score'] = $item['score'];\n          if (!empty($item['component'])) {\n            $a['component'] = $item['component'];\n          }\n\n          if (!empty($item['options'])) {\n            $a['options'] = $item['options'];\n          }\n\n          if (!empty($item['url'])) {\n            $a['url'] = Tpl::render($item['url'], $a);\n          }\n\n          if (!empty($item['action'])) {\n            $a['action'] = $item['action'];\n          }\n        });\n        $results['data'] = array_merge($results['data'], $search_results);\n\n        if (count($search_results) === $item['cfg']['limit']) {\n          $config_array[$i]['cfg']['start'] += $item['cfg']['limit'];\n          \/\/ So the loop doesn't go on\n          $num_cfg = $i;\n        }\n      }\n\n      if ($this->timer->measure('search') > ($this->time_limit \/ 1000)) {\n        \/\/ If time limit has passed then return the result and the index of the next step\n        $this->timer->stop('search');\n        if (isset($config_array[$i + 1])) {\n          $results['next_step'] = $i + 1;\n        }\n\n        break;\n      }\n    }\n\n    $this->cacheSet($this->user->getId(), $cache_name, $config_array);\n    return $results;\n  }",
            "startLine": 238,
            "endLine": 355,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "search_value",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "value"
                },
                {
                    "name": "step",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 100,
                    "default_name": ""
                }
            ]
        },
        "register": {
            "name": "register",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Search",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(callable $function, string $plugin_name = 'main')\n  {\n    \/\/ Get how many parameters the closure has\n    try {\n      $parameters = (new \\ReflectionFunction($function))->getParameters();\n    }\n    catch (\\Exception $e) {\n      $parameters = ['search'];\n    }\n\n    \/\/ Add an empty string to every parameter of the closure for the hash\n    $args = array_map(function () {\n      return '';\n    }, $parameters);\n\n    if (!isset(self::$functions[$plugin_name])) {\n      self::$functions[$plugin_name] = [];\n    }\n\n    $res =  [\n      'fn' => $function,\n      'signature' => \\bbn\\Cache::makeHash($function(...$args)),\n      'file' => debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 1)[0]['file']\n    ];\n    \/\/ Invoke the closure with the parameters set to empty string and return the results\n    self::$functions[$plugin_name][] = $res;\n    return $res;\n  }",
            "startLine": 422,
            "endLine": 449,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "function",
                    "position": 0,
                    "type": "callable",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin_name",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "main",
                    "default_name": "",
                    "description": "name"
                }
            ]
        },
        "exists": {
            "name": "exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Search",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($filter)\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (!empty($cfg) && $arr = $this->db->count(\n      $this->class_table,\n      $cfg\n    )) {\n      return true;\n    }\n\n    return false;\n  }",
            "startLine": 37,
            "endLine": 59,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the class configuration.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Search",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->class_cfg;\n  }",
            "startLine": 67,
            "endLine": 70,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the fields of the main table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Search",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->fields;\n  }",
            "startLine": 78,
            "endLine": 81,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "insert": {
            "name": "insert",
            "summary": "Inserts a new row in the table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Search",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $data)\n  {\n    if ($data = $this->prepare($data)) {\n      $ccfg = $this->getClassCfg();\n      if ($this->db->insert($ccfg['table'], $data)) {\n        return $this->db->lastId();\n      }\n    }\n\n    return null;\n  }",
            "startLine": 91,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes a single row from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Search",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ($data = $this->exists($id)) {\n      $ccfg = $this->getClassCfg();\n      $f = $ccfg['arch'][$this->class_table_index];\n      return (bool)$this->db->delete($ccfg['table'], [$f['id'] => $id]);\n    }\n\n    return false;\n  }",
            "startLine": 111,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "update": {
            "name": "update",
            "summary": "Updates a single row in the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Search",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, array $data, bool $addCfg = false)\n  {\n    if (!$this->exists($id)) {\n      throw new Exception(X::_(\"Impossible to find the given row\"));\n    }\n\n    if ($addCfg) {\n      $data = array_merge($this->rselect($id), $data);\n    }\n\n    if ($data = $this->prepare($data)) {\n      $ccfg = $this->getClassCfg();\n      $f = $ccfg['arch'][$this->class_table_index];\n      return (bool)$this->db->update($ccfg['table'], $data, [$f['id'] => $id]);\n    }\n\n    return false;\n  }",
            "startLine": 131,
            "endLine": 148,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "addCfg",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "selectOne": {
            "name": "selectOne",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Search",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $field, $filter, array $order = [])\n  {\n    if ($res = $this->dbConfigSingleSelection($filter, $order, false, [$field])) {\n      return $res[$field] ?? null;\n    }\n\n    return null;\n  }",
            "startLine": 159,
            "endLine": 166,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "select": {
            "name": "select",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Search",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($filter, array $order = [])\n  {\n    return $this->dbConfigSingleSelection($filter, $order, true);\n  }",
            "startLine": 177,
            "endLine": 180,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "rselect": {
            "name": "rselect",
            "summary": "Retrieves a row as an array from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Search",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($filter, array $order = [])\n  {\n    return $this->dbConfigSingleSelection($filter, $order, false);\n  }",
            "startLine": 191,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "count": {
            "name": "count",
            "summary": "Returns the number of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Search",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $filter = [])\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    return $this->db->count($this->class_table, $filter);\n  }",
            "startLine": 204,
            "endLine": 211,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "selectAll": {
            "name": "selectAll",
            "summary": "Returns an array of rows as objects from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Search",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $filter, array $order = [], int $limit = 0, int $start = 0)\n  {\n    return $this->dbConfigSelection($filter, $order, $limit, $start, true);\n  }",
            "startLine": 224,
            "endLine": 227,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "rselectAll": {
            "name": "rselectAll",
            "summary": "Returns an array of rows as arrays from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Search",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $filter, array $order = [], int $limit = 0, int $start = 0)\n  {\n    return $this->dbConfigSelection($filter, $order, $limit, $start, false);\n  }",
            "startLine": 240,
            "endLine": 243,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": {
        "default_class_cfg": {
            "table": "bbn_search",
            "tables": {
                "search": "bbn_search",
                "search_results": "bbn_search_results"
            },
            "arch": {
                "search": {
                    "id": "id",
                    "id_user": "id_user",
                    "value": "value",
                    "num": "num",
                    "last": "last"
                },
                "search_results": {
                    "id": "id",
                    "id_search": "id_search",
                    "num": "num",
                    "last": "last",
                    "signature": "signature",
                    "result": "result"
                }
            }
        },
        "functions": []
    },
    "constants": null,
    "numMethods": 15,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 2,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\Dbconfig",
        "bbn\\Models\\Tts\\Cache"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "table": "bbn_search",
            "tables": {
                "search": "bbn_search",
                "search_results": "bbn_search_results"
            },
            "arch": {
                "search": {
                    "id": "id",
                    "id_user": "id_user",
                    "value": "value",
                    "num": "num",
                    "last": "last"
                },
                "search_results": {
                    "id": "id",
                    "id_search": "id_search",
                    "num": "num",
                    "last": "last",
                    "signature": "signature",
                    "result": "result"
                }
            }
        },
        "functions": [],
        "cfg_cache_name": "search_content",
        "search_cache_name": "search_%s",
        "search_cfg": [],
        "time_limit": 50,
        "_is_init_class_cfg": false,
        "fields": null,
        "class_cfg": null,
        "class_table": null,
        "class_table_index": null,
        "_cache_prefix": null,
        "cache_engine": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Search",
    "summary": "",
    "description": "",
    "description_parts": []
}