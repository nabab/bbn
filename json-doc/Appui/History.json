{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\History",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\Report"
    ],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
    "startLine": 6,
    "endLine": 1390,
    "contentConstructor": null,
    "methods": {
        "getIdColumn": {
            "name": "getIdColumn",
            "summary": "Returns the column's corresponding option's ID",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($column, $table)\n  {\n    if (\n      ($db = self::_get_db()) &&\n      ($full_table = $db->tfn($table)) &&\n      ($database_obj = self::_get_database())\n    ){\n      [$database, $table] = explode('.', $full_table);\n      return $database_obj->columnId($column, $table, $database, self::$db->getHost());\n    }\n    return false;\n  }",
            "startLine": 158,
            "endLine": 169,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string"
                }
            ]
        },
        "init": {
            "name": "init",
            "summary": "Initializes",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db, array $cfg = [])\n  {\n    \/** @var string $hash Unique hash for this DB connection (so we don't init twice a same connection) *\/\n    $hash = $db->getHash();\n    if ( !\\in_array($hash, self::$dbs, true) && $db->check() ){\n      \/\/ Adding the connection to the list of connections\n      self::$dbs[] = $hash;\n      \/** @var bbn\\Db db *\/\n      self::$db = $db;\n      $vars = get_class_vars(__CLASS__);\n      foreach ( $cfg as $cf_name => $cf_value ){\n        if ( array_key_exists($cf_name, $vars) ){\n          self::$$cf_name = $cf_value;\n        }\n      }\n      if ( !self::$admin_db ){\n        self::$admin_db = self::$db->getCurrent();\n      }\n      self::$table = self::$admin_db.'.'.self::$prefix.'history';\n      self::$table_uids = self::$admin_db.'.'.self::$prefix.'history_uids';\n      self::$ok = true;\n      self::$is_used = true;\n      self::$links = self::$db->getForeignKeys('bbn_uid', self::$prefix.'history_uids', self::$admin_db);\n      self::$db->setTrigger('\\\\bbn\\\\Appui\\\\History::trigger');\n    }\n  }",
            "startLine": 177,
            "endLine": 202,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "isInit": {
            "name": "isInit",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$ok;\n  }",
            "startLine": 207,
            "endLine": 210,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "disable": {
            "name": "disable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::$enabled = false;\n  }",
            "startLine": 215,
            "endLine": 218,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": []
        },
        "enable": {
            "name": "enable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::$enabled = true;\n  }",
            "startLine": 223,
            "endLine": 226,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": []
        },
        "isEnabled": {
            "name": "isEnabled",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$ok && (self::$enabled === true);\n  }",
            "startLine": 231,
            "endLine": 234,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "validDate": {
            "name": "validDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($d)\n  {\n    if ( !bbn\\Str::isNumber($d) ){\n      $d = strtotime($d);\n    }\n    if ( ($d > 0) && bbn\\Str::isNumber($d) ){\n      return (float)$d;\n    }\n    return null;\n  }",
            "startLine": 240,
            "endLine": 249,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "float",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "d",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "check": {
            "name": "check",
            "summary": "Checks if all history parameters are set in order to read and write into history",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return\n      isset(self::$user, self::$table, self::$db) &&\n      self::isInit() &&\n      self::_get_db();\n  }",
            "startLine": 255,
            "endLine": 261,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "hasHistory": {
            "name": "hasHistory",
            "summary": "Returns true if the given DB connection is configured for history",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db)\n  {\n    $hash = $db->getHash();\n    return \\in_array($hash, self::$dbs, true);\n  }",
            "startLine": 269,
            "endLine": 273,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "Effectively deletes a row (deletes the row, the history row and the ID row)",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if ( $id && ($db = self::_get_db()) ){\n      return $db->delete(self::$table_uids, ['bbn_uid' => $id]);\n    }\n    return false;\n  }",
            "startLine": 281,
            "endLine": 287,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setColumn": {
            "name": "setColumn",
            "summary": "Sets the \"active\" column name",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($column)\n  {\n    if ( bbn\\Str::checkName($column) ){\n      self::$column = $column;\n    }\n  }",
            "startLine": 295,
            "endLine": 300,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getColumn": {
            "name": "getColumn",
            "summary": "Gets the \"active\" column name",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$column;\n  }",
            "startLine": 307,
            "endLine": 310,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "setDate": {
            "name": "setDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($date)\n  {\n    \/\/ Sets the current date\n    if ( !bbn\\Str::isNumber($date) && !($date = strtotime($date)) ){\n      return;\n    }\n    $t = time();\n    \/\/ Impossible to write history in the future\n    if ( $date > $t ){\n      $date = $t;\n    }\n    self::$date = $date;\n  }",
            "startLine": 316,
            "endLine": 328,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "date",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getDate": {
            "name": "getDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$date;\n  }",
            "startLine": 333,
            "endLine": 336,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "float",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "unsetDate": {
            "name": "unsetDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::$date = null;\n  }",
            "startLine": 341,
            "endLine": 344,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": []
        },
        "setAdminDb": {
            "name": "setAdminDb",
            "summary": "Sets the history table name",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($db_name)\n  {\n    \/\/ Sets the history table name\n    if ( bbn\\Str::checkName($db_name) ){\n      self::$admin_db = $db_name;\n      self::$table = self::$admin_db.'.'.self::$prefix.'history';\n    }\n  }",
            "startLine": 351,
            "endLine": 358,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "db_name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name"
                }
            ]
        },
        "setUser": {
            "name": "setUser",
            "summary": "Sets the user ID that will be used to fill the user_id field",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($user)\n  {\n    \/\/ Sets the history table name\n    if ( bbn\\Str::isUid($user) ){\n      self::$user = $user;\n    }\n  }",
            "startLine": 365,
            "endLine": 371,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUser": {
            "name": "getUser",
            "summary": "Gets the user ID that is being used to fill the user_id field",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$user;\n  }",
            "startLine": 377,
            "endLine": 380,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAllHistory": {
            "name": "getAllHistory",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($table, $start = 0, $limit = 20, $dir = NULL)\n  {\n    if (\n      ($db = self::_get_db()) &&\n      ($dbc = self::_get_database()) &&\n      ($id_table = $dbc->tableId($table, self::$db->getCurrent()))\n    ){\n      $tab = $db->escape(self::$table);\n      $tab_uids = $db->escape(self::$table_uids);\n      $uid = $db->cfn('bbn_uid', self::$table_uids, true);\n      $id_tab = $db->cfn('bbn_table', self::$table_uids, true);\n      $uid2 = $db->cfn('uid', self::$table, true);\n      $chrono = $db->cfn('tst', self::$table, true);\n      $order = $dir && (bbn\\Str::changeCase($dir, 'lower') === 'asc') ? 'ASC' : 'DESC';\n      $sql = <<< MYSQL\nSELECT DISTINCT($uid)\nFROM $tab_uids\n  JOIN $tab\n    ON $uid = $uid2\nWHERE $id_tab = ? \nORDER BY $chrono $order\nLIMIT $start, $limit\nMYSQL;\n      return $db->getColArray($sql, hex2bin($id_table));\n    }\n    return [];\n  }",
            "startLine": 389,
            "endLine": 415,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 20,
                    "default_name": ""
                },
                {
                    "name": "dir",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getLastModifiedLines": {
            "name": "getLastModifiedLines",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($table, $start = 0, $limit = 20)\n  {\n    $r = [];\n    if (\n      ($db = self::_get_db()) &&\n      ($dbc = self::_get_database()) &&\n      ($id_table = $dbc->tableId($table, self::$db->getCurrent()))\n    ){\n      $tab = $db->escape(self::$table);\n      $tab_uids = $db->escape(self::$table_uids);\n      $uid = $db->cfn('bbn_uid', self::$table_uids, true);\n      $active = $db->cfn(self::$column, self::$table_uids, true);\n      $id_tab = $db->cfn('bbn_table', self::$table_uids, true);\n      $line = $db->escape('uid', self::$table);\n      $chrono = $db->escape('tst');\n      $sql = <<< MYSQL\nSELECT DISTINCT($line)\nFROM $tab_uids\n  JOIN $tab\n    ON $uid = $line\nWHERE $id_tab = ? \nAND $active = 1\nORDER BY $chrono\nLIMIT $start, $limit\nMYSQL;\n      $r = $db->getColArray($sql, hex2bin($id_table));\n    }\n    return $r;\n  }",
            "startLine": 423,
            "endLine": 451,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 20,
                    "default_name": ""
                }
            ]
        },
        "getNextUpdate": {
            "name": "getNextUpdate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($table, $id, $from_when, $column = NULL)\n  {\n    \/** @todo To be redo totally with all the fields' IDs instead of the history column *\/\n    if (\n      bbn\\Str::checkName($table) &&\n      ($date = self::validDate($from_when)) &&\n      ($db = self::_get_db()) &&\n      ($dbc = self::_get_database()) &&\n      ($id_table = $dbc->tableId($table))\n    ){\n      self::disable();\n      $tab = $db->escape(self::$table);\n      $tab_uids = $db->escape(self::$table_uids);\n      $uid = $db->cfn('bbn_uid', self::$table_uids);\n      $id_tab = $db->cfn('bbn_table', self::$table_uids);\n      $id_col = $db->cfn('col', self::$table);\n      $line = $db->cfn('uid', self::$table);\n      $usr = $db->cfn('usr', self::$table);\n      $chrono = $db->cfn('tst', self::$table);\n      $where = [\n        $uid => $id,\n        $id_tab => $id_table,\n        [$chrono, '>', $date]\n      ];\n      if ( $column ){\n        $where[$id_col] = bbn\\Str::isUid($column) ? $column : $dbc->columnId($column, $id_table);\n      }\n      else {\n        $w = self::_get_table_where($table);\n        \/\/$where = $id_col.\" != UNHEX('$id_column') \" . ($w ?: '');\n      }\n      $res = $db->rselect([\n        'tables' => [$tab_uids],\n        'fields' => [\n          $line,\n          $id_col,\n          $chrono,\n          'val' => 'IFNULL(val, ref)',\n          $usr\n        ],\n        'join' => [[\n          'table' => $tab,\n          'on' => [\n            'logic' => 'AND',\n            'conditions' => [[\n              'field' => $uid,\n              'operator' => '=',\n              'exp' => $line\n            ]]\n          ]]\n        ],\n        'where' => $where,\n        'order' => [$chrono => 'ASC']\n      ]);\n      self::enable();\n      return $res;\n    }\n    return null;\n  }",
            "startLine": 460,
            "endLine": 518,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "from_when",
                    "position": 2,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getPrevUpdate": {
            "name": "getPrevUpdate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($table, $id, $from_when, $column = NULL)\n  {\n    if (\n      bbn\\Str::checkName($table) &&\n      ($date = self::validDate($from_when)) &&\n      ($dbc = self::_get_database()) &&\n      ($db = self::_get_db())\n    ){\n      $tab = $db->escape(self::$table);\n      $line = $db->escape('uid');\n      $operation = $db->escape('opr');\n      $chrono = $db->escape('tst');\n      if ( $column ){\n        $where = $db->escape('col').\n          ' = UNHEX(\"'.$db->escapeValue(\n            bbn\\Str::isUid($column) ? $column : $dbc->columnId($column, $table)\n          ).'\")';\n      }\n      else{\n        $where = self::_get_table_where($table);\n      }\n      $sql = <<< MYSQL\nSELECT *\nFROM $tab\nWHERE $line = ?\nAND ($where)\nAND $operation LIKE 'UPDATE'\nAND $chrono < ?\nORDER BY $chrono DESC\nLIMIT 1\nMYSQL;\n      return $db->getRow($sql, hex2bin($id), $date);\n    }\n    return null;\n  }",
            "startLine": 527,
            "endLine": 561,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "from_when",
                    "position": 2,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getNextValue": {
            "name": "getNextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($table, $id, $from_when, $column)\n  {\n      return $r['ref'] ?: $r['val'];\n    }\n    return false;\n  }",
            "startLine": 570,
            "endLine": 575,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "from_when",
                    "position": 2,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPrevValue": {
            "name": "getPrevValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($table, $id, $from_when, $column)\n  {\n      return $r['ref'] ?: $r['val'];\n    }\n    return false;\n  }",
            "startLine": 584,
            "endLine": 589,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "from_when",
                    "position": 2,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getRowBack": {
            "name": "getRowBack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($table, $id, $when, array $columns = [])\n  {\n    if ( !($when = self::validDate($when)) ){\n      self::_report_error(\"The date $when is incorrect\", __CLASS__, __LINE__);\n    }\n    else if (\n      ($db = self::_get_db()) &&\n      ($dbc = self::_get_database()) &&\n      ($model = $dbc->modelize($table)) &&\n      ($cfg = self::getTableCfg($table))\n    ){\n      \/\/ Time is after last modification: the current is given\n      self::disable();\n      if ( $when >= time() ){\n        $r = $db->rselect($table, $columns, [\n          $cfg['primary'] => $id\n        ]) ?: null;\n      }\n      \/\/ Time is before creation: null is given\n      else if ( $when < self::getCreationDate($table, $id) ){\n        $r = null;\n      }\n      else {\n        \/\/ No columns = All columns\n        if ( \\count($columns) === 0 ){\n          $columns = array_keys($model['fields']);\n        }\n        $r = [];\n        \/\/die(var_dump($columns, $model['fields']));\n        foreach ( $columns as $col ){\n          $tmp = null;\n          if ( isset($model['fields'][$col]['id_option']) ){\n            if ($tmp = $db->rselect(self::$table, ['val', 'ref'], [\n              'uid' => $id,\n              'col' => $model['fields'][$col]['id_option'],\n              'opr' => 'UPDATE',\n              ['tst', '>', $when]\n            ])) {\n              $r[$col] = $tmp['ref'] ?: $tmp['val'];\n            }\n          }\n          if (!$tmp) {\n            $r[$col] = $db->selectOne($table, $col, [\n              $cfg['primary'] => $id\n            ]);\n          }\n        }\n      }\n      self::enable();\n      return $r;\n    }\n    return null;\n  }",
            "startLine": 598,
            "endLine": 650,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "when",
                    "position": 2,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "columns",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "getValBack": {
            "name": "getValBack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($table, $id, $when, $column)\n  {\n    if ( $row = self::getRowBack($table, $id, $when, [$column]) ){\n      return $row[$column];\n    }\n    return false;\n  }",
            "startLine": 659,
            "endLine": 665,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "when",
                    "position": 2,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCreationDate": {
            "name": "getCreationDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($table, $id)\n  {\n    if ( $res = self::getCreation($table, $id) ){\n      return $res['date'];\n    }\n    return null;\n  }",
            "startLine": 667,
            "endLine": 673,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "float",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCreation": {
            "name": "getCreation",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($table, $id)\n  {\n    if (\n      ($db = self::_get_db()) &&\n      ($cfg = self::getTableCfg($table)) &&\n      ($id_col = self::getIdColumn($cfg['primary'], $table))\n    ){\n      self::disable();\n      if ( $r = $db->rselect(self::$table, ['date' => 'tst', 'user' => 'usr'], [\n        'uid' => $id,\n        'col' => $id_col,\n        'opr' => 'INSERT'\n      ], [\n        'tst' => 'DESC'\n      ]) ){\n        self::enable();\n        return $r;\n      }\n      self::enable();\n    }\n    return null;\n  }",
            "startLine": 680,
            "endLine": 701,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLastDate": {
            "name": "getLastDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($table, $id, $column = NULL)\n  {\n    if ( $db = self::_get_db() ){\n      if (\n        $column &&\n        ($id_col = self::getIdColumn($column, $table))\n      ){\n        return self::$db->selectOne(self::$table, 'tst', [\n          'uid' => $id,\n          'col' => $id_col\n        ], [\n          'tst' => 'DESC'\n        ]);\n      }\n      else if ( !$column && ($where = self::_get_table_where($table)) ){\n        $tab = $db->escape(self::$table);\n        $chrono = $db->escape('tst');\n        $line = $db->escape('uid');\n        $sql = <<< MYSQL\nSELECT $chrono\nFROM $tab\nWHERE $line = ?\nAND ($where)\nORDER BY $chrono DESC\nMYSQL;\n        return $db->getOne($sql, hex2bin($id));\n      }\n    }\n    return null;\n  }",
            "startLine": 709,
            "endLine": 738,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "float"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getHistory": {
            "name": "getHistory",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($table, $id, $col = '')\n  {\n      self::check($table) && \n      ($modelize = self::getTableCfg($table))\n    ){\n      $pat = [\n        'ins' => 'INSERT',\n        'upd' => 'UPDATE',\n        'res' => 'RESTORE',\n        'del' => 'DELETE'\n      ];\n      $r = [];\n      $fields = [\n          'date' => 'tst',\n          'user' => 'usr',\n          'col'\n        ];\n      $where = [\n        'uid' => $id\n      ];\n      if ( !empty($col) ){\n        if ( !\\bbn\\Str::isUid($col) ){\n          $fields[] = $modelize['fields'][$col]['type'] === 'binary' ? 'ref' : 'val';\n          $col = self::$database_obj->columnId($col, $table);\n        }\n        else {\n          $idx = \\bbn\\X::find($modelize['fields'], ['id_option' => strtolower($col)]);\n          if (null === $idx) {\n            throw new \\Error(\"Impossible to find the option $col\");\n          }\n          $fields[] = $modelize['fields'][$idx]['type'] === 'binary' ? 'ref' : 'val';\n        }\n        $where['col'] = $col;\n      }\n      else {\n        $fields[] = 'val';\n        $fields[] = 'ref';\n      }\n      foreach ( $pat as $k => $p ){\n        $where['opr'] = $p;\n        if ( $q = self::$db->rselectAll([\n          'table' => self::$table,\n          'fields' => $fields,\n          'where' => [\n            'conditions' => $where\n          ],\n          'order' => [[\n            'field' => 'tst',\n            'dir' => 'desc'\n          ]]\n        ]) ){\n          $r[$k] = $q;\n        }\n      }\n      return $r;\n    }\n  }",
            "startLine": 746,
            "endLine": 802,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "col",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getFullHistory": {
            "name": "getFullHistory",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($table, $id)\n  {\n    $r = [];\n    if (\n      ($db = self::_get_db()) &&\n      ($where = self::_get_table_where($table))\n    ){\n      $tab = $db->escape(self::$table);\n      $line = $db->escape('uid');\n      $chrono = $db->escape('tst');\n      $sql = <<< MYSQL\nSELECT *\nFROM $tab\nWHERE $line = ?\nAND ($where)\nORDER BY $chrono ASC\nMYSQL;\n      $r = $db->getRows($sql, hex2bin($id));\n    }\n    return $r;\n  }",
            "startLine": 809,
            "endLine": 829,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getColumnHistory": {
            "name": "getColumnHistory",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($table, $id, $column)\n  {\n    if ( \n      self::check($table) && \n      ($primary = self::$db->getPrimary($table)) &&\n      ($modelize = self::getTableCfg($table))\n    ){\n      if ( \\bbn\\Str::isUid($column) ){\n        $column = \\bbn\\X::find($modelize['fields'], ['id_option' => strtolower($column)]);\n      }\n      $current = self::$db->selectOne($table, $column, [\n        $primary[0] => $id\n      ]);\n      $val = $modelize['fields'][$column] === 'binary' ? 'ref' : 'val';\n      $hist = self::getHistory($table, $id, $column);\n      $r = [];\n      if ( $crea = self::getCreation($table, $id) ){\n        if ( !empty($hist['upd']) ){\n          $hist['upd'] = array_reverse($hist['upd']);\n          foreach ( $hist['upd'] as $i => $h ){\n            if ( $i === 0 ){\n              $r[] = [\n                'date' => $crea['date'],\n                $val => $h[$val],\n                'user' => $crea['user']\n              ];\n            }\n            else{\n              $r[] = [\n                'date' => $hist['upd'][$i-1]['date'],\n                $val => $h[$val],\n                'user' => $hist['upd'][$i-1]['user']\n              ];\n            }\n          }\n          $r[] = [\n            'date' => $hist['upd'][$i]['date'],\n            $val => $current,\n            'user' => $hist['upd'][$i]['user']\n          ];\n        }\n        else if (!empty($hist['ins']) ){\n          $r[0] = [\n            'date' => $hist['ins'][0]['date'],\n            $val => $current,\n            'user' => $hist['ins'][0]['user']\n          ];\n        }\n      }\n      return $r;\n    }\n  }",
            "startLine": 831,
            "endLine": 882,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTableCfg": {
            "name": "getTableCfg",
            "summary": "Gets all information about a given table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($table, $force = false)\n  {\n    \/\/ Check history is enabled and table's name correct\n    if (\n      ($db = self::_get_db()) &&\n      ($dbc = self::_get_database()) &&\n      ($table = $db->tfn($table))\n    ){\n      if ( $force || !isset(self::$structures[$table]) ){\n        if ( $model = $dbc->modelize($table) ){\n          self::$structures[$table] = [\n            'history' => false,\n            'primary' => false,\n            'primary_type' => null,\n            'primary_length' => 0,\n            'auto_increment' => false,\n            'id' => null,\n            'fields' => []\n          ];\n          if (\n            self::isLinked($table) &&\n            isset($model['keys']['PRIMARY']) &&\n            (\\count($model['keys']['PRIMARY']['columns']) === 1) &&\n            ($primary = $model['keys']['PRIMARY']['columns'][0]) &&\n            !empty($model['fields'][$primary])\n          ){\n            \/\/ Looking for the config of the table\n            self::$structures[$table]['history'] = 1;\n            self::$structures[$table]['primary'] = $primary;\n            self::$structures[$table]['primary_type'] = $model['fields'][$primary]['type'];\n            self::$structures[$table]['primary_length'] = $model['fields'][$primary]['maxlength'];\n            self::$structures[$table]['auto_increment'] = isset($model['fields'][$primary]['extra']) && ($model['fields'][$primary]['extra'] === 'auto_increment');\n            self::$structures[$table]['id'] = $dbc->tableId($db->tsn($table), $db->getCurrent());\n            self::$structures[$table]['fields'] = array_filter($model['fields'], function($a){\n              return isset($a['id_option']);\n            });\n          }\n        }\n      }\n      \/\/ The table exists and has history\n      if ( isset(self::$structures[$table]) && !empty(self::$structures[$table]['history']) ){\n        return self::$structures[$table];\n      }\n    }\n    return null;\n  }",
            "startLine": 890,
            "endLine": 935,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getDbCfg": {
            "name": "getDbCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($db = NULL, $force = false)\n  {\n    if ($db = self::_get_db()) {\n      $res = [];\n      $tables = $db->getTables($db);\n      if ($tables && count($tables)) {\n        foreach ($tables as $t) {\n          if ($tmp = self::getTableCfg($t, $force)) {\n            $res[$t] = $tmp;\n          }\n        }\n      }\n      return $res;\n    }\n    return null;\n  }",
            "startLine": 937,
            "endLine": 952,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "isLinked": {
            "name": "isLinked",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    return ($db = self::_get_db()) &&\n      ($ftable = $db->tfn($table)) &&\n      isset(self::$links[$ftable]);\n  }",
            "startLine": 954,
            "endLine": 959,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLinks": {
            "name": "getLinks",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 961,
            "endLine": 963,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "trigger": {
            "name": "trigger",
            "summary": "The function used by the db trigger",
            "description": "This will basically execute the history query if it's configured for.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>This will basically execute the history query if it's configured for.<\/p>"
                }
            ],
            "file": "bbn\\Appui\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    if ( !self::isEnabled() || !($db = self::_get_db()) ){\n      return $cfg;\n    }\n    $tables = $cfg['tables'] ?? (array)$cfg['table'];\n    \/\/ Will return false if disabled, the table doesn't exist, or doesn't have history\n    if (\n      ($cfg['kind'] === 'SELECT') &&\n      ($cfg['moment'] === 'before') &&\n      !empty($cfg['tables']) &&\n      !in_array($db->tfn(self::$table), $cfg['tables_full'], true) &&\n      !in_array($db->tfn(self::$table_uids), $cfg['tables_full'], true)\n    ){\n      $change = 0;\n      if ( !isset($cfg['history']) ){\n        $cfg['history'] = [];\n        $new_join = [];\n        foreach ( $cfg['join'] as $i => $t ){\n          $post_join = false;\n          $model = $db->modelize($t['table']);\n          if (\n            isset($model['keys']['PRIMARY']) &&\n            ($model['keys']['PRIMARY']['ref_table'] === $db->csn(self::$table_uids))\n          ){\n            $change++;\n            if ( $t['type'] !== 'left' ){\n              $post_join = [\n                'table' => $db->tsn(self::$table_uids),\n                'alias' => $db->tsn(self::$table_uids).$change,\n                'type' => $t['type'] ?? 'right',\n                'on' => [\n                  'conditions' => [\n                    [\n                      'field' => $db->cfn('bbn_uid', self::$table_uids.$change),\n                      'operator' => 'eq',\n                      'exp' => $db->cfn(\n                        $model['keys']['PRIMARY']['columns'][0],\n                        !empty($t['alias']) ? $t['alias'] : $t['table'],\n                        true\n                      )\n                    ], [\n                      'field' => $db->cfn('bbn_active', self::$table_uids.$change),\n                      'operator' => '=',\n                      'exp' => '1'\n                    ]\n                  ],\n                  'logic' => 'AND'\n                ]\n              ];\n            }\n            else{\n              $join_alias = $t;\n              $alias = strtolower(bbn\\Str::genpwd());\n              $join_alias['alias'] = $alias;\n              $join_alias['on']['conditions'] = $db->replaceTableInConditions($join_alias['on']['conditions'], !empty($t['alias']) ? $t['alias'] : $t['table'], $alias);\n              $new_join[] = $join_alias;\n              $t['on'] = [\n                'conditions' => [\n                  [\n                    'field' => $db->cfn('bbn_uid', self::$table_uids.$change),\n                    'operator' => 'eq',\n                    'exp' => $db->cfn($model['keys']['PRIMARY']['columns'][0], !empty($t['alias']) ? $t['alias'] : $t['table'], true)\n                  ], [\n                    'field' => $db->cfn('bbn_active', self::$table_uids.$change),\n                    'operator' => '=',\n                    'exp' => '1'\n                  ]\n                ],\n                'logic' => 'AND'\n              ];\n              $new_join[] = [\n                'table' => $db->tsn(self::$table_uids),\n                'alias' => $db->tsn(self::$table_uids).$change,\n                'type' => 'left',\n                'on' => [\n                  'conditions' => [\n                    [\n                      'field' => $db->cfn('bbn_uid', self::$table_uids.$change),\n                      'operator' => 'eq',\n                      'exp' => $db->cfn($model['keys']['PRIMARY']['columns'][0], $alias, true)\n                    ]\n                  ],\n                  'logic' => 'AND'\n                ]\n              ];\n            }\n          }\n          $new_join[] = $t;\n          if ( $post_join ){\n            $new_join[] = $post_join;\n          }\n        }\n        foreach ( $cfg['tables'] as $alias => $table ){\n          $model = $db->modelize($table);\n          if (\n            isset($model['keys']['PRIMARY']['ref_table']) &&\n            ($db->tfn($model['keys']['PRIMARY']['ref_db'].'.'.$model['keys']['PRIMARY']['ref_table']) === self::$table_uids)\n          ){\n            $change++;\n            $new_join[] = [\n              'table' => self::$table_uids,\n              'alias' => $db->tsn(self::$table_uids).$change,\n              'on' => [\n                'conditions' => [\n                  [\n                    'field' => $db->cfn(self::$table_uids.$change.'.bbn_uid'),\n                    'operator' => 'eq',\n                    'exp' => $db->cfn($model['keys']['PRIMARY']['columns'][0], \\is_string($alias) ? $alias : $table, true)\n                  ], [\n                    'field' => $db->cfn(self::$table_uids.$change.'.bbn_active'),\n                    'operator' => '=',\n                    'exp' => '1'\n                  ]\n                ],\n                'logic' => 'AND'\n              ]\n            ];\n          }\n        }\n        if ( $change ){\n          $cfg['join'] = $new_join;\n          $cfg['where'] = $cfg['filters'];\n          $cfg = $db->reprocessCfg($cfg);\n        }\n      }\n    }\n\n    if (\n      $cfg['write'] &&\n      ($table = $db->tfn(current($tables))) &&\n      ($s = self::getTableCfg($table))\n    ){\n      \/\/ This happens before the query is executed\n      if ( $cfg['moment'] === 'before' ){\n\n        $primary_where = false;\n        $primary_defined = false;\n        $primary_value = false;\n        $idx1 = \\bbn\\X::find($cfg['values_desc'], ['primary' => true]);\n        if ( $idx1 !== null ){\n          $primary_where = $cfg['values'][$idx1];\n        }\n        $idx = array_search($s['primary'], $cfg['fields'], true);\n        if ( ($idx !== false) && isset($cfg['values'][$idx]) ){\n          $primary_defined = $cfg['generate_id'] ? false : true;\n          $primary_value = $cfg['values'][$idx];\n        }\n\n        switch ( $cfg['kind'] ){\n\n          case 'INSERT':\n            \/\/ If the primary is specified and already exists in a row in deleted state\n            \/\/ (if it exists in active state, DB will return its standard error but it's not this class' problem)\n            if ( !$primary_defined ){\n              \/\/ Checks if there is a unique value (non based on UID)\n              $modelize = $db->modelize($table);\n              $keys = $modelize['keys'];\n              unset($keys['PRIMARY']);\n              foreach ( $keys as $key ){\n                if ( !empty($key['unique']) && !empty($key['columns']) ){\n                  $fields = [];\n                  $exit = false;\n                  foreach ( $key['columns'] as $col ){\n                    $col_idx = array_search($col, $cfg['fields'], true);\n                    if ( ($col_idx === false) || \\is_null($cfg['values'][$col_idx]) ){\n                      $exit = true;\n                      break;\n                    }\n                    else {\n                      $fields[] = [\n                        'field' => $col,\n                        'operator' => 'eq',\n                        'value' => $cfg['values'][$col_idx]\n                      ];\n                    }\n                  }\n                  if ( $exit ){\n                    continue;\n                  }\n                  self::disable();\n                  if ( $tmp = $db->selectOne([\n                    'tables' => [$table],\n                    'fields' => [$s['primary']],\n                    'join' => [[\n                      'table' => self::$table_uids,\n                      'on' => [[\n                        'field' => $db->cfn('bbn_uid', self::$table_uids),\n                        'operator' => 'eq',\n                        'exp' => $db->cfn($s['primary'], $table, true)\n                      ]]\n                    ]],\n                    'where' => [\n                      'conditions' => $fields,\n                      'logic' => 'AND'\n                    ]\n                  ]) ){\n                    $primary_value = $tmp;\n                    $primary_defined = true;\n                    self::enable();\n                    break;\n                  }\n                  self::enable();\n                }\n              }\n            }\n            if (\n              $primary_defined &&\n              ($db->selectOne(self::$table_uids, self::$column, ['bbn_uid' => $primary_value]) === 0) &&\n              \/\/($all = self::$db->rselect($table, [], [$s['primary'] => $primary_value]))\n              ($all = self::$db->rselect([\n                'table' => $table,\n                'fields' => $cfg['fields'],\n                'join' => [[\n                  'table' => self::$table_uids,\n                  'on' => [\n                    'conditions' => [[\n                      'field' => $s['primary'],\n                      'exp' => 'bbn_uid'\n                    ], [\n                      'field' => self::$column,\n                      'value' => 0\n                    ]]\n                  ]\n                ]],\n                'where' => [\n                  'conditions' => [[\n                    'field' => $s['primary'],\n                    'value' => $primary_value\n                  ]]\n                ]\n              ]))\n            ){\n              \/\/ We won't execute the after trigger\n              $cfg['trig'] = false;\n              \/\/ Real query's execution will be prevented\n              $cfg['run'] = false;\n              $cfg['value'] = 0;\n              \/** @var array $update The values to be updated *\/\n              $update = [];\n              \/\/ We update each element which needs to (the new ones different from the old, and the old ones different from the default)\n              foreach ( $all as $k => $v ){\n                if ( $k !== $s['primary'] ){\n                  $idx = array_search($k, $cfg['fields'], true);\n                  if ( $idx !== false ){\n                    if ( $v !== $cfg['values'][$idx] ){\n                      $update[$k] = $cfg['values'][$idx];\n                    }\n                  }\n                  else if ( $v !== $s['fields'][$k]['default'] ){\n                    $update[$k] = $s['fields'][$k]['default'];\n                  }\n                }\n              }\n              self::disable();\n              if ( $cfg['value'] = self::$db->update(self::$table_uids, ['bbn_active' => 1], [\n                ['bbn_uid', '=', $primary_value]\n              ]) ){\n                \/\/ Without this the record won't be write in bbn_history. Added by Mirko \n                $cfg['trig'] = true;\n                \/\/ --------\n                if ( \\count($update) > 0 ){\n                  self::enable();\n                  self::$db->update($table, $update, [\n                    $s['primary'] => $primary_value\n                  ]);\n                }\n                $cfg['history'][] = [\n                  'operation' => 'RESTORE',\n                  'column' => $s['fields'][$s['primary']]['id_option'],\n                  'line' => $primary_value,\n                  'chrono' => microtime(true)\n                ];\n              }\n              self::enable();\n            }\n            else {\n              self::disable();\n              if ( $primary_defined && !self::$db->count($table, [$s['primary'] => $primary_value]) ){\n                $primary_defined = false;\n              }\n              if ( !$primary_defined && self::$db->insert(self::$table_uids, [\n                'bbn_uid' => $primary_value,\n                'bbn_table' => $s['id']\n              ]) ){\n                $cfg['history'][] = [\n                  'operation' => 'INSERT',\n                  'column' => isset($s['fields'][$s['primary']]) ? $s['fields'][$s['primary']]['id_option'] : null,\n                  'line' => $primary_value,\n                  'chrono' => microtime(true)\n                ];\n                self::$db->setLastInsertId($primary_value);\n              }\n              self::enable();\n            }\n            break;\n          case 'UPDATE':\n\n            \/\/ ********** CHANGED BY MIRKO *************\n\n            \/*if ( $primary_defined ){\n              $where = [$s['primary'] => $primary_value];\n              \/\/ If the only update regards the history field\n              $row = self::$db->rselect($table, array_keys($cfg['fields']), $where);\n              $time = microtime(true);\n              foreach ( $cfg['values'] as $k => $v ){\n                if (\n                  ($row[$k] !== $v) &&\n                  isset($s['fields'][$k])\n                ){\n                  $cfg['history'][] = [\n                    'operation' => 'UPDATE',\n                    'column' => $s['fields'][$k]['id_option'],\n                    'line' => $primary_value,\n                    'old' => $row[$k],\n                    'chrono' => $time\n                  ];\n                }\n              }\n            }*\/\n            if (\n              $primary_where &&\n              ($row = self::$db->rselect($table, $cfg['fields'], [$s['primary'] => $primary_where]))\n            ){\n              $time = microtime(true);\n              foreach ( $cfg['fields'] as $i => $idx ){\n                $csn = self::$db->csn($idx);\n                if (\n                  array_key_exists($csn, $s['fields']) &&\n                  ($row[$csn] !== $cfg['values'][$i])\n                ){\n                  $cfg['history'][] = [\n                    'operation' => 'UPDATE',\n                    'column' => $s['fields'][$csn]['id_option'],\n                    'line' => $primary_where,\n                    'old' => $row[$csn],\n                    'chrono' => $time\n                  ];\n                }\n              }\n            }\n            \/\/ Case where the primary is not defined, we'll update each primary instead\n            else if ( $ids = self::$db->getColumnValues($table, $s['primary'], $cfg['filters']) ){\n              \/\/ We won't execute the after trigger\n              $cfg['trig'] = false;\n              \/\/ Real query's execution will be prevented\n              $cfg['run'] = false;\n              $cfg['value'] = 0;\n\n              $tmp = [];\n              foreach ( $cfg['fields'] as $i => $f ){\n                $tmp[$f] = $cfg['values'][$i];\n              }\n              foreach ( $ids as $id ){\n                $cfg['value'] += self::$db->update($table, $tmp, [$s['primary'] => $id]);\n              }\n\n              \/\/ ****************************************\n\n            }\n            break;\n\n          \/\/ Nothing is really deleted, the hcol is just set to 0\n          case 'DELETE':\n            \/\/ We won't execute the after trigger\n            $cfg['trig'] = false;\n            \/\/ Real query's execution will be prevented\n            $cfg['run'] = false;\n            $cfg['value'] = 0;\n            \/\/ Case where the primary is not defined, we'll delete based on each primary instead\n            if ( !$primary_where ){\n              $ids = self::$db->getColumnValues($table, $s['primary'], $cfg['filters']);\n              foreach ( $ids as $id ){\n                $cfg['value'] += self::$db->delete($table, [$s['primary'] => $id]);\n              }\n            }\n            else {\n              self::disable();\n              $cfg['value'] = self::$db->update(self::$table_uids, [\n                'bbn_active' => 0\n              ], [\n                'bbn_uid' => $primary_where\n              ]);\n              \/\/var_dump(\"HIST\", $primary_where);\n              self::enable();\n              if ( $cfg['value'] ){\n                $cfg['trig'] = 1;\n                \/\/ And we insert into the history table\n                $cfg['history'][] = [\n                  'operation' => 'DELETE',\n                  'column' => $s['fields'][$s['primary']]['id_option'],\n                  'line' => $primary_where,\n                  'old' => NULL,\n                  'chrono' => microtime(true)\n                ];\n              }\n            }\n            break;\n        }\n      }\n      else if (\n        ($cfg['moment'] === 'after') &&\n        isset($cfg['history'])\n      ){\n        foreach ($cfg['history'] as $h){\n          self::_insert($h);\n        }\n        unset($cfg['history']);\n      }\n    }\n    return $cfg;\n  }",
            "startLine": 978,
            "endLine": 1389,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "table_uids": {
            "static": true,
            "visibility": "public",
            "doc": {
                "description": "@var boolean|string The history table's name",
                "tags": []
            },
            "value": "apst_app.bbn_history_uids"
        },
        "table": {
            "static": true,
            "visibility": "public",
            "doc": {
                "description": "@var boolean|string The history table's name",
                "tags": []
            },
            "value": "apst_app.bbn_history"
        },
        "uids": {
            "static": true,
            "visibility": "public",
            "doc": {
                "description": "@var string The UIDs table",
                "tags": []
            },
            "value": "uids"
        },
        "column": {
            "static": true,
            "visibility": "public",
            "doc": {
                "description": "@var string The history default column's name",
                "tags": []
            },
            "value": "bbn_active"
        },
        "is_used": {
            "static": true,
            "visibility": "public",
            "doc": {
                "description": "@var boolean",
                "tags": []
            },
            "value": true
        }
    },
    "staticProperties": {
        "db": {},
        "dbs": [
            "__BBN__d1207f9860c866a15dc4ee50021af4a9__BBN__"
        ],
        "structures": [],
        "database_obj": null,
        "admin_db": "apst_app",
        "user": "752a9b0ef5ca11e89b35005056014c9f",
        "prefix": "bbn_",
        "date": null,
        "ok": true,
        "enabled": true,
        "links": {
            "apst_app.apst_adherents": [
                "uid"
            ],
            "apst_app.apst_altares": [
                "id"
            ],
            "apst_app.apst_attestations": [
                "id"
            ],
            "apst_app.apst_baremes_annuels": [
                "id"
            ],
            "apst_app.apst_changes": [
                "id"
            ],
            "apst_app.apst_clotures": [
                "id"
            ],
            "apst_app.apst_cotisations": [
                "id"
            ],
            "apst_app.apst_cotisations_annuelles": [
                "id"
            ],
            "apst_app.apst_demandes": [
                "id"
            ],
            "apst_app.apst_demandes_documents": [
                "id"
            ],
            "apst_app.apst_documents": [
                "id"
            ],
            "apst_app.apst_infolegale": [
                "id"
            ],
            "apst_app.apst_infolegale_events": [
                "id"
            ],
            "apst_app.apst_infolegale_info": [
                "id"
            ],
            "apst_app.apst_infos_complementaires": [
                "id"
            ],
            "apst_app.apst_liens": [
                "id"
            ],
            "apst_app.apst_marques": [
                "id"
            ],
            "apst_app.apst_passages": [
                "id"
            ],
            "apst_app.apst_stats": [
                "id"
            ],
            "apst_app.bbn_addresses": [
                "id"
            ],
            "apst_app.bbn_cron": [
                "id"
            ],
            "apst_app.bbn_emailings": [
                "id"
            ],
            "apst_app.bbn_events": [
                "id"
            ],
            "apst_app.bbn_history": [
                "ref"
            ],
            "apst_app.bbn_i18n": [
                "id"
            ],
            "apst_app.bbn_i18n_exp": [
                "id"
            ],
            "apst_app.bbn_options": [
                "id"
            ],
            "apst_app.bbn_people": [
                "id"
            ]
        },
        "table_uids": "apst_app.bbn_history_uids",
        "table": "apst_app.bbn_history",
        "uids": "uids",
        "column": "bbn_active",
        "is_used": true,
        "_error": null,
        "_last_error": null,
        "_debug": null
    },
    "constants": null,
    "numMethods": 37,
    "numProperties": 5,
    "numConstants": 0,
    "numStaticProperties": 19,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\Report"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "db": {},
        "dbs": [
            "__BBN__d1207f9860c866a15dc4ee50021af4a9__BBN__"
        ],
        "structures": [],
        "database_obj": null,
        "admin_db": "apst_app",
        "user": "752a9b0ef5ca11e89b35005056014c9f",
        "prefix": "bbn_",
        "date": null,
        "ok": true,
        "enabled": true,
        "links": {
            "apst_app.apst_adherents": [
                "uid"
            ],
            "apst_app.apst_altares": [
                "id"
            ],
            "apst_app.apst_attestations": [
                "id"
            ],
            "apst_app.apst_baremes_annuels": [
                "id"
            ],
            "apst_app.apst_changes": [
                "id"
            ],
            "apst_app.apst_clotures": [
                "id"
            ],
            "apst_app.apst_cotisations": [
                "id"
            ],
            "apst_app.apst_cotisations_annuelles": [
                "id"
            ],
            "apst_app.apst_demandes": [
                "id"
            ],
            "apst_app.apst_demandes_documents": [
                "id"
            ],
            "apst_app.apst_documents": [
                "id"
            ],
            "apst_app.apst_infolegale": [
                "id"
            ],
            "apst_app.apst_infolegale_events": [
                "id"
            ],
            "apst_app.apst_infolegale_info": [
                "id"
            ],
            "apst_app.apst_infos_complementaires": [
                "id"
            ],
            "apst_app.apst_liens": [
                "id"
            ],
            "apst_app.apst_marques": [
                "id"
            ],
            "apst_app.apst_passages": [
                "id"
            ],
            "apst_app.apst_stats": [
                "id"
            ],
            "apst_app.bbn_addresses": [
                "id"
            ],
            "apst_app.bbn_cron": [
                "id"
            ],
            "apst_app.bbn_emailings": [
                "id"
            ],
            "apst_app.bbn_events": [
                "id"
            ],
            "apst_app.bbn_history": [
                "ref"
            ],
            "apst_app.bbn_i18n": [
                "id"
            ],
            "apst_app.bbn_i18n_exp": [
                "id"
            ],
            "apst_app.bbn_options": [
                "id"
            ],
            "apst_app.bbn_people": [
                "id"
            ]
        },
        "table_uids": "apst_app.bbn_history_uids",
        "table": "apst_app.bbn_history",
        "uids": "uids",
        "column": "bbn_active",
        "is_used": true,
        "_error": null,
        "_last_error": null,
        "_debug": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "History",
    "summary": ""
}