{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\History",
    "namespace": true,
    "realName": "History",
    "realNamespace": "bbn\\Appui",
    "traits": [
        "bbn\\Models\\Tts\\Report"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/History.php",
    "startLine": 13,
    "endLine": 1726,
    "numMethods": 46,
    "numProperties": 21,
    "numConstants": 0,
    "numStaticProperties": 21,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "db": null,
        "dbs": [],
        "structures": [],
        "database_obj": null,
        "admin_db": "",
        "user": null,
        "prefix": "bbn_",
        "date": null,
        "ok": false,
        "enabled": true,
        "links": null,
        "table_uids": false,
        "table": false,
        "uids": "uids",
        "column": "bbn_active",
        "is_used": false,
        "cache": null,
        "cache_prefix": null,
        "_error": null,
        "_last_error": null,
        "_debug": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "History",
    "contentConstructor": null,
    "methods": {
        "getIdColumn": {
            "name": "getIdColumn",
            "summary": "Returns the column's corresponding option's ID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getIdColumn(string $column, string $table): ?string\n  {\n    if (\n      ($db = self::_get_db()) &&\n      ($full_table = $db->tfn($table)) &&\n      ($database_obj = self::_get_database())\n    ) {\n      [$database, $table] = explode('.', $full_table);\n      return $database_obj->columnId($column, $table, $database);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 60,
            "endLine": 71,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getIdColumn",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string"
                }
            ],
            "doc": {
                "description": "Returns the column's corresponding option's ID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$column",
                        "description": "string"
                    },
                    {
                        "tag": "param",
                        "type": "$table",
                        "description": "string"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the column's corresponding option's ID\n   * @param $column string\n   * @param $table string\n   * @return null|string\n   *\/"
        },
        "init": {
            "name": "init",
            "summary": "Initializes",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function init(Db $db, array $cfg = []): void\n  {\n    \/** @var string $hash Unique hash for this DB connection (so we don't init twice a same connection) *\/\n    $hash = $db->getHash();\n    if (!\\in_array($hash, self::$dbs, true) && $db->check()) {\n      \/\/ Adding the connection to the list of connections\n      self::$dbs[] = $hash;\n      \/** @var Db db *\/\n      self::$db = $db;\n      $vars = get_class_vars(__CLASS__);\n      foreach ($cfg as $cf_name => $cf_value) {\n        if (array_key_exists($cf_name, $vars)) {\n          self::$$cf_name = $cf_value;\n        }\n      }\n      if (!self::$admin_db) {\n        self::$admin_db = self::$db->getCurrent();\n      }\n      self::$table = self::$admin_db . '.' . self::$prefix . 'history';\n      self::$table_uids = self::$admin_db . '.' . self::$prefix . 'history_uids';\n      self::$ok = true;\n      self::$is_used = true;\n      self::$cache = Cache::getEngine();\n      self::$cache_prefix = Str::encodeFilename(str_replace('\\\\', '\/', self::class), true).'\/';\n      self::$links = self::$db->getForeignKeys('bbn_uid', self::$prefix . 'history_uids', self::$admin_db);\n      self::$db->setTrigger('\\\\bbn\\\\Appui\\\\History::trigger');\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 79,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "init",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Initializes\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Db",
                        "name": "$db"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Initializes\n   * @param Db $db\n   * @param array $cfg\n   * @return void\n   *\/"
        },
        "setCache": {
            "name": "setCache",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function setCache($id, $data): void\n  {\n    if (self::$cache) {\n      self::$cache->set(self::$cache_prefix . $id, $data, 3600);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 108,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setCache",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCache": {
            "name": "getCache",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getCache($id)\n  {\n    if (self::$cache) {\n      return self::$cache->get(self::$cache_prefix . $id, 3600);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 115,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getCache",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "deleteCache": {
            "name": "deleteCache",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function deleteCache($id)\n  {\n    if (self::$cache) {\n      return self::$cache->get(self::$cache_prefix . $id, 3600);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 122,
            "endLine": 127,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteCache",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isInit": {
            "name": "isInit",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isInit(): bool\n  {\n    return self::$ok;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 132,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isInit",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return bool\n   *\/"
        },
        "disable": {
            "name": "disable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function disable(): void\n  {\n    self::$enabled = false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 140,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "disable",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return void\n   *\/"
        },
        "enable": {
            "name": "enable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function enable(): void\n  {\n    self::$enabled = true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 148,
            "endLine": 151,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "enable",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return void\n   *\/"
        },
        "isEnabled": {
            "name": "isEnabled",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isEnabled(): bool\n  {\n    return self::$ok && (self::$enabled === true);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 156,
            "endLine": 159,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isEnabled",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return bool\n   *\/"
        },
        "validDate": {
            "name": "validDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function validDate($d): ?float\n  {\n    if (!Str::isNumber($d)) {\n      $d = strtotime($d);\n    }\n    if (($d > 0) && Str::isNumber($d)) {\n      return (float)$d;\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 166,
            "endLine": 175,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "validDate",
            "returns": [
                null,
                "float"
            ],
            "arguments": [
                {
                    "name": "d",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$d"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $d\n   * @return null|float\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks if all history parameters are set in order to read and write into history",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function check(): bool\n  {\n    return\n      isset(self::$user, self::$table, self::$db) &&\n      self::isInit() &&\n      self::_get_db();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 181,
            "endLine": 187,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks if all history parameters are set in order to read and write into history\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if all history parameters are set in order to read and write into history\n   * @return bool\n   *\/"
        },
        "hasHistory": {
            "name": "hasHistory",
            "summary": "Returns true if the given DB connection is configured for history",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function hasHistory(Db $db): bool\n  {\n    $hash = $db->getHash();\n    return \\in_array($hash, self::$dbs, true);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 195,
            "endLine": 199,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "hasHistory",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns true if the given DB connection is configured for history\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Db",
                        "name": "$db"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the given DB connection is configured for history\n   *\n   * @param Db $db\n   * @return bool\n   *\/"
        },
        "delete": {
            "name": "delete",
            "summary": "Effectively deletes a row (deletes the row, the history row and the ID row)",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function delete(string $id): bool\n  {\n    if ($id && ($db = self::_get_db())) {\n      return $db->delete(self::$table_uids, ['bbn_uid' => $id]);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 207,
            "endLine": 213,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "delete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Effectively deletes a row (deletes the row, the history row and the ID row)\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Effectively deletes a row (deletes the row, the history row and the ID row)\n   *\n   * @param string $id\n   * @return bool\n   *\/"
        },
        "setColumn": {
            "name": "setColumn",
            "summary": "Sets the \"active\" column name",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function setColumn(string $column): void\n  {\n    if (Str::checkName($column)) {\n      self::$column = $column;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 221,
            "endLine": 226,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setColumn",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the \"active\" column name\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$column"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the \"active\" column name\n   *\n   * @param string $column\n   * @return void\n   *\/"
        },
        "getColumn": {
            "name": "getColumn",
            "summary": "Gets the \"active\" column name",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getColumn(): string\n  {\n    return self::$column;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 233,
            "endLine": 236,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getColumn",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets the \"active\" column name\n",
                "params": [],
                "return": "the \"active\" column name"
            },
            "comments": "  \/**\n   * Gets the \"active\" column name\n   *\n   * @return string the \"active\" column name\n   *\/"
        },
        "setDate": {
            "name": "setDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function setDate($date): void\n  {\n    \/\/ Sets the current date\n    if (!Str::isNumber($date) && !($date = strtotime($date))) {\n      return;\n    }\n    $t = time();\n    \/\/ Impossible to write history in the future\n    if ($date > $t) {\n      $date = $t;\n    }\n    self::$date = $date;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 242,
            "endLine": 254,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDate",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "date",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$date"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $date\n   * @return void\n   *\/"
        },
        "getDate": {
            "name": "getDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getDate(): ?float\n  {\n    return self::$date;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 259,
            "endLine": 262,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDate",
            "returns": [
                null,
                "float"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return float\n   *\/"
        },
        "unsetDate": {
            "name": "unsetDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function unsetDate(): void\n  {\n    self::$date = null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 267,
            "endLine": 270,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "unsetDate",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return void\n   *\/"
        },
        "setAdminDb": {
            "name": "setAdminDb",
            "summary": "Sets the history table name",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function setAdminDb(string $db_name): void\n  {\n    \/\/ Sets the history table name\n    if (Str::checkName($db_name)) {\n      self::$admin_db = $db_name;\n      self::$table = self::$admin_db . '.' . self::$prefix . 'history';\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 277,
            "endLine": 284,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setAdminDb",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "db_name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name"
                }
            ],
            "doc": {
                "description": "Sets the history table name\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the history table name\n   * @param string $db_name\n   * @return void\n   *\/"
        },
        "setUser": {
            "name": "setUser",
            "summary": "Sets the user ID that will be used to fill the user_id field",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function setUser($user): void\n  {\n    \/\/ Sets the history table name\n    if (Str::isUid($user)) {\n      self::$user = $user;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 291,
            "endLine": 297,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setUser",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the user ID that will be used to fill the user_id field\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$user"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the user ID that will be used to fill the user_id field\n   * @param $user\n   * @return void\n   *\/"
        },
        "getUser": {
            "name": "getUser",
            "summary": "Gets the user ID that is being used to fill the user_id field",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getUser(): ?string\n  {\n    return self::$user;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 303,
            "endLine": 306,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getUser",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets the user ID that is being used to fill the user_id field\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the user ID that is being used to fill the user_id field\n   * @return null|string\n   *\/"
        },
        "getAllHistory": {
            "name": "getAllHistory",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getAllHistory(string $table, int $start = 0, int $limit = 20, string|null $dir = null): array\n  {\n    if (\n      ($db = self::_get_db()) &&\n      ($dbc = self::_get_database()) &&\n      ($id_table = $dbc->tableId($table, self::$db->getCurrent()))\n    ) {\n      $order = $dir && (Str::changeCase($dir, 'lower') === 'asc') ? 'ASC' : 'DESC';\n      return $db->getColumnValues([\n        'table' => self::$table_uids,\n        'fields' => ['bbn_uid'],\n        'join' => [\n          [\n            'table' => self::$table,\n            'on' => [\n              'conditions' => [[\n                'field' => 'bbn_uid',\n                'exp' => 'uid'\n              ]]\n            ]\n          ]\n        ],\n        'where' => ['bbn_table' => $id_table],\n        'order' => [[\n          'field' => 'tst',\n          'dir' => $order\n        ]],\n        'start' => $start,\n        'limit' => $limit\n      ]);\n    }\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 315,
            "endLine": 347,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getAllHistory",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 20,
                    "default_name": ""
                },
                {
                    "name": "dir",
                    "position": 3,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$dir"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param int $start\n   * @param int $limit\n   * @param string|null $dir\n   * @return array\n   *\/"
        },
        "getLastModifiedLines": {
            "name": "getLastModifiedLines",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getLastModifiedLines(string $table, int $start = 0, int $limit = 20): array\n  {\n    $r = [];\n    if (\n      ($db = self::_get_db()) &&\n      ($dbc = self::_get_database()) &&\n      ($id_table = $dbc->tableId($table, self::$db->getCurrent()))\n    ) {\n      $tab = $db->escape(self::$table);\n      $tab_uids = $db->escape(self::$table_uids);\n      $uid = $db->cfn('bbn_uid', self::$table_uids, true);\n      $active = $db->cfn(self::$column, self::$table_uids, true);\n      $id_tab = $db->cfn('bbn_table', self::$table_uids, true);\n      $line = $db->cfn('uid', self::$table, true);\n      $chrono = $db->escape('tst');\n      $sql = <<< MYSQL\nSELECT DISTINCT($line)\nFROM $tab_uids\n  JOIN $tab\n    ON $uid = $line\nWHERE $id_tab = ? \nAND $active = 1\nORDER BY $chrono\nLIMIT $start, $limit\nMYSQL;\n      $r = $db->getColArray($sql, hex2bin($id_table));\n    }\n    return $r;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 355,
            "endLine": 383,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getLastModifiedLines",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 20,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $table\n   * @param int $start\n   * @param int $limit\n   * @return array\n   *\/"
        },
        "getNextUpdate": {
            "name": "getNextUpdate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getNextUpdate(string $table, string $id, string|float  $from_when, string|null $column = null)\n  {\n    \/** @todo To be redo totally with all the fields' IDs instead of the history column *\/\n    if (\n      Str::checkName($table) &&\n      ($date = self::validDate($from_when)) &&\n      ($db = self::_get_db()) &&\n      ($dbc = self::_get_database()) &&\n      ($id_table = $dbc->tableId($table))\n    ) {\n      $isDisabled = !self::$enabled;\n      if (!$isDisabled) {\n        self::disable();\n      }\n\n      $tab = $db->escape(self::$table);\n      $tab_uids = $db->escape(self::$table_uids);\n      $uid = $db->cfn('bbn_uid', self::$table_uids);\n      $id_tab = $db->cfn('bbn_table', self::$table_uids);\n      $id_col = $db->cfn('col', self::$table);\n      $line = $db->cfn('uid', self::$table);\n      $usr = $db->cfn('usr', self::$table);\n      $chrono = $db->cfn('tst', self::$table);\n      $where = [\n        'logic' => 'AND',\n        'conditions' => [\n          [\n            'field' => $uid,\n            'operator' => '=',\n            'value' => $line\n          ],\n          [\n            'field' => $id_tab,\n            'operator' => '=',\n            'value' => $id_table\n          ],\n          [\n            'field' => $chrono,\n            'operator' => '>',\n            'value' => $date\n          ]\n        ]\n      ];\n\n      if ($column) {\n        $where['conditions'][] = [\n          'field' => $id_col,\n          'value' => Str::isUid($column) ? $column : $dbc->columnId($column, $id_table)\n        ];\n      } else if ($w = self::_getTableWhere($table)) {\n        $where['conditions'][] = $w;\n      }\n\n      $res = $db->rselect([\n        'tables' => [$tab_uids],\n        'fields' => [\n          $line,\n          $id_col,\n          $chrono,\n          'val' => 'IFNULL(val, ref)',\n          $usr\n        ],\n        'join' => [\n          [\n            'table' => $tab,\n            'on' => [\n              'logic' => 'AND',\n              'conditions' => [[\n                'field' => $uid,\n                'operator' => '=',\n                'exp' => $line\n              ]]\n            ]\n          ]\n        ],\n        'where' => $where,\n        'order' => [$chrono => 'ASC']\n      ]);\n\n      if (!$isDisabled) {\n        self::enable();\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 392,
            "endLine": 479,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "getNextUpdate",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "from_when",
                    "position": 2,
                    "type": "string|float",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "when"
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string|float",
                        "name": "$from",
                        "description": "when"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$column"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $id\n   * @param string|float  $from_when\n   * @param string|null $column\n   * @return null|array\n   *\/"
        },
        "getPrevUpdate": {
            "name": "getPrevUpdate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getPrevUpdate(string $table, string $id, string|float $from_when, string|null $column = null): ?array\n  {\n    if (\n      Str::checkName($table) &&\n      ($date = self::validDate($from_when)) &&\n      ($dbc = self::_get_database()) &&\n      ($db = self::_get_db())\n    ) {\n      if ($column) {\n        $where = [\n          'conditions' => [\n            [\n              'field' => 'col',\n              'value' => Str::isUid($column) ? $column : $dbc->columnId($column, $table)\n            ]\n          ]\n        ];\n      } else if ($w = self::_getTableWhere($table)) {\n        $where = $w;\n      }\n\n      return $db->rselect(self::$table, [], [\n        'conditions' => [\n          [\n            'field' => 'uid',\n            'value' => $id\n          ],\n          $where,\n          [\n            'field' => 'opr',\n            'value' => 'UPDATE'\n          ],\n          [\n            'field' => 'tst',\n            'operator' => '<',\n            'value' => $date\n          ]\n        ]\n      ]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 488,
            "endLine": 530,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "getPrevUpdate",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "from_when",
                    "position": 2,
                    "type": "string|float",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "when"
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string|float",
                        "name": "$from",
                        "description": "when"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$column"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $id\n   * @param string|float $from_when\n   * @param string|null $column\n   * @return null|array\n   *\/"
        },
        "getNextValue": {
            "name": "getNextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getNextValue(string $table, string $id, string|float $from_when, $column)\n  {\n    if ($r = self::getNextUpdate($table, $id, $from_when, $column)) {\n      return $r['ref'] ?: $r['val'];\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 539,
            "endLine": 545,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "shortName": "getNextValue",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "when"
                },
                {
                    "name": "from_when",
                    "position": 2,
                    "type": "string|float",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string|float",
                        "name": "$from",
                        "description": "when"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "$column"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string|float $from_when\n   * @param string $id\n   * @param $column\n   * @return bool|mixed\n   *\/"
        },
        "getPrevValue": {
            "name": "getPrevValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getPrevValue(string $table, string $id, string|float $from_when, $column)\n  {\n    if ($r = self::getPrevUpdate($table, $id, $from_when, $column)) {\n      return $r['ref'] ?: $r['val'];\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 554,
            "endLine": 560,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "shortName": "getPrevValue",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "from_when",
                    "position": 2,
                    "type": "string|float",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "when"
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string|float",
                        "name": "$from",
                        "description": "when"
                    },
                    {
                        "tag": "param",
                        "type": "$column"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $id\n   * @param string|float $from_when\n   * @param $column\n   * @return bool|mixed\n   *\/"
        },
        "getRowBack": {
            "name": "getRowBack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getRowBack(string $table, string $id, string|float $when, array $columns = []): ?array\n  {\n    if (!($when = self::validDate($when))) {\n      self::_report_error(\"The date $when is incorrect\", __CLASS__, __LINE__);\n    } else if (\n      ($db = self::_get_db()) &&\n      ($cfg = self::getTableCfg($table))\n    ) {\n      \/\/ Time is after last modification: the current is given\n      $isDisabled = !self::$enabled;\n      if (!$isDisabled) {\n        self::disable();\n      }\n\n      if ($when >= time()) {\n        $r = $db->rselect($table, $columns, [\n          $cfg['primary'] => $id\n        ]) ?: null;\n      }\n      \/\/ Time is before creation: null is given\n      else if ($when < self::getCreationDate($table, $id)) {\n        $r = null;\n      } else {\n        \/\/ No columns = All columns\n        if (\\count($columns) === 0) {\n          $columns = array_keys($cfg['fields']);\n        }\n        $r = [];\n        \/\/die(var_dump($columns, $model['fields']));\n        foreach ($columns as $col) {\n          $tmp = null;\n          if (isset($cfg['fields'][$col]['id_option'])) {\n            if ($tmp = $db->rselect(self::$table, ['val', 'ref'], [\n              'uid' => $id,\n              'col' => $cfg['fields'][$col]['id_option'],\n              'opr' => 'UPDATE',\n              ['tst', '>', $when],\n              ['tst' => 'ASC']\n            ])) {\n              $r[$col] = $tmp['ref'] ?: $tmp['val'];\n            }\n          }\n\n          if (!$tmp) {\n            $r[$col] = $db->selectOne($table, $col, [\n              $cfg['primary'] => $id\n            ]);\n          }\n        }\n      }\n\n      if (!$isDisabled) {\n        self::enable();\n      }\n\n      return $r;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 569,
            "endLine": 628,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "getRowBack",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "when",
                    "position": 2,
                    "type": "string|float",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "columns",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string|float",
                        "name": "$when"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$columns"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $id\n   * @param string|float $when\n   * @param array $columns\n   * @return array|null\n   *\/"
        },
        "getValBack": {
            "name": "getValBack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getValBack(string $table, string $id, string|float $when, string $column)\n  {\n    if ($row = self::getRowBack($table, $id, $when, [$column])) {\n      return $row[$column];\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 637,
            "endLine": 643,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "shortName": "getValBack",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "when",
                    "position": 2,
                    "type": "string|float",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string|float",
                        "name": "$when"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$column"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $id\n   * @param string|float $when\n   * @param string $column\n   * @return bool|mixed\n   *\/"
        },
        "getCreationDate": {
            "name": "getCreationDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getCreationDate(string $table, string $id): ?float\n  {\n    if ($res = self::getCreation($table, $id)) {\n      return $res['date'];\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 645,
            "endLine": 651,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getCreationDate",
            "returns": [
                null,
                "float"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCreation": {
            "name": "getCreation",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getCreation(string $table, string $id): ?array\n  {\n    $r = null;\n    if (\n      ($db = self::_get_db()) &&\n      ($cfg = self::getTableCfg($table)) &&\n      ($id_col = self::getIdColumn($cfg['primary'], $table))\n    ) {\n      $isDisabled = !self::$enabled;\n      if (!$isDisabled) {\n        self::disable();\n      }\n\n      $r = $db->rselect(self::$table, ['date' => 'tst', 'user' => 'usr'], [\n        'uid' => $id,\n        'col' => $id_col,\n        'opr' => 'INSERT'\n      ], [\n        'tst' => 'DESC'\n      ]);\n\n      if (!$isDisabled) {\n        self::enable();\n      }\n    }\n\n    return $r;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 658,
            "endLine": 685,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getCreation",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $table\n   * @param $id\n   * @return array|null\n   *\/"
        },
        "getLastDate": {
            "name": "getLastDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getLastDate(string $table, string $id, $column = null): ?float\n  {\n    if ($db = self::_get_db()) {\n      if (\n        $column &&\n        ($id_col = self::getIdColumn($column, $table))\n      ) {\n        return self::$db->selectOne(self::$table, 'tst', [\n          'uid' => $id,\n          'col' => $id_col\n        ], [\n          'tst' => 'DESC'\n        ]);\n      } elseif (!$column && ($where = self::_getTableWhere($table))) {\n        return $db->selectOne(self::$table, 'tst', [\n          'conditions' => [\n            [\n              'field' => 'uid',\n              'value' => $id\n            ],\n            $where\n          ]\n        ], [\n          'tst' => 'DESC'\n        ]);\n      }\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 693,
            "endLine": 721,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "getLastDate",
            "returns": [
                null,
                "float"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "null",
                        "name": "$column"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $id\n   * @param null $column\n   * @return float|null\n   *\/"
        },
        "getHistory": {
            "name": "getHistory",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getHistory(string $table, string $id, string $col = '', string $since = ''): ?array\n  {\n    if (\n      self::check() &&\n      self::isLinked($table) &&\n      ($modelize = self::getTableCfg($table))\n    ) {\n      $pat = [\n        'ins' => 'INSERT',\n        'upd' => 'UPDATE',\n        'res' => 'RESTORE',\n        'del' => 'DELETE'\n      ];\n      $r = [];\n      $fields = [\n        'date' => 'tst',\n        'user' => 'usr',\n        'dt',\n        'col'\n      ];\n      $where = [\n        'uid' => $id\n      ];\n\n      if (!empty($since)) {\n        if (!Str::isNumber($since)) {\n          $since = strtotime($since);\n        }\n\n        $where[] = ['tst', '>=', $since];\n      }\n\n      if (!empty($col)) {\n        if (!Str::isUid($col)) {\n          $fields[] = $modelize['fields'][$col]['type'] === 'binary' ? 'ref' : 'val';\n          $col = self::$database_obj->columnId($col, $table);\n        } else {\n          $idx = X::search($modelize['fields'], ['id_option' => strtolower($col)]);\n          if (null === $idx) {\n            throw new Exception(\"Impossible to find the option $col\");\n          }\n\n          $fields['old'] = $modelize['fields'][$idx]['type'] === 'binary' ? 'ref' : 'val';\n        }\n\n        $where['col'] = $col;\n      } else {\n        $fields['old'] = 'IFNULL(' . self::$table . '.ref, ' . self::$table . '.val)';\n      }\n\n      foreach ($pat as $k => $p) {\n        $where['opr'] = $p;\n        if ($all = self::$db->rselectAll([\n          'table' => self::$table,\n          'fields' => $fields,\n          'where' => $where,\n          'order' => [[\n            'field' => 'tst',\n            'dir' => 'desc'\n          ]]\n        ])) {\n          if ($p === 'UPDATE') {\n            foreach ($all as &$a) {\n              $colname = X::search($modelize['fields'], ['id_option' => $a['col']]);\n              $a['field'] = $colname;\n              $a['new'] = self::getValBack($table, $id, $a['date'], $colname);\n            }\n          }\n\n          $r[$k] = $all;\n        }\n      }\n\n      return $r;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 730,
            "endLine": 807,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "getHistory",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "col",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "since",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$col"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$since"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $id\n   * @param string $col\n   * @param string $since\n   * @return array\n   *\/"
        },
        "getFullHistory": {
            "name": "getFullHistory",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getFullHistory(string $table, string $id, string|null $column = null): array\n  {\n    $res = [];\n    if ($db = self::_get_db()) {\n      $cfg = self::getTableCfg($table);\n      $fields = [];\n      foreach ($cfg['fields'] as $name => $f) {\n        $fields[$f['id_option']] = $name;\n      }\n\n      $where = ['uid' => $id];\n      if ($column) {\n        $where['col'] = self::$database_obj->columnId($column, $table);\n      }\n\n      $origin = $db->rselect($table, [], [$cfg['primary'] => $id]);\n      $all = $db->rselectAll(self::$table, [], $where, ['tst' => 'ASC']);\n      while (count($all)) {\n        $row = array_shift($all);\n        $ele = [\n          'column' => $fields[$row['col']],\n          'id_column' => $row['col'],\n          'date' => $row['tst'],\n          'user' => $row['usr'],\n          'value' => $row['ref'] ?: $row['val'],\n          'operation' => $row['opr'],\n        ];\n        if ($row['opr'] === 'UPDATE') {\n          $ele['old'] = $ele['value'];\n          $next = X::getRow($all, ['col' => $row['col']]);\n          $ele['new'] = $next ? ($next['ref'] ?: $next['val']) : $origin[$ele['column']];\n        }\n\n        $res[] = $ele;\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 814,
            "endLine": 852,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "getFullHistory",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $id\n   * @return array\n   *\/"
        },
        "getColumnHistory": {
            "name": "getColumnHistory",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getColumnHistory(string $table, string $id, string $column)\n  {\n    return self::getFullHistory($table, $id, $column);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 854,
            "endLine": 857,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "getColumnHistory",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTableCfg": {
            "name": "getTableCfg",
            "summary": "Gets all information about a given table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getTableCfg(string $table, bool $force = false): ?array\n  {\n    \/\/ Check history is enabled and table's name correct\n    if (\n      ($db = self::_get_db()) &&\n      ($dbc = self::_get_database()) &&\n      ($table = $db->tfn($table))\n    ) {\n      if ($force || !isset(self::$structures[$table])) {\n        if (!$force && ($data = self::getCache($table))) {\n          self::$structures[$table] = $data;\n          if (!empty(self::$structures[$table]['history'])) {\n            return self::$structures[$table];\n          }\n\n          return null;\n        }\n\n        if ($model = $dbc->modelize($table)) {\n          [$dbName, $tableName] = X::split($table, '.');\n          self::$structures[$table] = [\n            'history' => false,\n            'primary' => false,\n            'primary_type' => null,\n            'primary_length' => 0,\n            'auto_increment' => false,\n            'id' => null,\n            'unique' => [],\n            'fields' => []\n          ];\n          if (\n            self::isLinked($table) &&\n            isset($model['keys']['PRIMARY']) &&\n            (\\count($model['keys']['PRIMARY']['columns']) === 1) &&\n            ($primary = $model['keys']['PRIMARY']['columns'][0]) &&\n            !empty($model['fields'][$primary])\n          ) {\n            \/\/ Looking for the config of the table\n            self::$structures[$table]['history'] = 1;\n            self::$structures[$table]['primary'] = $primary;\n            self::$structures[$table]['primary_type'] = $model['fields'][$primary]['type'];\n            self::$structures[$table]['primary_length'] = $model['fields'][$primary]['maxlength'];\n            self::$structures[$table]['auto_increment'] = isset($model['fields'][$primary]['extra']) && ($model['fields'][$primary]['extra'] === 'auto_increment');\n            self::$structures[$table]['id'] = $dbc->tableId($db->tsn($table), $db->getCurrent());\n            $refs = $db->findReferences(\"$tableName.$primary\");\n            self::$structures[$table]['refs'] = array_map(fn($a) => [\n              'db' => X::split($a, '.')[0],\n              'table' => X::split($a, '.')[1],\n              'col' => X::split($a, '.')[2]\n            ], $refs);\n            foreach (self::$structures[$table]['refs'] as &$r) {\n              $refCfg = $db->modelize($r['table']);\n              $r['nullable'] = $refCfg['fields'][$r['col']]['null'] ?? false;\n              $keys = $refCfg['cols'][$r['col']];\n              foreach ($keys as $k) {\n                if ((count($refCfg['keys'][$k]['columns']) === 1) && $refCfg['keys'][$k]['constraint']) {\n                  $r['constraint'] = $refCfg['keys'][$k]['constraint'];\n                  $r['delete'] = $refCfg['keys'][$k]['delete'] ?? null;\n                  $r['update'] = $refCfg['keys'][$k]['update'] ?? null;\n                  break;\n                }\n              }\n            }\n      \n            foreach ($model['keys'] as $key) {\n              if (!empty($key['unique'])) {\n                foreach ($key['columns'] as $col) {\n                  if (($col !== $primary)\n                    && !in_array($col, self::$structures[$table]['unique'], true)\n                    && !empty($model['fields'][$col]['null'])\n                  ) {\n                    array_push(self::$structures[$table]['unique'], $col);\n                  }\n                }\n              }\n            }\n\n            self::$structures[$table]['fields'] = array_filter($model['fields'], function ($a) {\n              return isset($a['id_option']);\n            });\n          }\n\n          self::setCache($table, self::$structures[$table]);\n        }\n      }\n      \/\/ The table exists and has history\n      if (isset(self::$structures[$table]) && !empty(self::$structures[$table]['history'])) {\n        return self::$structures[$table];\n      }\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 866,
            "endLine": 957,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getTableCfg",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets all information about a given table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force"
                    }
                ],
                "return": "Table's full name"
            },
            "comments": "  \/**\n   * Gets all information about a given table\n   * @param string $table\n   * @param bool $force\n   * @return null|array Table's full name\n   *\/"
        },
        "getDbCfg": {
            "name": "getDbCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getDbCfg(string|null $db = null, bool $force = false): ?array\n  {\n    if ($db = self::_get_db()) {\n      $res = [];\n      $tables = $db->getTables($db);\n      if ($tables && count($tables)) {\n        foreach ($tables as $t) {\n          if ($tmp = self::getTableCfg($t, $force)) {\n            $res[$t] = $tmp;\n          }\n        }\n      }\n      return $res;\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 959,
            "endLine": 974,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getDbCfg",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "isLinked": {
            "name": "isLinked",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isLinked(string $table): bool\n  {\n    return ($db = self::_get_db()) &&\n      ($ftable = $db->tfn($table)) &&\n      isset(self::$links[$ftable]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 976,
            "endLine": 981,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isLinked",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLinks": {
            "name": "getLinks",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getLinks()\n  {\n    return self::$links;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 983,
            "endLine": 986,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLinks",
            "returns": [],
            "arguments": []
        },
        "fusion": {
            "name": "fusion",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function fusion(array $ids, string $table, Db $db, $main = null): bool\n  {\n    if (!self::check()) {\n      return false;\n    }\n\n    if ($main && !in_array($main, $ids, true)) {\n      $ids[] = $main;\n    }\n\n    $oldest = null;\n    $oldestId = null;\n    foreach ($ids as $a) {\n      $tmp = History::getCreationDate($table, $a);\n      if (!$oldest || ($tmp < $oldest)) {\n        $oldest = $tmp;\n        $oldestId = $a;\n      }\n    }\n\n    if (!$main) {\n      $main = $oldestId;\n    }\n\n    if (!$main) {\n      throw new Exception(X::_(\"Impossible to find the main record\"));\n    }\n\n    $idx = array_search($main, $ids);\n    if ($idx !== false) {\n      array_splice($ids, $idx, 1);\n    }\n\n    array_unshift($ids, $main);\n\n    $tables = $db->rselectAll(\n      self::$table_uids,\n      'bbn_table',\n      ['bbn_uid' => $ids]\n    );\n\n    $unique = array_unique(array_map(function ($a) {\n      return $a['bbn_table'];\n    }, $tables));\n\n    if (count($unique) > 1) {\n      X::log($unique);\n      throw new Exception(X::_(\"The fusion you wanna do seems to go on different tables\"));\n    }\n\n    if (count($tables) !== count($ids)) {\n      throw new Exception(X::_(\"They are not all in the history table\"));\n    }\n\n    $source = array_shift($ids);\n\n    $isActive = $db->selectOne(\n      self::$table_uids,\n      'bbn_active',\n      [\n        'bbn_uid' => $source\n      ]\n    );\n\n    if (!$isActive) {\n      throw new Exception(X::_(\"Main record is deleted\"));\n    }\n\n    $db->update(\n      self::$table,\n      ['tst' => $oldest],\n      [\n        'uid' => $ids,\n        'opr' => 'INSERT'\n      ]\n\n    );\n\n    $model = $db->modelize($table);\n    $primary = $model['keys']['PRIMARY']['columns'][0];\n    $refs = $db->findReferences($db->cfn($primary, $table));\n    $relations = [];\n    foreach ($refs as $ref) {\n      [$d, $t, $c] = X::split($ref, '.');\n      $relations[] = [\n        'table' => $t,\n        'column' => $c\n      ];\n    }\n\n    $isDisabled = !self::$enabled;\n    if (!$isDisabled) {\n      self::disable();\n    }\n\n    if ($isTriggerEnabled = $db->isTriggerEnabled()) {\n      $db->disableTrigger();\n    }\n\n    $num = 0;\n    foreach ($ids as $id) {\n      foreach ($relations as $ref) {\n        $num += (int)$db->update(\n          $ref['table'],\n          [$ref['column'] => $source],\n          [$ref['column'] => $id]\n        );\n      }\n\n      $num += (int)$db->update(\n        self::$table,\n        ['uid' => $source],\n        [\n          'uid' => $id,\n          'opr' => ['UPDATE', 'RESTORE', 'DELETE']\n        ]\n      );\n      $num += (int)$db->delete(\n        self::$table_uids,\n        ['bbn_uid' => $id]\n      );\n    }\n\n    if ($isTriggerEnabled) {\n      $db->enableTrigger();\n    }\n\n    if (!$isDisabled) {\n      self::enable();\n    }\n\n    return (bool)$num;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 989,
            "endLine": 1121,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "fusion",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "ids",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "main",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "trigger": {
            "name": "trigger",
            "summary": "The function used by the db trigger",
            "description": "This will basically execute the history query if it's configured for.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "This will basically execute the history query if it's configured for."
                }
            ],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function trigger(array $cfg): array\n  {\n    if (!self::isEnabled() || !($db = self::_get_db())) {\n      return $cfg;\n    }\n    $tables = $cfg['tables'] ?? (array)$cfg['table'];\n    \/\/ Will return false if disabled, the table doesn't exist, or doesn't have history\n    if (\n      ($cfg['kind'] === 'SELECT') &&\n      ($cfg['moment'] === 'before') &&\n      !empty($cfg['tables']) &&\n      !in_array($db->tfn(self::$table), $cfg['tables_full'], true) &&\n      !in_array($db->tfn(self::$table_uids), $cfg['tables_full'], true)\n    ) {\n      $change = 0;\n      if (!isset($cfg['history'])) {\n        $cfg['history'] = [];\n        $new_join = [];\n        foreach ($cfg['join'] as $t) {\n          $model = $db->modelize($t['table']);\n          if (\n            isset($model['keys']['PRIMARY']) &&\n            ($model['keys']['PRIMARY']['ref_table'] === $db->tsn(self::$table_uids))\n          ) {\n            $change++;\n            if (!isset($t['join'])) {\n              $t['join'] = [];\n            }\n            $t['join'][] = [\n              'table' => self::$table_uids,\n              'alias' => $db->tsn(self::$table_uids) . $change,\n              'on' => [\n                'conditions' => [\n                  [\n                    'field' => $db->cfn('bbn_uid', self::$table_uids . $change),\n                    'operator' => 'eq',\n                    'exp' => $db->cfn($model['keys']['PRIMARY']['columns'][0], $t['alias'] ?? $t['table'], true)\n                  ],\n                  [\n                    'field' => $db->cfn('bbn_active', self::$table_uids . $change),\n                    'operator' => '=',\n                    'exp' => '1'\n                  ]\n                ],\n                'logic' => 'AND'\n              ]\n            ];\n          }\n\n          if (!empty($t['join'])) {\n            foreach ($t['join'] as $j) {\n              if ($j['table'] !== self::$table_uids) {\n                $model = $db->modelize($j['table']);\n                if (\n                  isset($model['keys']['PRIMARY']) &&\n                  ($model['keys']['PRIMARY']['ref_table'] === $db->csn(self::$table_uids))\n                ) {\n                  $change++;\n                  $t['join'][] = [\n                    'table' => self::$table_uids,\n                    'alias' => $db->tsn(self::$table_uids) . $change,\n                    'on' => [\n                      'conditions' => [\n                        [\n                          'field' => $db->cfn('bbn_uid', self::$table_uids . $change),\n                          'operator' => 'eq',\n                          'exp' => $db->cfn($model['keys']['PRIMARY']['columns'][0], $t['alias'] ?? $t['table'], true)\n                        ],\n                        [\n                          'field' => $db->cfn('bbn_active', self::$table_uids . $change),\n                          'operator' => '=',\n                          'exp' => '1'\n                        ]\n                      ],\n                      'logic' => 'AND'\n                    ]\n                  ];\n                }\n              }\n            }\n          }\n\n          $new_join[] = $t;\n        }\n\n        foreach ($cfg['tables'] as $alias => $table) {\n          $model = $db->modelize($table);\n          if (\n            isset($model['keys']['PRIMARY']['ref_table']) &&\n            ($db->tfn($model['keys']['PRIMARY']['ref_db'] . '.' . $model['keys']['PRIMARY']['ref_table']) === self::$table_uids)\n          ) {\n            $change++;\n            $new_join[] = [\n              'table' => self::$table_uids,\n              'alias' => $db->tsn(self::$table_uids) . $change,\n              'on' => [\n                'conditions' => [\n                  [\n                    'field' => $db->cfn(self::$table_uids . $change . '.bbn_uid'),\n                    'operator' => 'eq',\n                    'exp' => $db->cfn($model['keys']['PRIMARY']['columns'][0], \\is_string($alias) ? $alias : $table, true)\n                  ],\n                  [\n                    'field' => $db->cfn(self::$table_uids . $change . '.bbn_active'),\n                    'operator' => '=',\n                    'exp' => '1'\n                  ]\n                ],\n                'logic' => 'AND'\n              ]\n            ];\n          }\n        }\n        if ($change) {\n          $cfg['join'] = $new_join;\n          $cfg['where'] = $cfg['filters'];\n          $cfg = $db->reprocessCfg($cfg);\n        }\n      }\n    }\n\n    if (\n      $cfg['write'] &&\n      ($table = $db->tfn(current($tables))) &&\n      ($s = self::getTableCfg($table))\n    ) {\n      \/\/ This happens before the query is executed\n      if ($cfg['moment'] === 'before') {\n\n        $primary_where = false;\n        $primary_defined = false;\n        $primary_value = false;\n        $idx1 = X::search($cfg['values_desc'], ['primary' => true]);\n        if ($idx1 !== null) {\n          $primary_where = $cfg['values'][$idx1];\n        }\n        $idx = array_search($s['primary'], $cfg['fields'], true);\n        if (($idx !== false) && isset($cfg['values'][$idx])) {\n          $primary_defined = $cfg['generate_id'] ? false : true;\n          $primary_value = $cfg['values'][$idx];\n        }\n\n        switch ($cfg['kind']) {\n\n          case 'INSERT':\n            \/\/ If the primary is specified and already exists in a row in deleted state\n            \/\/ (if it exists in active state, DB will return its standard error but it's not this class' problem)\n            if (!$primary_defined) {\n              \/\/ Checks if there is a unique value (non based on UID)\n              $modelize = $db->modelize($table);\n              $keys = $modelize['keys'];\n              unset($keys['PRIMARY']);\n              foreach ($keys as $key) {\n                if (!empty($key['unique']) && !empty($key['columns'])) {\n                  $fields = [];\n                  $exit = false;\n                  foreach ($key['columns'] as $col) {\n                    $col_idx = array_search($col, $cfg['fields'], true);\n                    if (($col_idx === false) || \\is_null($cfg['values'][$col_idx])) {\n                      $exit = true;\n                      break;\n                    } else {\n                      $fields[] = [\n                        'field' => $col,\n                        'operator' => 'eq',\n                        'value' => $cfg['values'][$col_idx]\n                      ];\n                    }\n                  }\n                  if ($exit) {\n                    continue;\n                  }\n\n                  $isDisabled = !self::$enabled;\n                  if (!$isDisabled) {\n                    self::disable();\n                  }\n\n                  if ($tmp = $db->selectOne([\n                    'tables' => [$table],\n                    'fields' => [$s['primary']],\n                    'join' => [[\n                      'table' => self::$table_uids,\n                      'on' => [[\n                        'field' => $db->cfn('bbn_uid', self::$table_uids),\n                        'operator' => 'eq',\n                        'exp' => $db->cfn($s['primary'], $table, true)\n                      ]]\n                    ]],\n                    'where' => [\n                      'conditions' => $fields,\n                      'logic' => 'AND'\n                    ]\n                  ])) {\n                    $primary_value = $tmp;\n                    $primary_defined = true;\n                    if (!$isDisabled) {\n                      self::enable();\n                    }\n\n                    break;\n                  }\n\n                  if (!$isDisabled) {\n                    self::enable();\n                  }\n                }\n              }\n            }\n            if (\n              $primary_defined &&\n              ($db->selectOne(self::$table_uids, self::$column, ['bbn_uid' => $primary_value]) === 0) &&\n              \/\/($all = self::$db->rselect($table, [], [$s['primary'] => $primary_value]))\n              ($all = self::$db->rselect([\n                'table' => $table,\n                'fields' => $cfg['fields'],\n                'join' => [[\n                  'table' => self::$table_uids,\n                  'on' => [\n                    'conditions' => [[\n                      'field' => $s['primary'],\n                      'exp' => 'bbn_uid'\n                    ], [\n                      'field' => self::$column,\n                      'value' => 0\n                    ]]\n                  ]\n                ]],\n                'where' => [\n                  'conditions' => [[\n                    'field' => $s['primary'],\n                    'value' => $primary_value\n                  ]]\n                ]\n              ]))\n            ) {\n              \/\/ We won't execute the after trigger\n              $cfg['trig'] = false;\n              \/\/ Real query's execution will be prevented\n              $cfg['run'] = false;\n              $cfg['value'] = 0;\n              \/** @var array $update The values to be updated *\/\n              $update = [];\n              \/\/ We update each element which needs to (the new ones different from the old, and the old ones different from the default)\n              foreach ($all as $k => $v) {\n                if ($k !== $s['primary']) {\n                  $idx = array_search($k, $cfg['fields'], true);\n                  if ($idx !== false) {\n                    if ($v !== $cfg['values'][$idx]) {\n                      $update[$k] = $cfg['values'][$idx];\n                    }\n                  } else if ($v !== $s['fields'][$k]['default']) {\n                    $update[$k] = $s['fields'][$k]['default'];\n                  }\n                }\n              }\n\n              if ($cfg['value'] = self::$db->update(self::$table_uids, ['bbn_active' => 1], [\n                ['bbn_uid', '=', $primary_value]\n              ])) {\n                \/\/ Without this the record won't be write in bbn_history. Added by Mirko \n                $cfg['trig'] = true;\n                \/\/ --------\n                if (\\count($update) > 0) {\n                  self::enable();\n                  self::$db->update($table, $update, [\n                    $s['primary'] => $primary_value\n                  ]);\n                }\n                $cfg['history'][] = [\n                  'operation' => 'RESTORE',\n                  'column' => $s['fields'][$s['primary']]['id_option'],\n                  'line' => $primary_value\n                ];\n                self::$db->setLastInsertId($primary_value);\n              }\n\n              if (!$isDisabled) {\n                self::enable();\n              }\n            } else {\n              $isDisabled = !self::$enabled;\n              if (!$isDisabled) {\n                self::disable();\n              }\n\n              if ($primary_defined && !self::$db->count($table, [$s['primary'] => $primary_value])) {\n                $primary_defined = false;\n              }\n              if (!$primary_defined && self::$db->insertIgnore(self::$table_uids, [\n                'bbn_uid' => $primary_value,\n                'bbn_table' => $s['id']\n              ])) {\n                $cfg['history'][] = [\n                  'operation' => 'INSERT',\n                  'column' => isset($s['fields'][$s['primary']]) ? $s['fields'][$s['primary']]['id_option'] : null,\n                  'line' => $primary_value\n                ];\n                self::$db->setLastInsertId($primary_value);\n              }\n\n              if (!$isDisabled) {\n                self::enable();\n              }\n            }\n            break;\n          case 'UPDATE':\n\n            \/\/ ********** CHANGED BY MIRKO *************\n\n            \/*if ( $primary_defined ){\n              $where = [$s['primary'] => $primary_value];\n              \/\/ If the only update regards the history field\n              $row = self::$db->rselect($table, array_keys($cfg['fields']), $where);\n              $time = microtime(true);\n              foreach ( $cfg['values'] as $k => $v ){\n                if (\n                  ($row[$k] !== $v) &&\n                  isset($s['fields'][$k])\n                ){\n                  $cfg['history'][] = [\n                    'operation' => 'UPDATE',\n                    'column' => $s['fields'][$k]['id_option'],\n                    'line' => $primary_value,\n                    'old' => $row[$k],\n                    'chrono' => $time\n                  ];\n                }\n              }\n            }*\/\n            if (\n              $primary_where &&\n              ($row = self::$db->rselect($table, $cfg['fields'], [$s['primary'] => $primary_where]))\n            ) {\n              foreach ($cfg['fields'] as $i => $idx) {\n                $csn = self::$db->csn($idx);\n                if (\n                  array_key_exists($csn, $s['fields']) &&\n                  ($row[$csn] !== $cfg['values'][$i])\n                ) {\n                  $cfg['history'][] = [\n                    'operation' => 'UPDATE',\n                    'column' => $s['fields'][$csn]['id_option'],\n                    'line' => $primary_where,\n                    'old' => $row[$csn]\n                  ];\n                }\n              }\n            }\n            \/\/ Case where the primary is not defined, we'll update each primary instead\n            else if ($ids = self::$db->getColumnValues($table, $s['primary'], $cfg['filters'])) {\n              \/\/ We won't execute the after trigger\n              $cfg['trig'] = false;\n              \/\/ Real query's execution will be prevented\n              $cfg['run'] = false;\n              $cfg['value'] = 0;\n\n              $tmp = [];\n              foreach ($cfg['fields'] as $i => $f) {\n                $tmp[$f] = $cfg['values'][$i];\n              }\n              foreach ($ids as $id) {\n                $cfg['value'] += self::$db->update($table, $tmp, [$s['primary'] => $id]);\n              }\n\n              \/\/ ****************************************\n\n            }\n            break;\n\n            \/\/ Nothing is really deleted, the hcol is just set to 0\n          case 'DELETE':\n            \/\/ We won't execute the after trigger\n            $cfg['trig'] = false;\n            \/\/ Real query's execution will be prevented\n            $cfg['run'] = false;\n            $cfg['value'] = 0;\n            \/\/ Case where the primary is not defined, we'll delete based on each primary instead\n            if (!$primary_where) {\n              $ids = self::$db->getColumnValues($table, $s['primary'], $cfg['filters']);\n              foreach ($ids as $id) {\n                $cfg['value'] += self::$db->delete($table, [$s['primary'] => $id]);\n              }\n            }\n            else {\n              $isDisabled = !self::$enabled;\n              if (!$isDisabled) {\n                self::disable();\n              }\n\n              foreach ($s['unique'] as $un) {\n                $old = self::$db->selectOne($table, $un, [$s['primary'] => $primary_where]);\n                self::$db->update($table, [$un => null], [$s['primary'] => $primary_where]);\n                if (!isset($s['fields'][$un])) {\n                  X::log([$un, $s], '_toDoHistoryStructureError');\n                  continue;\n                }\n                $cfg['history'][] = [\n                  'operation' => 'UPDATE',\n                  'column' => $s['fields'][$un]['id_option'],\n                  'line' => $primary_where,\n                  'old' => $old\n                ];\n              }\n\n              self::enable();\n              foreach ($s['refs'] as $ref) {\n                if (!empty($ref['constraint']) && $db->count($ref['table'], [$ref['col'] => $primary_where])) {\n                  if ($ref['delete'] === 'RESTRICT') {\n                    if ($ref['table'] !== self::$db->tsn(self::$table)) {\n                      throw new Exception(X::_(\n                        \"Impossible to delete the record with primary %s from %s because it is referenced in the table %s\",\n                        $primary_where,\n                        $table,\n                        $ref['table']\n                      ));\n                    }\n                  }\n                  elseif ($ref['delete'] === 'SET NULL') {\n                    self::$db->update($ref['table'], [$ref['col'] => null], [$ref['col'] => $primary_where]);\n                  }\n                  elseif ($ref['delete'] === 'CASCADE') {\n                    self::$db->delete($ref['table'], [$ref['col'] => $primary_where]);\n                  }\n                  elseif ($ref['delete'] !== 'NO ACTION') {\n                    throw new Exception(X::_(\"Impossible to find what to do with the record referenced in the table %s\", $ref['table']));\n                  }\n                }\n              }\n              self::disable();\n\n              $cfg['value'] = self::$db->update(self::$table_uids, [\n                'bbn_active' => 0\n              ], [\n                'bbn_uid' => $primary_where\n              ]);\n              \/\/var_dump(\"HIST\", $primary_where);\n              if (!$isDisabled) {\n                self::enable();\n              }\n\n              if ($cfg['value']) {\n                $cfg['trig'] = 1;\n                \/\/ And we insert into the history table\n                $cfg['history'][] = [\n                  'operation' => 'DELETE',\n                  'column' => $s['fields'][$s['primary']]['id_option'],\n                  'line' => $primary_where,\n                  'old' => NULL\n                ];\n              }\n            }\n            break;\n        }\n      } else if (\n        ($cfg['moment'] === 'after') &&\n        isset($cfg['history'])\n      ) {\n        $time = microtime(true);\n        foreach ($cfg['history'] as $h) {\n          $h['chrono'] = $time;\n          self::_insert($h);\n        }\n        unset($cfg['history']);\n      }\n    }\n    return $cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1137,
            "endLine": 1604,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "trigger",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "The function used by the db trigger\nThis will basically execute the history query if it's configured for.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "The $cfg array, modified or not",
                "internal": {
                    "tag": "internal",
                    "text": "param array \"where\" key\/value array of fields names and fields values identifying the row"
                }
            },
            "comments": "  \/**\n   * The function used by the db trigger\n   * This will basically execute the history query if it's configured for.\n   *\n   * @param array $cfg\n   * @internal param string \"table\" The table for which the history is called\n   * @internal param string \"kind\" The type of action: select|update|insert|delete\n   * @internal param string \"moment\" The moment according to the db action: before|after\n   * @internal param array \"values\" key\/value array of fields names and fields values selected\/inserted\/updated\n   * @internal param array \"where\" key\/value array of fields names and fields values identifying the row\n   * @return array The $cfg array, modified or not\n   *\n   *\/"
        },
        "_get_db": {
            "name": "_get_db",
            "summary": "Returns the database connection object.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function _get_db(): ?Db\n  {\n    if (self::$db && self::$db->check()) {\n      return self::$db;\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1611,
            "endLine": 1617,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "_get_db",
            "returns": [
                null,
                "bbn\\Db"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the database connection object.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the database connection object.\n   *\n   * @return Db\n   *\/"
        },
        "_get_database": {
            "name": "_get_database",
            "summary": "Returns an instance of the Appui\\Database class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function _get_database(): ?Database\n  {\n    if (self::check()) {\n      if (!self::$database_obj && ($db = self::_get_db())) {\n        self::$database_obj = new Database($db);\n      }\n      return self::$database_obj;\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1624,
            "endLine": 1633,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "_get_database",
            "returns": [
                null,
                "bbn\\Appui\\Database"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns an instance of the Appui\\Database class.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an instance of the Appui\\Database class.\n   *\n   * @return Database\n   *\/"
        },
        "_insert": {
            "name": "_insert",
            "summary": "Adds a row in the history table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function _insert(array $cfg): int\n  {\n    if (\n      isset($cfg['column'], $cfg['line'], $cfg['chrono']) &&\n      self::check() &&\n      ($db = self::_get_db())\n    ) {\n      \/\/ Recording the last ID\n      $id = $db->lastId();\n      $db->disableLast();\n      $isDisabled = !self::$enabled;\n      if (!$isDisabled) {\n        self::disable();\n      }\n\n      if (!array_key_exists('old', $cfg)) {\n        $cfg['ref'] = null;\n        $cfg['val'] = null;\n      } else if (\n        Str::isUid($cfg['old']) &&\n        self::$db->count(self::$table_uids, ['bbn_uid' => $cfg['old']])\n      ) {\n        $cfg['ref'] = $cfg['old'];\n        $cfg['val'] = null;\n      } else {\n        $cfg['ref'] = null;\n        $cfg['val'] = $cfg['old'];\n      }\n\n      \/\/ New row in the history table\n      if ($res = $db->insert(self::$table, [\n        'opr' => $cfg['operation'],\n        'uid' => $cfg['line'],\n        'col' => $cfg['column'],\n        'val' => $cfg['val'],\n        'ref' => $cfg['ref'],\n        'tst' => self::$date ?: $cfg['chrono'],\n        'usr' => self::$user\n      ])) {\n        \/\/ Set back the original last ID\n        $db->setLastInsertId($id);\n      }\n\n      $db->enableLast();\n      if (!$isDisabled) {\n        self::enable();\n      }\n\n      return $res;\n    }\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1641,
            "endLine": 1692,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_insert",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds a row in the history table\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Adds a row in the history table\n   * \n   * @param array $cfg\n   * @return int\n   *\/"
        },
        "_getTableWhere": {
            "name": "_getTableWhere",
            "summary": "Get a string for the WHERE in the query with all the columns selection",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/History.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function _getTableWhere(string $table): ?array\n  {\n    if (\n      Str::checkName($table) &&\n      ($db = self::_get_db()) &&\n      ($database_obj = self::_get_database()) &&\n      ($model = $database_obj->modelize($table))\n    ) {\n      $where_ar = [\n        'logic' => 'OR',\n        'conditions' => []\n      ];\n      foreach ($model['fields'] as $k => $f) {\n        if (!empty($f['id_option'])) {\n          $where_ar['conditions'][] = [\n            'field' => 'col',\n            'operator' => '=',\n            'value' => $f['id_option']\n          ];\n        }\n      }\n\n      return $where_ar;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1699,
            "endLine": 1725,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_getTableWhere",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Get a string for the WHERE in the query with all the columns selection\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Get a string for the WHERE in the query with all the columns selection\n   * @param string $table\n   * @return string|null\n   *\/"
        },
        "_report_error": {
            "name": "_report_error",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Report.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function _report_error($error, $class, $line){\n    throw new \\Exception(bbn\\X::_($error));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Report",
            "startLine": 19,
            "endLine": 21,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "_report_error",
            "returns": [],
            "arguments": [
                {
                    "name": "error",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "class",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "line",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "db": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Appui\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var Db The DB connection",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "dbs": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Appui\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var array A collection of DB connections",
                "tags": []
            },
            "parent": false,
            "value": []
        },
        "structures": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Appui\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var array A collection of DB connections",
                "tags": []
            },
            "parent": false,
            "value": []
        },
        "database_obj": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Appui\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var Database The database class which collects the columns IDs",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "admin_db": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Appui\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string Name of the database where the history table is",
                "tags": []
            },
            "parent": false,
            "value": ""
        },
        "user": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Appui\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string User's ID",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "prefix": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Appui\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string Prefix of the history table",
                "tags": []
            },
            "parent": false,
            "value": "bbn_"
        },
        "date": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Appui\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var float The current date can be overwritten if this variable is set",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "ok": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Appui\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var boolean Set to true once the initial configuration has been checked",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "enabled": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Appui\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var boolean Setting it to false avoid execution of history triggers",
                "tags": []
            },
            "parent": false,
            "value": true
        },
        "links": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Appui\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var array The foregin links atytached to history UIDs' table",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "table_uids": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Appui\\History",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "@var boolean|string The history table's name",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "table": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Appui\\History",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "@var boolean|string The history table's name",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "uids": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Appui\\History",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "@var string The UIDs table",
                "tags": []
            },
            "parent": false,
            "value": "uids"
        },
        "column": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Appui\\History",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "@var string The history default column's name",
                "tags": []
            },
            "parent": false,
            "value": "bbn_active"
        },
        "is_used": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Appui\\History",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "@var boolean",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "cache": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Appui\\History",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "cache_prefix": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Appui\\History",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "_error": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Report",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "_last_error": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Report",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "_debug": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\History"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Report",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "db": {},
        "dbs": [
            "__BBN__ca3c3e595a8b86a0a0e122f036d70ba9__BBN__"
        ],
        "structures": [],
        "database_obj": null,
        "admin_db": "apst_app",
        "user": "752a9b0ef5ca11e89b35005056014c9f",
        "prefix": "bbn_",
        "date": null,
        "ok": true,
        "enabled": true,
        "links": {
            "apst_app.apst_adherents": [
                "id"
            ],
            "apst_app.apst_attestations": [
                "id"
            ],
            "apst_app.apst_baremes_annuels": [
                "id"
            ],
            "apst_app.apst_changes": [
                "id"
            ],
            "apst_app.apst_clotures": [
                "id"
            ],
            "apst_app.apst_cotisations": [
                "id"
            ],
            "apst_app.apst_cotisations_annuelles": [
                "id"
            ],
            "apst_app.apst_cotisations_paiements": [
                "id"
            ],
            "apst_app.apst_delegues_regionaux": [
                "id"
            ],
            "apst_app.apst_demandes": [
                "id"
            ],
            "apst_app.apst_demandes_documents": [
                "id"
            ],
            "apst_app.apst_documents": [
                "id"
            ],
            "apst_app.apst_frais_validations": [
                "id"
            ],
            "apst_app.apst_infolegale": [
                "id"
            ],
            "apst_app.apst_infos_complementaires": [
                "id"
            ],
            "apst_app.apst_marques": [
                "id"
            ],
            "apst_app.apst_passages": [
                "id"
            ],
            "apst_app.apst_sage_bills": [
                "id"
            ],
            "apst_app.apst_sage_items": [
                "id"
            ],
            "apst_app.apst_stats": [
                "id"
            ],
            "apst_app.bbn_addresses": [
                "id"
            ],
            "apst_app.bbn_ai_prompt": [
                "id"
            ],
            "apst_app.bbn_ai_prompt_items": [
                "id"
            ],
            "apst_app.bbn_ai_prompt_settings": [
                "id"
            ],
            "apst_app.bbn_cron": [
                "id"
            ],
            "apst_app.bbn_emailings": [
                "id"
            ],
            "apst_app.bbn_entities_links": [
                "id"
            ],
            "apst_app.bbn_entities_links_tags": [
                "id"
            ],
            "apst_app.bbn_entities_options": [
                "id"
            ],
            "apst_app.bbn_events": [
                "id"
            ],
            "apst_app.bbn_history": [
                "uid",
                "ref"
            ],
            "apst_app.bbn_i18n": [
                "id"
            ],
            "apst_app.bbn_i18n_exp": [
                "id"
            ],
            "apst_app.bbn_identities": [
                "id"
            ],
            "apst_app.bbn_identities_links": [
                "id"
            ],
            "apst_app.bbn_identities_uauth": [
                "id"
            ],
            "apst_app.bbn_notes": [
                "id"
            ],
            "apst_app.bbn_options": [
                "id"
            ],
            "apst_app.bbn_uauth": [
                "id"
            ],
            "apst_app.bbn_url": [
                "id"
            ]
        },
        "table_uids": "apst_app.bbn_history_uids",
        "table": "apst_app.bbn_history",
        "uids": "uids",
        "column": "bbn_active",
        "is_used": true,
        "cache": {},
        "cache_prefix": "bbn\/Appui\/History\/",
        "_error": null,
        "_last_error": null,
        "_debug": null
    },
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "bbn\\X": "X",
        "bbn\\Appui\\Database": "Database",
        "bbn\\Str": "Str",
        "bbn\\Db": "Db",
        "bbn\\Cache": "Cache",
        "bbn\\Models\\Tts\\Report": "Report"
    },
    "dummyComments": [],
    "summary": "",
    "description": "",
    "description_parts": []
}