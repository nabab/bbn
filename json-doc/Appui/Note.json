{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Note",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\References",
        "bbn\\Models\\Tts\\Optional",
        "bbn\\Models\\Tts\\Dbconfig",
        "bbn\\Models\\Tts\\Tagger"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Note.php",
    "startLine": 20,
    "endLine": 1505,
    "contentConstructor": {
        "file": "bbn\\Appui\\Note",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Note constructor.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db, string $lang = NULL)\n  {\n    parent::__construct($db);\n    $this->_init_class_cfg(self::$default_class_cfg);\n    self::optionalInit();\n    $this->taggerInit(\n      $this->class_cfg['tables']['notes_tags'],\n      [\n        'id_tag' => $this->class_cfg['arch']['notes_tags']['id_tag'],\n        'id_element' => $this->class_cfg['arch']['notes_tags']['id_note']\n      ]\n    );\n    $this->lang = $lang ?: (defined('BBN_LANG') ? BBN_LANG : 'en');\n  }",
            "startLine": 120,
            "endLine": 133,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Db",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bbn\\Db $db)\n  {\n    $this->db = $db;\n  }",
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ]
            },
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "setLang": {
            "name": "setLang",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($lang)\n  {\n    $this->lang = $lang;\n    return $this;\n  }",
            "startLine": 136,
            "endLine": 140,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "lang",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLang": {
            "name": "getLang",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->lang;\n  }",
            "startLine": 143,
            "endLine": 146,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getMediaInstance": {
            "name": "getMediaInstance",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->medias) {\n      $this->medias = new Medias($this->db);\n    }\n\n    return $this->medias;\n  }",
            "startLine": 152,
            "endLine": 159,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getExcerpt": {
            "name": "getExcerpt",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($title, $content)\n  {\n    $excerpt = '';\n    if (!empty($title)) {\n      $excerpt .= Str::html2text($title, false) . PHP_EOL . PHP_EOL;\n    }\n\n    if (!empty($content)) {\n      if (Str::isJson($content)) {\n        $ct = json_decode($content, true);\n        foreach ($ct as $n => $c) {\n          if (is_string($c)) {\n            if (is_string($n)) {\n              $excerpt .= $n . ': ';\n            }\n\n            $excerpt .= Str::html2text($c, strpos($c, PHP_EOL) > 0) . PHP_EOL . PHP_EOL;\n          } elseif (is_array($c)) {\n            foreach ($c as $k => $v) {\n              if (is_string($v)) {\n                if (is_string($k)) {\n                  $excerpt .= $k . ': ';\n                }\n\n                $excerpt .= Str::html2text($v, strpos($v, PHP_EOL) > 0) . PHP_EOL . PHP_EOL;\n              }\n            }\n          }\n        }\n      } else {\n        $excerpt .= Str::html2text($content);\n      }\n    }\n\n    return $excerpt;\n  }",
            "startLine": 167,
            "endLine": 202,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "title",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "insert": {
            "name": "insert",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array|string $title, string $content = '', string $type = NULL, bool $private = false, bool $locked = false, string $parent = NULL, string $alias = NULL, string $mime = '', string $lang = '', string $id_option = NULL)\n  {\n    string $content = '',\n    string $type = null,\n    bool $private = false,\n    bool $locked = false,\n    string $parent = null,\n    string $alias = null,\n    string $mime = '',\n    string $lang = '',\n    string $id_option = null\n  ) {\n    if (is_array($title)) {\n      $props = [\n        'title',\n        'content',\n        'type',\n        'id_option',\n        'private',\n        'locked',\n        'parent',\n        'alias',\n        'mime',\n        'lang'\n      ];\n      $tmp = $title;\n      foreach ($tmp as $prop => $t) {\n        if (X::indexOf($props, $prop) > -1) {\n          $$prop = $t;\n        }\n      }\n    }\n\n    if (empty($content)) {\n      return null;\n    }\n\n    if (empty($lang) && defined('BBN_LANG')) {\n      $lang = BBN_LANG;\n    }\n\n    $cf = &$this->class_cfg;\n    if (is_null($type)) {\n      $type = self::getOptionId('personal', 'types');\n    }\n\n    $excerpt = $this->getExcerpt($title, $content);\n    $id_note = false;\n\n    if (($usr = bbn\\User::getInstance())\n      && $this->db->insert(\n        $cf['table'],\n        [\n          $cf['arch']['notes']['id_parent'] => $parent,\n          $cf['arch']['notes']['id_alias'] => $alias,\n          $cf['arch']['notes']['id_type'] => $type,\n          $cf['arch']['notes']['id_option'] => $id_option,\n          $cf['arch']['notes']['excerpt'] => $excerpt,\n          $cf['arch']['notes']['private'] => !empty($private) ? 1 : 0,\n          $cf['arch']['notes']['locked'] => !empty($locked) ? 1 : 0,\n          $cf['arch']['notes']['creator'] => $usr->getId(),\n          $cf['arch']['notes']['mime'] => $mime,\n          $cf['arch']['notes']['lang'] => $lang\n        ]\n      )\n      && ($id_note = $this->db->lastId())\n    ) {\n      $this->insertVersion($id_note, $title, $content);\n    }\n\n    return $id_note;\n  }",
            "startLine": 218,
            "endLine": 289,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 10,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "title",
                    "position": 0,
                    "type": "arraystring|",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 3,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "locked",
                    "position": 4,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "parent",
                    "position": 5,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "alias",
                    "position": 6,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "mime",
                    "position": 7,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 8,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_option",
                    "position": 9,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "option"
                }
            ]
        },
        "insertVersion": {
            "name": "insertVersion",
            "summary": "Adds a new version to the given note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $title, string $content)\n  {\n    if ($this->check() && ($usr = bbn\\User::getInstance()) && ($note = $this->get($id_note))) {\n      $cf     = &$this->class_cfg;\n      $latest = $note['version'] ?? 0;\n      if (!$latest || ($note['content'] !== $content) || ($note['title'] !== $title)) {\n        $next = $latest + 1;\n      }\n\n      if (\n        isset($next) && $this->db->insert(\n          $cf['tables']['versions'],\n          [\n            $cf['arch']['versions']['id_note'] => $id_note,\n            $cf['arch']['versions']['version'] => $next,\n            $cf['arch']['versions']['title'] => $title,\n            $cf['arch']['versions']['content'] => $content,\n            $cf['arch']['versions']['id_user'] => $usr->getId(),\n            $cf['arch']['versions']['creation'] => date('Y-m-d H:i:s'),\n          ]\n        )\n      ) {\n        $excerpt = $this->getExcerpt($title, $content);\n        $this->db->update(\n          $cf['table'],\n          [$cf['arch']['notes']['excerpt'] => $excerpt],\n          [$cf['arch']['notes']['id'] => $id_note]\n        );\n\n        return $next;\n      }\n\n      return $latest;\n    }\n\n    return null;\n  }",
            "startLine": 300,
            "endLine": 336,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "update": {
            "name": "update",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, string $title, string $content, bool $private = NULL, bool $locked = NULL)\n  {\n    $ok = null;\n    if ($old = $this->db->rselect('bbn_notes', [], ['id' => $id])) {\n      $ok  = 0;\n      $new = [];\n      if (!\\is_null($private) && ($private != $old['private'])) {\n        $new['private'] = $private;\n      }\n\n      if (!\\is_null($locked) && ($locked != $old['locked'])) {\n        $new['locked'] = $locked;\n      }\n\n      if (!empty($new)) {\n        $ok = $this->db->update('bbn_notes', $new, ['id' => $id]);\n      }\n\n      if ($old_v = $this->get($id)) {\n        $changed = false;\n        $new_v   = [\n          'title' => $old_v['title'],\n          'content' => $old_v['content'],\n        ];\n\n        if ($title !== $old_v['title']) {\n          $changed        = true;\n          $new_v['title'] = $title;\n        }\n\n        if ($content !== $old_v['content']) {\n          $changed          = true;\n          $new_v['content'] = $content;\n        }\n\n        if (!empty($changed)) {\n          $ok = $this->insertVersion($id, $new_v['title'], $new_v['content']);\n        }\n      }\n    }\n\n    return $ok;\n  }",
            "startLine": 347,
            "endLine": 389,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 3,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 3,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "locked",
                    "position": 4,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "setType": {
            "name": "setType",
            "summary": "Changes the type of the note",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $type)\n  {\n    $cf = &$this->class_cfg;\n    return $this->db->update(\n      $cf['tables']['notes'],\n      [$cf['arch']['notes']['id_type'] => $type],\n      [$cf['arch']['notes']['id'] => $id_note]\n    );\n  }",
            "startLine": 399,
            "endLine": 407,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "latest": {
            "name": "latest",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    $cf = &$this->class_cfg;\n\n    return $this->db->selectOne(\n      $cf['tables']['versions'],\n      'MAX(' . $cf['arch']['versions']['version'] . ')',\n      [\n        $cf['arch']['versions']['id_note'] => $id,\n      ]\n    );\n  }",
            "startLine": 414,
            "endLine": 425,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get": {
            "name": "get",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, int $version = NULL, bool $simple = false)\n  {\n    $cf = &$this->class_cfg;\n    if (!\\is_int($version)) {\n      $version = $this->latest($id) ?: 1;\n    }\n\n    if ($res = $this->db->rselect(\n      $cf['tables']['notes'],\n      [],\n      [\n        $cf['arch']['notes']['id'] => $id,\n      ]\n    )) {\n      if ($tmp = $this->db->rselect(\n        $cf['tables']['versions'],\n        [],\n        [\n          $cf['arch']['versions']['id_note'] => $id,\n          $cf['arch']['versions']['version'] => $version,\n        ]\n      )) {\n        $res = array_merge($res, $tmp);\n      }\n\n      if ($simple) {\n        unset($res[$cf['arch']['versions']['content']]);\n      } else {\n        if ($medias = $this->db->getColumnValues(\n          $cf['tables']['notes_medias'],\n          $cf['arch']['notes_medias']['id_media'],\n          [\n            $cf['arch']['notes_medias']['id_note'] => $id,\n            $cf['arch']['notes_medias']['version'] => $version,\n          ]\n        )) {\n          $media         = $this->getMediaInstance();\n          $res['medias'] = [];\n          foreach ($medias as $m) {\n            $res['medias'][] = $media->getMedia($m, true);\n          }\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "startLine": 434,
            "endLine": 482,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "simple",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getFull": {
            "name": "getFull",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, int $version = NULL)\n  {\n    $cf = &$this->class_cfg;\n    if (!\\is_int($version)) {\n      $version = $this->latest($id);\n    }\n\n    if ($res = $this->db->rselect(\n      [\n        'table' => $cf['table'],\n        'fields' => [\n          $cf['arch']['notes']['id'],\n          $cf['arch']['notes']['id_parent'],\n          $cf['arch']['notes']['id_alias'],\n          $cf['arch']['notes']['excerpt'],\n          $cf['arch']['notes']['id_type'],\n          $cf['arch']['notes']['id_option'],\n          $cf['arch']['notes']['private'],\n          $cf['arch']['notes']['locked'],\n          $cf['arch']['notes']['pinned'],\n          $cf['arch']['versions']['version'],\n          $cf['arch']['versions']['title'],\n          $cf['arch']['versions']['content'],\n          $cf['arch']['versions']['id_user'],\n          $cf['arch']['versions']['creation'],\n        ],\n        'join' => [[\n          'table' => $cf['tables']['versions'],\n          'on' => [\n            'conditions' => [[\n              'field' => $cf['arch']['versions']['id_note'],\n              'exp' => $cf['arch']['notes']['id'],\n            ], [\n              'field' => $cf['arch']['versions']['version'],\n              'value' => $version,\n            ]],\n          ],\n        ]],\n        'where' => [\n          'conditions' => [[\n            'field' => $cf['arch']['notes']['id'],\n            'value' => $id,\n          ]],\n        ],\n      ]\n    )) {\n      $res['medias'] = $this->getMedias($id, $version);\n\n      return $res;\n    }\n\n    return null;\n  }",
            "startLine": 490,
            "endLine": 542,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "urlExists": {
            "name": "urlExists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $url)\n  {\n    return (bool)$this->urlToId($url);\n  }",
            "startLine": 549,
            "endLine": 552,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "urlToId": {
            "name": "urlToId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $url)\n  {\n    if (!$url) {\n      return null;\n    }\n\n    $cf = &$this->class_cfg;\n\n    $res = $this->db->selectOne($cf['tables']['url'], $cf['arch']['url']['id_note'], [$cf['arch']['url']['url'] => $url]);\n\n    return $res ?: null;\n  }",
            "startLine": 559,
            "endLine": 570,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "urlToNote": {
            "name": "urlToNote",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $url, bool $full = false)\n  {\n    if ($id = $this->urlToId($url)) {\n      if ($full) {\n        return $this->getFull($id);\n      } else {\n        return $this->get($id);\n      }\n    }\n\n    return null;\n  }",
            "startLine": 578,
            "endLine": 589,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "hasUrl": {
            "name": "hasUrl",
            "summary": "Returns true if the note is linked to an url.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    if ($this->db->selectOne(\n      $this->class_cfg['tables']['url'],\n      $this->class_cfg['arch']['url']['url'],\n      [\n        $this->class_cfg['arch']['url']['id_note'] => $id_note\n      ]\n    )) {\n      return true;\n    }\n    return false;\n  }",
            "startLine": 598,
            "endLine": 610,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "getUrl": {
            "name": "getUrl",
            "summary": "Returns the url of the note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    if ($this->hasUrl($id_note)) {\n      return $this->db->selectOne([\n        'table' => $this->class_cfg['tables']['url'],\n        'fields' => [$this->class_cfg['arch']['url']['url']],\n        'where'  => [\n          'conditions' => [[\n            'field' => $this->class_cfg['arch']['url']['id_note'],\n            'value' => $id_note\n          ]]\n        ]\n      ]);\n    }\n    return null;\n  }",
            "startLine": 618,
            "endLine": 633,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "insertOrUpdateUrl": {
            "name": "insertOrUpdateUrl",
            "summary": "Insert the given url to the note if has no url and update it otherwise.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $url)\n  {\n    if (!$this->exists($id_note)) {\n      throw new \\Exception(\n        X::_(\n          \"Impossible to retrieve the note with ID %s\",\n          Str::isUid($id_note) ? $id_note : '[String (' . strlen($id_note) . ')]'\n        )\n        );\n    }\n\n    if ($url && substr($url, 0, 1) === '\/') {\n      $url = substr($url, 1);\n    }\n\n    if (!$this->hasUrl($id_note)) {\n      return $this->db->insert(\n        $this->class_cfg['tables']['url'],\n        [\n          $this->class_cfg['arch']['url']['url']     => $url,\n          $this->class_cfg['arch']['url']['id_note'] => $id_note\n        ]\n      );\n    }\n\n    return $this->db->update(\n      $this->class_cfg['tables']['url'],\n      [$this->class_cfg['arch']['url']['url'] => $url],\n      [\n        $this->class_cfg['arch']['url']['id_note'] => $id_note\n      ]\n    );\n  }",
            "startLine": 642,
            "endLine": 674,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "url",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "deleteUrl": {
            "name": "deleteUrl",
            "summary": "Deletes url for the given note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    return $this->db->delete([\n      'table' => $this->class_cfg['tables']['url'],\n      'where' => [\n        'conditions' => [[\n          'field' => $this->class_cfg['arch']['url']['id_note'],\n          'value' => $id_note\n        ]]\n      ]\n    ]);\n  }",
            "startLine": 682,
            "endLine": 693,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "getLastVersionCfg": {
            "name": "getLastVersionCfg",
            "summary": "Returns the configuration to have the last version for each note",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($with_content = false)\n  {\n    $cf  = &$this->class_cfg;\n    $res = [\n      'tables' => [$cf['table']],\n      'fields' => [\n        'versions1.' . $cf['arch']['versions']['id_note'],\n        $cf['arch']['notes']['id_type'],\n        $cf['arch']['notes']['id_option'],\n        'versions1.' . $cf['arch']['versions']['version'],\n        'versions1.' . $cf['arch']['versions']['title'],\n        'versions1.' . $cf['arch']['versions']['id_user'],\n        'versions1.' . $cf['arch']['versions']['creation'],\n        'versions1.' . $cf['arch']['versions']['content']\n      ],\n      'join' => [[\n        'table' => $cf['tables']['versions'],\n        'type' => 'left',\n        'alias' => 'versions1',\n        'on' => [\n          'conditions' => [[\n            'field' => $this->db->cfn($cf['arch']['notes']['id'], $cf['table']),\n            'exp' => 'versions1.' . $cf['arch']['versions']['id_note'],\n          ]],\n        ],\n      ], [\n        'table' => $cf['tables']['versions'],\n        'type' => 'left',\n        'alias' => 'versions2',\n        'on' => [\n          'conditions' => [[\n            'field' => $this->db->cfn($cf['arch']['notes']['id'], $cf['table']),\n            'exp' => 'versions2.' . $cf['arch']['versions']['id_note'],\n          ], [\n            'field' => 'versions1.' . $cf['arch']['versions']['version'],\n            'operator' => '<',\n            'exp' => 'versions2.' . $cf['arch']['versions']['version'],\n          ]],\n        ],\n      ]],\n      'where' => [\n        [\n          'field' => 'versions2.' . $cf['arch']['versions']['version'],\n          'operator' => 'isnull',\n        ]\n      ],\n      'group_by' => $this->db->cfn($cf['arch']['notes']['id'], $cf['table']),\n      'order' => [[\n        'field' => 'versions1.' . $cf['arch']['versions']['version'],\n        'dir' => 'DESC',\n      ], [\n        'field' => 'versions1.' . $cf['arch']['versions']['creation'],\n        'dir' => 'DESC',\n      ]]\n    ];\n    if (!$with_content) {\n      array_pop($res['fields']);\n    }\n\n    return $res;\n  }",
            "startLine": 702,
            "endLine": 762,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "with_content",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "content"
                }
            ]
        },
        "getByType": {
            "name": "getByType",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($type = NULL, $id_user = false, int $limit = 10, int $start = 0)\n  {\n    $db  = &$this->db;\n    $cf  = &$this->class_cfg;\n    $res = [];\n    if (!Str::isUid($type)) {\n      $type = self::getOptionId(is_null($type) ? 'personal' : $type, 'types');\n    }\n\n    if (Str::isUid($type) && is_int($limit) && is_int($start)) {\n      $where = [[\n        'field' => $db->cfn($cf['arch']['notes']['id_type'], $cf['table']),\n        'value' => $type,\n      ], [\n        'field' => $db->cfn($cf['arch']['notes']['active'], $cf['table']),\n        'value' => 1,\n      ], [\n        'field' => 'versions2.' . $cf['arch']['versions']['version'],\n        'operator' => 'isnull',\n      ]];\n      if (Str::isUid($id_user)) {\n        $where[] = [\n          'field' => $db->cfn($cf['arch']['notes']['creator'], $cf['table']),\n          'value' => $id_user,\n        ];\n      }\n\n      $cfg = $this->getLastVersionCfg();\n      $cfg['where'] = [\n        'conditions' => $where,\n      ];\n      $cfg['limit'] = $limit;\n      $cfg['start'] = $start;\n      $notes = $db->rselectAll($cfg);\n      foreach ($notes as $note) {\n        if ($medias = $db->getColumnValues(\n          $cf['tables']['notes_medias'],\n          $cf['arch']['notes_medias']['id_media'],\n          [\n            $cf['arch']['notes_medias']['id_note'] => $note[$cf['arch']['versions']['id_note']],\n            $cf['arch']['notes_medias']['version'] => $note[$cf['arch']['versions']['version']],\n          ]\n        )) {\n          $note['medias'] = [];\n          foreach ($medias as $m) {\n            if ($med = $db->rselect($cf['tables']['medias'], [], [$cf['arch']['medias']['id'] => $m])) {\n              if (Str::isJson($med[$cf['arch']['medias']['content']])) {\n                $med[$cf['arch']['medias']['content']] = json_decode($med[$cf['arch']['medias']['content']]);\n              }\n              $note['medias'][] = $med;\n            }\n          }\n        }\n\n        $res[] = $note;\n      }\n\n      X::sortBy($res, $cf['arch']['versions']['creation'], 'DESC');\n\n      return $res;\n    }\n\n    return false;\n  }",
            "startLine": 771,
            "endLine": 834,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "user"
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 10,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getVersions": {
            "name": "getVersions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if (Str::isUid($id)) {\n      $cf = &$this->class_cfg;\n\n      return $this->db->rselectAll(\n        [\n          'table' => $cf['tables']['versions'],\n          'fields' => [\n            $cf['arch']['versions']['version'],\n            $cf['arch']['versions']['id_user'],\n            $cf['arch']['versions']['creation'],\n          ],\n          'where' => [\n            'conditions' => [[\n              'field' => $cf['arch']['versions']['id_note'],\n              'value' => $id,\n            ]],\n          ],\n          'order' => [[\n            'field' => $cf['arch']['versions']['version'],\n            'dir' => 'DESC',\n          ]],\n        ]\n      );\n    }\n\n    return null;\n  }",
            "startLine": 841,
            "endLine": 869,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "countByType": {
            "name": "countByType",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($type = NULL, $id_user = false)\n  {\n    $db = &$this->db;\n    $cf = &$this->class_cfg;\n    if (!Str::isUid($type)) {\n      $type = self::getOptionId(is_null($type) ? 'personal' : $type, 'types');\n    }\n\n    if (Str::isUid($type)) {\n      $where = [[\n        'field' => $cf['arch']['notes']['active'],\n        'value' => 1,\n      ], [\n        'field' => $cf['arch']['notes']['id_type'],\n        'value' => $type,\n      ]];\n      if (!empty($id_user) && Str::isUid($id_user)) {\n        $where[] = [\n          'field' => $cf['arch']['notes']['creator'],\n          'value' => $id_user,\n        ];\n      }\n\n      return $db->selectOne(\n        [\n          'table' => $cf['table'],\n          'fields' => ['COUNT(DISTINCT ' . $cf['arch']['notes']['id'] . ')'],\n          'where' => [\n            'conditions' => $where,\n          ],\n        ]\n      );\n    }\n\n    return false;\n  }",
            "startLine": 877,
            "endLine": 912,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "user"
                }
            ]
        },
        "addMedia": {
            "name": "addMedia",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_note, string $name, array $content = NULL, string $title = '', string $type = 'file', bool $private = false)\n  {\n    $media = $this->getMediaInstance();\n    \/\/ Case where we give also the version (i.e. not the latest)\n    if (\\is_array($id_note) && (count($id_note) === 2)) {\n      $version = $id_note[1];\n      $id_note = $id_note[0];\n    } else {\n      $version = $this->latest($id_note) ?: 1;\n    }\n\n    if (\n      $this->exists($id_note)\n      && ($id_media = $media->insert($name, $content, $title, $type, $private))\n      && $this->addMediaToNote($id_media, $id_note, $version)\n    ) {\n      return $id_media;\n    }\n\n    return null;\n  }",
            "startLine": 925,
            "endLine": 945,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 2,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 4,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 5,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "addMediaToNote": {
            "name": "addMediaToNote",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_media, string $id_note, int $version)\n  {\n    if ($usr = bbn\\User::getInstance()) {\n      $cf = &$this->class_cfg;\n\n      return $this->db->insert(\n        $cf['tables']['notes_medias'],\n        [\n          $cf['arch']['notes_medias']['id_note'] => $id_note,\n          $cf['arch']['notes_medias']['version'] => $version,\n          $cf['arch']['notes_medias']['id_media'] => $id_media,\n          $cf['arch']['notes_medias']['id_user'] => $usr->getId(),\n          $cf['arch']['notes_medias']['creation'] => date('Y-m-d H:i:s'),\n        ]\n      );\n    }\n\n    return null;\n  }",
            "startLine": 954,
            "endLine": 972,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "id_note",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "version",
                    "position": 2,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "removeMedia": {
            "name": "removeMedia",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_media, string $id_note, $version = false)\n  {\n    $cf = &$this->class_cfg;\n    if (\n      $this->db->selectOne($cf['tables']['medias'], $cf['arch']['medias']['id'], [$cf['arch']['medias']['id'] => $id_media])\n      && $this->exists($id_note)\n    ) {\n      $filter = [\n        $cf['arch']['notes_medias']['id_note'] => $id_note,\n        $cf['arch']['notes_medias']['version'] => $version ?: $this->latest($id_note),\n        $cf['arch']['notes_medias']['id_media'] => $id_media,\n      ];\n\n      if ($version === true) {\n        unset($filter[$cf['arch']['notes_medias']['version']]);\n      }\n\n      return $this->db->delete($cf['tables']['notes_medias'], $filter);\n    }\n\n    return null;\n  }",
            "startLine": 982,
            "endLine": 1003,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "id_note",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "version",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "media2version": {
            "name": "media2version",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_media, string $id_note, $version = false)\n  {\n    $cf = &$this->class_cfg;\n\n    return !empty($id_media) &&\n      $this->db->selectOne($cf['tables']['medias'], $cf['arch']['medias']['id'], [$cf['arch']['medias']['id'] => $id_media]) &&\n      $this->exists($id_note) &&\n      $this->db->insert(\n        $cf['tables']['notes_medias'],\n        [\n          $cf['arch']['notes_medias']['id_note'] => $id_note,\n          $cf['arch']['notes_medias']['version'] => $version ?: $this->latest($id_note),\n          $cf['arch']['notes_medias']['id_media'] => $id_media,\n          $cf['arch']['notes_medias']['id_user'] => \\bbn\\User::getInstance()->getId(),\n          $cf['arch']['notes_medias']['creation'] => date('Y-m-d H:i:s'),\n        ]\n      );\n  }",
            "startLine": 1013,
            "endLine": 1030,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "id_note",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "version",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getMedias": {
            "name": "getMedias",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, $version = false, $type = false)\n  {\n    $ret   = [];\n    $media = $this->getMediaInstance();\n    $cf    = &$this->class_cfg;\n    if ($this->exists($id_note)) {\n      $filter = [\n        $cf['arch']['notes_medias']['id_note'] => $id_note,\n        $cf['arch']['notes_medias']['version'] => $version ?: $this->latest($id_note),\n      ];\n      if ($version === true) {\n        unset($filter[$cf['arch']['notes_medias']['version']]);\n      }\n\n      if ($medias = $this->db->getColumnValues($cf['tables']['notes_medias'], $cf['arch']['notes_medias']['id_media'], $filter)) {\n        foreach ($medias as $m) {\n          $ret[] = $media->getMedia($m, true);\n        }\n      }\n    }\n\n    return $ret;\n  }",
            "startLine": 1040,
            "endLine": 1062,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "hasMedias": {
            "name": "hasMedias",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, $version = false, string $id_media = '')\n  {\n    $cf = &$this->class_cfg;\n    if ($this->exists($id_note)) {\n      $where = [\n        $cf['arch']['notes_medias']['id_note'] => $id_note,\n        $cf['arch']['notes_medias']['version'] => $version ?: $this->latest($id_note),\n      ];\n      if (!empty($id_media) && Str::isUid($id_media)) {\n        $where[$cf['arch']['notes_medias']['id_media']] = $id_media;\n      }\n\n      return (bool)$this->db->count($cf['tables']['notes_medias'], $where);\n    }\n\n    return null;\n  }",
            "startLine": 1072,
            "endLine": 1088,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "id_media",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                }
            ]
        },
        "browse": {
            "name": "browse",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg, bool $with_content = false)\n  {\n    if (isset($cfg['limit']) && ($user = bbn\\User::getInstance())) {\n      \/** @var bbn\\Db $db *\/\n      $db       = &$this->db;\n      $cf       = &$this->class_cfg;\n      $grid_cfg = [\n        'table' => $cf['table'],\n        'fields' => [\n          $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['id_parent'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['id_alias'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['id_type'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['mime'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['lang'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['private'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['locked'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['excerpt'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['pinned'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['creator'], $cf['table']),\n          $db->cfn($cf['arch']['notes']['active'], $cf['table']),\n          'first_version.' . $cf['arch']['versions']['creation'],\n          'last_version.' . $cf['arch']['versions']['title'],\n          'last_version.' . $cf['arch']['versions']['id_user'],\n          'last_edit' => 'last_version.' . $cf['arch']['versions']['creation'],\n        ],\n        'join' => [[\n          'table' => $cf['tables']['versions'],\n          'alias' => 'versions',\n          'on' => [\n            'logic' => 'AND',\n            'conditions' => [[\n              'field' => 'versions.' . $cf['arch']['versions']['id_note'],\n              'operator' => '=',\n              'exp' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n            ]],\n          ],\n        ], [\n          'table' => $cf['tables']['versions'],\n          'alias' => 'last_version',\n          'on' => [\n            'logic' => 'AND',\n            'conditions' => [[\n              'field' => 'last_version.' . $cf['arch']['versions']['id_note'],\n              'operator' => '=',\n              'exp' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n            ]],\n          ],\n        ], [\n          'table' => $cf['tables']['versions'],\n          'alias' => 'test_version',\n          'type' => 'left',\n          'on' => [\n            'logic' => 'AND',\n            'conditions' => [[\n              'field' => 'test_version.' . $cf['arch']['versions']['id_note'],\n              'operator' => '=',\n              'exp' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n            ], [\n              'field' => 'last_version.' . $cf['arch']['versions']['version'],\n              'operator' => '<',\n              'exp' => 'test_version.' . $cf['arch']['versions']['version'],\n            ]],\n          ],\n        ], [\n          'table' => $cf['tables']['versions'],\n          'alias' => 'first_version',\n          'on' => [\n            'logic' => 'AND',\n            'conditions' => [[\n              'field' => 'first_version.' . $cf['arch']['versions']['id_note'],\n              'operator' => '=',\n              'exp' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n            ], [\n              'field' => 'first_version.' . $cf['arch']['versions']['version'],\n              'operator' => '=',\n              'value' => 1,\n            ]],\n          ],\n        ]],\n        'filters' => [[\n          'field' => $db->cfn($cf['arch']['notes']['active'], $cf['table']),\n          'operator' => '=',\n          'value' => 1,\n        ], [\n          'field' => $db->cfn($cf['arch']['notes']['private'], $cf['table']),\n          'operator' => '=',\n          'value' => 0,\n        ], [\n          'field' => 'test_version.' . $cf['arch']['versions']['version'],\n          'operator' => 'isnull',\n        ]],\n        'group_by' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n        'order' => [[\n          'field' => 'last_edit',\n          'dir' => 'DESC',\n        ]],\n      ];\n      if (!empty($cfg['fields'])) {\n        $grid_cfg['fields'] = bbn\\X::mergeArrays($grid_cfg['fields'], $cfg['fields']);\n        unset($cfg['fields']);\n      }\n\n      if (!empty($cfg['join'])) {\n        $grid_cfg['join'] = bbn\\X::mergeArrays($grid_cfg['join'], $cfg['join']);\n        unset($cfg['join']);\n      }\n\n      if ($with_content) {\n        $grid_cfg['fields']['content'] = 'last_version.'.$cf['arch']['versions']['content'];\n      }\n\n      $grid = new Grid($this->db, $cfg, $grid_cfg);\n\n      return $grid->getDatatable();\n    }\n  }",
            "startLine": 1097,
            "endLine": 1213,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "with_content",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "content"
                }
            ]
        },
        "count": {
            "name": "count",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($user = bbn\\User::getInstance()) {\n      $cf  = &$this->class_cfg;\n      $db  = &$this->db;\n      $sql = \"\n      SELECT COUNT(DISTINCT {$db->cfn($cf['arch']['notes']['id'],$cf['tables']['notes'], 1)})\n      FROM {$db->tsn($cf['tables']['notes'], 1)}\n        JOIN {$db->tsn($cf['tables']['versions'], 1)}\n          ON {$db->cfn($cf['arch']['notes']['id'],$cf['tables']['notes'], 1)} = {$db->cfn($cf['arch']['versions']['id_note'],$cf['tables']['versions'], 1)}\n      WHERE {$db->cfn($cf['arch']['notes']['creator'],$cf['tables']['notes'], 1)} = ?\n      OR {$db->cfn($cf['arch']['versions']['id_user'],$cf['tables']['versions'], 1)} = ?\";\n\n      return $db->getOne($sql, $user->getId(), $user->getId());\n    }\n\n    return null;\n  }",
            "startLine": 1219,
            "endLine": 1236,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "remove": {
            "name": "remove",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, $keep = false)\n  {\n    if (Str::isUid($id)) {\n      $cf = &$this->class_cfg;\n      if (empty($keep)) {\n        if ($medias = $this->getMedias($id, true)) {\n          foreach ($medias as $m) {\n            $this->removeMedia($m['id'], $id, true);\n          }\n        }\n\n        $this->db->delete($cf['tables']['versions'], [$cf['arch']['versions']['id_note'] => $id]);\n\n        return $this->db->delete($cf['table'], [$cf['arch']['notes']['id'] => $id]);\n      } else {\n        return $this->db->update($cf['table'], [$cf['arch']['notes']['active'] => 0], [$cf['arch']['notes']['id'] => $id]);\n      }\n    }\n\n    return false;\n  }",
            "startLine": 1245,
            "endLine": 1265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The note's uid"
                },
                {
                    "name": "keep",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "Set it to true if you want change active property to 0 instead of delete the row from db"
                }
            ]
        },
        "copy": {
            "name": "copy",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, int $version = NULL, bool $private = NULL)\n  {\n    if ($note = $this->getFull($id, $version)) {\n      if ($private === null) {\n        $private = $note['private'];\n      }\n\n      $id_note = $this->insert($note['title'], $note['content'], $note['type'], $private);\n      foreach ($note['medias'] as $m) {\n        $this->addMediaToNote($m['id'], $id, $note['version']);\n      }\n\n      return $id_note;\n    }\n\n    return null;\n  }",
            "startLine": 1274,
            "endLine": 1290,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getMediasNotes": {
            "name": "getMediasNotes",
            "summary": "Selects from db all medias that have the property content not null and a correspondent existing file.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(int $start, int $limit)\n  {\n    $res = [];\n    $cf  = &$this->class_cfg;\n    $all = $this->db->rselectAll(\n      [\n        'table' => $cf['tables']['medias'],\n        'fields' => $cf['arch']['medias'],\n        'where' => [\n          'conditions' => [[\n            'field' => $cf['arch']['medias']['private'],\n            'value' => 0,\n          ], [\n            'field' => $cf['arch']['medias']['content'],\n            'operator' => 'isnotnull',\n          ]],\n        ],\n        'start' => $start,\n        'limit' => $limit,\n      ]\n    );\n    if (!empty($all)) {\n      $root = \\bbn\\Mvc::getDataPath('appui-note') . 'media\/';\n      foreach ($all as $i => $a) {\n        if (bbn\\Str::isJson($a['content']) && ($media_obj = $this->getMediaInstance())) {\n          $content   = json_decode($a['content'], true);\n          $path      = $root . $content['path'] . '\/';\n          $full_path = $path . $a['id'] . '\/' . $a['name'];\n          if (file_exists($full_path)) {\n            $all[$i]['notes'] = $this->getMediaNotes($a['id']);\n            \/\/if the media is an image it takes the thumb 60, 60 for src\n            if ($media_obj->isImage($full_path) && ($thumb = $media_obj->getThumbs($full_path))) {\n              $all[$i]['is_image'] = true;\n            }\n\n            $res[] = $all[$i];\n          }\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1300,
            "endLine": 1342,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "start",
                    "position": 0,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getMediaNotes": {
            "name": "getMediaNotes",
            "summary": "returns all the notes linked to the media.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_media)\n  {\n    $notes = [];\n    $cms   = new \\bbn\\Appui\\Cms($this->db);\n    $ids   = $this->db->rselectAll(\n      $this->class_cfg['tables']['notes_medias'],\n      [\n        $this->class_cfg['arch']['notes_medias']['id_note'],\n        $this->class_cfg['arch']['notes_medias']['version'],\n      ],\n      [\n        $this->class_cfg['arch']['notes_medias']['id_media'] => $id_media,\n      ]\n    );\n\n    if (!empty($ids)) {\n      foreach ($ids as $i) {\n        $tmp                 = $this->get($i['id_note']);\n        $tmp['is_published'] = $cms->isPublished($i['id_note']);\n        $notes[]             = $tmp;\n        \/\/return $notes;\n      }\n    }\n\n    return $notes;\n  }",
            "startLine": 1351,
            "endLine": 1376,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                }
            ]
        },
        "getEventIdFromNote": {
            "name": "getEventIdFromNote",
            "summary": "Returns event id for the given note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    return $this->db->selectOne(\n      $this->class_cfg['tables']['notes_events'],\n      $this->class_cfg['arch']['notes_events']['id_event'],\n      [\n        $this->class_cfg['arch']['notes_events']['id_note'] => $id_note\n      ]\n    );\n  }",
            "startLine": 1384,
            "endLine": 1393,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "getNoteIdFromEvent": {
            "name": "getNoteIdFromEvent",
            "summary": "Returns note id for the given event.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_event)\n  {\n    return $this->db->selectOne(\n      $this->class_cfg['tables']['notes_events'],\n      $this->class_cfg['arch']['notes_events']['id_note'],\n      [\n        $this->class_cfg['arch']['notes_events']['id_event'] => $id_event\n      ]\n    );\n  }",
            "startLine": 1401,
            "endLine": 1410,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_event",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "event"
                }
            ]
        },
        "removeNoteEvent": {
            "name": "removeNoteEvent",
            "summary": "Removes the row corresponding to the given arguments from bbn_notes_events.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $id_event)\n  {\n    return $this->_remove_note_event($id_note, $id_event);\n  }",
            "startLine": 1420,
            "endLine": 1423,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "id_event",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "event"
                }
            ]
        },
        "insertNoteEvent": {
            "name": "insertNoteEvent",
            "summary": "If the row corresponding to the given arguments is not in the table bbn_notes_events it inserts the row.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $id_event)\n  {\n    return $this->_insert_note_event($id_note, $id_event);\n  }",
            "startLine": 1433,
            "endLine": 1436,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "id_event",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "event"
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 51,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 51,
                "endLine": 58,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 65,
            "endLine": 72,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 65,
                "endLine": 72,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->error;\n  }",
            "startLine": 86,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 86,
                "endLine": 89,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 92,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 92,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 98,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 98,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 115,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 115,
                "endLine": 126,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 132,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 132,
                "endLine": 135,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 142,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 142,
                "endLine": 145,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getReferences": {
            "name": "getReferences",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return [\n      'select' => $this->references_select,\n      'join' => $this->references_join\n    ];\n  }",
            "startLine": 55,
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "startLine": 150,
            "endLine": 154,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppuiRoot": {
            "name": "getAppuiRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_appui_id;\n  }",
            "startLine": 157,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "startLine": 164,
            "endLine": 172,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 181,
            "endLine": 184,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...self::_treat_args(func_get_args())), function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 187,
            "endLine": 196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "startLine": 199,
            "endLine": 202,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 205,
            "endLine": 208,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 211,
            "endLine": 214,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 217,
            "endLine": 220,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionId": {
            "name": "getAppuiOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 229,
            "endLine": 232,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsIds": {
            "name": "getAppuiOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(\n          ...self::_treat_args(func_get_args(), true)\n        ),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 235,
            "endLine": 247,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTree": {
            "name": "getAppuiOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args(), true)) ) ? $tree['items'] : [];\n  }",
            "startLine": 250,
            "endLine": 253,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppuiOptions": {
            "name": "getAppuiOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 256,
            "endLine": 259,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOption": {
            "name": "getAppuiOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 262,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTextValue": {
            "name": "getAppuiOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getAppuiOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 268,
            "endLine": 271,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "exists": {
            "name": "exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if (!$this->class_table_index) {\n      throw new \\Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $res = $this->db->count(\n      $this->class_table, [\n      $this->class_cfg['arch'][$this->class_table_index]['id'] => $id\n      ]\n    );\n    return (bool)$res;\n  }",
            "startLine": 35,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the class configuration.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->class_cfg;\n  }",
            "startLine": 55,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the fields of the main table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->fields;\n  }",
            "startLine": 66,
            "endLine": 69,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes a single row from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ($data = $this->exists($id)) {\n      $ccfg = $this->getClassCfg();\n      $f = $ccfg['arch'][$this->class_table_index];\n      return (bool)$this->db->delete($ccfg['table'], [$f['id'] => $id]);\n    }\n\n    return false;\n  }",
            "startLine": 99,
            "endLine": 108,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "select": {
            "name": "select",
            "summary": "Retrieves a row from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ($this->exists($id)) {\n      $f = $this->class_cfg['arch'][$this->class_table_index];\n      if ($arr = $this->db->rselect(\n        $this->class_table, array_values($f), [\n          $f['id'] => $id\n        ]\n      )) {\n        if (!empty($f['cfg']) && !empty($arr[$f['cfg']])) {\n          $cfg = json_decode($arr[$f['cfg']], true);\n          $arr = array_merge($cfg, $arr);\n          unset($arr[$f['cfg']]);\n        }\n\n        return $arr;\n      }\n    }\n\n    return null;\n\n  }",
            "startLine": 146,
            "endLine": 167,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "selectAll": {
            "name": "selectAll",
            "summary": "Returns an array of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cond)\n  {\n    if (!$this->class_table_index) {\n      throw new \\Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if ($arrs = $this->db->rselectAll($this->class_table, array_values($f), $cond)) {\n      foreach ($arrs as &$arr) {\n        if (!empty($f['cfg']) && !empty($arr[$f['cfg']])) {\n          $cfg = json_decode($arr[$f['cfg']], true);\n          $arr = array_merge($cfg, $arr);\n          unset($arr[$f['cfg']]);\n        }\n      }\n      unset($arr);\n\n      return $arrs;\n    }\n\n    return [];\n  }",
            "startLine": 177,
            "endLine": 198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "cond",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTags": {
            "name": "getTags",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_element, bool $full = false, bool $force = false)\n  {\n    $this->taggerInit();\n    $res = [];\n    $ids = $this->db->getColumnValues(\n      $this->taggerTable,\n      $this->taggerCols['id_tag'],\n      [$this->taggerCols['id_element'] => $id_element]\n    );\n    foreach ($ids as $id) {\n      if ($tmp = $this->taggerObject->getById($id, $full)) {\n        $res[] = $tmp;\n      }\n      elseif (!$force) {\n        X::log([$ids, $this->db->last()]);\n        throw new Exception(X::_(\"Impossible to find the tag %s\", $id));\n      }\n    }\n   \n    return $res;\n  }",
            "startLine": 41,
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "setTags": {
            "name": "setTags",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_element, array $tags, string $lang = '')\n  {\n    $this->taggerInit();\n    $lang = $this->taggerGetLang($lang);\n    if (!$this->exists($id_element)) {\n      throw new Exception(X::_(\"Impossible to find the element in %s\", __CLASS__));\n    }\n\n    foreach ($this->getTags($id_element, true) as $tag) {\n      $idx = X::indexOf($tags, $tag['tag']);\n      if ($idx > -1) {\n        array_splice($tags, $idx, 1);\n      }\n      else {\n        $this->removeTag($id_element, $tag['id']);\n      }\n    }\n\n    $num = 0;\n    foreach ($tags as $tag) {\n      if ($this->addTag($id_element, $tag, $lang)) {\n        $num++;\n      }\n    }\n\n    return $num;\n  }",
            "startLine": 71,
            "endLine": 97,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "element The ID of the element to which attach the tags"
                },
                {
                    "name": "tags",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "A list of tags which will be retrieved or added"
                },
                {
                    "name": "lang",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "removeTag": {
            "name": "removeTag",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_element, string $id_tag)\n  {\n    $this->taggerInit();\n    return $this->db->delete(\n      $this->taggerTable,\n      [\n        $this->taggerCols['id_element'] => $id_element,\n        $this->taggerCols['id_tag'] => $id_tag\n      ]\n    );\n  }",
            "startLine": 100,
            "endLine": 110,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_tag",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "removeTags": {
            "name": "removeTags",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_element)\n  {\n    $this->taggerInit();\n    return $this->db->delete(\n      $this->taggerTable,\n      [\n        $this->taggerCols['id_element'] => $id_element,\n      ]\n    );\n  }",
            "startLine": 113,
            "endLine": 122,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addTag": {
            "name": "addTag",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_element, string $tag, string $lang = NULL, string $description = '')\n  {\n    $this->taggerInit();\n    $lang = $this->taggerGetLang($lang);\n    if ($tmp = $this->taggerObject->get($tag, $lang)) {\n      $id_tag = $tmp['id'];\n    }\n    else {\n      $id_tag = $this->taggerObject->add($tag, $lang, $description);\n    }\n\n    if (!$id_tag) {\n      throw new Exception(X::_(\"Impossible to create the tag %s\", $tag));\n    }\n\n    return $this->db->insert(\n      $this->taggerTable,\n      [\n        $this->taggerCols['id_element'] => $id_element,\n        $this->taggerCols['id_tag'] => $id_tag\n      ]\n    );\n  }",
            "startLine": 125,
            "endLine": 147,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "tag",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "description",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": {
        "default_class_cfg": {
            "errors": {
                "19": "wrong fingerprint"
            },
            "table": "bbn_notes",
            "tables": {
                "notes": "bbn_notes",
                "versions": "bbn_notes_versions",
                "notes_medias": "bbn_notes_medias",
                "medias": "bbn_medias",
                "notes_tags": "bbn_notes_tags",
                "url": "bbn_notes_url",
                "notes_events": "bbn_notes_events"
            },
            "arch": {
                "notes": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "id_alias": "id_alias",
                    "id_type": "id_type",
                    "id_option": "id_option",
                    "mime": "mime",
                    "lang": "lang",
                    "excerpt": "excerpt",
                    "private": "private",
                    "locked": "locked",
                    "pinned": "pinned",
                    "creator": "creator",
                    "active": "active"
                },
                "versions": {
                    "id_note": "id_note",
                    "version": "version",
                    "title": "title",
                    "content": "content",
                    "id_user": "id_user",
                    "creation": "creation"
                },
                "notes_medias": {
                    "id": "id",
                    "id_media": "id_media",
                    "id_note": "id_note",
                    "version": "version",
                    "id_user": "id_user",
                    "comment": "comment",
                    "creation": "creation"
                },
                "medias": {
                    "id": "id",
                    "id_user": "id_user",
                    "type": "type",
                    "name": "name",
                    "title": "title",
                    "content": "content",
                    "private": "private"
                },
                "notes_events": {
                    "id_note": "id_note",
                    "id_event": "id_event"
                },
                "notes_tags": {
                    "id_note": "id_note",
                    "id_tag": "id_tag"
                },
                "url": {
                    "url": "url",
                    "id_note": "id_note"
                }
            },
            "paths": {
                "medias": "media\/"
            }
        },
        "optional_is_init": false,
        "option_root_id": null,
        "option_appui_id": null
    },
    "constants": null,
    "numMethods": 74,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 4,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\References",
        "bbn\\Models\\Tts\\Optional",
        "bbn\\Models\\Tts\\Dbconfig",
        "bbn\\Models\\Tts\\Tagger"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "errors": {
                "19": "wrong fingerprint"
            },
            "table": "bbn_notes",
            "tables": {
                "notes": "bbn_notes",
                "versions": "bbn_notes_versions",
                "notes_medias": "bbn_notes_medias",
                "medias": "bbn_medias",
                "notes_tags": "bbn_notes_tags",
                "url": "bbn_notes_url",
                "notes_events": "bbn_notes_events"
            },
            "arch": {
                "notes": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "id_alias": "id_alias",
                    "id_type": "id_type",
                    "id_option": "id_option",
                    "mime": "mime",
                    "lang": "lang",
                    "excerpt": "excerpt",
                    "private": "private",
                    "locked": "locked",
                    "pinned": "pinned",
                    "creator": "creator",
                    "active": "active"
                },
                "versions": {
                    "id_note": "id_note",
                    "version": "version",
                    "title": "title",
                    "content": "content",
                    "id_user": "id_user",
                    "creation": "creation"
                },
                "notes_medias": {
                    "id": "id",
                    "id_media": "id_media",
                    "id_note": "id_note",
                    "version": "version",
                    "id_user": "id_user",
                    "comment": "comment",
                    "creation": "creation"
                },
                "medias": {
                    "id": "id",
                    "id_user": "id_user",
                    "type": "type",
                    "name": "name",
                    "title": "title",
                    "content": "content",
                    "private": "private"
                },
                "notes_events": {
                    "id_note": "id_note",
                    "id_event": "id_event"
                },
                "notes_tags": {
                    "id_note": "id_note",
                    "id_tag": "id_tag"
                },
                "url": {
                    "url": "url",
                    "id_note": "id_note"
                }
            },
            "paths": {
                "medias": "media\/"
            }
        },
        "optional_is_init": false,
        "option_root_id": null,
        "option_appui_id": null,
        "medias": null,
        "lang": null,
        "class_cfg": null,
        "db": null,
        "errors": [],
        "error": false,
        "debug": false,
        "log": [],
        "references": null,
        "references_select": "",
        "references_join": "",
        "options": null,
        "_is_init_class_cfg": false,
        "fields": null,
        "class_table": null,
        "class_table_index": null,
        "taggerIsInit": false,
        "taggerTable": null,
        "taggerCols": null,
        "taggerObject": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Note",
    "summary": "",
    "description": "",
    "description_parts": []
}