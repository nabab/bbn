{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Note",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\References",
        "bbn\\Models\\Tts\\Optional",
        "bbn\\Models\\Tts\\Dbconfig",
        "bbn\\Models\\Tts\\Url",
        "bbn\\Models\\Tts\\Tagger"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Note.php",
    "startLine": 21,
    "endLine": 1969,
    "numMethods": 105,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 4,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\References",
        "bbn\\Models\\Tts\\Optional",
        "bbn\\Models\\Tts\\Dbconfig",
        "bbn\\Models\\Tts\\Url",
        "bbn\\Models\\Tts\\Tagger"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "errors": {
                "19": "wrong fingerprint"
            },
            "table": "bbn_notes",
            "tables": {
                "notes": "bbn_notes",
                "versions": "bbn_notes_versions",
                "features": "bbn_notes_features",
                "notes_medias": "bbn_notes_medias",
                "medias": "bbn_medias",
                "notes_tags": "bbn_notes_tags",
                "notes_url": "bbn_notes_url",
                "notes_events": "bbn_notes_events"
            },
            "arch": {
                "notes": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "id_alias": "id_alias",
                    "id_type": "id_type",
                    "id_option": "id_option",
                    "mime": "mime",
                    "lang": "lang",
                    "private": "private",
                    "locked": "locked",
                    "pinned": "pinned",
                    "creator": "creator",
                    "active": "active"
                },
                "versions": {
                    "id_note": "id_note",
                    "version": "version",
                    "latest": "latest",
                    "title": "title",
                    "content": "content",
                    "excerpt": "excerpt",
                    "id_user": "id_user",
                    "creation": "creation"
                },
                "features": {
                    "id": "id",
                    "id_option": "id_option",
                    "id_note": "id_note",
                    "id_media": "id_media",
                    "num": "num",
                    "cfg": "cfg"
                },
                "notes_medias": {
                    "id": "id",
                    "id_media": "id_media",
                    "id_note": "id_note",
                    "id_user": "id_user",
                    "comment": "comment",
                    "creation": "creation",
                    "default_media": "default_media"
                },
                "medias": {
                    "id": "id",
                    "id_user": "id_user",
                    "type": "type",
                    "name": "name",
                    "title": "title",
                    "content": "content",
                    "private": "private"
                },
                "notes_events": {
                    "id_note": "id_note",
                    "id_event": "id_event"
                },
                "notes_tags": {
                    "id_note": "id_note",
                    "id_tag": "id_tag"
                },
                "notes_url": {
                    "id_url": "id_url",
                    "id_note": "id_note"
                }
            },
            "paths": {
                "medias": "media\/"
            },
            "urlItemField": "id_note",
            "urlTypeValue": "note"
        },
        "optional_is_init": false,
        "option_root_id": null,
        "option_appui_id": null,
        "medias": null,
        "lang": null,
        "class_cfg": null,
        "db": null,
        "errors": [],
        "error": false,
        "debug": false,
        "log": [],
        "references": null,
        "references_select": "",
        "references_join": "",
        "options": null,
        "_is_init_class_cfg": false,
        "fields": null,
        "class_table": null,
        "class_table_index": null,
        "isInitUrl": false,
        "urlType": null,
        "urlTable": null,
        "urlTableIdx": null,
        "urlFields": null,
        "url": null,
        "taggerIsInit": false,
        "taggerTable": null,
        "taggerCols": null,
        "taggerObject": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Note",
    "contentConstructor": {
        "file": "bbn\\Appui\\Note",
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Note constructor.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db, string $lang = NULL)\n  {\n    parent::__construct($db);\n    $this->_init_class_cfg(self::$default_class_cfg);\n    self::optionalInit();\n    $this->defaultUrlType = 'note';\n    $this->taggerInit(\n      $this->class_cfg['tables']['notes_tags'],\n      [\n        'id_tag' => $this->class_cfg['arch']['notes_tags']['id_tag'],\n        'id_element' => $this->class_cfg['arch']['notes_tags']['id_note']\n      ]\n    );\n    $this->lang = $lang ?: (defined('BBN_LANG') ? BBN_LANG : 'en');\n  }",
            "startLine": 130,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Db",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bbn\\Db $db)\n  {\n    $this->db = $db;\n  }",
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ]
            },
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "setLang": {
            "name": "setLang",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($lang)\n  {\n    $this->lang = $lang;\n    return $this;\n  }",
            "startLine": 147,
            "endLine": 151,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "lang",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLang": {
            "name": "getLang",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->lang;\n  }",
            "startLine": 154,
            "endLine": 157,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getMediaInstance": {
            "name": "getMediaInstance",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->medias) {\n      $this->medias = new Medias($this->db);\n    }\n\n    return $this->medias;\n  }",
            "startLine": 163,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getExcerpt": {
            "name": "getExcerpt",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($title, $content)\n  {\n    $excerpt = '';\n    if (!empty($title)) {\n      $excerpt .= Str::html2text($title, false) . PHP_EOL . PHP_EOL;\n    }\n\n    if (!empty($content)) {\n      if (Str::isJson($content)) {\n        $ct = json_decode($content, true);\n        foreach ($ct as $n => $c) {\n          if (is_string($c) && in_array($n, ['title', 'text', 'html'])) {\n            if (Str::isHTML($c)) {\n              $excerpt .= Str::html2text($c, strpos($c, PHP_EOL) > 0) . PHP_EOL . PHP_EOL;\n            }\n            else {\n              $excerpt .= $c;\n            }\n          } elseif (is_array($c)) {\n            foreach ($c as $k => $v) {\n              if (is_string($v)) {\n                if (is_string($k)) {\n                  $excerpt .= $k . ': ';\n                }\n\n                $excerpt .= Str::html2text($v, strpos($v, PHP_EOL) > 0) . PHP_EOL . PHP_EOL;\n              }\n            }\n          }\n        }\n      }\n      elseif (Str::isHTML($content)) {\n        $excerpt .= Str::html2text($content);\n      }\n      elseif (is_string($content)) {\n        $excerpt .= $content;\n      }\n    }\n\n    return $excerpt;\n  }",
            "startLine": 178,
            "endLine": 218,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "title",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "insert": {
            "name": "insert",
            "summary": "Creates a new note in the database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($title, string $content = '', string $id_type = NULL, bool $private = false, bool $locked = false, string $id_parent = NULL, string $id_alias = NULL, string $mime = '', string $lang = '', string $id_option = NULL, string $excerpt = '', bool $pinned = false)\n  {\n    string $content = '',\n    string $id_type = null,\n    bool   $private = false,\n    bool   $locked = false,\n    string $id_parent = null,\n    string $id_alias = null,\n    string $mime = '',\n    string $lang = '',\n    string $id_option = null,\n    string $excerpt = '',\n    bool   $pinned = false\n  ): ?string\n  {\n    $props = [\n      'title',\n      'content',\n      'id_type',\n      'private',\n      'locked',\n      'id_parent',\n      'id_alias',\n      'mime',\n      'lang',\n      'id_option',\n      'excerpt',\n      'pinned'\n    ];\n    if (is_array($title)) {\n      $cfg = $title;\n    }\n    else {\n      $cfg = [];\n    }\n\n    foreach ($props as $prop) {\n      if (!array_key_exists($prop, $cfg)) {\n        $cfg[$prop] = $$prop;\n      }\n    }\n\n    if (empty($cfg['content']) && empty($cfg['title'])) {\n      return null;\n    }\n\n    if (empty($cfg['lang']) && defined('BBN_LANG')) {\n      $cfg['lang'] = BBN_LANG;\n    }\n\n    $cf = &$this->class_cfg;\n    if (is_null($cfg['id_type'])) {\n      $cfg['id_type'] = self::getOptionId('personal', 'types');\n    }\n\n    if (!$cfg['excerpt']) {\n      $cfg['excerpt'] = $this->getExcerpt($cfg['title'], $cfg['content']);\n    }\n\n    $id_note = null;\n\n    if (($usr = bbn\\User::getInstance())\n      && $this->db->insert(\n        $cf['table'],\n        [\n          $cf['arch']['notes']['id_parent'] => $cfg['id_parent'],\n          $cf['arch']['notes']['id_alias'] => $cfg['id_alias'],\n          $cf['arch']['notes']['id_type'] => $cfg['id_type'],\n          $cf['arch']['notes']['id_option'] => $cfg['id_option'],\n          $cf['arch']['notes']['private'] => !empty($cfg['private']) ? 1 : 0,\n          $cf['arch']['notes']['locked'] => !empty($cfg['locked']) ? 1 : 0,\n          $cf['arch']['notes']['creator'] => $usr->getId(),\n          $cf['arch']['notes']['mime'] => $cfg['mime'],\n          $cf['arch']['notes']['lang'] => $cfg['lang'],\n          $cf['arch']['notes']['pinned'] => !empty($cfg['pinned']) ? 1 : 0\n        ]\n      )\n      && ($id_note = $this->db->lastId())\n    ) {\n      $this->insertVersion($id_note, $cfg['title'], $cfg['content'], $cfg['excerpt']);\n    }\n\n    return $id_note;\n  }",
            "startLine": 236,
            "endLine": 319,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 12,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "title",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The title or the whole config in an indexed array"
                },
                {
                    "name": "content",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_type",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 3,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "locked",
                    "position": 4,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "id_parent",
                    "position": 5,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "id_alias",
                    "position": 6,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "mime",
                    "position": 7,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 8,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_option",
                    "position": 9,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "excerpt",
                    "position": 10,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "pinned",
                    "position": 11,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "insertVersion": {
            "name": "insertVersion",
            "summary": "Adds a new version to the given note if it's different from the last, and returns the latest version.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $title = '', string $content = '', string $excerpt = '')\n  {\n    if ($this->check()\n        && ($usr = bbn\\User::getInstance())\n        && ($note = $this->get($id_note))\n        && ($title || $content)\n    ) {\n      $cf     = &$this->class_cfg;\n      $latest = $note['version'] ?? 0;\n      if (!$latest \n          || ($note['content'] != $content)\n          || ($note['title'] != $title)\n          || ($note['excerpt'] != $excerpt)\n      ) {\n        $next = $latest + 1;\n      }\n\n      if (\n        isset($next) && $this->db->insert(\n          $cf['tables']['versions'],\n          [\n            $cf['arch']['versions']['id_note'] => $id_note,\n            $cf['arch']['versions']['version'] => $next ?? 1,\n            $cf['arch']['versions']['latest'] => 1,\n            $cf['arch']['versions']['title'] => $title,\n            $cf['arch']['versions']['content'] => $content,\n            $cf['arch']['versions']['excerpt'] => $excerpt ?: '',\n            $cf['arch']['versions']['id_user'] => $usr->getId(),\n            $cf['arch']['versions']['creation'] => date('Y-m-d H:i:s'),\n          ]\n        )\n      ) {\n        $this->db->update(\n          $cf['tables']['versions'],\n          [$cf['arch']['versions']['latest'] => 0],\n          [\n            $cf['arch']['versions']['id_note'] => $id_note,\n            ['version', '!=', $next]\n          ]\n        );\n\n        return $next;\n      }\n\n      return $latest;\n    }\n\n    return null;\n  }",
            "startLine": 330,
            "endLine": 378,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "excerpt",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "update": {
            "name": "update",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, $title, string $content = '', bool $private = false, bool $locked = false, string $excerpt = '', bool $pinned = false)\n  {\n     $title,\n     string $content = '',\n     bool   $private = false,\n     bool   $locked = false,\n     string $excerpt = '',\n     bool   $pinned = false\n  ): ?int\n  {\n    $props = [\n      'title',\n      'content',\n      'private',\n      'locked',\n      'excerpt',\n      'pinned'\n    ];\n    if (is_array($title)) {\n      $cfg = $title;\n    }\n    else {\n      $cfg = [];\n    }\n\n    foreach ($props as $prop) {\n      if (!array_key_exists($prop, $cfg)) {\n        $cfg[$prop] = $$prop;\n      }\n    }\n\n    if (empty($cfg['content']) && empty($cfg['title'])) {\n      return null;\n    }\n\n    $ok = null;\n    if ($old = $this->get($id)) {\n      $ok  = 0;\n      $new_note = [];\n      $new_version = [];\n      foreach ($props as $p) {\n        if ($cfg[$p] != $old[$p]) {\n          if (in_array($p, ['content', 'title', 'excerpt'])) {\n            $new_version[$p] = $cfg[$p];\n          }\n          else {\n            $new_note[$p] = $cfg[$p];\n          }\n        }\n      }\n\n      if (!empty($new_note)) {\n        $ok = $this->db->update('bbn_notes', $new_note, ['id' => $id]);\n      }\n\n      if (!empty($new_version)) {\n        $ok = $this->insertVersion($id, $cfg['title'], $cfg['content'], $cfg['excerpt']);\n      }\n    }\n\n    return $ok;\n  }",
            "startLine": 389,
            "endLine": 450,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 2,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 3,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "locked",
                    "position": 4,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "excerpt",
                    "position": 5,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "pinned",
                    "position": 6,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "setType": {
            "name": "setType",
            "summary": "Changes the type of the note",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $type)\n  {\n    $cf = &$this->class_cfg;\n    return $this->db->update(\n      $cf['tables']['notes'],\n      [$cf['arch']['notes']['id_type'] => $type],\n      [$cf['arch']['notes']['id'] => $id_note]\n    );\n  }",
            "startLine": 460,
            "endLine": 468,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setOption": {
            "name": "setOption",
            "summary": "Changes the id_option of the note",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $id_option)\n  {\n    $cf = &$this->class_cfg;\n    return $this->db->update(\n      $cf['tables']['notes'],\n      [$cf['arch']['notes']['id_option'] => $id_option],\n      [$cf['arch']['notes']['id'] => $id_note]\n    );\n  }",
            "startLine": 478,
            "endLine": 486,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "id_option",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ]
        },
        "latest": {
            "name": "latest",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    $cf = &$this->class_cfg;\n\n    return $this->db->selectOne(\n      $cf['tables']['versions'],\n      'MAX(' . $cf['arch']['versions']['version'] . ')',\n      [\n        $cf['arch']['versions']['id_note'] => $id,\n      ]\n    );\n  }",
            "startLine": 493,
            "endLine": 504,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTitle": {
            "name": "getTitle",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    $cf = &$this->class_cfg;\n    return $this->db->selectOne(\n      $cf['tables']['versions'],\n      $cf['arch']['versions']['title'],\n      [$cf['arch']['versions']['id_note'] => $id],\n      [$cf['arch']['versions']['version'] => 'DESC']\n    );\n  }",
            "startLine": 507,
            "endLine": 516,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get": {
            "name": "get",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, int $version = NULL, bool $simple = false)\n  {\n    $cf = &$this->class_cfg;\n    if (!\\is_int($version)) {\n      $version = $this->latest($id) ?: 1;\n    }\n\n    if ($res = $this->db->rselect(\n      $cf['tables']['notes'],\n      [],\n      [\n        $cf['arch']['notes']['id'] => $id,\n      ]\n    )) {\n      if ($tmp = $this->db->rselect(\n        $cf['tables']['versions'],\n        [],\n        [\n          $cf['arch']['versions']['id_note'] => $id,\n          $cf['arch']['versions']['version'] => $version,\n        ]\n      )) {\n        $res = array_merge($res, $tmp);\n      }\n\n      if ($simple) {\n        unset($res[$cf['arch']['versions']['content']]);\n      }\n      else {\n        if ($medias = $this->db->getColumnValues(\n          $cf['tables']['notes_medias'],\n          $cf['arch']['notes_medias']['id_media'],\n          [\n            $cf['arch']['notes_medias']['id_note'] => $id\n          ]\n        )) {\n          $media         = $this->getMediaInstance();\n          $res['medias'] = [];\n          foreach ($medias as $m) {\n            $res['medias'][] = $media->getMedia($m, true);\n          }\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "startLine": 525,
            "endLine": 573,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "simple",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getFull": {
            "name": "getFull",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, int $version = NULL)\n  {\n    $cf = &$this->class_cfg;\n    if (!\\is_int($version)) {\n      $version = $this->latest($id) ?: 1;\n    }\n\n    if ($res = $this->db->rselect(\n      [\n        'table' => $cf['table'],\n        'fields' => [\n          $cf['arch']['notes']['id'],\n          $cf['arch']['notes']['id_parent'],\n          $cf['arch']['notes']['id_alias'],\n          $cf['arch']['notes']['id_type'],\n          $cf['arch']['notes']['id_option'],\n          $cf['arch']['notes']['private'],\n          $cf['arch']['notes']['locked'],\n          $cf['arch']['notes']['pinned'],\n          $cf['arch']['versions']['version'],\n          $cf['arch']['versions']['excerpt'],\n          $cf['arch']['versions']['title'],\n          $cf['arch']['versions']['content'],\n          $cf['arch']['versions']['id_user'],\n          $cf['arch']['versions']['creation'],\n        ],\n        'join' => [[\n          'table' => $cf['tables']['versions'],\n          'on' => [\n            'conditions' => [[\n              'field' => $cf['arch']['versions']['id_note'],\n              'exp' => $cf['arch']['notes']['id'],\n            ], [\n              'field' => $cf['arch']['versions']['version'],\n              'value' => $version,\n            ]],\n          ],\n        ]],\n        'where' => [\n          'conditions' => [\n            [\n              'field' => $cf['arch']['notes']['id'],\n              'value' => $id,\n            ]\n          ],\n        ],\n      ]\n    )) {\n      $res['medias'] = $this->getMedias($id, $res['version']);\n\n      return $res;\n    }\n\n    return null;\n  }",
            "startLine": 581,
            "endLine": 635,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "urlToNote": {
            "name": "urlToNote",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $url, bool $full = false)\n  {\n    if ($id = $this->urlToId($url)) {\n      if ($full) {\n        return $this->getFull($id);\n      } else {\n        return $this->get($id);\n      }\n    }\n\n    return null;\n  }",
            "startLine": 643,
            "endLine": 654,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "insertOrUpdateUrl": {
            "name": "insertOrUpdateUrl",
            "summary": "Insert the given url to the note if has no url and update it otherwise.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $url)\n  {\n    if (!$this->exists($id_note)) {\n      throw new \\Exception(\n        X::_(\n          \"Impossible to retrieve the note with ID %s\",\n          Str::isUid($id_note) ? $id_note : '[String (' . strlen($id_note) . ')]'\n        )\n        );\n    }\n\n    return $this->setUrl($id_note, $url);\n  }",
            "startLine": 664,
            "endLine": 676,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "url",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLastVersionCfg": {
            "name": "getLastVersionCfg",
            "summary": "Returns the configuration to have the last version for each note",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($with_content = false)\n  {\n    $cf  = &$this->class_cfg;\n    $res = [\n      'tables' => [$cf['table']],\n      'fields' => [\n        'versions.' . $cf['arch']['versions']['id_note'],\n        $cf['arch']['notes']['id_type'],\n        $cf['arch']['notes']['id_option'],\n        'versions.' . $cf['arch']['versions']['version'],\n        'versions.' . $cf['arch']['versions']['excerpt'],\n        'versions.' . $cf['arch']['versions']['title'],\n        'versions.' . $cf['arch']['versions']['id_user'],\n        'versions.' . $cf['arch']['versions']['creation'],\n        'num_translations' => \"COUNT(aliases.id)\",\n        'num_variants' => \"COUNT(parents.id)\",\n        'versions.' . $cf['arch']['versions']['content']\n      ],\n      'join' => [[\n        'table' => $cf['tables']['versions'],\n        'alias' => 'versions',\n        'on' => [\n          'conditions' => [[\n            'field' => $this->db->cfn($cf['arch']['notes']['id'], $cf['table']),\n            'exp' => 'versions.' . $cf['arch']['versions']['id_note'],\n          ], [\n            'field' => 'versions.' . $cf['arch']['versions']['latest'],\n            'value' => 1\n          ]],\n        ],\n      ], [\n        'table' => $cf['tables']['notes'],\n        'alias' => 'parents',\n        'type'  => 'left',\n        'on' => [\n          'conditions' => [[\n            'field' => $this->db->cfn($cf['arch']['notes']['id'], $cf['table']),\n            'exp' => 'parents.' . $cf['arch']['notes']['id_parent'],\n          ]],\n        ],\n      ], [\n        'table' => $cf['tables']['notes'],\n        'alias' => 'aliases',\n        'type'  => 'left',\n        'on' => [\n          'conditions' => [[\n            'field' => $this->db->cfn($cf['arch']['notes']['id'], $cf['table']),\n            'exp' => 'aliases.' . $cf['arch']['notes']['id_alias'],\n          ]],\n        ],\n      ]],\n      'where' => [\n        'logic' => 'AND',\n        'conditions' => [\n        ]\n      ],\n      'group_by' => $this->db->cfn($cf['arch']['notes']['id'], $cf['table'])\n    ];\n\n    if (!$with_content) {\n      array_pop($res['fields']);\n    }\n\n    return $res;\n  }",
            "startLine": 686,
            "endLine": 750,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "with_content",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "content"
                }
            ]
        },
        "getByType": {
            "name": "getByType",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($type = NULL, $id_user = false, int $limit = 10, int $start = 0)\n  {\n    $db  = &$this->db;\n    $cf  = &$this->class_cfg;\n    $res = [];\n    if (!Str::isUid($type)) {\n      $type = self::getOptionId(is_null($type) ? 'personal' : $type, 'types');\n    }\n\n    if (Str::isUid($type) && is_int($limit) && is_int($start)) {\n      $where = [[\n        'field' => $db->cfn($cf['arch']['notes']['id_type'], $cf['table']),\n        'value' => $type,\n      ], [\n        'field' => $db->cfn($cf['arch']['notes']['active'], $cf['table']),\n        'value' => 1,\n      ]];\n      if (Str::isUid($id_user)) {\n        $where[] = [\n          'field' => $db->cfn($cf['arch']['notes']['creator'], $cf['table']),\n          'value' => $id_user,\n        ];\n      }\n\n      $cfg = $this->getLastVersionCfg();\n      $cfg['where'] = [\n        'conditions' => $where,\n      ];\n      $cfg['limit'] = $limit;\n      $cfg['start'] = $start;\n      $notes = $db->rselectAll($cfg);\n      foreach ($notes as $note) {\n        if ($medias = $db->getColumnValues(\n          $cf['tables']['notes_medias'],\n          $cf['arch']['notes_medias']['id_media'],\n          [\n            $cf['arch']['notes_medias']['id_note'] => $note[$cf['arch']['versions']['id_note']]\n          ]\n        )) {\n          $note['medias'] = [];\n          foreach ($medias as $m) {\n            if ($med = $db->rselect($cf['tables']['medias'], [], [$cf['arch']['medias']['id'] => $m])) {\n              if (Str::isJson($med[$cf['arch']['medias']['content']])) {\n                $med[$cf['arch']['medias']['content']] = json_decode($med[$cf['arch']['medias']['content']]);\n              }\n              $note['medias'][] = $med;\n            }\n          }\n        }\n\n        $res[] = $note;\n      }\n\n      X::sortBy($res, $cf['arch']['versions']['creation'], 'DESC');\n\n      return $res;\n    }\n\n    return false;\n  }",
            "startLine": 759,
            "endLine": 818,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "user"
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 10,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getVersions": {
            "name": "getVersions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if (Str::isUid($id)) {\n      $cf = &$this->class_cfg;\n\n      return $this->db->rselectAll(\n        [\n          'table' => $cf['tables']['versions'],\n          'fields' => [\n            $cf['arch']['versions']['version'],\n            $cf['arch']['versions']['id_user'],\n            $cf['arch']['versions']['creation'],\n          ],\n          'where' => [\n            'conditions' => [[\n              'field' => $cf['arch']['versions']['id_note'],\n              'value' => $id,\n            ]],\n          ],\n          'order' => [[\n            'field' => $cf['arch']['versions']['version'],\n            'dir' => 'DESC',\n          ]],\n        ]\n      );\n    }\n\n    return null;\n  }",
            "startLine": 825,
            "endLine": 853,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "countByType": {
            "name": "countByType",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($type = NULL, $id_user = false)\n  {\n    $db = &$this->db;\n    $cf = &$this->class_cfg;\n    if (!Str::isUid($type)) {\n      $type = self::getOptionId(is_null($type) ? 'personal' : $type, 'types');\n    }\n\n    if (Str::isUid($type)) {\n      $where = [[\n        'field' => $cf['arch']['notes']['active'],\n        'value' => 1,\n      ], [\n        'field' => $cf['arch']['notes']['id_type'],\n        'value' => $type,\n      ]];\n      if (!empty($id_user) && Str::isUid($id_user)) {\n        $where[] = [\n          'field' => $cf['arch']['notes']['creator'],\n          'value' => $id_user,\n        ];\n      }\n\n      return $db->selectOne(\n        [\n          'table' => $cf['table'],\n          'fields' => ['COUNT(DISTINCT ' . $cf['arch']['notes']['id'] . ')'],\n          'where' => [\n            'conditions' => $where,\n          ],\n        ]\n      );\n    }\n\n    return false;\n  }",
            "startLine": 861,
            "endLine": 896,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "user"
                }
            ]
        },
        "addMedia": {
            "name": "addMedia",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_note, string $name, array $content = NULL, string $title = '', string $type = 'file', bool $private = false)\n  {\n    $media = $this->getMediaInstance();\n    \/\/ Case where we give also the version (i.e. not the latest)\n    if (\\is_array($id_note) && (count($id_note) === 2)) {\n      $version = $id_note[1];\n      $id_note = $id_note[0];\n    } else {\n      $version = $this->latest($id_note) ?: 1;\n    }\n\n    if (\n      $this->exists($id_note)\n      && ($id_media = $media->insert($name, $content, $title, $type, $private))\n      && $this->addMediaToNote($id_media, $id_note, $version)\n    ) {\n      return $id_media;\n    }\n\n    return null;\n  }",
            "startLine": 909,
            "endLine": 929,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 2,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 4,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 5,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "addMediaToNote": {
            "name": "addMediaToNote",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_media, string $id_note, int $default = 0)\n  {\n    if ($usr = bbn\\User::getInstance()) {\n      $cf = &$this->class_cfg;\n\n      if ($default) {\n        $this->db->update(\n          $cf['tables']['notes_medias'],\n          [$cf['arch']['notes_medias']['default_media'] => 0],\n          [$cf['arch']['notes_medias']['id_note'] => $id_note]\n        );\n      }\n\n      return $this->db->insertUpdate(\n        $cf['tables']['notes_medias'],\n        [\n          $cf['arch']['notes_medias']['id_note'] => $id_note,\n          $cf['arch']['notes_medias']['id_media'] => $id_media,\n          $cf['arch']['notes_medias']['id_user'] => $usr->getId(),\n          $cf['arch']['notes_medias']['creation'] => date('Y-m-d H:i:s'),\n          $cf['arch']['notes_medias']['default_media'] => $default\n        ]\n      );\n    }\n\n    return null;\n  }",
            "startLine": 938,
            "endLine": 964,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "id_note",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "default",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "removeMedia": {
            "name": "removeMedia",
            "summary": "Removes a row associating a given media and a given note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_media, string $id_note)\n  {\n    $cf = &$this->class_cfg;\n    if (\n      $this->db->selectOne($cf['tables']['medias'], $cf['arch']['medias']['id'], [$cf['arch']['medias']['id'] => $id_media])\n      && $this->exists($id_note)\n    ) {\n      return $this->db->delete($cf['tables']['notes_medias'], [\n        $cf['arch']['notes_medias']['id_note'] => $id_note,\n        $cf['arch']['notes_medias']['id_media'] => $id_media,\n      ]);\n    }\n\n    return null;\n  }",
            "startLine": 975,
            "endLine": 989,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "id_note",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "removeAllMedias": {
            "name": "removeAllMedias",
            "summary": "Removes all the rows associating medias with a given note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    $cf = &$this->class_cfg;\n    if ($this->exists($id_note)) {\n      return $this->db->delete($cf['tables']['notes_medias'], [\n        $cf['arch']['notes_medias']['id_note'] => $id_note\n      ]);\n    }\n\n    return null;\n  }",
            "startLine": 999,
            "endLine": 1009,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "getMedias": {
            "name": "getMedias",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, $version = false, $type = false)\n  {\n    $ret   = [];\n    $media = $this->getMediaInstance();\n    $cf    = &$this->class_cfg;\n    if ($this->exists($id_note)) {\n      $medias = $this->db->getColumnValues(\n        $cf['tables']['notes_medias'],\n        $cf['arch']['notes_medias']['id_media'],\n        [\n          $cf['arch']['notes_medias']['id_note'] => $id_note\n        ]);\n      if ($medias) {\n        foreach ($medias as $m) {\n          $ret[] = $media->getMedia($m, true);\n        }\n      }\n    }\n\n    return $ret;\n  }",
            "startLine": 1019,
            "endLine": 1039,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "hasMedias": {
            "name": "hasMedias",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, $version = false, string $id_media = '')\n  {\n    $cf = &$this->class_cfg;\n    if ($this->exists($id_note)) {\n      $where = [\n        $cf['arch']['notes_medias']['id_note'] => $id_note\n      ];\n      if (!empty($id_media) && Str::isUid($id_media)) {\n        $where[$cf['arch']['notes_medias']['id_media']] = $id_media;\n      }\n\n      return (bool)$this->db->count($cf['tables']['notes_medias'], $where);\n    }\n\n    return null;\n  }",
            "startLine": 1049,
            "endLine": 1064,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "id_media",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                }
            ]
        },
        "browse": {
            "name": "browse",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg, bool $with_content = false, bool $private = false, string $id_type = NULL, bool $pinned = NULL)\n  {\n    if (isset($cfg['limit']) && ($user = bbn\\User::getInstance())) {\n      \/** @var bbn\\Db $db *\/\n      $db       = &$this->db;\n      $cf       = &$this->class_cfg;\n      $opt      = Option::getInstance();\n      $cfo      = $opt->getClassCfg();\n      $grid_cfg = [\n        'table' => $cf['table'],\n        'fields' => [\n          $db->cfn($this->fields['id'], $cf['table']),\n          $db->cfn($this->fields['id_parent'], $cf['table']),\n          $db->cfn($this->fields['id_alias'], $cf['table']),\n          $db->cfn($this->fields['id_type'], $cf['table']),\n          $db->cfn($this->fields['id_option'], $cf['table']),\n          $db->cfn($this->fields['mime'], $cf['table']),\n          $db->cfn($this->fields['lang'], $cf['table']),\n          $db->cfn($this->fields['private'], $cf['table']),\n          $db->cfn($this->fields['locked'], $cf['table']),\n          $db->cfn($this->fields['pinned'], $cf['table']),\n          $db->cfn($this->fields['creator'], $cf['table']),\n          $db->cfn($this->fields['active'], $cf['table']),\n          $db->cfn($cf['arch']['versions']['version'], $cf['tables']['versions']),\n          $db->cfn($cf['arch']['versions']['title'], $cf['tables']['versions']),\n          $db->cfn($cf['arch']['versions']['excerpt'], $cf['tables']['versions']),\n          $db->cfn($cf['arch']['versions']['id_user'], $cf['tables']['versions']),\n          'creation' => 'first_version.' . $cf['arch']['versions']['creation'],\n          'last_edit' => $db->cfn($cf['arch']['versions']['creation'], $cf['tables']['versions']),\n          'option_name' => $db->cfn($cfo['arch']['options']['text'], $cfo['table'])\n        ],\n        'join' => [[\n          'table' => $cf['tables']['versions'],\n          'on' => [\n            'logic' => 'AND',\n            'conditions' => [[\n              'field' => $db->cfn($cf['arch']['versions']['id_note'], $cf['tables']['versions']),\n              'operator' => '=',\n              'exp' => $db->cfn($this->fields['id'], $cf['table'])\n            ], [\n              'field' => $db->cfn($cf['arch']['versions']['latest'], $cf['tables']['versions']),\n              'operator' => '=',\n              'value' => 1\n            ]],\n          ],\n        ], [\n          'table' => $cf['tables']['versions'],\n          'alias' => 'first_version',\n          'on' => [\n            'logic' => 'AND',\n            'conditions' => [[\n              'field' => 'first_version.' . $cf['arch']['versions']['id_note'],\n              'operator' => '=',\n              'exp' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n            ], [\n              'field' => 'first_version.' . $cf['arch']['versions']['version'],\n              'operator' => '=',\n              'value' => 1,\n            ]],\n          ],\n        ], [\n          'table' => $cfo['tables']['options'],\n          'type' => 'left',\n          'on' => [\n            'logic' => 'AND',\n            'conditions' => [[\n              'field' => $db->cfn($cf['arch']['notes']['id_option'], $cf['table']),\n              'operator' => '=',\n              'exp' => $db->cfn($cfo['arch']['options']['id'], $cfo['tables']['options'], true),\n            ]],\n          ],\n        ]],\n        'filters' => [[\n          'field' => $db->cfn($cf['arch']['notes']['active'], $cf['table']),\n          'value' => 1,\n        ]],\n        'group_by' => $db->cfn($cf['arch']['notes']['id'], $cf['table'])\n      ];\n      if ($private) {\n        $grid_cfg['filters'][] = [\n          'field' => $db->cfn($cf['arch']['notes']['private'], $cf['table']),\n          'value' => 1\n        ];\n        $grid_cfg['filters'][] = [\n          'field' => $db->cfn($cf['arch']['notes']['creator'], $cf['table']),\n          'value' => $user->getId()\n        ];\n      }\n      else {\n        $grid_cfg['filters'][] = [\n          'field' => $db->cfn($cf['arch']['notes']['private'], $cf['table']),\n          'value' => 0\n        ];\n      }\n      if ($id_type) {\n        $grid_cfg['filters'][] = [\n          'field' => $db->cfn($cf['arch']['notes']['id_type'], $cf['table']),\n          'value' => $id_type\n        ];\n      }\n      if (!is_null($pinned)) {\n        $grid_cfg['filters'][] = [\n          'field' => $db->cfn($cf['arch']['notes']['pinned'], $cf['table']),\n          'value' => $pinned\n        ];\n      }\n      if (!empty($cfg['fields'])) {\n        $grid_cfg['fields'] = bbn\\X::mergeArrays($grid_cfg['fields'], $cfg['fields']);\n        unset($cfg['fields']);\n      }\n\n      if (!empty($cfg['join'])) {\n        $grid_cfg['join'] = bbn\\X::mergeArrays($grid_cfg['join'], $cfg['join']);\n        unset($cfg['join']);\n      }\n\n      if ($with_content) {\n        $grid_cfg['fields']['content'] = $db->cfn($cf['arch']['versions']['content'], $cf['tables']['versions']);\n      }\n\n      $grid = new Grid($this->db, $cfg, $grid_cfg);\n\n      return $grid->getDatatable();\n    }\n  }",
            "startLine": 1073,
            "endLine": 1197,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "with_content",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "content"
                },
                {
                    "name": "private",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "id_type",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "pinned",
                    "position": 4,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "count": {
            "name": "count",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($user = bbn\\User::getInstance()) {\n      $cf  = &$this->class_cfg;\n      $db  = &$this->db;\n      $sql = \"\n      SELECT COUNT(DISTINCT {$db->cfn($cf['arch']['notes']['id'],$cf['tables']['notes'], 1)})\n      FROM {$db->tsn($cf['tables']['notes'], 1)}\n        JOIN {$db->tsn($cf['tables']['versions'], 1)}\n          ON {$db->cfn($cf['arch']['notes']['id'],$cf['tables']['notes'], 1)} = {$db->cfn($cf['arch']['versions']['id_note'],$cf['tables']['versions'], 1)}\n      WHERE {$db->cfn($cf['arch']['notes']['creator'],$cf['tables']['notes'], 1)} = ?\n      OR {$db->cfn($cf['arch']['versions']['id_user'],$cf['tables']['versions'], 1)} = ?\";\n\n      return $db->getOne($sql, $user->getId(), $user->getId());\n    }\n\n    return null;\n  }",
            "startLine": 1203,
            "endLine": 1220,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getAliases": {
            "name": "getAliases",
            "summary": "Returns an array of IDs of the notes which are aliases of the given ID.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    if (!$this->exists($id_note)) {\n      throw new Exception(_(\"Impossible to retrieve the note\"));\n    }\n\n    $cf = &$this->class_cfg;\n    return $this->db->getColumnValues($cf['table'], $cf['arch']['notes']['id'], [\n      $cf['arch']['notes']['id_alias'] => $id_note\n    ]);\n  }",
            "startLine": 1229,
            "endLine": 1239,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "getChildren": {
            "name": "getChildren",
            "summary": "Returns an array of IDs of the notes which are children of the given ID.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    if (!$this->exists($id_note)) {\n      throw new Exception(_(\"Impossible to retrieve the note\"));\n    }\n\n    $cf = &$this->class_cfg;\n    return $this->db->getColumnValues($cf['table'], $cf['arch']['notes']['id'], [\n      $cf['arch']['notes']['id_parent'] => $id_note\n    ]);\n  }",
            "startLine": 1248,
            "endLine": 1258,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "remove": {
            "name": "remove",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, $keep = false)\n  {\n    if (Str::isUid($id)) {\n      $cf = &$this->class_cfg;\n      if (empty($keep)) {\n        $this->removeAllMedias($id);\n        $this->removeTags($id);\n        foreach ($this->getAliases($id) as $id_alias) {\n          $this->remove($id_alias);\n        }\n  \n        foreach ($this->getChildren($id) as $id_child) {\n          $this->remove($id_child);\n        }\n\n        $this->db->delete($cf['tables']['versions'], [$cf['arch']['versions']['id_note'] => $id]);\n        return $this->db->delete($cf['table'], [$cf['arch']['notes']['id'] => $id]);\n      }\n      else {\n        return $this->db->update($cf['table'], [$cf['arch']['notes']['active'] => 0], [$cf['arch']['notes']['id'] => $id]);\n      }\n    }\n\n    return false;\n  }",
            "startLine": 1267,
            "endLine": 1291,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The note's uid"
                },
                {
                    "name": "keep",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "Set it to true if you want change active property to 0 instead of delete the row from db"
                }
            ]
        },
        "copy": {
            "name": "copy",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, int $version = NULL, bool $private = NULL)\n  {\n    if ($note = $this->getFull($id, $version)) {\n      if ($private === null) {\n        $private = $note['private'];\n      }\n\n      $id_note = $this->insert($note['title'], $note['content'], $note['type'], $private);\n      foreach ($note['medias'] as $m) {\n        $this->addMediaToNote($m['id'], $id, $note['version']);\n      }\n\n      return $id_note;\n    }\n\n    return null;\n  }",
            "startLine": 1300,
            "endLine": 1316,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getMediasNotes": {
            "name": "getMediasNotes",
            "summary": "Selects from db all medias that have the property content not null and a correspondent existing file.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(int $start, int $limit)\n  {\n    $res = [];\n    $cf  = &$this->class_cfg;\n    $all = $this->db->rselectAll(\n      [\n        'table' => $cf['tables']['medias'],\n        'fields' => $cf['arch']['medias'],\n        'where' => [\n          'conditions' => [[\n            'field' => $cf['arch']['medias']['private'],\n            'value' => 0,\n          ], [\n            'field' => $cf['arch']['medias']['content'],\n            'operator' => 'isnotnull',\n          ]],\n        ],\n        'start' => $start,\n        'limit' => $limit,\n      ]\n    );\n    if (!empty($all)) {\n      $root = \\bbn\\Mvc::getDataPath('appui-note') . 'media\/';\n      foreach ($all as $i => $a) {\n        if (bbn\\Str::isJson($a['content']) && ($media_obj = $this->getMediaInstance())) {\n          $content   = json_decode($a['content'], true);\n          $path      = $root . $content['path'] . '\/';\n          $full_path = $path . $a['id'] . '\/' . $a['name'];\n          if (file_exists($full_path)) {\n            $all[$i]['notes'] = $this->getMediaNotes($a['id']);\n            \/\/if the media is an image it takes the thumb 60, 60 for src\n            if ($media_obj->isImage($full_path) && ($thumb = $media_obj->getThumbs($full_path))) {\n              $all[$i]['is_image'] = true;\n            }\n\n            $res[] = $all[$i];\n          }\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1326,
            "endLine": 1368,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "start",
                    "position": 0,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getMediaNotes": {
            "name": "getMediaNotes",
            "summary": "returns all the notes linked to the media.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_media)\n  {\n    $notes = [];\n    $cms   = new \\bbn\\Appui\\Cms($this->db);\n    $ids   = $this->db->rselectAll(\n      $this->class_cfg['tables']['notes_medias']\n      [\n        $this->class_cfg['arch']['notes_medias']['id_note']\n      ],\n      [\n        $this->class_cfg['arch']['notes_medias']['id_media'] => $id_media,\n      ]\n    );\n\n    if (!empty($ids)) {\n      foreach ($ids as $i) {\n        $tmp                 = $this->get($i['id_note']);\n        $tmp['is_published'] = $cms->isPublished($i['id_note']);\n        $notes[]             = $tmp;\n        \/\/return $notes;\n      }\n    }\n\n    return $notes;\n  }",
            "startLine": 1377,
            "endLine": 1401,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                }
            ]
        },
        "getEventIdFromNote": {
            "name": "getEventIdFromNote",
            "summary": "Returns event id for the given note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    return $this->db->selectOne(\n      $this->class_cfg['tables']['notes_events'],\n      $this->class_cfg['arch']['notes_events']['id_event'],\n      [\n        $this->class_cfg['arch']['notes_events']['id_note'] => $id_note\n      ]\n    );\n  }",
            "startLine": 1409,
            "endLine": 1418,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "getNoteIdFromEvent": {
            "name": "getNoteIdFromEvent",
            "summary": "Returns note id for the given event.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_event)\n  {\n    return $this->db->selectOne(\n      $this->class_cfg['tables']['notes_events'],\n      $this->class_cfg['arch']['notes_events']['id_note'],\n      [\n        $this->class_cfg['arch']['notes_events']['id_event'] => $id_event\n      ]\n    );\n  }",
            "startLine": 1426,
            "endLine": 1435,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_event",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "event"
                }
            ]
        },
        "removeNoteEvent": {
            "name": "removeNoteEvent",
            "summary": "Removes the row corresponding to the given arguments from bbn_notes_events.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $id_event)\n  {\n    return $this->_remove_note_event($id_note, $id_event);\n  }",
            "startLine": 1445,
            "endLine": 1448,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "id_event",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "event"
                }
            ]
        },
        "savePostIt": {
            "name": "savePostIt",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    if (empty($cfg['text'])) {\n      throw new Exception(X::_(\"Impossible to create an empty post-it\"));\n    }\n\n    if (!X::hasProps($cfg, ['bcolor', 'fcolor'], true)) {\n      throw new Exception(X::_(\"Impossible to create a post-it without setting a color\"));\n    }\n\n    $id_postIt = self::getOptionId('postit', 'types');\n    if (!$id_postIt) {\n      throw new Exception(X::_(\"Impossible to find the post-it option\"));\n    }\n\n    if (empty($cfg['id'])) {\n      if ($id_note = $this->insert([\n        'title' => $cfg['title'] ?? '',\n        'content' => json_encode([\n          'text' => Str::sanitizeHtml($cfg['text']),\n          'bcolor' => $cfg['bcolor'],\n          'fcolor' => $cfg['fcolor']\n        ]),\n        'id_type' => $id_postIt,\n        'pinned'  => $cfg['pinned'] ?? 0,\n        'private' => 1,\n        'excerpt' => Str::html2text($cfg['text']),\n        'mime' => 'json\/bbn-postit'\n      ])) {\n        return $this->getPostIt($id_note);\n      }\n    }\n    elseif (\n      ($postit = $this->getPostIt($cfg['id'])) && \n      $this->update(\n        $cfg['id'],\n        $cfg['title'] ?? '',\n        json_encode([\n          'text' => Str::sanitizeHtml($cfg['text']),\n          'bcolor' => $cfg['bcolor'],\n          'fcolor' => $cfg['fcolor'],\n        ]),\n        1,\n        $postit['locked'],\n        Str::html2text($cfg['text']),\n        $cfg['pinned']\n      )\n    ) {\n      return $this->getpostIt($cfg['id']);\n    }\n\n    return null;\n  }",
            "startLine": 1451,
            "endLine": 1503,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPostIt": {
            "name": "getPostIt",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ($note = $this->get($id)) {\n      if (!Str::isJson($note['content'])) {\n        throw new Exception(X::_(\"The content of the post-it should be of type JSON\"));\n      }\n\n      $cfg =json_decode($note['content'], true);\n      $note = array_merge($note, $cfg);\n      unset($note['content']);\n      return $note;\n    }\n\n    return null;\n  }",
            "startLine": 1505,
            "endLine": 1519,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPostIts": {
            "name": "getPostIts",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(int $limit = 25, int $start = 0, $only_pinned = false)\n  {\n    $id_postIt = self::getOptionId('postit', 'types');\n    $res = $this->browse(['limit' => $limit, 'start' => $start], true, true, $id_postIt, $only_pinned ?: null);\n    if ( $res ){\n      return array_map(function($a) {\n        if (Str::isJson($a['content'])) {\n          return array_merge($a, json_decode($a['content'], true));\n        }\n\n        unset($a['content']);\n        return $a;\n      }, $res['data']);\n    }\n\n    return null;\n  }",
            "startLine": 1522,
            "endLine": 1538,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "limit",
                    "position": 0,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 25,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "only_pinned",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "insertNoteEvent": {
            "name": "insertNoteEvent",
            "summary": "If the row corresponding to the given arguments is not in the table bbn_notes_events it inserts the row.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $id_event)\n  {\n    return $this->_insert_note_event($id_note, $id_event);\n  }",
            "startLine": 1547,
            "endLine": 1550,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "id_event",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "event"
                }
            ]
        },
        "addFeature": {
            "name": "addFeature",
            "summary": "Creates a new element for the given feature (= id_option)",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_option, string $id_note, string $id_media = NULL, int $num = NULL, array $cfg = NULL)\n  {\n    $id_option = $this->getFeatureOption($id_option);\n    $dbCfg     = $this->getClassCfg();\n    $table     = $dbCfg['tables']['features'];\n    $cols      = $dbCfg['arch']['features'];\n    if ($num === 0) {\n      $num = ((int)$this->db->selectOne($table, 'MAX(num)', [$cols['id_option'] => $id_option])) + 1;\n    }\n   \tif ($id = $this->db->selectOne($table, $cols['id'], [\n      $cols['id_option'] => $id_option,\n      $cols['id_note'] => $id_note\n    ])) {\n      $this->db->delete($table, [\n        $cols['id'] => $id\n      ]);\n    }\n\n    $media = null;\n    $data = [\n      $cols['id_option'] => $id_option,\n      $cols['id_note'] => $id_note,\n      $cols['id_media'] => $id_media,\n      $cols['num'] => $num,\n      $cols['cfg'] => $cfg ? json_encode($cfg) : null\n    ];\n\n    if (empty($id_media)) {\n      if ($medias = $this->getMedias($id_note)) {\n        $media    = $medias[0];\n        $id_media = $media['id'];\n      }\n    }\n    else {\n      $media = $this->getMedia($id_media);\n    }\n\n    if ($media && !$data[$cols['id_media']]) {\n      $data[$cols['id_media']] = $media['id'];\n    }\n\n    if ($this->db->insert($table, $data)) {\n      $data['id'] = $this->db->lastId();\n      return [\n        'data'  => $data,\n        'media' => $media\n      ];\n    }\n\n    return null;\n  }",
            "startLine": 1563,
            "endLine": 1613,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 2,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "id_note",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "id_media",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "num",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 4,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getFeature": {
            "name": "getFeature",
            "summary": "Gets a full feature element",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, bool $full = true)\n  {\n    $dbCfg  = $this->getClassCfg();\n    $table  = $dbCfg['tables']['features'];\n    $cols   = $dbCfg['arch']['features'];\n    if ($res = $this->db->rselect($table, $cols, [$cols['id'] => $id])) {\n      if (!empty($res['cfg'])) {\n        $res['cfg'] = json_decode($res['cfg'], true);\n      }\n\n      $res['title'] = $this->getTitle($res['id_note']);\n      $res['url']   = $this->getUrl($res['id_note']);\n      if ($res['id_media']) {\n        $media = $this->getMediaInstance();\n        $res['media'] = $media->getMedia($res['id_media'], true);\n      }\n\n      if ($full) {\n        $cms = new bbn\\Appui\\Cms($this->db);\n        $res = X::mergeArrays($cms->get($res['id_note'], false, false), $res);\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "startLine": 1623,
            "endLine": 1649,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "removeFeature": {
            "name": "removeFeature",
            "summary": "Removes an element from a feature",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    $dbCfg = $this->getClassCfg();\n    $table = $dbCfg['tables']['features'];\n    $cols  = $dbCfg['arch']['features'];\n    $res = 0;\n    if ($feat = $this->getFeature($id)) {\n      $res = $this->db->delete($table, [$cols['id'] => $id]);\n      $this->fixFeatureOrder($feat['id_option']);\n    }\n\n    return $res;\n  }",
            "startLine": 1658,
            "endLine": 1670,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setFeatureMedia": {
            "name": "setFeatureMedia",
            "summary": "Changes the media for the given geature element",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, string $id_media = NULL)\n  {\n    $dbCfg = $this->getClassCfg();\n    $table = $dbCfg['tables']['features'];\n    $cols  = $dbCfg['arch']['features'];\n    return $this->db->update($table, [\n      $cols['id_media'] => $id_media\n    ], [\n      $cols['id'] => $id\n    ]);\n  }",
            "startLine": 1680,
            "endLine": 1690,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_media",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "media"
                }
            ]
        },
        "setFeatureOrder": {
            "name": "setFeatureOrder",
            "summary": "Changes the order number (= num) for the given feature element",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, int $num)\n  {\n    $dbCfg = $this->getClassCfg();\n    $table = $dbCfg['tables']['features'];\n    $cols  = $dbCfg['arch']['features'];\n    $res = 0;\n    if ($feat = $this->getFeature($id)) {\n      if ($feat['num'] > $num) {\n        $res = $this->db->update($table, [\n          'num' => [null, '`num` + 1']\n        ], [\n          'id_option' => $feat['id_option'],\n          ['id', '!=', $id],\n          ['num', '>=', $num],\n          ['num', '<', $feat['num']]\n        ]);\n      }\n      elseif ($feat['num'] < $num) {\n        $res = $this->db->update($table, [\n          'num' => [null, '`num` - 1']\n        ], [\n          'id_option' => $feat['id_option'],\n          ['id', '!=', $id],\n          ['num', '>', $feat['num']],\n          ['num', '<=', $num]\n        ]);\n      }\n      $this->log($this->db->last(), $this->db->getLastValues());\n      $this->log($res);\n      \n      $res = $this->db->update($table, [$cols['num'] => $num], [$cols['id'] => $id]);\n      \/*\n      if ($res) {\n        $this->fixFeatureOrder($feat['id_option']);\n      }\n      *\/\n    }\n\n    return $res;\n  }",
            "startLine": 1700,
            "endLine": 1739,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "unsetFeatureOrder": {
            "name": "unsetFeatureOrder",
            "summary": "Removes all the order numbers from the given feature elements",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_option)\n  {\n    $id_option = $this->getFeatureOption($id_option);\n    $dbCfg     = $this->getClassCfg();\n    $table     = $dbCfg['tables']['features'];\n    $cols      = $dbCfg['arch']['features'];\n    return $this->db->update($table, [\n      $cols['num'] => null\n    ], [\n      $cols['id_option'] => $id_option\n    ]);\n  }",
            "startLine": 1748,
            "endLine": 1759,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ]
        },
        "fixFeatureOrder": {
            "name": "fixFeatureOrder",
            "summary": "Fix the order for all the elements of the given feature",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_option)\n  {\n    $id_option = $this->getFeatureOption($id_option);\n    $option    = $this->getOption($id_option);\n    $dbCfg     = $this->getClassCfg();\n    $table     = $dbCfg['tables']['features'];\n    $cols      = $dbCfg['arch']['features'];\n    $res       = 0;\n    $is_null   = ($option['orderMode'] ?? '') !== 'manual';\n    foreach ($this->getFeatureList($id_option) as $i => $d) {\n      if ($is_null) {\n        if (!empty($d['num'])) {\n          $res += (int)$this->db->update($table, [$cols['num'] => null], [$cols['id'] => $d['id']]);\n        }\n      }\n      else {\n        if ($d['num'] !== ($i + 1)) {\n          $res += (int)$this->db->update($table, [$cols['num'] => $i + 1], [$cols['id'] => $d['id']]);\n        }\n      }\n    }\n\n    return (bool)$res;\n  }",
            "startLine": 1768,
            "endLine": 1791,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ]
        },
        "getFeatureOption": {
            "name": "getFeatureOption",
            "summary": "Returns the given\/requested id_option, from the code if it's not a UID",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_option)\n  {\n    if (!Str::isUid($id_option)) {\n      $id_option = $this->getOptionId($id_option, 'features');\n      if (!$id_option) {\n        throw new Exception(X::_(\"Impossible to determine the feature %s\", $id_option));\n      }\n    }\n\n    return $id_option;\n  }",
            "startLine": 1800,
            "endLine": 1810,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ]
        },
        "getFeatureList": {
            "name": "getFeatureList",
            "summary": "Returns a list of the elements for the given feature, with only id and num",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_option)\n  {\n    $id_option = $this->getFeatureOption($id_option);\n    $dbCfg = $this->getClassCfg();\n    $table = $dbCfg['tables']['features'];\n    $cols  = $dbCfg['arch']['features'];\n    return $this->db->rselectAll($table, [$cols['id'], $cols['num']], [$cols['id_option'] => $id_option]) ?: [];\n  }",
            "startLine": 1819,
            "endLine": 1826,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ]
        },
        "setFeatureCfg": {
            "name": "setFeatureCfg",
            "summary": "Changes the config of a feature element",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, array $cfg = NULL)\n  {\n    $dbCfg = $this->getClassCfg();\n    $table = $dbCfg['tables']['features'];\n    $cols  = $dbCfg['arch']['features'];\n    return $this->db->update($table, [\n      $cols['cfg'] => $cfg ? json_encode($cfg) : null\n    ], [\n      $cols['id'] => $id\n    ]);\n  }",
            "startLine": 1836,
            "endLine": 1846,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getFeatures": {
            "name": "getFeatures",
            "summary": "Gets all the elements, and their details, for the given feature",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_option, bool $full = true)\n  {\n    $res = [];\n    foreach ($this->getFeatureList($id_option) as $d) {\n      $res[] = $this->getFeature($d['id'], $full);\n    }\n\n    $option = $this->getOption($id_option);\n    $mode = $option['orderMode'] ?? 'random';\n    switch ($mode) {\n      case \"random\":\n        shuffle($res);\n        break;\n      case \"latest\":\n        X::sortBy($res, 'start', 'desc');\n        break;\n      case \"first\":\n        X::sortBy($res, 'start', 'asc');\n        break;\n      case \"manual\":\n        X::sortBy($res, 'num', 'asc');\n        break;\n    }\n    return $res;\n  }",
            "startLine": 1856,
            "endLine": 1880,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "pin": {
            "name": "pin",
            "summary": "Pins the given note",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    return (bool)$this->db->update($this->class_table, [$this->fields['pinned'] => 1], [$this->fields['id'] => $id]);\n  }",
            "startLine": 1887,
            "endLine": 1890,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The note ID"
                }
            ]
        },
        "unpin": {
            "name": "unpin",
            "summary": "Unpins the given note",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    return (bool)$this->db->update($this->class_table, [$this->fields['pinned'] => 0], [$this->fields['id'] => $id]);\n  }",
            "startLine": 1897,
            "endLine": 1900,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The note ID"
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 50,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 50,
                "endLine": 57,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 64,
            "endLine": 71,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 64,
                "endLine": 71,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->error;\n  }",
            "startLine": 85,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 85,
                "endLine": 88,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 91,
            "endLine": 94,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 91,
                "endLine": 94,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 97,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 97,
                "endLine": 106,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 114,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 114,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getReferences": {
            "name": "getReferences",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return [\n      'select' => $this->references_select,\n      'join' => $this->references_join\n    ];\n  }",
            "startLine": 55,
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "startLine": 150,
            "endLine": 154,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getAppuiRoot": {
            "name": "getAppuiRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_appui_id;\n  }",
            "startLine": 157,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "startLine": 164,
            "endLine": 172,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "parent": false,
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 181,
            "endLine": 184,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...self::_treat_args(func_get_args())), function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 187,
            "endLine": 196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "startLine": 199,
            "endLine": 202,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 205,
            "endLine": 208,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 211,
            "endLine": 214,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 217,
            "endLine": 220,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionId": {
            "name": "getAppuiOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 229,
            "endLine": 232,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsIds": {
            "name": "getAppuiOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(\n          ...self::_treat_args(func_get_args(), true)\n        ),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 235,
            "endLine": 247,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTree": {
            "name": "getAppuiOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args(), true)) ) ? $tree['items'] : [];\n  }",
            "startLine": 250,
            "endLine": 253,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptions": {
            "name": "getAppuiOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 256,
            "endLine": 259,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOption": {
            "name": "getAppuiOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 262,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTextValue": {
            "name": "getAppuiOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getAppuiOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 268,
            "endLine": 271,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "exists": {
            "name": "exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($filter)\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (!empty($cfg) && $arr = $this->db->count(\n      $this->class_table,\n      $cfg\n    )) {\n      return true;\n    }\n\n    return false;\n  }",
            "startLine": 37,
            "endLine": 59,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the class configuration.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->class_cfg;\n  }",
            "startLine": 67,
            "endLine": 70,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the fields of the main table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->fields;\n  }",
            "startLine": 78,
            "endLine": 81,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes a single row from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ($data = $this->exists($id)) {\n      $ccfg = $this->getClassCfg();\n      $f = $ccfg['arch'][$this->class_table_index];\n      return (bool)$this->db->delete($ccfg['table'], [$f['id'] => $id]);\n    }\n\n    return false;\n  }",
            "startLine": 111,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "selectOne": {
            "name": "selectOne",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $field, $filter, array $order = [])\n  {\n    if ($res = $this->dbConfigSingleSelection($filter, $order, false, [$field])) {\n      return $res[$field] ?? null;\n    }\n\n    return null;\n  }",
            "startLine": 159,
            "endLine": 166,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "select": {
            "name": "select",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($filter, array $order = [])\n  {\n    return $this->dbConfigSingleSelection($filter, $order, true);\n  }",
            "startLine": 177,
            "endLine": 180,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "stdClass"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "rselect": {
            "name": "rselect",
            "summary": "Retrieves a row as an array from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($filter, array $order = [])\n  {\n    return $this->dbConfigSingleSelection($filter, $order, false);\n  }",
            "startLine": 191,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "selectAll": {
            "name": "selectAll",
            "summary": "Returns an array of rows as objects from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $filter, array $order = [], int $limit = 0, int $start = 0)\n  {\n    return $this->dbConfigSelection($filter, $order, $limit, $start, true);\n  }",
            "startLine": 224,
            "endLine": 227,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "rselectAll": {
            "name": "rselectAll",
            "summary": "Returns an array of rows as arrays from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $filter, array $order = [], int $limit = 0, int $start = 0)\n  {\n    return $this->dbConfigSelection($filter, $order, $limit, $start, false);\n  }",
            "startLine": 240,
            "endLine": 243,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getUrl": {
            "name": "getUrl",
            "summary": "Returns the URL corresponding to the given item's ID",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_item, bool $followRedirect = true)\n  {\n    $this->checkUrlCfg();\n    if ($id_url = $this->db->selectOne($this->urlTable, $this->urlFields['id_url'], [\n      $this->class_cfg['urlItemField'] => $id_item\n    ])) {\n      return $this->url->getUrl($id_url, $followRedirect);\n    }\n\n    return null;\n  }",
            "startLine": 63,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                },
                {
                    "name": "followRedirect",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "edirect"
                }
            ]
        },
        "getUrls": {
            "name": "getUrls",
            "summary": "Returns the URL corresponding to the given item's ID",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_item, bool $followRedirect = true)\n  {\n    $this->checkUrlCfg();\n    $res = [];\n    if ($id_urls = $this->db->getColumnValues($this->urlTable, $this->urlFields['id_url'], [\n      $this->class_cfg['urlItemField'] => $id_item\n    ])) {\n      foreach ($id_urls as $id_url) {\n        $res[] = $this->url->getUrl($id_url, $followRedirect);\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 83,
            "endLine": 96,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                },
                {
                    "name": "followRedirect",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "edirect"
                }
            ]
        },
        "urlExists": {
            "name": "urlExists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $url)\n  {\n    return (bool)$this->getUrlId($url);\n  }",
            "startLine": 103,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "urlToId": {
            "name": "urlToId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $url)\n  {\n    $this->checkUrlCfg();\n    if ($id_url = $this->getUrlId($url)) {\n      return $this->db->selectOne($this->urlTable, $this->class_cfg['urlItemField'], [\n        $this->urlFields['id_url'] => $id_url\n      ]);\n    }\n\n    return null;\n  }",
            "startLine": 113,
            "endLine": 123,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "idToUrl": {
            "name": "idToUrl",
            "summary": "Returns the ID of the URL for the given item",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_item)\n  {\n    $this->checkUrlCfg();\n    return $this->db->selectOne($this->urlTable, $this->urlFields['id_url'], [\n      $this->class_cfg['urlItemField'] => $id_item\n    ]);\n  }",
            "startLine": 132,
            "endLine": 138,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                }
            ]
        },
        "getUrlId": {
            "name": "getUrlId",
            "summary": "Returns a URL's id based on its URL",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $url)\n  {\n    $this->checkUrlCfg();\n    return $this->url->retrieveUrl($url);\n  }",
            "startLine": 147,
            "endLine": 151,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getFullUrl": {
            "name": "getFullUrl",
            "summary": "Returns the whole content of the URL row based on its ID",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_url)\n  {\n    $this->checkUrlCfg();\n    return $this->url->select($id_url);\n  }",
            "startLine": 160,
            "endLine": 164,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "stdClass"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "url"
                }
            ]
        },
        "setUrl": {
            "name": "setUrl",
            "summary": "Adds or replace a URL for a given item's ID",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_item, string $url, string $type = NULL)\n  {\n    $this->checkUrlCfg();\n    if (!($url = $this->sanitizeUrl($url))) {\n      throw new Exception(X::_(\"The URL can't be empty\"));\n    }\n\n    if (!($id_url = $this->url->retrieveUrl($url))\n        && (!$id_url = $this->url->add($url, $type ?: $this->urlType))\n    ) {\n      throw new Exception(X::_(\"Impossible to add the URL %s\", $url));\n    }\n\n    if ($checkItem = $this->urlToId($id_url)) {\n      if ($checkItem !== $id_item) {\n        throw new Exception(X::_(\"The URL is already in use by another item\"));\n      }\n    }\n    elseif (!$this->db->insert($this->urlTable, [\n      $this->class_cfg['urlItemField'] => $id_item,\n      $this->urlFields['id_url'] => $id_url\n    ])) {\n      return null;\n    }\n\n    return $id_url ?: null;\n  }",
            "startLine": 175,
            "endLine": 201,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                },
                {
                    "name": "url",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "addUrl": {
            "name": "addUrl",
            "summary": "Creates a new URL for a given item's ID",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_item, string $url, string $prefix = '', string $type = NULL)\n  {\n    $this->checkUrlCfg();\n    if (!$type && !$this->urlType) {\n      throw new Exception(X::_(\"You have no type set and no default type for the class %s\"), __CLASS__);\n    }\n\n    if ($id_url = $this->url->add($url, $type ?: $this->urlType, $prefix)) {\n      $this->db->delete($this->urlTable, [\n        $this->class_cfg['urlItemField'] => $id_item\n      ]);\n      return (bool)$this->db->insert($this->urlTable, [\n        $this->class_cfg['urlItemField'] => $id_item,\n        $this->urlFields['id_url'] => $id_url\n      ]);\n    }\n\n    return $id_url ?: null;\n  }",
            "startLine": 213,
            "endLine": 231,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                },
                {
                    "name": "url",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "prefix",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "redirectUrl": {
            "name": "redirectUrl",
            "summary": "Returns true if the item is linked to an url.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_item, string $url_source, string $url_destination)\n  {\n    $this->checkUrlCfg();\n    if ($id_source = $this->getUrlId($url_source)) {\n      $url = $this->getFullUrl($id_source);\n      if ($url && ($id_destination = $this->setUrl($id_item, $url_destination, $url->type))) {\n        $cfg = $this->url->getClassCfg();\n        return (bool)$this->db->update(\n          $cfg['table'],\n          [$cfg['arch']['url']['redirect'] => $id_destination],\n          [$cfg['arch']['url']['id'] => $id_source]\n        );\n      }\n    }\n\n    return false;\n  }",
            "startLine": 242,
            "endLine": 258,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "source"
                },
                {
                    "name": "url_source",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "destination"
                },
                {
                    "name": "url_destination",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hasUrl": {
            "name": "hasUrl",
            "summary": "Returns true if the item is linked to an url.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_item)\n  {\n    $this->checkUrlCfg();\n    return (bool)$this->db->count(\n      $this->urlTable,\n      [$this->class_cfg['urlItemField'] => $id_item]\n    );\n  }",
            "startLine": 268,
            "endLine": 275,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                }
            ]
        },
        "deleteUrl": {
            "name": "deleteUrl",
            "summary": "Deletes url for the given note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_item)\n  {\n    $this->checkUrlCfg();\n    $id_url = $this->db->selectOne(\n      $this->urlTable,\n      $this->urlFields['id_url'],\n      [$this->class_cfg['urlItemField'] => $id_item]\n    );\n\n    if ($id_url) {\n      $this->db->delete(\n        $this->urlTable,\n        [$this->class_cfg['urlItemField'] => $id_item]\n      );\n      return (bool)$this->url->delete($id_url);\n    }\n\n    throw new Exception(X::_(\"Impossible to retrieve the URL for item %s\", $id_item));\n  }",
            "startLine": 284,
            "endLine": 302,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                }
            ]
        },
        "sanitizeUrl": {
            "name": "sanitizeUrl",
            "summary": "Trims the slashes and removes double slashes if any.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $url)\n  {\n    $this->checkUrlCfg();\n    return $this->url->sanitize($url);\n  }",
            "startLine": 311,
            "endLine": 315,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTags": {
            "name": "getTags",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_element, bool $full = false, bool $force = false)\n  {\n    $this->taggerInit();\n    $res = [];\n    $ids = $this->db->getColumnValues(\n      $this->taggerTable,\n      $this->taggerCols['id_tag'],\n      [$this->taggerCols['id_element'] => $id_element]\n    );\n    foreach ($ids as $id) {\n      if ($tmp = $this->taggerObject->getById($id, $full)) {\n        $res[] = $tmp;\n      }\n      elseif (!$force) {\n        X::log([$ids, $this->db->last()]);\n        throw new Exception(X::_(\"Impossible to find the tag %s\", $id));\n      }\n    }\n   \n    return $res;\n  }",
            "startLine": 41,
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "setTags": {
            "name": "setTags",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_element, array $tags, string $lang = '')\n  {\n    $this->taggerInit();\n    $lang = $this->taggerGetLang($lang);\n    if (!$this->exists($id_element)) {\n      throw new Exception(X::_(\"Impossible to find the element in %s\", __CLASS__));\n    }\n\n    foreach ($this->getTags($id_element, true) as $tag) {\n      $idx = X::indexOf($tags, $tag['tag']);\n      if ($idx > -1) {\n        array_splice($tags, $idx, 1);\n      }\n      else {\n        $this->removeTag($id_element, $tag['id']);\n      }\n    }\n\n    $num = 0;\n    foreach ($tags as $tag) {\n      if ($this->addTag($id_element, $tag, $lang)) {\n        $num++;\n      }\n    }\n\n    return $num;\n  }",
            "startLine": 71,
            "endLine": 97,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "element The ID of the element to which attach the tags"
                },
                {
                    "name": "tags",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "A list of tags which will be retrieved or added"
                },
                {
                    "name": "lang",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "removeTag": {
            "name": "removeTag",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_element, string $id_tag)\n  {\n    $this->taggerInit();\n    return $this->db->delete(\n      $this->taggerTable,\n      [\n        $this->taggerCols['id_element'] => $id_element,\n        $this->taggerCols['id_tag'] => $id_tag\n      ]\n    );\n  }",
            "startLine": 100,
            "endLine": 110,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_tag",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "removeTags": {
            "name": "removeTags",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_element)\n  {\n    $this->taggerInit();\n    return $this->db->delete(\n      $this->taggerTable,\n      [\n        $this->taggerCols['id_element'] => $id_element,\n      ]\n    );\n  }",
            "startLine": 113,
            "endLine": 122,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addTag": {
            "name": "addTag",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_element, string $tag, string $lang = '', string $description = '')\n  {\n    $this->taggerInit();\n    $lang = $this->taggerGetLang($lang);\n    if ($tmp = $this->taggerObject->get($tag, $lang)) {\n      $id_tag = $tmp['id'];\n    }\n    else {\n      $id_tag = $this->taggerObject->add($tag, $lang, $description);\n    }\n\n    if (!$id_tag) {\n      throw new Exception(X::_(\"Impossible to create the tag %s\", $tag));\n    }\n\n    return $this->db->insertIgnore(\n      $this->taggerTable,\n      [\n        $this->taggerCols['id_element'] => $id_element,\n        $this->taggerCols['id_tag'] => $id_tag\n      ]\n    );\n  }",
            "startLine": 125,
            "endLine": 147,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "tag",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "description",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": {
        "default_class_cfg": {
            "errors": {
                "19": "wrong fingerprint"
            },
            "table": "bbn_notes",
            "tables": {
                "notes": "bbn_notes",
                "versions": "bbn_notes_versions",
                "features": "bbn_notes_features",
                "notes_medias": "bbn_notes_medias",
                "medias": "bbn_medias",
                "notes_tags": "bbn_notes_tags",
                "notes_url": "bbn_notes_url",
                "notes_events": "bbn_notes_events"
            },
            "arch": {
                "notes": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "id_alias": "id_alias",
                    "id_type": "id_type",
                    "id_option": "id_option",
                    "mime": "mime",
                    "lang": "lang",
                    "private": "private",
                    "locked": "locked",
                    "pinned": "pinned",
                    "creator": "creator",
                    "active": "active"
                },
                "versions": {
                    "id_note": "id_note",
                    "version": "version",
                    "latest": "latest",
                    "title": "title",
                    "content": "content",
                    "excerpt": "excerpt",
                    "id_user": "id_user",
                    "creation": "creation"
                },
                "features": {
                    "id": "id",
                    "id_option": "id_option",
                    "id_note": "id_note",
                    "id_media": "id_media",
                    "num": "num",
                    "cfg": "cfg"
                },
                "notes_medias": {
                    "id": "id",
                    "id_media": "id_media",
                    "id_note": "id_note",
                    "id_user": "id_user",
                    "comment": "comment",
                    "creation": "creation",
                    "default_media": "default_media"
                },
                "medias": {
                    "id": "id",
                    "id_user": "id_user",
                    "type": "type",
                    "name": "name",
                    "title": "title",
                    "content": "content",
                    "private": "private"
                },
                "notes_events": {
                    "id_note": "id_note",
                    "id_event": "id_event"
                },
                "notes_tags": {
                    "id_note": "id_note",
                    "id_tag": "id_tag"
                },
                "notes_url": {
                    "id_url": "id_url",
                    "id_note": "id_note"
                }
            },
            "paths": {
                "medias": "media\/"
            },
            "urlItemField": "id_note",
            "urlTypeValue": "note"
        },
        "optional_is_init": false,
        "option_root_id": null,
        "option_appui_id": null
    },
    "constants": null,
    "summary": "",
    "description": "",
    "description_parts": []
}