{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Note",
    "namespace": true,
    "realName": "Note",
    "realNamespace": "bbn\\Appui",
    "traits": [
        "bbn\\Models\\Tts\\References",
        "bbn\\Models\\Tts\\Optional",
        "bbn\\Models\\Tts\\DbActions",
        "bbn\\Models\\Tts\\Url",
        "bbn\\Models\\Tts\\Tagger"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Note.php",
    "startLine": 31,
    "endLine": 2064,
    "numMethods": 137,
    "numProperties": 37,
    "numConstants": 0,
    "numStaticProperties": 3,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "errors": {
                "19": "wrong fingerprint"
            },
            "table": "bbn_notes",
            "tables": {
                "notes": "bbn_notes",
                "versions": "bbn_notes_versions",
                "features": "bbn_notes_features",
                "notes_medias": "bbn_notes_medias",
                "medias": "bbn_medias",
                "notes_tags": "bbn_notes_tags",
                "notes_url": "bbn_notes_url",
                "notes_events": "bbn_notes_events"
            },
            "arch": {
                "notes": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "id_alias": "id_alias",
                    "id_type": "id_type",
                    "id_option": "id_option",
                    "mime": "mime",
                    "lang": "lang",
                    "private": "private",
                    "locked": "locked",
                    "pinned": "pinned",
                    "important": "important",
                    "creator": "creator",
                    "active": "active"
                },
                "versions": {
                    "id_note": "id_note",
                    "version": "version",
                    "latest": "latest",
                    "title": "title",
                    "content": "content",
                    "excerpt": "excerpt",
                    "id_user": "id_user",
                    "creation": "creation"
                },
                "features": {
                    "id": "id",
                    "id_option": "id_option",
                    "id_note": "id_note",
                    "id_media": "id_media",
                    "num": "num",
                    "cfg": "cfg"
                },
                "notes_medias": {
                    "id": "id",
                    "id_note": "id_note",
                    "version": "version",
                    "id_media": "id_media",
                    "id_user": "id_user",
                    "comment": "comment",
                    "creation": "creation",
                    "default_media": "default_media"
                },
                "medias": {
                    "id": "id",
                    "id_user": "id_user",
                    "type": "type",
                    "name": "name",
                    "title": "title",
                    "content": "content",
                    "private": "private"
                },
                "notes_events": {
                    "id_note": "id_note",
                    "id_event": "id_event"
                },
                "notes_tags": {
                    "id_note": "id_note",
                    "id_tag": "id_tag"
                },
                "notes_url": {
                    "id_url": "id_url",
                    "id_note": "id_note"
                }
            },
            "paths": {
                "medias": "media\/"
            },
            "urlItemField": "id_note",
            "urlTypeValue": "note"
        },
        "optional_is_init": false,
        "option_root_id": null,
        "medias": null,
        "usr": null,
        "userId": null,
        "lang": null,
        "class_cfg": null,
        "db": null,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": [],
        "references": null,
        "references_select": "",
        "references_join": "",
        "options": null,
        "_isInitClassCfg": false,
        "fields": null,
        "class_table": null,
        "class_table_index": null,
        "rootFilterCfg": [],
        "dbTraitFilterCfg": [],
        "dbTraitRelations": [],
        "dbTraitStructure": [],
        "isInitUrl": false,
        "urlType": null,
        "urlTable": null,
        "urlTableIdx": null,
        "urlFields": null,
        "url": null,
        "taggerIsInit": false,
        "taggerTable": null,
        "taggerCols": null,
        "taggerObject": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Note",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Note constructor.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(Db $db, string|null $lang = null)\n  {\n    parent::__construct($db);\n    $this->initClassCfg(self::$default_class_cfg);\n    self::optionalInit();\n    $this->urlType = 'note';\n    $this->taggerInit(\n      $this->class_cfg['tables']['notes_tags'],\n      [\n        'id_tag' => $this->class_cfg['arch']['notes_tags']['id_tag'],\n        'id_element' => $this->class_cfg['arch']['notes_tags']['id_note']\n      ]\n    );\n    $this->lang = $lang ?: (defined('BBN_LANG') ? BBN_LANG : 'en');\n    $this->usr    = User::getInstance();\n    $this->userId = $this->usr->getId() ?: $this->setExternalUser();\n  }",
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Db",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Db.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function __construct(dbClass $db)\n  {\n    $this->db = $db;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "__construct",
                "returns": [],
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "type_arr": [
                            "bbn\\Db"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ],
                "doc": {
                    "description": "Constructor.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "dbClass",
                            "name": "$db",
                            "description": "A database connection"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Constructor.\n   *\n   * @param dbClass $db A database connection\n   *\/"
            },
            "trait": false,
            "startLine": 144,
            "endLine": 160,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Note constructor.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Db",
                        "name": "$db"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Note constructor.\n   *\n   * @param Db $db\n   * @throws Exception\n   *\/"
        },
        "setExternalUser": {
            "name": "setExternalUser",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setExternalUser()\n  {\n    $this->userId = defined('BBN_EXTERNAL_USER_ID') ? constant('BBN_EXTERNAL_USER_ID') : null;\n    return $this->userId;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 163,
            "endLine": 167,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "setExternalUser",
            "returns": [],
            "arguments": []
        },
        "getUserId": {
            "name": "getUserId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUserId(): ?string\n  {\n    return $this->userId;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 170,
            "endLine": 173,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getUserId",
            "returns": [
                null,
                "string"
            ],
            "arguments": []
        },
        "setLang": {
            "name": "setLang",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setLang($lang): self\n  {\n    $this->lang = $lang;\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 176,
            "endLine": 180,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setLang",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "lang",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLang": {
            "name": "getLang",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLang(): string\n  {\n    return $this->lang;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 183,
            "endLine": 186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLang",
            "returns": [
                "string"
            ],
            "arguments": []
        },
        "getMediaInstance": {
            "name": "getMediaInstance",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMediaInstance(): Medias\n  {\n    if (!$this->medias) {\n      $this->medias = new Medias($this->db);\n    }\n\n    if ($this->medias->getUserId() !== $this->userId) {\n      $this->medias->setExternalUser();\n    }\n\n    return $this->medias;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 192,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getMediaInstance",
            "returns": [
                "bbn\\Appui\\Medias"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return Medias\n   *\/"
        },
        "getExcerpt": {
            "name": "getExcerpt",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getExcerpt($title, $content): string\n  {\n    $excerpt = '';\n    if (!empty($title)) {\n      $excerpt .= Str::html2text($title, false) . PHP_EOL . PHP_EOL;\n    }\n\n    if (!empty($content)) {\n      if (Str::isJson($content)) {\n        $ct = json_decode($content, true);\n        foreach ($ct as $n => $c) {\n          if (is_string($c) && in_array($n, ['title', 'text', 'html'])) {\n            if (Str::isHTML($c)) {\n              $excerpt .= Str::html2text($c, strpos($c, PHP_EOL) > 0) . PHP_EOL . PHP_EOL;\n            }\n            else {\n              $excerpt .= $c;\n            }\n          } elseif (is_array($c)) {\n            foreach ($c as $k => $v) {\n              if (is_string($v)) {\n                if (is_string($k)) {\n                  $excerpt .= $k . ': ';\n                }\n\n                $excerpt .= Str::html2text($v, strpos($v, PHP_EOL) > 0) . PHP_EOL . PHP_EOL;\n              }\n            }\n          }\n        }\n      }\n      elseif (Str::isHTML($content)) {\n        $excerpt .= Str::html2text($content);\n      }\n      elseif (is_string($content)) {\n        $excerpt .= $content;\n      }\n    }\n\n    return $excerpt;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 211,
            "endLine": 251,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getExcerpt",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "title",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$title"
                    },
                    {
                        "tag": "param",
                        "type": "$content"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $title\n   * @param $content\n   * @return string\n   *\/"
        },
        "insert": {
            "name": "insert",
            "summary": "Creates a new note in the database",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insert(\n    $title,\n    string $content = '',\n    string|null $id_type = null,\n    bool   $private = false,\n    bool   $locked = false,\n    string|null $id_parent = null,\n    string|null $id_alias = null,\n    string|null $mime = '',\n    string|null $lang = '',\n    string|null $id_option = null,\n    string|null $excerpt = '',\n    bool   $pinned = false,\n    bool   $important = false\n  ): ?string\n  {\n    $props = [\n      'title',\n      'content',\n      'id_type',\n      'private',\n      'locked',\n      'id_parent',\n      'id_alias',\n      'mime',\n      'lang',\n      'id_option',\n      'excerpt',\n      'pinned',\n      'important'\n    ];\n    if (is_array($title)) {\n      $cfg = $title;\n    }\n    else {\n      $cfg = [];\n    }\n\n    foreach ($props as $prop) {\n      if (!array_key_exists($prop, $cfg)) {\n        $cfg[$prop] = $$prop;\n      }\n    }\n\n    if (empty($cfg['content']) && empty($cfg['title'])) {\n      return null;\n    }\n\n    if (empty($cfg['lang']) && defined('BBN_LANG')) {\n      $cfg['lang'] = BBN_LANG;\n    }\n\n    $cf = &$this->class_cfg;\n    if (is_null($cfg['id_type'])) {\n      $cfg['id_type'] = self::getOptionId('personal', 'types');\n    }\n\n    if (!$cfg['excerpt']) {\n      $cfg['excerpt'] = $this->getExcerpt($cfg['title'], $cfg['content']);\n    }\n\n    $id_note = null;\n\n    if ($this->userId\n      && $this->db->insert(\n        $cf['table'],\n        [\n          $cf['arch']['notes']['id_parent'] => $cfg['id_parent'],\n          $cf['arch']['notes']['id_alias'] => $cfg['id_alias'],\n          $cf['arch']['notes']['id_type'] => $cfg['id_type'],\n          $cf['arch']['notes']['id_option'] => $cfg['id_option'],\n          $cf['arch']['notes']['private'] => !empty($cfg['private']) ? 1 : 0,\n          $cf['arch']['notes']['locked'] => !empty($cfg['locked']) ? 1 : 0,\n          $cf['arch']['notes']['creator'] => $this->userId,\n          $cf['arch']['notes']['mime'] => $cfg['mime'],\n          $cf['arch']['notes']['lang'] => $cfg['lang'],\n          $cf['arch']['notes']['pinned'] => !empty($cfg['pinned']) ? 1 : 0,\n          $cf['arch']['notes']['important'] => !empty($cfg['important']) ? 1 : 0\n        ]\n      )\n      && ($id_note = $this->db->lastId())\n    ) {\n      $this->insertVersion($id_note, $cfg['title'], $cfg['content'], $cfg['excerpt']);\n    }\n\n    return $id_note;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 269,
            "endLine": 355,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 13,
            "numberOfRequiredParameters": 1,
            "shortName": "insert",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "title",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The title or the whole config in an indexed array"
                },
                {
                    "name": "content",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_type",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 3,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "locked",
                    "position": 4,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "id_parent",
                    "position": 5,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "id_alias",
                    "position": 6,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "mime",
                    "position": 7,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 8,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_option",
                    "position": 9,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "excerpt",
                    "position": 10,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "pinned",
                    "position": 11,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "important",
                    "position": 12,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Creates a new note in the database\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$title",
                        "description": "The title or the whole config in an indexed array"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$content"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$type"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$private"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$locked"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$parent"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$alias"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mime"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$lang"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates a new note in the database\n   * \n   * @param string|array $title The title or the whole config in an indexed array\n   * @param string $content\n   * @param string|null $type\n   * @param bool $private\n   * @param bool $locked\n   * @param string|null $parent\n   * @param string|null $alias\n   * @param string $mime\n   * @param string $lang\n   * @param string|null $id_option\n   * @return string|null\n   *\/"
        },
        "insertVersion": {
            "name": "insertVersion",
            "summary": "Adds a new version to the given note if it's different from the last, and returns the latest version.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insertVersion(string $id_note, string $title = '', string $content = '', string $excerpt = ''): ?int\n  {\n    if ($this->check()\n        && $this->userId\n        && ($note = $this->get($id_note))\n        && ($title || $content)\n    ) {\n      $cf     = &$this->class_cfg;\n      $latest = $note['version'] ?? 0;\n      if (!$latest \n          || ($note['content'] != $content)\n          || ($note['title'] != $title)\n          || ($note['excerpt'] != $excerpt)\n      ) {\n        $next = $latest + 1;\n      }\n\n      if (\n        isset($next) && $this->db->insert(\n          $cf['tables']['versions'],\n          [\n            $cf['arch']['versions']['id_note'] => $id_note,\n            $cf['arch']['versions']['version'] => $next ?? 1,\n            $cf['arch']['versions']['latest'] => 1,\n            $cf['arch']['versions']['title'] => $title,\n            $cf['arch']['versions']['content'] => $content,\n            $cf['arch']['versions']['excerpt'] => $excerpt ?: '',\n            $cf['arch']['versions']['id_user'] => $this->userId,\n            $cf['arch']['versions']['creation'] => date('Y-m-d H:i:s'),\n          ]\n        )\n      ) {\n        $this->db->update(\n          $cf['tables']['versions'],\n          [$cf['arch']['versions']['latest'] => 0],\n          [\n            $cf['arch']['versions']['id_note'] => $id_note,\n            ['version', '!=', $next]\n          ]\n        );\n\n        return $next;\n      }\n\n      return $latest;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 366,
            "endLine": 414,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "insertVersion",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "excerpt",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds a new version to the given note if it's different from the last, and returns the latest version.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$title"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$content"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Adds a new version to the given note if it's different from the last, and returns the latest version.\n   *\n   * @param string $id_note\n   * @param string $title\n   * @param string $content\n   * @return int|null\n   *\/"
        },
        "update": {
            "name": "update",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function update(\n     string $id,\n     $title,\n     string $content = '',\n     bool   $private = false,\n     bool   $locked = false,\n     string $excerpt = '',\n     bool   $pinned = false,\n     bool   $important = false\n  ): ?int\n  {\n    $props = [\n      'title',\n      'content',\n      'private',\n      'locked',\n      'lang',\n      'excerpt',\n      'pinned',\n      'important'\n    ];\n    if (is_array($title)) {\n      $cfg = $title;\n      $title = $cfg['title'] ?? '';\n    }\n    else {\n      $cfg = [];\n    }\n\n    foreach ($props as $prop) {\n      if (!array_key_exists($prop, $cfg) && isset($$prop)) {\n        $cfg[$prop] = $$prop;\n      }\n    }\n\n    if (empty($cfg['content']) && empty($cfg['title'])) {\n      return null;\n    }\n\n    $ok = null;\n    if ($old = $this->get($id)) {\n      $ok  = 0;\n      $new_note = [];\n      $new_version = [];\n      foreach ($props as $p) {\n        if (isset($cfg[$p]) && ($cfg[$p] != ($old[$p] ?? ''))) {\n          if (in_array($p, ['content', 'title', 'excerpt'])) {\n            $new_version[$p] = $cfg[$p];\n          }\n          elseif (isset($cfg[$p])) {\n            $new_note[$p] = $cfg[$p];\n          }\n        }\n      }\n\n      if (!empty($new_note)) {\n        $ok = $this->db->update('bbn_notes', $new_note, ['id' => $id]);\n      }\n\n      if (!empty($new_version)) {\n        $ok = $this->insertVersion($id, $cfg['title'], $cfg['content'], $cfg['excerpt']);\n      }\n    }\n\n    return $ok;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 425,
            "endLine": 490,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 8,
            "numberOfRequiredParameters": 2,
            "shortName": "update",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 3,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "locked",
                    "position": 4,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "excerpt",
                    "position": 5,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "pinned",
                    "position": 6,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "important",
                    "position": 7,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$title"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$content"
                    },
                    {
                        "tag": "param",
                        "type": "bool|null",
                        "name": "$private"
                    },
                    {
                        "tag": "param",
                        "type": "bool|null",
                        "name": "$locked"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @param string $title\n   * @param string $content\n   * @param bool|null $private\n   * @param bool|null $locked\n   * @return int|null\n   *\/"
        },
        "setType": {
            "name": "setType",
            "summary": "Changes the type of the note",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setType(string $id_note, string $type): int\n  {\n    $cf = &$this->class_cfg;\n    return $this->db->update(\n      $cf['tables']['notes'],\n      [$cf['arch']['notes']['id_type'] => $type],\n      [$cf['arch']['notes']['id'] => $id_note]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 500,
            "endLine": 508,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setType",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Changes the type of the note\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    }
                ],
                "return": "The number of affected rows (1 if ok)"
            },
            "comments": "  \/**\n   * Changes the type of the note\n   *\n   * @param string $id_note\n   * @param string $type\n   * @return null|int The number of affected rows (1 if ok)\n   *\/"
        },
        "setOption": {
            "name": "setOption",
            "summary": "Changes the id_option of the note",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setOption(string $id_note, string $id_option): int\n  {\n    $cf = &$this->class_cfg;\n    return $this->db->update(\n      $cf['tables']['notes'],\n      [$cf['arch']['notes']['id_option'] => $id_option],\n      [$cf['arch']['notes']['id'] => $id_note]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 518,
            "endLine": 526,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setOption",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "id_option",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "Changes the id_option of the note\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": "The number of affected rows (1 if ok)"
            },
            "comments": "  \/**\n   * Changes the id_option of the note\n   *\n   * @param string $id_note\n   * @param string $id_option\n   * @return int The number of affected rows (1 if ok)\n   *\/"
        },
        "latest": {
            "name": "latest",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function latest($id)\n  {\n    $cf = &$this->class_cfg;\n\n    return $this->db->selectOne(\n      $cf['tables']['versions'],\n      'MAX(' . $cf['arch']['versions']['version'] . ')',\n      [\n        $cf['arch']['versions']['id_note'] => $id,\n      ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 533,
            "endLine": 544,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "latest",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $id\n   * @return mixed\n   *\/"
        },
        "getTitle": {
            "name": "getTitle",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTitle(string $id): ?string\n  {\n    $cf = &$this->class_cfg;\n    return $this->db->selectOne(\n      $cf['tables']['versions'],\n      $cf['arch']['versions']['title'],\n      [$cf['arch']['versions']['id_note'] => $id],\n      [$cf['arch']['versions']['version'] => 'DESC']\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 547,
            "endLine": 556,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTitle",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get": {
            "name": "get",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function get(string $id, ?int $version = null, bool $simple = false): ?array\n  {\n    $cf = &$this->class_cfg;\n    if (!\\is_int($version)) {\n      $version = $this->latest($id) ?: 1;\n    }\n\n    if ($res = $this->db->rselect(\n      $cf['tables']['notes'],\n      [],\n      [\n        $cf['arch']['notes']['id'] => $id,\n      ]\n    )) {\n      if ($tmp = $this->db->rselect(\n        $cf['tables']['versions'],\n        [],\n        [\n          $cf['arch']['versions']['id_note'] => $id,\n          $cf['arch']['versions']['version'] => $version,\n        ]\n      )) {\n        $res = array_merge($res, $tmp);\n      }\n\n      if ($simple) {\n        unset($res[$cf['arch']['versions']['content']]);\n      }\n      else {\n        if ($medias = $this->db->getColumnValues(\n          $cf['tables']['notes_medias'],\n          $cf['arch']['notes_medias']['id_media'],\n          [\n            $cf['arch']['notes_medias']['id_note'] => $id\n          ]\n        )) {\n          $media         = $this->getMediaInstance();\n          $res['medias'] = [];\n          foreach ($medias as $m) {\n            $res['medias'][] = $media->getMedia($m, true);\n          }\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 565,
            "endLine": 613,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "get",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "simple",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "int|null",
                        "name": "$version"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$simple"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @param int|null $version\n   * @param bool $simple\n   * @return array|null\n   *\/"
        },
        "getFull": {
            "name": "getFull",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFull(string $id, ?int $version = null): ?array\n  {\n    $cf = &$this->class_cfg;\n    if (!\\is_int($version)) {\n      $version = $this->latest($id) ?: 1;\n    }\n\n    if ($res = $this->db->rselect(\n      [\n        'table' => $cf['table'],\n        'fields' => [\n          $cf['arch']['notes']['id'],\n          $cf['arch']['notes']['id_parent'],\n          $cf['arch']['notes']['id_alias'],\n          $cf['arch']['notes']['id_type'],\n          $cf['arch']['notes']['id_option'],\n          $cf['arch']['notes']['private'],\n          $cf['arch']['notes']['locked'],\n          $cf['arch']['notes']['pinned'],\n          $cf['arch']['notes']['important'],\n          $cf['arch']['versions']['version'],\n          $cf['arch']['versions']['excerpt'],\n          $cf['arch']['versions']['title'],\n          $cf['arch']['versions']['content'],\n          $cf['arch']['versions']['id_user'],\n          $cf['arch']['versions']['creation'],\n        ],\n        'join' => [[\n          'table' => $cf['tables']['versions'],\n          'on' => [\n            'conditions' => [[\n              'field' => $cf['arch']['versions']['id_note'],\n              'exp' => $cf['arch']['notes']['id'],\n            ], [\n              'field' => $cf['arch']['versions']['version'],\n              'value' => $version,\n            ]],\n          ],\n        ]],\n        'where' => [\n          'conditions' => [\n            [\n              'field' => $cf['arch']['notes']['id'],\n              'value' => $id,\n            ]\n          ],\n        ],\n      ]\n    )) {\n      $res['medias'] = $this->getMedias($id, $res['version']);\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 621,
            "endLine": 676,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getFull",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "int|null",
                        "name": "$version"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @param int|null $version\n   * @return array|null\n   *\/"
        },
        "urlToNote": {
            "name": "urlToNote",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function urlToNote(string $url, bool $full = false): ?array\n  {\n    if ($id = $this->urlToId($url)) {\n      if ($full) {\n        return $this->getFull($id);\n      } else {\n        return $this->get($id);\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 684,
            "endLine": 695,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "urlToNote",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$full"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $url\n   * @param bool $full\n   * @return array|null\n   *\/"
        },
        "insertOrUpdateUrl": {
            "name": "insertOrUpdateUrl",
            "summary": "Insert the given url to the note if has no url and update it otherwise.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insertOrUpdateUrl(string $id_note, string $url)\n  {\n    if (!$this->dbTraitExists($id_note)) {\n      throw new Exception(\n        X::_(\n          \"Impossible to retrieve the note with ID %s\",\n          Str::isUid($id_note) ? $id_note : '[String (' . strlen($id_note) . ')]'\n        )\n        );\n    }\n\n    return $this->setUrl($id_note, $url);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 705,
            "endLine": 717,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "insertOrUpdateUrl",
            "returns": [],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "url",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Insert the given url to the note if has no url and update it otherwise.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Insert the given url to the note if has no url and update it otherwise.\n   *\n   * @param string $id_note\n   * @param string $url\n   * @return int|null\n   *\/"
        },
        "getByType": {
            "name": "getByType",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getByType($type = null, $id_user = false, int $limit = 10, int $start = 0)\n  {\n    $db  = &$this->db;\n    $cf  = &$this->class_cfg;\n    $res = [];\n    if (!Str::isUid($type)) {\n      $type = self::getOptionId(is_null($type) ? 'personal' : $type, 'types');\n    }\n\n    if (Str::isUid($type) && is_int($limit) && is_int($start)) {\n      $where = [[\n        'field' => $db->cfn($cf['arch']['notes']['id_type'], $cf['table']),\n        'value' => $type,\n      ], [\n        'field' => $db->cfn($cf['arch']['notes']['active'], $cf['table']),\n        'value' => 1,\n      ]];\n      if (Str::isUid($id_user)) {\n        $where[] = [\n          'field' => $db->cfn($cf['arch']['notes']['creator'], $cf['table']),\n          'value' => $id_user,\n        ];\n      }\n\n      $cfg = $this->getLastVersionCfg();\n      $cfg['where'] = [\n        'conditions' => $where,\n      ];\n      $cfg['limit'] = $limit;\n      $cfg['start'] = $start;\n      $notes = $db->rselectAll($cfg);\n      foreach ($notes as $note) {\n        if ($medias = $db->getColumnValues(\n          $cf['tables']['notes_medias'],\n          $cf['arch']['notes_medias']['id_media'],\n          [\n            $cf['arch']['notes_medias']['id_note'] => $note[$cf['arch']['versions']['id_note']]\n          ]\n        )) {\n          $note['medias'] = [];\n          foreach ($medias as $m) {\n            if ($med = $db->rselect($cf['tables']['medias'], [], [$cf['arch']['medias']['id'] => $m])) {\n              if (Str::isJson($med[$cf['arch']['medias']['content']])) {\n                $med[$cf['arch']['medias']['content']] = json_decode($med[$cf['arch']['medias']['content']]);\n              }\n              $note['medias'][] = $med;\n            }\n          }\n        }\n\n        $res[] = $note;\n      }\n\n      X::sortBy($res, $cf['arch']['versions']['creation'], 'DESC');\n\n      return $res;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 728,
            "endLine": 787,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "shortName": "getByType",
            "returns": [],
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "user"
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 10,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "null",
                        "name": "$type"
                    },
                    {
                        "tag": "param",
                        "type": "mixed|false",
                        "name": "$id",
                        "description": "user"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param null $type\n   * @param mixed|false $id_user\n   * @param int $limit\n   * @param int $start\n   * @return array|false\n   *\/"
        },
        "getVersions": {
            "name": "getVersions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getVersions(string $id): ?array\n  {\n    if (Str::isUid($id)) {\n      $cf = &$this->class_cfg;\n\n      return $this->db->rselectAll(\n        [\n          'table' => $cf['tables']['versions'],\n          'fields' => [\n            $cf['arch']['versions']['version'],\n            $cf['arch']['versions']['id_user'],\n            $cf['arch']['versions']['creation'],\n          ],\n          'where' => [\n            'conditions' => [[\n              'field' => $cf['arch']['versions']['id_note'],\n              'value' => $id,\n            ]],\n          ],\n          'order' => [[\n            'field' => $cf['arch']['versions']['version'],\n            'dir' => 'DESC',\n          ]],\n        ]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 794,
            "endLine": 822,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getVersions",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @return array|null\n   *\/"
        },
        "countByType": {
            "name": "countByType",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function countByType($type = null, $id_user = false)\n  {\n    $db = &$this->db;\n    $cf = &$this->class_cfg;\n    if (!Str::isUid($type)) {\n      $type = self::getOptionId(is_null($type) ? 'personal' : $type, 'types');\n    }\n\n    if (Str::isUid($type)) {\n      $where = [[\n        'field' => $cf['arch']['notes']['active'],\n        'value' => 1,\n      ], [\n        'field' => $cf['arch']['notes']['id_type'],\n        'value' => $type,\n      ]];\n      if (!empty($id_user) && Str::isUid($id_user)) {\n        $where[] = [\n          'field' => $cf['arch']['notes']['creator'],\n          'value' => $id_user,\n        ];\n      }\n\n      return $db->selectOne(\n        [\n          'table' => $cf['table'],\n          'fields' => ['COUNT(DISTINCT ' . $cf['arch']['notes']['id'] . ')'],\n          'where' => [\n            'conditions' => $where,\n          ],\n        ]\n      );\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 830,
            "endLine": 865,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "countByType",
            "returns": [],
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "user"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "null",
                        "name": "$type"
                    },
                    {
                        "tag": "param",
                        "type": "string|false",
                        "name": "$id",
                        "description": "user"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param null $type\n   * @param string|false $id_user\n   * @return false|mixed\n   *\/"
        },
        "addMedia": {
            "name": "addMedia",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addMedia($id_note, string $name, array|null $content = null, string $title = '', string $type = 'file', bool $private = false): ?string\n  {\n    $media = $this->getMediaInstance();\n\n    \/\/ Case where we give also the version (i.e. not the latest)\n    if (\\is_array($id_note) && (count($id_note) === 2)) {\n      $version = $id_note[1];\n      $id_note = $id_note[0];\n    } else {\n      $version = $this->latest($id_note) ?: 1;\n    }\n\n    if (\n      $this->dbTraitExists($id_note)\n      && ($id_media = $media->insert($name, $content, $title, $type, $private))\n      && $this->addMediaToNote($id_media, $id_note, $version)\n    ) {\n      return $id_media;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 878,
            "endLine": 899,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 2,
            "shortName": "addMedia",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 5,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id_note"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$content"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$title"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$private"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param $id_note\n   * @param string $name\n   * @param array|null $content\n   * @param string $title\n   * @param string $type\n   * @param bool $private\n   * @return string|null\n   * @throws Exception\n   *\/"
        },
        "addMediaToNote": {
            "name": "addMediaToNote",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addMediaToNote(string $id_media, string $id_note, int $default = 0): ?int\n  {\n    if ($this->userId) {\n      $cf = &$this->class_cfg;\n\n      if ($default) {\n        $this->db->update(\n          $cf['tables']['notes_medias'],\n          [$cf['arch']['notes_medias']['default_media'] => 0],\n          [$cf['arch']['notes_medias']['id_note'] => $id_note]\n        );\n      }\n\n      return $this->db->insertUpdate(\n        $cf['tables']['notes_medias'],\n        [\n          $cf['arch']['notes_medias']['id_note'] => $id_note,\n          $cf['arch']['notes_medias']['version'] => $this->latest($id_note),\n          $cf['arch']['notes_medias']['id_media'] => $id_media,\n          $cf['arch']['notes_medias']['id_user'] => $this->userId,\n          $cf['arch']['notes_medias']['creation'] => date('Y-m-d H:i:s'),\n          $cf['arch']['notes_medias']['default_media'] => $default\n        ]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 908,
            "endLine": 935,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "addMediaToNote",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "id_note",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "default",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "media"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$default"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id_media\n   * @param string $id_note\n   * @param int $default\n   * @return int|null\n   *\/"
        },
        "removeMedia": {
            "name": "removeMedia",
            "summary": "Removes a row associating a given media and a given note.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeMedia(string $id_media, string $id_note): ?int\n  {\n    $cf = &$this->class_cfg;\n    if (\n      $this->db->selectOne($cf['tables']['medias'], $cf['arch']['medias']['id'], [$cf['arch']['medias']['id'] => $id_media])\n      && $this->dbTraitExists($id_note)\n    ) {\n      return $this->db->delete($cf['tables']['notes_medias'], [\n        $cf['arch']['notes_medias']['id_note'] => $id_note,\n        $cf['arch']['notes_medias']['id_media'] => $id_media,\n      ]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 946,
            "endLine": 960,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "removeMedia",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "id_note",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ],
            "doc": {
                "description": "Removes a row associating a given media and a given note.\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "media"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Removes a row associating a given media and a given note.\n   * \n   * @param string $id_media\n   * @param string $id_note\n   * @return int|null\n   * @throws Exception\n   *\/"
        },
        "removeAllMedias": {
            "name": "removeAllMedias",
            "summary": "Removes all the rows associating medias with a given note.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeAllMedias(string $id_note): ?int\n  {\n    $cf = &$this->class_cfg;\n    if ($this->dbTraitExists($id_note)) {\n      return $this->db->delete($cf['tables']['notes_medias'], [\n        $cf['arch']['notes_medias']['id_note'] => $id_note\n      ]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 970,
            "endLine": 980,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeAllMedias",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ],
            "doc": {
                "description": "Removes all the rows associating medias with a given note.\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Removes all the rows associating medias with a given note.\n   * \n   * @param string $id_note\n   * @return int|null\n   * @throws Exception\n   *\/"
        },
        "getMedias": {
            "name": "getMedias",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMedias(string $id_note, $version = false, $type = false): array\n  {\n    $ret   = [];\n    $media = $this->getMediaInstance();\n    $cf    = &$this->class_cfg;\n    if ($this->dbTraitExists($id_note)) {\n      $medias = $this->db->getColumnValues(\n        $cf['tables']['notes_medias'],\n        $cf['arch']['notes_medias']['id_media'],\n        [\n          $cf['arch']['notes_medias']['id_note'] => $id_note\n        ]);\n      if ($medias) {\n        foreach ($medias as $m) {\n          $ret[] = $media->getMedia($m, true);\n        }\n      }\n    }\n\n    return $ret;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 990,
            "endLine": 1010,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getMedias",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "false",
                        "name": "$version"
                    },
                    {
                        "tag": "param",
                        "type": "false",
                        "name": "$type"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $id_note\n   * @param false $version\n   * @param false $type\n   * @return array\n   * @throws Exception\n   *\/"
        },
        "hasMedias": {
            "name": "hasMedias",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasMedias(string $id_note, $version = false, string $id_media = ''): ?bool\n  {\n    $cf = &$this->class_cfg;\n    if ($this->dbTraitExists($id_note)) {\n      $where = [\n        $cf['arch']['notes_medias']['id_note'] => $id_note\n      ];\n      if (!empty($id_media) && Str::isUid($id_media)) {\n        $where[$cf['arch']['notes_medias']['id_media']] = $id_media;\n      }\n\n      return (bool)$this->db->count($cf['tables']['notes_medias'], $where);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1020,
            "endLine": 1035,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "hasMedias",
            "returns": [
                null,
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "id_media",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "false",
                        "name": "$version"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "media"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $id_note\n   * @param false $version\n   * @param string $id_media\n   * @return bool|null\n   * @throws Exception\n   *\/"
        },
        "getLastVersionCfg": {
            "name": "getLastVersionCfg",
            "summary": "Returns the configuration to have the last version for each note",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastVersionCfg($with_content = false): array\n  {\n    \n      $db       = &$this->db;\n      $cf       = &$this->class_cfg;\n      $opt      = Option::getInstance();\n      $cfo      = $opt->getClassCfg();\n      $grid_cfg = [\n        'table' => $cf['table'],\n        'fields' => [\n          $db->cfn($this->fields['id'], $cf['table']),\n          $db->cfn($this->fields['id_parent'], $cf['table']),\n          $db->cfn($this->fields['id_alias'], $cf['table']),\n          $db->cfn($this->fields['id_type'], $cf['table']),\n          $db->cfn($this->fields['id_option'], $cf['table']),\n          $db->cfn($this->fields['mime'], $cf['table']),\n          $db->cfn($this->fields['lang'], $cf['table']),\n          $db->cfn($this->fields['private'], $cf['table']),\n          $db->cfn($this->fields['locked'], $cf['table']),\n          $db->cfn($this->fields['pinned'], $cf['table']),\n          $db->cfn($this->fields['important'], $cf['table']),\n          $db->cfn($this->fields['creator'], $cf['table']),\n          $db->cfn($this->fields['active'], $cf['table']),\n          $db->cfn($cf['arch']['versions']['id_note'], $cf['tables']['versions']),\n          $db->cfn($cf['arch']['versions']['version'], $cf['tables']['versions']),\n          $db->cfn($cf['arch']['versions']['title'], $cf['tables']['versions']),\n          $db->cfn($cf['arch']['versions']['excerpt'], $cf['tables']['versions']),\n          $db->cfn($cf['arch']['versions']['id_user'], $cf['tables']['versions']),\n          'num_translations' => \"COUNT(aliases.id)\",\n          'num_variants' => \"COUNT(parents.id)\",\n          'num_aliases' => \"COUNT(aliases.id)\",\n          'num_parents' => \"COUNT(parents.id)\",\n          'num_replies' => \"COUNT(replies.id)\",\n          'creation' => 'first_version.' . $cf['arch']['versions']['creation'],\n          'last_edit' => $db->cfn($cf['arch']['versions']['creation'], $cf['tables']['versions']),\n          'last_reply' => 'IFNULL(MAX(replies_versions.' . $cf['arch']['versions']['creation'] . '), ' . $db->cfn($cf['arch']['versions']['creation'], $cf['tables']['versions']) . ')',\n          'option_name' => $db->cfn($cfo['arch']['options']['text'], $cfo['table']),\n          'users' => 'GROUP_CONCAT(DISTINCT LOWER(HEX(' . $db->cfn($cf['arch']['versions']['id_user'], $cf['tables']['versions']) . ')) SEPARATOR \",\")'\n        ],\n        'join' => [[\n          'table' => $cf['tables']['versions'],\n          'on' => [\n            'logic' => 'AND',\n            'conditions' => [[\n              'field' => $db->cfn($cf['arch']['versions']['id_note'], $cf['tables']['versions']),\n              'operator' => '=',\n              'exp' => $db->cfn($this->fields['id'], $cf['table'])\n            ], [\n              'field' => $db->cfn($cf['arch']['versions']['latest'], $cf['tables']['versions']),\n              'operator' => '=',\n              'value' => 1\n            ]],\n          ],\n        ], [\n          'table' => $cf['tables']['versions'],\n          'alias' => 'first_version',\n          'on' => [\n            'logic' => 'AND',\n            'conditions' => [[\n              'field' => 'first_version.' . $cf['arch']['versions']['id_note'],\n              'operator' => '=',\n              'exp' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n            ], [\n              'field' => 'first_version.' . $cf['arch']['versions']['version'],\n              'operator' => '=',\n              'value' => 1,\n          ]],\n        ],\n      ], [\n        'table' => $cf['tables']['notes'],\n        'alias' => 'parents',\n        'type'  => 'left',\n        'on' => [\n          'conditions' => [[\n            'field' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n            'exp' => 'parents.' . $cf['arch']['notes']['id_parent'],\n          ]],\n        ],\n      ], [\n        'table' => $cf['tables']['notes'],\n        'alias' => 'aliases',\n        'type'  => 'left',\n        'on' => [\n          'conditions' => [[\n            'field' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n            'exp' => 'aliases.' . $cf['arch']['notes']['id_alias'],\n          ]],\n        ],\n      ], [\n        'table' => $cf['tables']['notes'],\n        'alias' => 'replies',\n        'type' => 'left',\n        'on' => [\n          'logic' => 'AND',\n          'conditions' => [[\n            'field' => 'replies.' . $cf['arch']['notes']['id_alias'],\n            'exp' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n          ], [\n            'field' => 'replies.' . $cf['arch']['notes']['active'],\n            'value' => 1\n          ]]\n        ]\n      ], [\n        'table' => $cf['tables']['versions'],\n        'alias' => 'replies_versions',\n        'type' => 'left',\n        'on' => [\n          'logic' => 'AND',\n          'conditions' => [[\n            'field' => 'replies_versions.' . $cf['arch']['versions']['id_note'],\n            'operator' => '=',\n            'exp' => 'replies.' . $cf['arch']['notes']['id']\n          ]]\n        ]\n      ], [\n        'table' => $cfo['tables']['options'],\n        'type' => 'left',\n        'on' => [\n          'logic' => 'AND',\n          'conditions' => [[\n            'field' => $db->cfn($cf['arch']['notes']['id_option'], $cf['table']),\n            'operator' => '=',\n            'exp' => $db->cfn($cfo['arch']['options']['id'], $cfo['tables']['options'], true),\n          ]],\n        ],\n      ]],\n      'where' => [\n        'logic' => 'AND',\n        'conditions' => []\n      ],\n      'group_by' => $db->cfn($cf['arch']['notes']['id'], $cf['table'])\n    ];\n    if ($with_content) {\n      $grid_cfg['fields']['content'] = $db->cfn($cf['arch']['versions']['content'], $cf['tables']['versions']);\n    }\n\n    return $grid_cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1044,
            "endLine": 1181,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getLastVersionCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "with_content",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "content"
                }
            ],
            "doc": {
                "description": "Returns the configuration to have the last version for each note\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$with",
                        "description": "content"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the configuration to have the last version for each note\n   *\n   * @param boolean $with_content\n   * @return array\n   *\/"
        },
        "browse": {
            "name": "browse",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function browse(array $cfg, bool $with_content = false, bool $private = false, string|null $id_type = null, ?bool $pinned = null): ?array\n  {\n    if (isset($cfg['limit']) && $this->userId) {\n      \/** @var Db $db *\/\n      $db       = &$this->db;\n      $cf       = &$this->class_cfg;\n      $grid_cfg = $this->getLastVersionCfg($with_content);\n      unset($grid_cfg['where']);\n      $grid_cfg['filters'] = [[\n          'field' => $db->cfn($cf['arch']['notes']['active'], $cf['table']),\n          'value' => 1,\n        ]];\n\n      if ($private) {\n        $grid_cfg['filters'][] = [\n          'field' => $db->cfn($cf['arch']['notes']['private'], $cf['table']),\n          'value' => 1\n        ];\n        $grid_cfg['filters'][] = [\n          'field' => $db->cfn($cf['arch']['notes']['creator'], $cf['table']),\n          'value' => $this->userId\n        ];\n      }\n      else {\n        $grid_cfg['filters'][] = [\n          'field' => $db->cfn($cf['arch']['notes']['private'], $cf['table']),\n          'value' => 0\n        ];\n      }\n      if ($id_type) {\n        $grid_cfg['filters'][] = [\n          'field' => $db->cfn($cf['arch']['notes']['id_type'], $cf['table']),\n          'value' => $id_type\n        ];\n      }\n      if (!is_null($pinned)) {\n        $grid_cfg['filters'][] = [\n          'field' => $db->cfn($cf['arch']['notes']['pinned'], $cf['table']),\n          'value' => $pinned\n        ];\n      }\n      if (!empty($cfg['fields'])) {\n        $grid_cfg['fields'] = X::mergeArrays($grid_cfg['fields'], $cfg['fields']);\n        unset($cfg['fields']);\n      }\n\n      if (!empty($cfg['join'])) {\n        $grid_cfg['join'] = X::mergeArrays($grid_cfg['join'], $cfg['join']);\n        unset($cfg['join']);\n      }\n\n      \n      $grid = new Grid($this->db, $cfg, $grid_cfg);\n\n      return $grid->getDatatable();\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1190,
            "endLine": 1248,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "browse",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "with_content",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "content"
                },
                {
                    "name": "private",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "id_type",
                    "position": 3,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "pinned",
                    "position": 4,
                    "type": "null|bool",
                    "type_arr": [
                        "null",
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "content"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param array $cfg\n   * @param bool $with_content\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "count": {
            "name": "count",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function count()\n  {\n    if ($this->userId) {\n      $cf  = &$this->class_cfg;\n      $db  = &$this->db;\n      return $this->db->count([\n        'tables' => $cf['table'],\n        'join' => [[\n          'table' => $cf['tables']['versions'],\n          'on' => [\n            'conditions' => [[\n              'field' => $db->cfn($cf['arch']['versions']['id_note'], $cf['tables']['versions']),\n              'exp' => $db->cfn($cf['arch']['notes']['id'], $cf['table'])\n            ]],\n          ],\n        ]],\n        'where' => [\n          'logic' => 'AND',\n          'conditions' => [[\n            'field' => 'latest',\n            'value' => 1\n          ], [\n            'logic' => 'OR',\n            'conditions' => [[\n              'field' => $db->cfn($cf['arch']['notes']['creator'], $cf['table']),\n              'value' => $this->userId\n            ], [\n              'field' => $db->cfn($cf['arch']['versions']['id_user'], $cf['tables']['versions']),\n              'value' => $this->userId\n            ]]\n          ]]\n        ]\n      ]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1254,
            "endLine": 1290,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "count",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return false|mixed\n   *\/"
        },
        "getAliases": {
            "name": "getAliases",
            "summary": "Returns an array of IDs of the notes which are aliases of the given ID.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAliases(string $id_note): array\n  {\n    if (!$this->dbTraitExists($id_note)) {\n      throw new Exception(_(\"Impossible to retrieve the note\"));\n    }\n\n    $cf = &$this->class_cfg;\n    return $this->db->getColumnValues($cf['table'], $cf['arch']['notes']['id'], [\n      $cf['arch']['notes']['id_alias'] => $id_note\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1299,
            "endLine": 1309,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getAliases",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ],
            "doc": {
                "description": "Returns an array of IDs of the notes which are aliases of the given ID.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of IDs of the notes which are aliases of the given ID.\n   *\n   * @param string $id_note\n   * @return array\n   *\/"
        },
        "getChildren": {
            "name": "getChildren",
            "summary": "Returns an array of IDs of the notes which are children of the given ID.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getChildren(string $id_note): array\n  {\n    if (!$this->dbTraitExists($id_note)) {\n      throw new Exception(_(\"Impossible to retrieve the note\"));\n    }\n\n    $cf = &$this->class_cfg;\n    return $this->db->getColumnValues($cf['table'], $cf['arch']['notes']['id'], [\n      $cf['arch']['notes']['id_parent'] => $id_note\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1318,
            "endLine": 1328,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getChildren",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ],
            "doc": {
                "description": "Returns an array of IDs of the notes which are children of the given ID.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of IDs of the notes which are children of the given ID.\n   *\n   * @param string $id_note\n   * @return array\n   *\/"
        },
        "remove": {
            "name": "remove",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function remove(string $id, $keep = false)\n  {\n    if (Str::isUid($id)) {\n      $cf = &$this->class_cfg;\n      if (empty($keep)) {\n        $this->removeAllMedias($id);\n        $this->removeTags($id);\n        foreach ($this->getAliases($id) as $id_alias) {\n          $this->remove($id_alias);\n        }\n  \n        foreach ($this->getChildren($id) as $id_child) {\n          $this->remove($id_child);\n        }\n\n        $this->db->delete($cf['tables']['versions'], [$cf['arch']['versions']['id_note'] => $id]);\n        return $this->db->delete($cf['table'], [$cf['arch']['notes']['id'] => $id]);\n      }\n      else {\n        return $this->db->update($cf['table'], [$cf['arch']['notes']['active'] => 0], [$cf['arch']['notes']['id'] => $id]);\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1337,
            "endLine": 1361,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "remove",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The note's uid"
                },
                {
                    "name": "keep",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "Set it to true if you want change active property to 0 instead of delete the row from db"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The note's uid"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$keep",
                        "description": "Set it to true if you want change active property to 0 instead of delete the row from db"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id   The note's uid\n   * @param bool   $keep Set it to true if you want change active property to 0 instead of delete the row from db\n   *\n   * @return false|null|int\n   *\/"
        },
        "copy": {
            "name": "copy",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function copy(string $id, ?int $version = null, ?bool $private = null): ?string\n  {\n    if ($note = $this->getFull($id, $version)) {\n      if ($private === null) {\n        $private = $note['private'];\n      }\n\n      $id_note = $this->insert($note['title'], $note['content'], $note['type'], $private);\n      foreach ($note['medias'] as $m) {\n        $this->addMediaToNote($m['id'], $id, $note['version']);\n      }\n\n      return $id_note;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1370,
            "endLine": 1386,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "copy",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 2,
                    "type": "null|bool",
                    "type_arr": [
                        "null",
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "int|null",
                        "name": "$version"
                    },
                    {
                        "tag": "param",
                        "type": "bool|null",
                        "name": "$private"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @param int|null $version\n   * @param bool|null $private\n   * @return string|null\n   *\/"
        },
        "getMediasNotes": {
            "name": "getMediasNotes",
            "summary": "Selects from db all medias that have the property content not null and a correspondent existing file.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMediasNotes(int $start = 0, int $limit): array\n  {\n    $res = [];\n    $cf  = &$this->class_cfg;\n    $all = $this->db->rselectAll(\n      [\n        'table' => $cf['tables']['medias'],\n        'fields' => $cf['arch']['medias'],\n        'where' => [\n          'conditions' => [[\n            'field' => $cf['arch']['medias']['private'],\n            'value' => 0,\n          ], [\n            'field' => $cf['arch']['medias']['content'],\n            'operator' => 'isnotnull',\n          ]],\n        ],\n        'start' => $start,\n        'limit' => $limit,\n      ]\n    );\n    if (!empty($all)) {\n      $root = Mvc::getDataPath('appui-note') . 'media\/';\n      foreach ($all as $i => $a) {\n        \/** @var Medias *\/\n        $media_obj = $this->getMediaInstance();\n        if ($media_obj && Str::isJson($a['content'])) {\n          $content   = json_decode($a['content'], true);\n          $path      = $root . $content['path'] . '\/';\n          $full_path = $path . $a['id'] . '\/' . $a['name'];\n          if (file_exists($full_path)) {\n            $all[$i]['notes'] = $this->getMediaNotes($a['id']);\n            \/\/if the media is an image it takes the thumb 60, 60 for src\n            if ($media_obj->isImage($full_path)) {\n              $all[$i]['is_image'] = true;\n            }\n\n            $res[] = $all[$i];\n          }\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1396,
            "endLine": 1440,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getMediasNotes",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "start",
                    "position": 0,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Selects from db all medias that have the property content not null and a correspondent existing file.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Selects from db all medias that have the property content not null and a correspondent existing file.\n   *\n   * @param int $start\n   * @param int $limit\n   * @return array\n   *\/"
        },
        "getMediaNotes": {
            "name": "getMediaNotes",
            "summary": "returns all the notes linked to the media.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMediaNotes(string $id_media)\n  {\n    $notes = [];\n    $cms   = new Cms($this->db);\n    $ids   = $this->db->rselectAll(\n      $this->class_cfg['tables']['notes_medias']\n      [\n        $this->class_cfg['arch']['notes_medias']['id_note']\n      ],\n      [\n        $this->class_cfg['arch']['notes_medias']['id_media'] => $id_media,\n      ]\n    );\n\n    if (!empty($ids)) {\n      foreach ($ids as $i) {\n        $tmp                 = $this->get($i['id_note']);\n        $tmp['is_published'] = $cms->isPublished($i['id_note']);\n        $notes[]             = $tmp;\n        \/\/return $notes;\n      }\n    }\n\n    return $notes;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1449,
            "endLine": 1473,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getMediaNotes",
            "returns": [],
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                }
            ],
            "doc": {
                "description": "returns all the notes linked to the media.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "media"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * returns all the notes linked to the media.\n   *\n   * @param string $id_media\n   * @return array\n   *\/"
        },
        "getEventIdFromNote": {
            "name": "getEventIdFromNote",
            "summary": "Returns event id for the given note.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getEventIdFromNote(string $id_note)\n  {\n    return $this->db->selectOne(\n      $this->class_cfg['tables']['notes_events'],\n      $this->class_cfg['arch']['notes_events']['id_event'],\n      [\n        $this->class_cfg['arch']['notes_events']['id_note'] => $id_note\n      ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1481,
            "endLine": 1490,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getEventIdFromNote",
            "returns": [],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ],
            "doc": {
                "description": "Returns event id for the given note.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns event id for the given note.\n   *\n   * @param string $id_note\n   * @return false|mixed\n   *\/"
        },
        "getNoteIdFromEvent": {
            "name": "getNoteIdFromEvent",
            "summary": "Returns note id for the given event.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNoteIdFromEvent(string $id_event)\n  {\n    return $this->db->selectOne(\n      $this->class_cfg['tables']['notes_events'],\n      $this->class_cfg['arch']['notes_events']['id_note'],\n      [\n        $this->class_cfg['arch']['notes_events']['id_event'] => $id_event\n      ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1498,
            "endLine": 1507,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getNoteIdFromEvent",
            "returns": [],
            "arguments": [
                {
                    "name": "id_event",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "event"
                }
            ],
            "doc": {
                "description": "Returns note id for the given event.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "event"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns note id for the given event.\n   *\n   * @param string $id_event\n   * @return false|mixed\n   *\/"
        },
        "removeNoteEvent": {
            "name": "removeNoteEvent",
            "summary": "Removes the row corresponding to the given arguments from bbn_notes_events.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeNoteEvent(string $id_note, string $id_event): bool\n  {\n    return $this->_remove_note_event($id_note, $id_event);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1517,
            "endLine": 1520,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "removeNoteEvent",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "id_event",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "event"
                }
            ],
            "doc": {
                "description": "Removes the row corresponding to the given arguments from bbn_notes_events.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "event"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Removes the row corresponding to the given arguments from bbn_notes_events.\n   *\n   * @param string $id_note\n   * @param string $id_event\n   * @return bool\n   *\/"
        },
        "savePostIt": {
            "name": "savePostIt",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function savePostIt(array $cfg): ?array\n  {\n    if (empty($cfg['text'])) {\n      throw new Exception(X::_(\"Impossible to create an empty post-it\"));\n    }\n\n    if (!X::hasProps($cfg, ['bcolor', 'fcolor'], true)) {\n      throw new Exception(X::_(\"Impossible to create a post-it without setting a color\"));\n    }\n\n    $id_postIt = self::getOptionId('postit', 'types');\n    if (!$id_postIt) {\n      throw new Exception(X::_(\"Impossible to find the post-it option\"));\n    }\n\n    if (empty($cfg['id'])) {\n      if ($id_note = $this->insert([\n        'title' => $cfg['title'] ?? '',\n        'content' => json_encode([\n          'text' => Str::sanitizeHtml($cfg['text']),\n          'bcolor' => $cfg['bcolor'],\n          'fcolor' => $cfg['fcolor']\n        ]),\n        'id_type' => $id_postIt,\n        'pinned'  => $cfg['pinned'] ?? 0,\n        'private' => 1,\n        'excerpt' => Str::html2text($cfg['text']),\n        'mime' => 'json\/bbn-postit'\n      ])) {\n        return $this->getPostIt($id_note);\n      }\n    }\n    elseif (\n      ($postit = $this->getPostIt($cfg['id'])) && \n      $this->update(\n        $cfg['id'],\n        $cfg['title'] ?? '',\n        json_encode([\n          'text' => Str::sanitizeHtml($cfg['text']),\n          'bcolor' => $cfg['bcolor'],\n          'fcolor' => $cfg['fcolor'],\n        ]),\n        1,\n        $postit['locked'],\n        Str::html2text($cfg['text']),\n        $cfg['pinned']\n      )\n    ) {\n      return $this->getpostIt($cfg['id']);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1523,
            "endLine": 1575,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "savePostIt",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPostIt": {
            "name": "getPostIt",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPostIt(string $id): ?array\n  {\n    if ($note = $this->get($id)) {\n      if (!Str::isJson($note['content'])) {\n        throw new Exception(X::_(\"The content of the post-it should be of type JSON\"));\n      }\n\n      $cfg =json_decode($note['content'], true);\n      $note = array_merge($note, $cfg);\n      unset($note['content']);\n      return $note;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1577,
            "endLine": 1591,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPostIt",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPostIts": {
            "name": "getPostIts",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPostIts($cfg, $only_pinned = false): ?array\n  {\n    $id_postIt = self::getOptionId('postit', 'types');\n    $res = $this->browse($cfg, true, true, $id_postIt, $only_pinned ?: null);\n    if ( $res ){\n      return array_map(function($a) {\n        if (Str::isJson($a['content'])) {\n          return array_merge($a, json_decode($a['content'], true));\n        }\n\n        unset($a['content']);\n        return $a;\n      }, $res['data']);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1594,
            "endLine": 1610,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getPostIts",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "only_pinned",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "insertNoteEvent": {
            "name": "insertNoteEvent",
            "summary": "If the row corresponding to the given arguments is not in the table bbn_notes_events it inserts the row.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insertNoteEvent(string $id_note, string $id_event): bool\n  {\n    return $this->_insert_note_event($id_note, $id_event);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1619,
            "endLine": 1622,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "insertNoteEvent",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "id_event",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "event"
                }
            ],
            "doc": {
                "description": "If the row corresponding to the given arguments is not in the table bbn_notes_events it inserts the row.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "event"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * If the row corresponding to the given arguments is not in the table bbn_notes_events it inserts the row.\n   *\n   * @param string $id_note\n   * @param string $id_event\n   * @return bool\n   *\/"
        },
        "addFeature": {
            "name": "addFeature",
            "summary": "Creates a new element for the given feature (= id_option)",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addFeature(string $id_option, string $id_note, string|null $id_media = null, ?int $num = null, array|null $cfg = null): ?array\n  {\n    $id_option = $this->getFeatureOption($id_option);\n    $dbCfg     = $this->getClassCfg();\n    $table     = $dbCfg['tables']['features'];\n    $cols      = $dbCfg['arch']['features'];\n    if ($num === 0) {\n      $num = ((int)$this->db->selectOne($table, 'MAX(num)', [$cols['id_option'] => $id_option])) + 1;\n    }\n   \tif ($id = $this->db->selectOne($table, $cols['id'], [\n      $cols['id_option'] => $id_option,\n      $cols['id_note'] => $id_note\n    ])) {\n      $this->db->delete($table, [\n        $cols['id'] => $id\n      ]);\n    }\n\n    $media = null;\n    $data = [\n      $cols['id_option'] => $id_option,\n      $cols['id_note'] => $id_note,\n      $cols['id_media'] => $id_media,\n      $cols['num'] => $num,\n      $cols['cfg'] => $cfg ? json_encode($cfg) : null\n    ];\n\n    if (empty($id_media)) {\n      if ($medias = $this->getMedias($id_note)) {\n        $media    = $medias[0];\n        $id_media = $media['id'];\n      }\n    }\n    else {\n      $mediaObj = $this->getMediaInstance();\n      $media = $mediaObj->getMedia($id_media);\n    }\n\n    if ($media && !$data[$cols['id_media']]) {\n      $data[$cols['id_media']] = $media['id'];\n    }\n\n    if ($this->db->insert($table, $data)) {\n      $data['id'] = $this->db->lastId();\n      return [\n        'data'  => $data,\n        'media' => $media\n      ];\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1635,
            "endLine": 1686,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 2,
            "shortName": "addFeature",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "id_note",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "id_media",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "num",
                    "position": 3,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 4,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Creates a new element for the given feature (= id_option)\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "media"
                    },
                    {
                        "tag": "param",
                        "type": "integer|null",
                        "name": "$num"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates a new element for the given feature (= id_option)\n   *\n   * @param string $id_option\n   * @param string $id_note\n   * @param string|null $id_media\n   * @param integer|null $num\n   * @param array|null $cfg\n   * @return string|null\n   *\/"
        },
        "getFeature": {
            "name": "getFeature",
            "summary": "Gets a full feature element",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFeature(string $id, bool $full = true): ?array\n  {\n    $dbCfg  = $this->getClassCfg();\n    $table  = $dbCfg['tables']['features'];\n    $cols   = $dbCfg['arch']['features'];\n    if ($res = $this->db->rselect($table, $cols, [$cols['id'] => $id])) {\n      if (!empty($res['cfg'])) {\n        $res['cfg'] = json_decode($res['cfg'], true);\n      }\n\n      $res['title'] = $this->getTitle($res['id_note']);\n      $res['url']   = $this->getUrl($res['id_note']);\n      if ($res['id_media']) {\n        $media = $this->getMediaInstance();\n        $res['media'] = $media->getMedia($res['id_media'], true);\n      }\n\n      if ($full) {\n        $cms = new Cms($this->db);\n        $res = X::mergeArrays($cms->get($res['id_note'], false, false), $res);\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1696,
            "endLine": 1722,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getFeature",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets a full feature element\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$full"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets a full feature element\n   *\n   * @param string $id\n   * @param bool $full\n   * @return array|null\n   *\/"
        },
        "removeFeature": {
            "name": "removeFeature",
            "summary": "Removes an element from a feature",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeFeature(string $id): int\n  {\n    $dbCfg = $this->getClassCfg();\n    $table = $dbCfg['tables']['features'];\n    $cols  = $dbCfg['arch']['features'];\n    $res = 0;\n    if ($feat = $this->getFeature($id)) {\n      $res = $this->db->delete($table, [$cols['id'] => $id]);\n      $this->fixFeatureOrder($feat['id_option']);\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1731,
            "endLine": 1743,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeFeature",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Removes an element from a feature\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Removes an element from a feature\n   *\n   * @param string $id\n   * @return integer\n   *\/"
        },
        "setFeatureMedia": {
            "name": "setFeatureMedia",
            "summary": "Changes the media for the given geature element",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setFeatureMedia(string $id, string|null $id_media = null): int\n  {\n    $dbCfg = $this->getClassCfg();\n    $table = $dbCfg['tables']['features'];\n    $cols  = $dbCfg['arch']['features'];\n    return $this->db->update($table, [\n      $cols['id_media'] => $id_media\n    ], [\n      $cols['id'] => $id\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1753,
            "endLine": 1763,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setFeatureMedia",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_media",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "media"
                }
            ],
            "doc": {
                "description": "Changes the media for the given geature element\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "media"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Changes the media for the given geature element\n   *\n   * @param string $id\n   * @param string|null $id_media\n   * @return integer\n   *\/"
        },
        "setFeatureOrder": {
            "name": "setFeatureOrder",
            "summary": "Changes the order number (= num) for the given feature element",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setFeatureOrder(string $id, int $num): int\n  {\n    $dbCfg = $this->getClassCfg();\n    $table = $dbCfg['tables']['features'];\n    $cols  = $dbCfg['arch']['features'];\n    $res = 0;\n    if ($feat = $this->getFeature($id)) {\n      if ($feat['num'] > $num) {\n        $res = $this->db->update($table, [\n          'num' => [null, '`num` + 1']\n        ], [\n          'id_option' => $feat['id_option'],\n          ['id', '!=', $id],\n          ['num', '>=', $num],\n          ['num', '<', $feat['num']]\n        ]);\n      }\n      elseif ($feat['num'] < $num) {\n        $res = $this->db->update($table, [\n          'num' => [null, '`num` - 1']\n        ], [\n          'id_option' => $feat['id_option'],\n          ['id', '!=', $id],\n          ['num', '>', $feat['num']],\n          ['num', '<=', $num]\n        ]);\n      }\n      $this->log($this->db->last(), $this->db->getLastValues());\n      $this->log($res);\n      \n      $res = $this->db->update($table, [$cols['num'] => $num], [$cols['id'] => $id]);\n      \/*\n      if ($res) {\n        $this->fixFeatureOrder($feat['id_option']);\n      }\n      *\/\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1773,
            "endLine": 1812,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setFeatureOrder",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Changes the order number (= num) for the given feature element\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$num"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Changes the order number (= num) for the given feature element\n   *\n   * @param string $id\n   * @param integer $num\n   * @return integer\n   *\/"
        },
        "unsetFeatureOrder": {
            "name": "unsetFeatureOrder",
            "summary": "Removes all the order numbers from the given feature elements",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unsetFeatureOrder(string $id_option): int\n  {\n    $id_option = $this->getFeatureOption($id_option);\n    $dbCfg     = $this->getClassCfg();\n    $table     = $dbCfg['tables']['features'];\n    $cols      = $dbCfg['arch']['features'];\n    return $this->db->update($table, [\n      $cols['num'] => null\n    ], [\n      $cols['id_option'] => $id_option\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1821,
            "endLine": 1832,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "unsetFeatureOrder",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "Removes all the order numbers from the given feature elements\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Removes all the order numbers from the given feature elements\n   *\n   * @param string $id_option\n   * @return integer\n   *\/"
        },
        "fixFeatureOrder": {
            "name": "fixFeatureOrder",
            "summary": "Fix the order for all the elements of the given feature",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fixFeatureOrder(string $id_option): bool\n  {\n    $id_option = $this->getFeatureOption($id_option);\n    $option    = $this->getOption($id_option);\n    $dbCfg     = $this->getClassCfg();\n    $table     = $dbCfg['tables']['features'];\n    $cols      = $dbCfg['arch']['features'];\n    $res       = 0;\n    $is_null   = ($option['orderMode'] ?? '') !== 'manual';\n    foreach ($this->getFeatureList($id_option) as $i => $d) {\n      if ($is_null) {\n        if (!empty($d['num'])) {\n          $res += (int)$this->db->update($table, [$cols['num'] => null], [$cols['id'] => $d['id']]);\n        }\n      }\n      else {\n        if ($d['num'] !== ($i + 1)) {\n          $res += (int)$this->db->update($table, [$cols['num'] => $i + 1], [$cols['id'] => $d['id']]);\n        }\n      }\n    }\n\n    return (bool)$res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1841,
            "endLine": 1864,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "fixFeatureOrder",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "Fix the order for all the elements of the given feature\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Fix the order for all the elements of the given feature\n   *\n   * @param string $id_option\n   * @return boolean\n   *\/"
        },
        "getFeatureOption": {
            "name": "getFeatureOption",
            "summary": "Returns the given\/requested id_option, from the code if it's not a UID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFeatureOption(string $id_option): string\n  {\n    if (!Str::isUid($id_option)) {\n      $id_option = $this->getOptionId($id_option, 'features');\n      if (!$id_option) {\n        throw new Exception(X::_(\"Impossible to determine the feature %s\", $id_option));\n      }\n    }\n\n    return $id_option;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1873,
            "endLine": 1883,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getFeatureOption",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "Returns the given\/requested id_option, from the code if it's not a UID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the given\/requested id_option, from the code if it's not a UID\n   *\n   * @param string $id_option\n   * @return string\n   *\/"
        },
        "getFeatureList": {
            "name": "getFeatureList",
            "summary": "Returns a list of the elements for the given feature, with only id and num",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFeatureList(string $id_option): array\n  {\n    $id_option = $this->getFeatureOption($id_option);\n    $dbCfg = $this->getClassCfg();\n    $table = $dbCfg['tables']['features'];\n    $cols  = $dbCfg['arch']['features'];\n    return $this->db->rselectAll($table, [$cols['id'], $cols['num']], [$cols['id_option'] => $id_option]) ?: [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1892,
            "endLine": 1899,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getFeatureList",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "Returns a list of the elements for the given feature, with only id and num\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a list of the elements for the given feature, with only id and num\n   *\n   * @param string $id_option\n   * @return array\n   *\/"
        },
        "setFeatureCfg": {
            "name": "setFeatureCfg",
            "summary": "Changes the config of a feature element",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setFeatureCfg(string $id, array|null $cfg = null): int\n  {\n    $dbCfg = $this->getClassCfg();\n    $table = $dbCfg['tables']['features'];\n    $cols  = $dbCfg['arch']['features'];\n    return $this->db->update($table, [\n      $cols['cfg'] => $cfg ? json_encode($cfg) : null\n    ], [\n      $cols['id'] => $id\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1909,
            "endLine": 1919,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setFeatureCfg",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Changes the config of a feature element\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Changes the config of a feature element\n   *\n   * @param string $id\n   * @param array|null $cfg\n   * @return integer\n   *\/"
        },
        "getFeatures": {
            "name": "getFeatures",
            "summary": "Gets all the elements, and their details, for the given feature",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFeatures(string $id_option, bool $full = true): array\n  {\n    $res = [];\n    foreach ($this->getFeatureList($id_option) as $d) {\n      $res[] = $this->getFeature($d['id'], $full);\n    }\n\n    $option = $this->getOption($id_option);\n    $mode = $option['orderMode'] ?? 'random';\n    switch ($mode) {\n      case \"random\":\n        shuffle($res);\n        break;\n      case \"latest\":\n        X::sortBy($res, 'start', 'desc');\n        break;\n      case \"first\":\n        X::sortBy($res, 'start', 'asc');\n        break;\n      case \"manual\":\n        X::sortBy($res, 'num', 'asc');\n        break;\n    }\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1929,
            "endLine": 1953,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getFeatures",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets all the elements, and their details, for the given feature\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$full"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets all the elements, and their details, for the given feature\n   *\n   * @param string $id_option\n   * @param bool $full\n   * @return array\n   *\/"
        },
        "pin": {
            "name": "pin",
            "summary": "Pins the given note",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function pin(string $id): bool\n  {\n    return (bool)$this->db->update($this->class_table, [$this->fields['pinned'] => 1], [$this->fields['id'] => $id]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1960,
            "endLine": 1963,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "pin",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The note ID"
                }
            ],
            "doc": {
                "description": "Pins the given note\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The note ID"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Pins the given note\n   * @param string $id The note ID\n   * @return bool\n   *\/"
        },
        "unpin": {
            "name": "unpin",
            "summary": "Unpins the given note",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unpin(string $id): bool\n  {\n    return (bool)$this->db->update($this->class_table, [$this->fields['pinned'] => 0], [$this->fields['id'] => $id]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1970,
            "endLine": 1973,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "unpin",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The note ID"
                }
            ],
            "doc": {
                "description": "Unpins the given note\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The note ID"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Unpins the given note\n   * @param string $id The note ID\n   * @return bool\n   *\/"
        },
        "setImportant": {
            "name": "setImportant",
            "summary": "Set the given note as important",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setImportant(string $id): bool\n  {\n    return (bool)$this->db->update($this->class_table, [$this->fields['important'] => 1], [$this->fields['id'] => $id]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1981,
            "endLine": 1984,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setImportant",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The note ID"
                }
            ],
            "doc": {
                "description": "Set the given note as important\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The note ID"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Set the given note as important\n   * @param string $id The note ID\n   * @return bool\n   *\/"
        },
        "unsetImportant": {
            "name": "unsetImportant",
            "summary": "Unset the given note as important",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unsetImportant(string $id): bool\n  {\n    return (bool)$this->db->update($this->class_table, [$this->fields['important'] => 0], [$this->fields['id'] => $id]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1992,
            "endLine": 1995,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "unsetImportant",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The note ID"
                }
            ],
            "doc": {
                "description": "Unset the given note as important\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The note ID"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Unset the given note as important\n   * @param string $id The note ID\n   * @return bool\n   *\/"
        },
        "_check_date": {
            "name": "_check_date",
            "summary": "If a date is given for $end checks if it's after the start date.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _check_date(?string $start, ?string $end): bool\n  {\n    if (isset($start)) {\n      if (!isset($end) || (($end = strtotime($end)) && ($start = strtotime($start)) && $end > $start)) {\n        return true;\n      }\n    } else {\n      return true;\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2005,
            "endLine": 2015,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_check_date",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "start",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "end",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "If a date is given for $end checks if it's after the start date.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$start"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$end"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * If a date is given for $end checks if it's after the start date.\n   *\n   * @param string|null $start\n   * @param string|null $end\n   * @return bool\n   *\/"
        },
        "_remove_note_event": {
            "name": "_remove_note_event",
            "summary": "Removes the row corresponding to the given arguments from bbn_notes_events.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _remove_note_event(string $id_note, string $id_event): bool\n  {\n    return (bool)$this->db->delete(\n      $this->class_cfg['tables']['notes_events'],\n      [\n        $this->class_cfg['arch']['notes_events']['id_event'] => $id_event,\n        $this->class_cfg['arch']['notes_events']['id_note'] => $id_note,\n      ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2025,
            "endLine": 2034,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_remove_note_event",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "id_event",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "event"
                }
            ],
            "doc": {
                "description": "Removes the row corresponding to the given arguments from bbn_notes_events.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "event"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Removes the row corresponding to the given arguments from bbn_notes_events.\n   *\n   * @param string $id_note\n   * @param string $id_event\n   * @return bool\n   *\/"
        },
        "_insert_note_event": {
            "name": "_insert_note_event",
            "summary": "If the row corresponding to the given arguments is not in the table bbn_notes_events it inserts the row.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _insert_note_event(string $id_note, string $id_event): bool\n  {\n    if (!$this->db->count(\n      $this->class_cfg['tables']['notes_events'],\n      [\n        $this->class_cfg['arch']['notes_events']['id_note'] => $id_note,\n        $this->class_cfg['arch']['notes_events']['id_event'] => $id_event\n      ]\n    )) {\n      return (bool)$this->db->insert(\n        $this->class_cfg['tables']['notes_events'],\n        [\n          $this->class_cfg['arch']['notes_events']['id_note'] => $id_note,\n          $this->class_cfg['arch']['notes_events']['id_event'] => $id_event,\n        ]\n      );\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2044,
            "endLine": 2063,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_insert_note_event",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "id_event",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "event"
                }
            ],
            "doc": {
                "description": "If the row corresponding to the given arguments is not in the table bbn_notes_events it inserts the row.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "event"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * If the row corresponding to the given arguments is not in the table bbn_notes_events it inserts the row.\n   *\n   * @param string $id_note\n   * @param string $id_event\n   * @return bool\n   *\/"
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 71,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        },
        "_get_references": {
            "name": "_get_references",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/References.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_references(){\n    if ( \\is_null($this->references) ){\n      if ( $refs = $this->db->findRelations('bbn_tasks.id') ){\n        $this->references = array_filter($refs, function($a, $k){\n          return strpos($k, 'bbn_tasks') !== 0;\n        }, ARRAY_FILTER_USE_BOTH);\n      }\n      if ( empty($this->references) ){\n        $this->references = false;\n      }\n      else{\n        foreach ( $this->references as $table => $ref ){\n          foreach ( $ref['refs'] as $j => $r ){\n            $this->references_select = empty($this->references_select) ?\n              $this->db->cfn($j, $table, 1) :\n              \"IFNULL(\".$this->references_select.\", \".$this->db->cfn($j, $table, 1).\")\";\n\n            $this->references_join .= \"LEFT JOIN \".$this->db->tfn($table, 1).PHP_EOL.\n              \"ON \".$this->db->cfn($ref['column'], $table, 1).\" = bbn_tasks.id\".PHP_EOL;\n          }\n        }\n        if ( !empty($this->references_select) ){\n          $this->references_select .= \" AS reference,\".PHP_EOL;\n        }\n      }\n    }\n    return $this->references;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\References",
            "startLine": 26,
            "endLine": 53,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "_get_references",
            "returns": [],
            "arguments": []
        },
        "getReferences": {
            "name": "getReferences",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/References.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getReferences(){\n    $this->_get_references();\n    return [\n      'select' => $this->references_select,\n      'join' => $this->references_join\n    ];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\References",
            "startLine": 55,
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getReferences",
            "returns": [],
            "arguments": []
        },
        "optionalInit": {
            "name": "optionalInit",
            "summary": "Returns the option's root ID for the current class based on {@link $option_root_code}",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function optionalInit(array|null $path = null)\n  {\n    if (!self::$optional_is_init) {\n      $opt = Option::getInstance();\n      $cls = false;\n      if (!$opt) {\n        throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n      }\n\n      if (!$path) {\n        $tmp = explode('\\\\', __CLASS__);\n        $cls = strtolower(end($tmp));\n        $path = [$cls, 'appui', 'plugins'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      \/\/X::ddump($path, self::$option_root_id);\n      if (!self::$option_root_id) {\n        if (empty($cls)) {\n          throw new Exception(\"Impossible to find the option \".json_encode($path).\" !!! for \".__CLASS__);\n        }\n\n        throw new Exception(\"Impossible to find the option $cls for \".__CLASS__);\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 41,
            "endLine": 68,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "optionalInit",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the option's root ID for the current class based on {@link $option_root_code}\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the option's root ID for the current class based on {@link $option_root_code}\n   *\n   * @return false|int\n   *\/"
        },
        "initOptionalGlobal": {
            "name": "initOptionalGlobal",
            "summary": "Sets only once all the constants used by the class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function initOptionalGlobal(Option $opt, array|null $path = null)\n  {\n    if (!self::$optional_is_init) {\n      if (!$path) {\n        $tmp                   = explode('\\\\', __CLASS__);\n        $cls                   = end($tmp);\n        $path                  = [$cls, 'appui'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      if (!self::$option_root_id) {\n        X::log(\"Impossible to find the option $cls for \".__CLASS__, 'errors');\n        return;\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 78,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "initOptionalGlobal",
            "returns": [],
            "arguments": [
                {
                    "name": "opt",
                    "position": 0,
                    "type": "bbn\\Appui\\Option",
                    "type_arr": [
                        "bbn\\Appui\\Option"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets only once all the constants used by the class.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Option",
                        "name": "$opt"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets only once all the constants used by the class.\n   *\n   * @param Option $opt\n   * @param array             $path\n   * @return void\n   *\/"
        },
        "initOptional": {
            "name": "initOptional",
            "summary": "Defines the options prop and launches the static init method.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initOptional(array|null $path = null)\n  {\n    $this->options = Option::getInstance();\n    if (!$this->options) {\n      throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n    }\n\n    self::initOptionalGlobal($this->options, $path);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 104,
            "endLine": 112,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initOptional",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Defines the options prop and launches the static init method.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Defines the options prop and launches the static init method.\n   *\n   * @param array $path\n   * @return void\n   *\/"
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionRoot()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 115,
            "endLine": 119,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionRoot",
            "returns": [],
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsObject(): Option\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 122,
            "endLine": 130,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsObject",
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionId(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fromCode(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 139,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionId",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns The option's ID of a category, i.e. direct children of option's root\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns The option's ID of a category, i.e. direct children of option's root\n   *\n   * @param string $code\n   * @return int|false\n   *\/"
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsIds(...$codes): array\n  {\n    $codes[] = self::getOptionRoot();\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...$codes),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 152,
            "endLine": 163,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsIds",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Undocumented function\n",
                "params": [],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Check it, it doesn't seem ok"
                }
            },
            "comments": "  \/**\n   * Undocumented function\n   *\n   * @todo Check it, it doesn't seem ok\n   * @return array\n   *\/"
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTree(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return ($tree = self::getOptionsObject()->fullTree(...$codes)) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 166,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTree",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTreeRef": {
            "name": "getOptionsTreeRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTreeRef(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return ($tree = self::getOptionsObject()->fullTreeRef(...$codes)) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 173,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTreeRef",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptions(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fullOptions(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 180,
            "endLine": 184,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptions",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getSimpleOptions": {
            "name": "getSimpleOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getSimpleOptions(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->options(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 187,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getSimpleOptions",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsRef": {
            "name": "getOptionsRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsRef(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fullOptionsRef(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 194,
            "endLine": 198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsRef",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOption(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->option(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 201,
            "endLine": 205,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOption",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValue(string|array $id, string $text = 'text', string $value = 'value', ...$additionalFields): array\n  {\n    if (is_string($id) && !Str::isUid($id)) {\n      $id = [$id];\n    }\n\n    if (is_array($id)) {\n      $id[] = self::getOptionRoot();\n    }\n\n    return $id ? self::getOptionsObject()->textValueOptions($id, $text, $value, ...$additionalFields) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 208,
            "endLine": 219,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTextValue",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": ""
                },
                {
                    "name": "additionalFields",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTextValueRef": {
            "name": "getOptionsTextValueRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValueRef(string|array $id, string $text = 'text', string $value = 'value', ...$additionalFields): array\n  {\n    if (is_string($id) && !Str::isUid($id)) {\n      $id = self::getOptionId($id);\n    }\n\n    return $id ? self::getOptionsObject()->textValueOptionsRef($id, $text, $value, ...$additionalFields) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 222,
            "endLine": 229,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTextValueRef",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": ""
                },
                {
                    "name": "additionalFields",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbTraitExists": {
            "name": "dbTraitExists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitExists($filter): bool\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (!empty($cfg) && $this->db->count(\n      $this->class_table,\n      $this->dbTraitGetFilterCfg($cfg)\n    )) {\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 25,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array|string $id\n   * @return bool\n   *\/"
        },
        "dbTraitInsert": {
            "name": "dbTraitInsert",
            "summary": "Inserts a new row in the table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitInsert(array $data, bool $ignore = false): ?string\n  {\n    if ($data = $this->dbTraitPrepare($data)) {\n      $ccfg = $this->getClassCfg();\n      if (!empty($ccfg['arch'][$this->class_table_index]['cfg'])) {\n        $col = $ccfg['arch'][$this->class_table_index]['cfg'];\n        if (isset($data[$col])) {\n          $data[$col] = json_encode($data[$col]);\n        }\n      }\n\n      if ($this->db->{$ignore ? 'insertIgnore' : 'insert'}($ccfg['table'], $data)) {\n        return $this->db->lastId();\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 56,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitInsert",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ignore",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Inserts a new row in the table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Inserts a new row in the table.\n   *\n   * @param array $data\n   *\n   * @return string|null\n   *\/"
        },
        "dbTraitDelete": {
            "name": "dbTraitDelete",
            "summary": "Deletes a single row from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitDelete(string|array $filter, bool $cascade = false): bool\n  {\n    if ($this->dbTraitExists($filter)) {\n      $cfg = $this->getClassCfg();\n      $f = $cfg['arch'][$this->class_table_index];\n\n      if (!is_array($filter) && !empty($f['id'])) {\n        $filter = [$f['id'] => $filter];\n      }\n\n      return (bool)$this->db->delete($cfg['table'], $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 83,
            "endLine": 97,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitDelete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cascade",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes a single row from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a single row from the table through its id.\n   *\n   * @param string $id\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitUpdate": {
            "name": "dbTraitUpdate",
            "summary": "Updates a single row in the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitUpdate(string|array $filter, array $data): int\n  {\n    $ccfg = $this->getClassCfg();\n    $f = $ccfg['arch'][$this->class_table_index];\n    if (!is_array($filter)) {\n      $filter = [$f['id'] => $filter];\n    }\n\n    if (!$this->dbTraitExists($filter)) {\n      throw new Exception(X::_(\"Impossible to find the given row\"));\n    }\n\n    if ($data = $this->dbTraitPrepare($data)) {\n      if (!empty($f['cfg'])) {\n        $col = $f['cfg'];\n        if (!empty($data[$col])) {\n          if (is_string($data[$col])) {\n            $data[$col] = json_decode($data[$col], true);\n          }\n\n          $jsonUpdate = 'JSON_SET(IFNULL(' . $this->db->csn($col, true) . ' ,\"{}\")';\n          foreach ($data[$col] as $k => $v) {\n            $jsonUpdate .= ', \"$.' . $k . '\", \"' . Str::escapeDquotes(is_iterable($v) ? json_encode($v) : $v) . '\"';\n          }\n\n          $jsonUpdate .= \")\";\n          $data[$col] = [null, $jsonUpdate];\n        }\n      }\n\n      return $this->db->update($ccfg['table'], $data, $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 109,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitUpdate",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Updates a single row in the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$add",
                        "description": "fg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates a single row in the table through its id.\n   *\n   * @param array $data\n   * @param string|array $filter\n   * @param bool $addCfg\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitSelectOne": {
            "name": "dbTraitSelectOne",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectOne(string $field, string|array $filter = [], array $order = [])\n  {\n    if ($res = $this->dbTraitSingleSelection($filter, $order, 'array', [$field])) {\n      return $res[$field] ?? null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 154,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectOne",
            "returns": [],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return mixed\n   *\/"
        },
        "dbTraitSelect": {
            "name": "dbTraitSelect",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelect(string|array $filter = [], array $order = [], array $fields = []): ?stdClass\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'object', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 172,
            "endLine": 175,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelect",
            "returns": [
                null,
                "stdClass"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return stdClass|null\n   *\/"
        },
        "dbTraitRselect": {
            "name": "dbTraitRselect",
            "summary": "Retrieves a row as an array from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselect(string|array $filter = [], array $order = [], array $fields = []): ?array\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'array', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 186,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselect",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an array from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an array from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return array|null\n   *\/"
        },
        "dbTraitSelectValues": {
            "name": "dbTraitSelectValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectValues(string $field, array $filter = [], array $order = [], int $limit = 0, int $start = 0): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'value', [$field]);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 191,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectValues",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitCount": {
            "name": "dbTraitCount",
            "summary": "Returns the number of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitCount(array $filter = []): int\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $req = $this->dbTraitGetRequestCfg($filter, [], 1, 0, [$this->fields['id']]);\n    return $this->db->count($req);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 204,
            "endLine": 212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitCount",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the number of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the number of rows from the table for the given conditions.\n   *\n   * @param array $filter\n   *\n   * @return int\n   *\/"
        },
        "dbTraitSelectAll": {
            "name": "dbTraitSelectAll",
            "summary": "Returns an array of rows as objects from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'object', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 225,
            "endLine": 228,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as objects from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as objects from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitRselectAll": {
            "name": "dbTraitRselectAll",
            "summary": "Returns an array of rows as arrays from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'array', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 241,
            "endLine": 244,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as arrays from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as arrays from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitGetRelations": {
            "name": "dbTraitGetRelations",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetRelations(string $id, string|null $table = null): ?array\n  {\n    if ($this->dbTraitExists($id)) {\n      $db =& $this->db;\n      $res = [];\n      foreach ($this->dbTraitGetTableRelations($table) as $rel) {\n        if ($all = $db->getColumnValues($rel['table'], $rel['primary'], [$rel['col'] => $id])) {\n          $res[$rel['table']] = [\n            'col' => $rel['col'],\n            'primary' => $rel['primary'],\n            'values' => $all\n          ];\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 246,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetRelations",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "dbTraitGetSearchFilter": {
            "name": "dbTraitGetSearchFilter",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetSearchFilter(string|int $filter, array $cols = [], bool $strict = false): array\n  {\n    $cfg = $this->getClassCfg();\n    $isNumber = Str::isNumber($filter);\n    $finalFilter = [\n      'logic' => 'OR',\n      'conditions' => []\n    ];\n    if (empty($cols)) {\n      $tableCols = $this->db->modelize($cfg['table'])['fields'];\n      foreach ($tableCols as $col => $colCfg) {\n        if ((strpos($colCfg['type'], 'text') !== false) || (strpos($colCfg['type'], 'char') !== false)) {\n          $cols[] = $col;\n        }\n        elseif ($isNumber && (strpos($colCfg['type'], 'int') !== false)) {\n          $cols[] = $col;\n        }\n      }\n    }\n\n    foreach ($cols as $col) {\n      $finalFilter['conditions'][] = [\n        'field' => $this->db->cfn($col, $cfg['table']),\n        'operator' => $strict ? '=' : 'contains',\n        'value' => $filter\n      ];\n    }\n\n    return $finalFilter;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 267,
            "endLine": 296,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetSearchFilter",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "string|int",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSearch": {
            "name": "dbTraitSearch",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSearch(array|string $filter, array $cols = [], array $fields = [], array $order = [], bool $strict = false, int $limit = 0, int $start = 0): array\n  {\n    if (is_array($filter)) {\n      $finalFilter = $filter;\n      if (empty($fields) && !empty($cols)) {\n        $fields = $cols;\n      }\n    }\n    else {\n      $finalFilter = $this->dbTraitGetSearchFilter($filter, $cols);\n    }\n\n    return $this->dbTraitRselectAll($finalFilter, $order, $limit, $start, $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 298,
            "endLine": 311,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSearch",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 4,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 5,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 6,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSingleSelection": {
            "name": "dbTraitSingleSelection",
            "summary": "Gets a single row and returns it",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitSingleSelection(\n    string|array $filter,\n    array $order,\n    string $mode = 'array',\n    array $fields = []\n  ): mixed\n  {\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (isset($cfg)\n        && ($res = $this->dbTraitSelection($cfg, $order, 1, 0, $mode, $fields))\n    ) {\n      return $res[0];\n    }\n\n    return null;\n\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 321,
            "endLine": 344,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitSingleSelection",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "array",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets a single row and returns it\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets a single row and returns it\n   *\n   * @param string|array $filter\n   * @param array $order\n   * @param string $mode\n   * @return mixed\n   *\/"
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the class configuration.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getClassCfg()\n  {\n    return $this->class_cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 37,
            "endLine": 40,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getClassCfg",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the class configuration.\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the class configuration.\n   * \n   * @return mixed\n   *\/"
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the fields of the main table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFields()\n  {\n    return $this->fields;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 48,
            "endLine": 51,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getFields",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the fields of the main table.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the fields of the main table.\n   *\n   * @return array\n   *\/"
        },
        "initClassCfg": {
            "name": "initClassCfg",
            "summary": "Sets the class configuration as defined in self::default_class_cfg",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initClassCfg(array|null $cfg = null)\n  {\n    $arr = [];\n    if (isset(self::$default_class_cfg)) {\n      $arr[] = self::$default_class_cfg;\n    }\n\n    if (isset(static::$default_class_cfg)) {\n      $arr[] = static::$default_class_cfg;\n    }\n    \n    if ($cfg) {\n      $arr[] = $cfg;\n    }\n\n    if (!count($arr)) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $cfg = count($arr) > 1 ? X::mergeArrays(...$arr) : $arr[0];\n\n    $table_index = array_flip($cfg['tables'])[$cfg['table']];\n    if (!$table_index || !isset($cfg['tables'], $cfg['table'], $cfg['arch'], $cfg['arch'][$table_index])) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $this->class_table = $cfg['table'];\n    \/\/ We completely replace the table structure, no merge\n    $props = [];\n    foreach ($cfg['arch'] as $t => &$fields){\n      if (!$this->class_table_index && isset($cfg['tables'][$t]) && ($cfg['tables'][$t] === $cfg['table']))  {\n        $this->class_table_index = $t;\n      }\n\n      foreach ($fields as $f => $it) {\n        if (is_array($it)) {\n          $props[$t][$f] = $it;\n          $fields[$f] = $it['name'] ?? $f;\n        }\n      }\n    }\n    unset($fields);\n    if (!empty($props)) {\n      $cfg['props'] = $props;\n    }\n\n\n\n    \/\/ The selection comprises the defined fields of the users table\n    \/\/ Plus a bunch of user-defined additional fields in the same table\n    $this->fields = $cfg['arch'][$this->class_table_index];\n\n    $this->class_cfg = $cfg;\n    $this->_isInitClassCfg = true;\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 59,
            "endLine": 115,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initClassCfg",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the class configuration as defined in self::default_class_cfg\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the class configuration as defined in self::default_class_cfg\n   * @param array $cfg\n   * @return $this\n   *\/"
        },
        "isInitClassCfg": {
            "name": "isInitClassCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isInitClassCfg(): bool\n  {\n    return $this->_isInitClassCfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 118,
            "endLine": 121,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isInitClassCfg",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "dbTraitPrepare": {
            "name": "dbTraitPrepare",
            "summary": "Prepares data before inserting or updating in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitPrepare(array $data): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (!empty($ccfg['cfg'])) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $res[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        unset($data[$f['cfg']]);\n      }\n      elseif (isset($ccfg['cfg'])) {\n        $cfg = [];\n        foreach ($ccfg['cfg'] as $k => $v) {\n          if (array_key_exists($v['field'], $data)) {\n            $cfg[$v['field']] = $data[$v['field']];\n            unset($data[$v['field']]);\n          }\n        }\n        if (!empty($cfg)) {\n          $res[$f['cfg']] = $cfg;\n        }\n      }\n    }\n\n    $structure = $this->dbTraitGetStructure();\n    foreach ($data as $k => $v) {\n      if (in_array($k, $f)) {\n        \/\/ Set the value to null if it's empty and not 0 and the field allows null\n        if (empty($v)\n          && ($v !== 0)\n          && $structure['fields'][$k]['null']\n        ) {\n          $v = null;\n        }\n\n        $res[$k] = $v;\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 41,
            "endLine": 94,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitPrepare",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The data to be prepared."
                }
            ],
            "doc": {
                "description": "Prepares data before inserting or updating in the database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data",
                        "description": "The data to be prepared."
                    }
                ],
                "return": "The prepared data.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the class config has not been initialized or is incorrect."
                }
            },
            "comments": "  \/**\n   * Prepares data before inserting or updating in the database.\n   *\n   * @param array $data The data to be prepared.\n   *\n   * @return array The prepared data.\n   * @throws Exception If the class config has not been initialized or is incorrect.\n   *\/"
        },
        "dbTraitTreat": {
            "name": "dbTraitTreat",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitTreat(array ...$rows): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (empty($f['cfg'])) {\n      return [...$rows];\n    }\n    foreach ($rows as &$data) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $data[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        if (!empty($ccfg['cfg'])) {\n          foreach ($ccfg['cfg'] as $k => $v) {\n            if (isset($v['field']) \n                && array_key_exists($v['field'], $data[$f['cfg']])\n                && !array_key_exists($v['field'], $data)) {\n              $data[$v['field']] = $data[$f['cfg']][$v['field']];\n            }\n          }\n          unset($data[$f['cfg']]);\n        }\n      }\n\n      $res[] = $data;\n    }\n\n    unset($data);\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 96,
            "endLine": 136,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitTreat",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "rows",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbTraitSetFilterCfg": {
            "name": "dbTraitSetFilterCfg",
            "summary": "Sets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSetFilterCfg(array $cfg): void\n  {\n    $this->dbTraitFilterCfg = $cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 144,
            "endLine": 147,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The filter configuration."
                }
            ],
            "doc": {
                "description": "Sets the filter configuration for database queries.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The filter configuration."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the filter configuration for database queries.\n   *\n   * @param array $cfg The filter configuration.\n   *\/"
        },
        "dbTraitResetFilterCfg": {
            "name": "dbTraitResetFilterCfg",
            "summary": "Resets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitResetFilterCfg(): void\n  {\n    $this->dbTraitFilterCfg = [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 152,
            "endLine": 155,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitResetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Resets the filter configuration for database queries.",
                "tags": []
            },
            "comments": "  \/**\n   * Resets the filter configuration for database queries.\n   *\/"
        },
        "dbTraitGetFilterCfg": {
            "name": "dbTraitGetFilterCfg",
            "summary": "Combines multiple filter configurations into a single array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetFilterCfg(array $cfg): array\n  {\n    $conditions = [];\n    if (!empty($this->rootFilterCfg)) {\n      $conditions[] = $this->rootFilterCfg;\n    }\n\n    if (!empty($this->dbTraitFilterCfg)) {\n      $conditions[] = $this->dbTraitFilterCfg;\n    }\n\n    if (!empty($cfg)) {\n      $conditions[] = $cfg;\n    }\n\n    \/\/ Return empty array if no conditions exist\n    if (empty($conditions)) {\n      return [];\n    }\n\n    \/\/ Return single condition if only one exists\n    if (count($conditions) === 1) {\n      return $conditions[0];\n    }\n\n    \/\/ Combine all conditions with 'AND' logic\n    return array_map(function ($a) {\n      return [\n        'logic' => 'AND',\n        'conditions' => $a\n      ];\n    }, $conditions);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 164,
            "endLine": 196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetFilterCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Additional filter configuration."
                }
            ],
            "doc": {
                "description": "Combines multiple filter configurations into a single array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "Additional filter configuration."
                    }
                ],
                "return": "The combined filter configuration."
            },
            "comments": "  \/**\n   * Combines multiple filter configurations into a single array.\n   *\n   * @param array $cfg Additional filter configuration.\n   *\n   * @return array The combined filter configuration.\n   *\/"
        },
        "dbTraitGetStructure": {
            "name": "dbTraitGetStructure",
            "summary": "Gets the structure of the specified table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetStructure(string|null $table = null): array\n  {\n    if (!$table) {\n      $cfg = $this->getClassCfg();\n      $table = $cfg['table'];\n    }\n\n    if (!isset($this->dbTraitStructure[$table])) {\n      $this->dbTraitStructure[$table] = $this->db->modelize($table);\n    }\n\n    return $this->dbTraitStructure[$table];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 205,
            "endLine": 217,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetStructure",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Gets the structure of the specified table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "The structure of the table."
            },
            "comments": "  \/**\n   * Gets the structure of the specified table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array The structure of the table.\n   *\/"
        },
        "dbTraitGetTableRelations": {
            "name": "dbTraitGetTableRelations",
            "summary": "Retrieves the relations for a given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetTableRelations(string|null $table = null): array\n  {\n    $cfg = $this->getClassCfg();\n    if (!$table) {\n      $table = $cfg['table'];\n    }\n    $idx = array_flip($cfg['tables'])[$table];\n    if ($idx && !isset($this->dbTraitRelations[$table])) {\n      $arc = &$cfg['arch'][$idx];\n      $this->dbTraitRelations[$table] = [];\n      if (!empty($arc['id'])) {\n        $refs = $this->db->findReferences($this->db->cfn($arc['id'], $table));\n        foreach ($refs as $ref) {\n          [$db, $tab, $col] = X::split($ref, '.');\n          $model = $this->db->modelize($tab);\n          $this->dbTraitRelations[$table][] = [\n            'db' => $db,\n            'table' => $tab,\n            'primary' => isset($model['keys']['PRIMARY']) && (count($model['keys']['PRIMARY']['columns']) === 1) ? $model['keys']['PRIMARY']['columns'][0] : null,\n            'col' => $col,\n            'model' => $model\n          ];\n        }\n      }\n    }\n\n    return $this->dbTraitRelations[$table];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 226,
            "endLine": 253,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetTableRelations",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Retrieves the relations for a given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "An array of relations."
            },
            "comments": "  \/**\n   * Retrieves the relations for a given table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array An array of relations.\n   *\/"
        },
        "dbTraitSelection": {
            "name": "dbTraitSelection",
            "summary": "Returns an array of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitSelection(\n    array $filter,\n    array $order,\n    int $limit,\n    int $start,\n    string $mode = 'array',\n    array $fields = []\n  ): array\n  {\n    $returnObject = $mode === 'object';\n    $req = $this->dbTraitGetRequestCfg($filter, $order, $limit, $start, $fields);\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    $method = $mode === 'object' ? 'selectAll' : ($mode === 'value' ? 'getColumnValues' : 'rselectAll');\n    $res = $this->db->$method($req);\n    if ($res) {\n      if (!empty($f['cfg'])) {\n        foreach ($res as &$r) {\n          if ($returnObject && !empty($r->{$f['cfg']})) {\n            $cfg = json_decode($r->{$f['cfg']});\n            $r = X::mergeObjects($cfg, $r);\n            unset($r->{$f['cfg']});\n          }\n          elseif (!$returnObject && !empty($r[$f['cfg']])) {\n            $cfg = json_decode($r[$f['cfg']], true);\n            $r = array_merge($cfg, $r);\n            unset($r[$f['cfg']]);\n          }\n        }\n\n        unset($r);\n      }\n\n      return $res;\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 267,
            "endLine": 303,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 4,
            "shortName": "dbTraitSelection",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Filter conditions."
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Order by conditions."
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Maximum number of rows to return."
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Offset of the first row to return."
                },
                {
                    "name": "mode",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "array",
                    "default_name": "",
                    "description": "The mode of result ('array', 'object', 'value')."
                },
                {
                    "name": "fields",
                    "position": 5,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Fields to select."
                }
            ],
            "doc": {
                "description": "Returns an array of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter",
                        "description": "Filter conditions."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "Order by conditions."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Maximum number of rows to return."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Offset of the first row to return."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode",
                        "description": "The mode of result ('array', 'object', 'value')."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "Fields to select."
                    }
                ],
                "return": "The result set."
            },
            "comments": "  \/**\n   * Returns an array of rows from the table for the given conditions.\n   *\n   * @param array $filter Filter conditions.\n   * @param array $order Order by conditions.\n   * @param int $limit Maximum number of rows to return.\n   * @param int $start Offset of the first row to return.\n   * @param string $mode The mode of result ('array', 'object', 'value').\n   * @param array $fields Fields to select.\n   *\n   * @return array The result set.\n   *\/"
        },
        "dbTraitGetRequestCfg": {
            "name": "dbTraitGetRequestCfg",
            "summary": "Prepares the request configuration for a database query.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitGetRequestCfg(\n    array $filter,\n    array $order,\n    int $limit,\n    int $start,\n    array $fields = []\n  ): array\n  {\n    \/\/ Ensure table index is defined\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    \/\/ Validate fields\n    if (!empty($fields)) {\n      foreach (array_values($fields) as $f) {\n        if (!in_array($f, $this->class_cfg['arch'][$this->class_table_index])) {\n          throw new Exception(X::_(\"The field %s does not exist\", $f));\n        }\n      }\n\n      $properFields = $fields;\n    }\n    else {\n      $fields = $this->class_cfg['arch'][$this->class_table_index];\n    }\n\n    $ccfg = $this->getClassCfg();\n    if (isset($fields['cfg']) && !empty($ccfg['cfg'])) {\n      $cfgCol = $fields['cfg'];\n      unset($fields['cfg']);\n      if (!isset($properFields)) {\n        $properFields = array_values($fields);\n      }\n\n      foreach ($ccfg['cfg'] as $v) {\n        if ($v['field'] && !in_array($v['field'], $properFields)) {\n          $properFields[$v['field']] = \"IF(JSON_EXTRACT(\"\n              . $this->db->csn($cfgCol, true) . \", '\\$.\" . $v['field']\n              . \"') = 'null', NULL, JSON_UNQUOTE(JSON_EXTRACT(\"\n              . $this->db->csn($cfgCol, true) . \", '\\$.\" . $v['field']\n              .\"')))\";\n        }\n      }\n    }\n    elseif (!isset($properFields)) {\n      $properFields = array_values($fields);\n    }\n\n    \/\/ Build the request configuration\n    $req = [\n      'table' => $this->class_table,\n      'fields' => $properFields,\n      'where' => $this->dbTraitGetFilterCfg($filter),\n      'order' => $order\n    ];\n\n    if ($limit) {\n      $req['limit'] = $limit;\n      $req['start'] = $start;\n    }\n\n    return $req;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 317,
            "endLine": 380,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 4,
            "shortName": "dbTraitGetRequestCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Filter conditions."
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Order by conditions."
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Maximum number of rows to return."
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Offset of the first row to return."
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Fields to select."
                }
            ],
            "doc": {
                "description": "Prepares the request configuration for a database query.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter",
                        "description": "Filter conditions."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "Order by conditions."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Maximum number of rows to return."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Offset of the first row to return."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "Fields to select."
                    }
                ],
                "return": "The request configuration.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the table index is not defined or a field does not exist."
                }
            },
            "comments": "  \/**\n   * Prepares the request configuration for a database query.\n   *\n   * @param array $filter Filter conditions.\n   * @param array $order Order by conditions.\n   * @param int $limit Maximum number of rows to return.\n   * @param int $start Offset of the first row to return.\n   * @param array $fields Fields to select.\n   *\n   * @return array The request configuration.\n   * @throws Exception If the table index is not defined or a field does not exist.\n   *\/"
        },
        "getUrl": {
            "name": "getUrl",
            "summary": "Returns the URL corresponding to the given item's ID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUrl(string $id_item, bool $followRedirect = true): ?string\n  {\n    $this->checkUrlCfg();\n    if ($id_url = $this->db->selectOne($this->urlTable, $this->urlFields['id_url'], [\n      $this->class_cfg['urlItemField'] => $id_item\n    ])) {\n      return $this->url->getUrl($id_url, $followRedirect);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 63,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getUrl",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                },
                {
                    "name": "followRedirect",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "edirect"
                }
            ],
            "doc": {
                "description": "Returns the URL corresponding to the given item's ID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "item"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$follow",
                        "description": "edirect"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the URL corresponding to the given item's ID\n   *\n   * @param string $id_item\n   * @param boolean $followRedirect\n   * @return string|null\n   *\/"
        },
        "getUrls": {
            "name": "getUrls",
            "summary": "Returns the URL corresponding to the given item's ID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUrls(string $id_item, bool $followRedirect = true): array\n  {\n    $this->checkUrlCfg();\n    $res = [];\n    if ($id_urls = $this->db->getColumnValues($this->urlTable, $this->urlFields['id_url'], [\n      $this->class_cfg['urlItemField'] => $id_item\n    ])) {\n      foreach ($id_urls as $id_url) {\n        $res[] = $this->url->getUrl($id_url, $followRedirect);\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 83,
            "endLine": 96,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getUrls",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                },
                {
                    "name": "followRedirect",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "edirect"
                }
            ],
            "doc": {
                "description": "Returns the URL corresponding to the given item's ID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "item"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$follow",
                        "description": "edirect"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the URL corresponding to the given item's ID\n   *\n   * @param string $id_item\n   * @param boolean $followRedirect\n   * @return string|null\n   *\/"
        },
        "urlExists": {
            "name": "urlExists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function urlExists(string $url): bool\n  {\n    return (bool)$this->getUrlId($url);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 103,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "urlExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $url\n   * @return bool\n   *\/"
        },
        "urlToId": {
            "name": "urlToId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function urlToId(string $url): ?string\n  {\n    $this->checkUrlCfg();\n    if ($id_url = $this->getUrlId($url)) {\n      return $this->db->selectOne($this->urlTable, $this->class_cfg['urlItemField'], [\n        $this->urlFields['id_url'] => $id_url\n      ]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 113,
            "endLine": 123,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "urlToId",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $url\n   * @return string|null\n   *\/"
        },
        "idToUrl": {
            "name": "idToUrl",
            "summary": "Returns the ID of the URL for the given item",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function idToUrl(string $id_item): ?string\n  {\n    $this->checkUrlCfg();\n    return $this->db->selectOne($this->urlTable, $this->urlFields['id_url'], [\n      $this->class_cfg['urlItemField'] => $id_item\n    ]);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 132,
            "endLine": 138,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "idToUrl",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                }
            ],
            "doc": {
                "description": "Returns the ID of the URL for the given item\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "item"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of the URL for the given item\n   * \n   * @param string $id_item\n   * @return string|null\n   *\/"
        },
        "getUrlId": {
            "name": "getUrlId",
            "summary": "Returns a URL's id based on its URL",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUrlId(string $url): ?string\n  {\n    $this->checkUrlCfg();\n    return $this->url->retrieveUrl($url);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 147,
            "endLine": 151,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getUrlId",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a URL's id based on its URL\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a URL's id based on its URL\n   *\n   * @param string $url\n   * @return string|null\n   *\/"
        },
        "getFullUrl": {
            "name": "getFullUrl",
            "summary": "Returns the whole content of the URL row based on its ID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFullUrl(string $id_url): ?stdClass\n  {\n    $this->checkUrlCfg();\n    return $this->url->select($id_url);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 160,
            "endLine": 164,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getFullUrl",
            "returns": [
                null,
                "stdClass"
            ],
            "arguments": [
                {
                    "name": "id_url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "url"
                }
            ],
            "doc": {
                "description": "Returns the whole content of the URL row based on its ID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the whole content of the URL row based on its ID\n   *\n   * @param string $id_url\n   * @return stdClass|null\n   *\/"
        },
        "setUrl": {
            "name": "setUrl",
            "summary": "Adds or replace a URL for a given item's ID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setUrl(string $id_item, string $url, string|null $type = null): ?string\n  {\n    $this->checkUrlCfg();\n    if (!($url = $this->sanitizeUrl($url))) {\n      throw new Exception(X::_(\"The URL can't be empty\"));\n    }\n\n    if (!($id_url = $this->url->retrieveUrl($url))\n        && (!$id_url = $this->url->add($url, $type ?: $this->urlType))\n    ) {\n      throw new Exception(X::_(\"Impossible to add the URL %s\", $url));\n    }\n\n    if ($checkItem = $this->urlToId($id_url)) {\n      if ($checkItem !== $id_item) {\n        throw new Exception(X::_(\"The URL is already in use by another item\"));\n      }\n    }\n    elseif (!$this->db->insert($this->urlTable, [\n      $this->class_cfg['urlItemField'] => $id_item,\n      $this->urlFields['id_url'] => $id_url\n    ])) {\n      return null;\n    }\n\n    return $id_url ?: null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 175,
            "endLine": 201,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "setUrl",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                },
                {
                    "name": "url",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds or replace a URL for a given item's ID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "item"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Adds or replace a URL for a given item's ID\n   *\n   * @param string $id_item\n   * @param string $url\n   * @param string $type\n   * @return null|string\n   *\/"
        },
        "addUrl": {
            "name": "addUrl",
            "summary": "Creates a new URL for a given item's ID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addUrl(string $id_item, string $url, string $prefix = '', string|null $type = null): ?string\n  {\n    $this->checkUrlCfg();\n    if (!$type && !$this->urlType) {\n      throw new Exception(X::_(\"You have no type set and no default type for the class %s\"), __CLASS__);\n    }\n\n    if ($id_url = $this->url->add($url, $type ?: $this->urlType, $prefix)) {\n      $this->db->delete($this->urlTable, [\n        $this->class_cfg['urlItemField'] => $id_item\n      ]);\n      return (bool)$this->db->insert($this->urlTable, [\n        $this->class_cfg['urlItemField'] => $id_item,\n        $this->urlFields['id_url'] => $id_url\n      ]);\n    }\n\n    return $id_url ?: null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 213,
            "endLine": 231,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "addUrl",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                },
                {
                    "name": "url",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "prefix",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 3,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Creates a new URL for a given item's ID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "item"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$prefix"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates a new URL for a given item's ID\n   *\n   * @param string $id_item\n   * @param string $url\n   * @param string $prefix\n   * @param string $type\n   * @return null|string\n   *\/"
        },
        "redirectUrl": {
            "name": "redirectUrl",
            "summary": "Returns true if the item is linked to an url.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function redirectUrl(string $id_item, string $url_source, string $url_destination): bool\n  {\n    $this->checkUrlCfg();\n    if ($id_source = $this->getUrlId($url_source)) {\n      $url = $this->getFullUrl($id_source);\n      if ($url && ($id_destination = $this->setUrl($id_item, $url_destination, $url->type))) {\n        $cfg = $this->url->getClassCfg();\n        return (bool)$this->db->update(\n          $cfg['table'],\n          [$cfg['arch']['url']['redirect'] => $id_destination],\n          [$cfg['arch']['url']['id'] => $id_source]\n        );\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 242,
            "endLine": 258,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "redirectUrl",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "source"
                },
                {
                    "name": "url_source",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "destination"
                },
                {
                    "name": "url_destination",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns true if the item is linked to an url.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "source"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "destination"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the item is linked to an url.\n   *\n   * @param string $id_source\n   * @param string $id_destination\n   * @return bool\n   *\n   *\/"
        },
        "hasUrl": {
            "name": "hasUrl",
            "summary": "Returns true if the item is linked to an url.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasUrl(string $id_item): bool\n  {\n    $this->checkUrlCfg();\n    return (bool)$this->db->count(\n      $this->urlTable,\n      [$this->class_cfg['urlItemField'] => $id_item]\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 268,
            "endLine": 275,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "hasUrl",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                }
            ],
            "doc": {
                "description": "Returns true if the item is linked to an url.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "item"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the item is linked to an url.\n   *\n   * @param string $id_item\n   * @return bool\n   *\n   *\/"
        },
        "deleteUrl": {
            "name": "deleteUrl",
            "summary": "Deletes url for the given note.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteUrl(string $id_item)\n  {\n    $this->checkUrlCfg();\n    $id_url = $this->db->selectOne(\n      $this->urlTable,\n      $this->urlFields['id_url'],\n      [$this->class_cfg['urlItemField'] => $id_item]\n    );\n\n    if ($id_url) {\n      $this->db->delete(\n        $this->urlTable,\n        [$this->class_cfg['urlItemField'] => $id_item]\n      );\n      return (bool)$this->url->delete($id_url);\n    }\n\n    throw new Exception(X::_(\"Impossible to retrieve the URL for item %s\", $id_item));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 284,
            "endLine": 302,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteUrl",
            "returns": [],
            "arguments": [
                {
                    "name": "id_item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "item"
                }
            ],
            "doc": {
                "description": "Deletes url for the given note.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "item"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes url for the given note.\n   *\n   * @param string $id_item\n   * @return int|null\n   *\/"
        },
        "sanitizeUrl": {
            "name": "sanitizeUrl",
            "summary": "Trims the slashes and removes double slashes if any.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function sanitizeUrl(string $url): string\n  {\n    $this->checkUrlCfg();\n    return $this->url->sanitize($url);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 311,
            "endLine": 315,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "sanitizeUrl",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Trims the slashes and removes double slashes if any.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Trims the slashes and removes double slashes if any.\n   *\n   * @param string $url\n   * @return string\n   *\/"
        },
        "initUrl": {
            "name": "initUrl",
            "summary": "initialize the trait's props",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initUrl(): void\n  {\n    if (!$this->isInitUrl\n        && $this->db\n        && $this->class_cfg\n        && $this->class_table_index\n        && $this->class_cfg['tables'][$this->class_table_index . '_url']\n        && $this->class_cfg['urlItemField']\n        && $this->class_cfg['urlTypeValue']\n    ) {\n      $this->urlTableIdx = $this->class_table_index . '_url';\n      $this->urlTable    = $this->class_cfg['tables'][$this->urlTableIdx];\n      $this->urlFields   = $this->class_cfg['arch'][$this->urlTableIdx];\n      $this->urlType     = $this->class_cfg['urlTypeValue'];\n      if (X::hasProps($this->urlFields, ['id_url', $this->class_cfg['urlItemField']], true)) {\n        $this->url = new urlCls($this->db);\n      }\n      $this->isInitUrl = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 323,
            "endLine": 342,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "initUrl",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "initialize the trait's props\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * initialize the trait's props\n   *\n   * @return void\n   *\/"
        },
        "checkUrlCfg": {
            "name": "checkUrlCfg",
            "summary": "Checks if the class has been correctly initialized and throws an exception if not",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Url.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function checkUrlCfg(): void\n  {\n    $this->initUrl();\n    if (!$this->url) {\n      throw new Exception(X::_(\"The class is missing configuration to make use of URL\"));\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Url",
            "startLine": 350,
            "endLine": 356,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "checkUrlCfg",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks if the class has been correctly initialized and throws an exception if not\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the class has been correctly initialized and throws an exception if not\n   *\n   * @return void\n   *\/"
        },
        "getTags": {
            "name": "getTags",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Tagger.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTags(string $id_element, bool $full = false, bool $force = false): array\n  {\n    $this->taggerInit();\n    $res = [];\n    $ids = $this->db->getColumnValues(\n      $this->taggerTable,\n      $this->taggerCols['id_tag'],\n      [$this->taggerCols['id_element'] => $id_element]\n    );\n    foreach ($ids as $id) {\n      if ($tmp = $this->taggerObject->getById($id, $full)) {\n        $res[] = $tmp;\n      }\n      elseif (!$force) {\n        X::log([$ids, $this->db->last()]);\n        throw new Exception(X::_(\"Impossible to find the tag %s\", $id));\n      }\n    }\n   \n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Tagger",
            "startLine": 41,
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getTags",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "setTags": {
            "name": "setTags",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Tagger.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setTags(string $id_element, array $tags, string $lang = ''): int\n  {\n    $this->taggerInit();\n    $lang = $this->taggerGetLang($lang);\n    if (!method_exists($this, 'dbTraitExists') || !$this->dbTraitExists($id_element)) {\n      throw new Exception(X::_(\"Impossible to find the element in %s\", __CLASS__));\n    }\n\n    foreach ($this->getTags($id_element, true) as $tag) {\n      $idx = X::indexOf($tags, $tag['tag']);\n      if ($idx > -1) {\n        array_splice($tags, $idx, 1);\n      }\n      else {\n        $this->removeTag($id_element, $tag['id']);\n      }\n    }\n\n    $num = 0;\n    foreach ($tags as $tag) {\n      if ($this->addTag($id_element, $tag, $lang)) {\n        $num++;\n      }\n    }\n\n    return $num;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Tagger",
            "startLine": 71,
            "endLine": 97,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "setTags",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "element The ID of the element to which attach the tags"
                },
                {
                    "name": "tags",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "A list of tags which will be retrieved or added"
                },
                {
                    "name": "lang",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Undocumented function\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "element The ID of the element to which attach the tags"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$tags",
                        "description": "A list of tags which will be retrieved or added"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Undocumented function\n   *\n   * @param string $id_element The ID of the element to which attach the tags\n   * @param array  $tags A list of tags which will be retrieved or added\n   * @return int \n   *\/"
        },
        "removeTag": {
            "name": "removeTag",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Tagger.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeTag(string $id_element, string $id_tag): int\n  {\n    $this->taggerInit();\n    return $this->db->delete(\n      $this->taggerTable,\n      [\n        $this->taggerCols['id_element'] => $id_element,\n        $this->taggerCols['id_tag'] => $id_tag\n      ]\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Tagger",
            "startLine": 100,
            "endLine": 110,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "removeTag",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_tag",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "removeTags": {
            "name": "removeTags",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Tagger.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeTags(string $id_element): int\n  {\n    $this->taggerInit();\n    return $this->db->delete(\n      $this->taggerTable,\n      [\n        $this->taggerCols['id_element'] => $id_element,\n      ]\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Tagger",
            "startLine": 113,
            "endLine": 122,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeTags",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addTag": {
            "name": "addTag",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Tagger.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addTag(string $id_element, string $tag, string $lang = '', string $description = ''): int\n  {\n    $this->taggerInit();\n    $lang = $this->taggerGetLang($lang);\n    if ($tmp = $this->taggerObject->get($tag, $lang)) {\n      $id_tag = $tmp['id'];\n    }\n    else {\n      $id_tag = $this->taggerObject->add($tag, $lang, $description);\n    }\n\n    if (!$id_tag) {\n      throw new Exception(X::_(\"Impossible to create the tag %s\", $tag));\n    }\n\n    return $this->db->insertIgnore(\n      $this->taggerTable,\n      [\n        $this->taggerCols['id_element'] => $id_element,\n        $this->taggerCols['id_tag'] => $id_tag\n      ]\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Tagger",
            "startLine": 125,
            "endLine": 147,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "addTag",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id_element",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "tag",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "description",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "taggerGetLang": {
            "name": "taggerGetLang",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Tagger.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function taggerGetLang(string $lang = '')\n  {\n    if ($lang) {\n      return $lang;\n    }\n\n    if (method_exists($this, 'getLang')) {\n      return $this->getLang();\n    }\n\n    if (defined('BBN_LANG')) {\n      return BBN_LANG;\n    }\n\n    return 'en';\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Tagger",
            "startLine": 150,
            "endLine": 165,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "taggerGetLang",
            "returns": [],
            "arguments": [
                {
                    "name": "lang",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "taggerInit": {
            "name": "taggerInit",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Note",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Tagger.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function taggerInit(string|null $table = null, array|null $columns = null)\n  {\n    if (!$this->taggerIsInit) {\n      if (!$this->db) {\n        throw new Exception(X::_(\"Impossible to init the tagger if there is no Db property\"));\n      }\n\n      if (!$this->class_cfg) {\n        throw new Exception(X::_(\"Impossible to init the tagger if the class hasn't the trait Dbconfig\"));\n      }\n\n      if (empty($table) || empty($columns)) {\n        throw new Exception(X::_(\"Impossible to init the tagger without a table name and 2 columns defined\"));\n      }\n\n      if (empty($columns['id_tag'])) {\n        throw new Exception(X::_(\"Impossible to init the tagger without an id_tag column\"));\n      }\n\n      if (empty($columns['id_element'])) {\n        throw new Exception(X::_(\"Impossible to init the tagger without an id_element column\"));\n      }\n\n      $this->taggerObject = new Tag($this->db);\n      $this->taggerTable  = $table;\n      $this->taggerCols   = $columns;\n      $this->taggerIsInit = true;\n    }\n\n    return $this->taggerIsInit;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Tagger",
            "startLine": 168,
            "endLine": 198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "taggerInit",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "columns",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "medias": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Appui\\Note",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "usr": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Appui\\Note",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "userId": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Appui\\Note",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "lang": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Appui\\Note",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string The default language used",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "default_class_cfg": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Appui\\Note",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": {
                "errors": {
                    "19": "wrong fingerprint"
                },
                "table": "bbn_notes",
                "tables": {
                    "notes": "bbn_notes",
                    "versions": "bbn_notes_versions",
                    "features": "bbn_notes_features",
                    "notes_medias": "bbn_notes_medias",
                    "medias": "bbn_medias",
                    "notes_tags": "bbn_notes_tags",
                    "notes_url": "bbn_notes_url",
                    "notes_events": "bbn_notes_events"
                },
                "arch": {
                    "notes": {
                        "id": "id",
                        "id_parent": "id_parent",
                        "id_alias": "id_alias",
                        "id_type": "id_type",
                        "id_option": "id_option",
                        "mime": "mime",
                        "lang": "lang",
                        "private": "private",
                        "locked": "locked",
                        "pinned": "pinned",
                        "important": "important",
                        "creator": "creator",
                        "active": "active"
                    },
                    "versions": {
                        "id_note": "id_note",
                        "version": "version",
                        "latest": "latest",
                        "title": "title",
                        "content": "content",
                        "excerpt": "excerpt",
                        "id_user": "id_user",
                        "creation": "creation"
                    },
                    "features": {
                        "id": "id",
                        "id_option": "id_option",
                        "id_note": "id_note",
                        "id_media": "id_media",
                        "num": "num",
                        "cfg": "cfg"
                    },
                    "notes_medias": {
                        "id": "id",
                        "id_note": "id_note",
                        "version": "version",
                        "id_media": "id_media",
                        "id_user": "id_user",
                        "comment": "comment",
                        "creation": "creation",
                        "default_media": "default_media"
                    },
                    "medias": {
                        "id": "id",
                        "id_user": "id_user",
                        "type": "type",
                        "name": "name",
                        "title": "title",
                        "content": "content",
                        "private": "private"
                    },
                    "notes_events": {
                        "id_note": "id_note",
                        "id_event": "id_event"
                    },
                    "notes_tags": {
                        "id_note": "id_note",
                        "id_tag": "id_tag"
                    },
                    "notes_url": {
                        "id_url": "id_url",
                        "id_note": "id_note"
                    }
                },
                "paths": {
                    "medias": "media\/"
                },
                "urlItemField": "id_note",
                "urlTypeValue": "note"
            }
        },
        "class_cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array $class_cfg",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Db"
            },
            "declaring_trait": "bbn\\Models\\Tts\\References",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "dbClass"
                    }
                ]
            },
            "parent": {
                "name": "db",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Db"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Db",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "dbClass"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "references": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\References",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "references_select": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\References",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": ""
        },
        "references_join": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\References",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": ""
        },
        "optional_is_init": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Set as true from the moment a first instance has been initiated and has defined the constants."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "option_root_id": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The ID of the root option"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "options": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Option",
                        "description": "The Option object"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_isInitClassCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var bool",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "fields": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_table": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_table_index": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "rootFilterCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Configuration for the root filter."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "dbTraitFilterCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": []
        },
        "dbTraitRelations": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Cached relations for the current table."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "dbTraitStructure": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Cached relations for the current table."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "isInitUrl": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Url",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "Remains false until initUrl is executed for preventing it's executed twice\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "urlType": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Url",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The default type for the links, must be set in the construct\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "urlTable": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Url",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The name of the table associating the items from the current class and the URLs\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "urlTableIdx": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Url",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The name of the index of the table in class_cfg (eg for media it's medias_url)\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "urlFields": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Url",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The array of fields\/columns for the urlTable\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "url": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Url",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The url object\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bbn\\Appui\\Url"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "taggerIsInit": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Tagger",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "False while initTagger has not been called."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "taggerTable": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Tagger",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "The name of the table where to insert tags relations."
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "taggerCols": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Tagger",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "The names of the columns where to insert tags relations (must have a id_tag and a id_element indexes)."
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "taggerObject": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Note"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Tagger",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Tag",
                        "description": "The Tag object."
                    }
                ]
            },
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "default_class_cfg": {
            "errors": {
                "19": "wrong fingerprint"
            },
            "table": "bbn_notes",
            "tables": {
                "notes": "bbn_notes",
                "versions": "bbn_notes_versions",
                "features": "bbn_notes_features",
                "notes_medias": "bbn_notes_medias",
                "medias": "bbn_medias",
                "notes_tags": "bbn_notes_tags",
                "notes_url": "bbn_notes_url",
                "notes_events": "bbn_notes_events"
            },
            "arch": {
                "notes": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "id_alias": "id_alias",
                    "id_type": "id_type",
                    "id_option": "id_option",
                    "mime": "mime",
                    "lang": "lang",
                    "private": "private",
                    "locked": "locked",
                    "pinned": "pinned",
                    "important": "important",
                    "creator": "creator",
                    "active": "active"
                },
                "versions": {
                    "id_note": "id_note",
                    "version": "version",
                    "latest": "latest",
                    "title": "title",
                    "content": "content",
                    "excerpt": "excerpt",
                    "id_user": "id_user",
                    "creation": "creation"
                },
                "features": {
                    "id": "id",
                    "id_option": "id_option",
                    "id_note": "id_note",
                    "id_media": "id_media",
                    "num": "num",
                    "cfg": "cfg"
                },
                "notes_medias": {
                    "id": "id",
                    "id_note": "id_note",
                    "version": "version",
                    "id_media": "id_media",
                    "id_user": "id_user",
                    "comment": "comment",
                    "creation": "creation",
                    "default_media": "default_media"
                },
                "medias": {
                    "id": "id",
                    "id_user": "id_user",
                    "type": "type",
                    "name": "name",
                    "title": "title",
                    "content": "content",
                    "private": "private"
                },
                "notes_events": {
                    "id_note": "id_note",
                    "id_event": "id_event"
                },
                "notes_tags": {
                    "id_note": "id_note",
                    "id_tag": "id_tag"
                },
                "notes_url": {
                    "id_url": "id_url",
                    "id_note": "id_note"
                }
            },
            "paths": {
                "medias": "media\/"
            },
            "urlItemField": "id_note",
            "urlTypeValue": "note"
        },
        "optional_is_init": false,
        "option_root_id": null
    },
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "bbn\\Db": "Db",
        "bbn\\Str": "Str",
        "bbn\\X": "X",
        "bbn\\User": "User",
        "bbn\\Mvc": "Mvc",
        "bbn\\Appui\\Medias": "Medias",
        "bbn\\Models\\Tts\\References": "References",
        "bbn\\Models\\Tts\\Optional": "Optional",
        "bbn\\Models\\Tts\\DbActions": "DbActions",
        "bbn\\Models\\Tts\\Url": "Url",
        "bbn\\Models\\Tts\\Tagger": "Tagger",
        "bbn\\Models\\Cls\\Db": "DbCls",
        "PhpOffice\\PhpWord\\Media": "Media"
    },
    "dummyComments": [
        "\/**\n * Created by PhpStorm.\n * User: BBN\n * Date: 14\/04\/2016\n * Time: 20:38.\n *\/"
    ],
    "summary": "",
    "description": "",
    "description_parts": []
}