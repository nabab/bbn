{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Note",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\References",
        "bbn\\Models\\Tts\\Optional",
        "bbn\\Models\\Tts\\Dbconfig"
    ],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Note.php",
    "startLine": 19,
    "endLine": 1096,
    "contentConstructor": {
        "file": "bbn\\Appui\\Note",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db)\n  {\n      parent::__construct($db);\n      self::_init_class_cfg(self::$default_class_cfg);\n      self::optionalInit();\n  }",
            "startLine": 100,
            "endLine": 105,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Db",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bbn\\Db $db)\n  {\n    $this->db = $db;\n  }",
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getMediaInstance": {
            "name": "getMediaInstance",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->medias) {\n        $this->medias = new Medias($this->db);\n    }\n\n      return $this->medias;\n  }",
            "startLine": 108,
            "endLine": 115,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getExcerpt": {
            "name": "getExcerpt",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($title, $content)\n  {\n      $excerpt = '';\n    if (!empty($title)) {\n        $excerpt .= Str::html2text($title, false).PHP_EOL.PHP_EOL;\n    }\n\n    if (!empty($content)) {\n      if (Str::isJson($content)) {\n          $ct = json_decode($content, true);\n        foreach ($ct as $n => $c) {\n          if (is_string($c)) {\n            if (is_string($n)) {\n              $excerpt .= $n.': ';\n            }\n\n                $excerpt .= Str::html2text($c, strpos($c, PHP_EOL) > 0).PHP_EOL.PHP_EOL;\n          } elseif (is_array($c)) {\n            foreach ($c as $k => $v) {\n              if (is_string($v)) {\n                if (is_string($k)) {\n                        $excerpt .= $k.': ';\n                }\n\n                $excerpt .= Str::html2text($v, strpos($v, PHP_EOL) > 0).PHP_EOL.PHP_EOL;\n              }\n            }\n          }\n        }\n      } else {\n          $excerpt .= Str::html2text($content);\n      }\n    }\n\n      return $excerpt;\n  }",
            "startLine": 118,
            "endLine": 153,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "title",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "insert": {
            "name": "insert",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($title, $content = '', $type = NULL, $private = false, $locked = false, $parent = NULL, $alias = NULL, $mime = '', $lang = '')\n  {\n      $content = '',\n      string $type = null,\n      bool $private = false,\n      bool $locked = false,\n      string $parent = null,\n      string $alias = null,\n      string $mime = '',\n      string $lang = ''\n  )\n  {\n    if (is_array($title)) {\n      $props = [\n        'title',\n        'content',\n        'type',\n        'private',\n        'locked',\n        'parent',\n        'alias',\n        'mime',\n        'lang'\n      ];\n      $tmp = $title;\n      foreach ($tmp as $prop => $t) {\n        if (X::indexOf($props, $prop) > -1) {\n          $$prop = $t;\n        }\n      }\n    }\n\n    if (empty($content)) {\n      return null;\n    }\n\n    if (empty($lang) && defined('BBN_LANG')) {\n        $lang = BBN_LANG;\n    }\n\n      $cf = &$this->class_cfg;\n    if (is_null($type)) {\n        $type = self::getOptionId('personal', 'types');\n    }\n\n      $excerpt = $this->getExcerpt($title, $content);\n      $id_note = false;\n    if (($usr = bbn\\User::getInstance())\n        && $this->db->insert(\n          $cf['table'],\n          [\n          $cf['arch']['notes']['id_parent'] => $parent,\n          $cf['arch']['notes']['id_alias'] => $alias,\n          $cf['arch']['notes']['id_type'] => $type,\n          $cf['arch']['notes']['excerpt'] => $excerpt,\n          $cf['arch']['notes']['private'] => !empty($private) ? 1 : 0,\n          $cf['arch']['notes']['locked'] => !empty($locked) ? 1 : 0,\n          $cf['arch']['notes']['creator'] => $usr->getId(),\n          $cf['arch']['notes']['mime'] => $mime,\n          $cf['arch']['notes']['lang'] => $lang,\n          ]\n        )\n        && ($id_note = $this->db->lastId())\n    ) {\n        $this->insertVersion($id_note, $title, $content);\n    }\n\n      return $id_note;\n  }",
            "startLine": 156,
            "endLine": 224,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 9,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "title",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 3,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "locked",
                    "position": 4,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "parent",
                    "position": 5,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "alias",
                    "position": 6,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "mime",
                    "position": 7,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "lang",
                    "position": 8,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "insertVersion": {
            "name": "insertVersion",
            "summary": "Adds a new version to the given note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_note, $title, $content)\n  {\n    if ($this->check() && ($usr = bbn\\User::getInstance()) && ($note = $this->get($id_note))) {\n        $cf     = &$this->class_cfg;\n        $latest = $note['version'] ?? 0;\n      if (!$latest || ($note['content'] !== $content) || ($note['title'] !== $title)) {\n        $next = $latest + 1;\n      }\n\n      if (isset($next) && $this->db->insert(\n        $cf['tables']['versions'],\n        [\n          $cf['arch']['versions']['id_note'] => $id_note,\n          $cf['arch']['versions']['version'] => $next,\n          $cf['arch']['versions']['title'] => $title,\n          $cf['arch']['versions']['content'] => $content,\n          $cf['arch']['versions']['id_user'] => $usr->getId(),\n          $cf['arch']['versions']['creation'] => date('Y-m-d H:i:s'),\n            ]\n      )\n      ) {\n          $excerpt = $this->getExcerpt($title, $content);\n          $this->db->update(\n            $cf['table'],\n            [$cf['arch']['notes']['excerpt'] => $excerpt],\n            [$cf['arch']['notes']['id'] => $id_note]\n          );\n\n          return $next;\n      }\n\n        return $latest;\n    }\n\n      return null;\n  }",
            "startLine": 230,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "update": {
            "name": "update",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id, $title, $content, $private = NULL, $locked = NULL)\n  {\n      $ok = null;\n    if ($old = $this->db->rselect('bbn_notes', [], ['id' => $id])) {\n        $ok  = 0;\n        $new = [];\n      if (!\\is_null($private) && ($private != $old['private'])) {\n        $new['private'] = $private;\n      }\n\n      if (!\\is_null($locked) && ($locked != $old['locked'])) {\n          $new['locked'] = $locked;\n      }\n\n      if (!empty($new)) {\n          $ok = $this->db->update('bbn_notes', $new, ['id' => $id]);\n      }\n\n      if ($old_v = $this->get($id)) {\n          $changed = false;\n          $new_v   = [\n        'title' => $old_v['title'],\n        'content' => $old_v['content'],\n          ];\n\n          if ($title !== $old_v['title']) {\n              $changed        = true;\n              $new_v['title'] = $title;\n          }\n\n          if ($content !== $old_v['content']) {\n              $changed          = true;\n              $new_v['content'] = $content;\n          }\n\n          if (!empty($changed)) {\n              $ok = $this->insertVersion($id, $new_v['title'], $new_v['content']);\n          }\n      }\n    }\n\n      return $ok;\n  }",
            "startLine": 268,
            "endLine": 310,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 3,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 3,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "locked",
                    "position": 4,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "latest": {
            "name": "latest",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n      $cf = &$this->class_cfg;\n\n      return $this->db->selectOne(\n        $cf['tables']['versions'], 'MAX('.$cf['arch']['versions']['version'].')', [\n        $cf['arch']['versions']['id_note'] => $id,\n        ]\n      );\n  }",
            "startLine": 313,
            "endLine": 322,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get": {
            "name": "get",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id, $version = NULL, $simple = false)\n  {\n      $cf = &$this->class_cfg;\n    if (!\\is_int($version)) {\n        $version = $this->latest($id) ?: 1;\n    }\n\n    if ($res = $this->db->rselect(\n      $cf['tables']['notes'], [], [\n          $cf['arch']['notes']['id'] => $id,\n          ]\n    )\n    ) {\n      if ($tmp = $this->db->rselect(\n        $cf['tables']['versions'], [], [\n            $cf['arch']['versions']['id_note'] => $id,\n            $cf['arch']['versions']['version'] => $version,\n            ]\n      )\n      ) {\n          $res = array_merge($res, $tmp);\n      }\n\n      if ($simple) {\n          unset($res[$cf['arch']['versions']['content']]);\n      } else {\n        if ($medias = $this->db->getColumnValues(\n          $cf['tables']['nmedias'], $cf['arch']['nmedias']['id_media'], [\n            $cf['arch']['nmedias']['id_note'] => $id,\n            $cf['arch']['nmedias']['version'] => $version,\n            ]\n        )\n        ) {\n            $media         = $this->getMediaInstance();\n            $res['medias'] = [];\n          foreach ($medias as $m) {\n              $res['medias'][] = $media->getMedia($m, true);\n          }\n        }\n      }\n\n        return $res;\n    }\n\n      return null;\n  }",
            "startLine": 325,
            "endLine": 370,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "simple",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getFull": {
            "name": "getFull",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id, $version = NULL)\n  {\n      $cf = &$this->class_cfg;\n    if (!\\is_int($version)) {\n        $version = $this->latest($id);\n    }\n\n    if ($res = $this->db->rselect(\n      [\n          'table' => $cf['table'],\n          'fields' => [\n      $cf['arch']['notes']['id'],\n      $cf['arch']['notes']['id_parent'],\n      $cf['arch']['notes']['id_alias'],\n      $cf['arch']['notes']['excerpt'],\n      $cf['arch']['notes']['id_type'],\n      $cf['arch']['notes']['private'],\n      $cf['arch']['notes']['locked'],\n      $cf['arch']['notes']['pinned'],\n      $cf['arch']['versions']['version'],\n      $cf['arch']['versions']['title'],\n      $cf['arch']['versions']['content'],\n      $cf['arch']['versions']['id_user'],\n      $cf['arch']['versions']['creation'],\n          ],\n          'join' => [[\n          'table' => $cf['tables']['versions'],\n          'on' => [\n          'conditions' => [[\n          'field' => $cf['arch']['versions']['id_note'],\n          'exp' => $cf['arch']['notes']['id'],\n          ], [\n          'field' => $cf['arch']['versions']['version'],\n          'value' => $version,\n          ]],\n          ],\n          ]],\n          'where' => [\n          'conditions' => [[\n          'field' => $cf['arch']['notes']['id'],\n          'value' => $id,\n          ]],\n          ],\n          ]\n    )\n    ) {\n        $res['medias'] = $this->getMedias($id, $version);\n\n        return $res;\n    }\n\n      return null;\n  }",
            "startLine": 373,
            "endLine": 425,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "urlExists": {
            "name": "urlExists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($url)\n  {\n      return (bool)$this->urlToId($url);\n  }",
            "startLine": 428,
            "endLine": 431,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "urlToId": {
            "name": "urlToId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($url)\n  {\n    if (!$url) {\n        return null;\n    }\n\n      $cf = &$this->class_cfg;\n    if (substr($url, 0, 1) !== '\/') {\n        $url = '\/'.$url;\n    }\n\n      $res = $this->db->selectOne($cf['tables']['url'], $cf['arch']['id_note'], [$cf['arch']['url']['url'] => $url]);\n\n      return $res ?: null;\n  }",
            "startLine": 434,
            "endLine": 448,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "urlToNote": {
            "name": "urlToNote",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($url, $full = false)\n  {\n    if ($id = $this->urlToId($url)) {\n      if ($full) {\n        return $this->getFull($id);\n      } else {\n          return $this->get($id);\n      }\n    }\n\n      return null;\n  }",
            "startLine": 451,
            "endLine": 462,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getByType": {
            "name": "getByType",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($type = NULL, $id_user = false, $limit = 0, $start = 0)\n  {\n    $db  = &$this->db;\n    $cf  = &$this->class_cfg;\n    $res = [];\n    if (!Str::isUid($type)) {\n      $type = self::getOptionId(is_null($type) ? 'personal' : $type, 'types');\n    }\n\n    if (Str::isUid($type) && is_int($limit) && is_int($start)) {\n        $where = [[\n      'field' => $db->cfn($cf['arch']['notes']['id_type'], $cf['table']),\n      'value' => $type,\n        ], [\n        'field' => $db->cfn($cf['arch']['notes']['active'], $cf['table']),\n        'value' => 1,\n        ], [\n        'field' => 'versions2.'.$cf['arch']['versions']['version'],\n        'operator' => 'isnull',\n        ]];\n        if (Str::isUid($id_user)) {\n            $where[] = [\n          'field' => $db->cfn($cf['arch']['notes']['creator'], $cf['table']),\n          'value' => $id_user,\n            ];\n        }\n\n        $notes = $db->rselectAll(\n          [\n          'table' => $cf['table'],\n          'fields' => [\n            'versions1.'.$cf['arch']['versions']['id_note'],\n            'versions1.'.$cf['arch']['versions']['version'],\n            'versions1.'.$cf['arch']['versions']['title'],\n            'versions1.'.$cf['arch']['versions']['content'],\n            'versions1.'.$cf['arch']['versions']['id_user'],\n            'versions1.'.$cf['arch']['versions']['creation'],\n          ],\n          'join' => [[\n            'table' => $cf['tables']['versions'],\n            'type' => 'left',\n            'alias' => 'versions1',\n            'on' => [\n          'conditions' => [[\n          'field' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n          'exp' => 'versions1.'.$cf['arch']['versions']['id_note'],\n          ]],\n            ],\n          ], [\n            'table' => $cf['tables']['versions'],\n            'type' => 'left',\n            'alias' => 'versions2',\n            'on' => [\n          'conditions' => [[\n          'field' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n          'exp' => 'versions2.'.$cf['arch']['versions']['id_note'],\n          ], [\n          'field' => 'versions1.'.$cf['arch']['versions']['version'],\n          'operator' => '<',\n          'exp' => 'versions2.'.$cf['arch']['versions']['version'],\n          ]],\n            ],\n          ]],\n          'where' => [\n            'conditions' => $where,\n          ],\n          'group_by' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n          'order' => [[\n            'field' => 'versions1.'.$cf['arch']['versions']['version'],\n            'dir' => 'DESC',\n          ], [\n            'field' => 'versions1.'.$cf['arch']['versions']['creation'],\n            'dir' => 'DESC',\n          ]],\n          'limit' => $limit,\n          'start' => $start,\n          ]\n        );\n      foreach ($notes as $note) {\n        if ($medias = $db->getColumnValues(\n          $cf['tables']['nmedias'], $cf['arch']['nmedias']['id_media'], [\n          $cf['arch']['nmedias']['id_note'] => $note[$cf['arch']['versions']['id_note']],\n          $cf['arch']['nmedias']['version'] => $note[$cf['arch']['versions']['version']],\n          ]\n        )\n        ) {\n              $note['medias'] = [];\n          foreach ($medias as $m) {\n            if ($med = $db->rselect($cf['tables']['medias'], [], [$cf['arch']['medias']['id'] => $m])) {\n              if (Str::isJson($med[$cf['arch']['medias']['content']])) {\n                      $med[$cf['arch']['medias']['content']] = json_decode($med[$cf['arch']['medias']['content']]);\n              }\n\n              $version['medias'][] = $med;\n            }\n          }\n        }\n\n        $res[] = $note;\n      }\n\n        X::sortBy($res, $cf['arch']['versions']['creation'], 'DESC');\n\n        return $res;\n    }\n\n      return false;\n  }",
            "startLine": 465,
            "endLine": 572,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getVersions": {
            "name": "getVersions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if (Str::isUid($id)) {\n        $cf = &$this->class_cfg;\n\n        return $this->db->rselectAll(\n          [\n          'table' => $cf['tables']['versions'],\n          'fields' => [\n          $cf['arch']['versions']['version'],\n          $cf['arch']['versions']['id_user'],\n          $cf['arch']['versions']['creation'],\n          ],\n          'where' => [\n          'conditions' => [[\n          'field' => $cf['arch']['versions']['id_note'],\n          'value' => $id,\n          ]],\n          ],\n          'order' => [[\n          'field' => $cf['arch']['versions']['version'],\n          'dir' => 'DESC',\n          ]],\n          ]\n        );\n    }\n\n      return null;\n  }",
            "startLine": 575,
            "endLine": 603,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "countByType": {
            "name": "countByType",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($type = NULL, $id_user = false)\n  {\n      $db = &$this->db;\n      $cf = &$this->class_cfg;\n    if (!Str::isUid($type)) {\n        $type = $type = self::getOptionId(is_null($type) ? 'personal' : $type, 'types');\n    }\n\n    if (Str::isUid($type)) {\n        $where = [[\n      'field' => $cf['arch']['notes']['active'],\n      'value' => 1,\n        ], [\n        'field' => $cf['arch']['notes']['id_type'],\n        'value' => $type,\n        ]];\n        if (!empty($id_user) && Str::isUid($id_user)) {\n            $where[] = [\n          'field' => $cf['arch']['notes']['creator'],\n          'value' => $id_user,\n            ];\n        }\n\n        return $db->selectOne(\n          [\n          'table' => $cf['table'],\n          'fields' => ['COUNT(DISTINCT '.$cf['arch']['notes']['id'].')'],\n          'where' => [\n            'conditions' => $where,\n          ],\n          ]\n        );\n    }\n\n      return false;\n  }",
            "startLine": 606,
            "endLine": 641,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "addMedia": {
            "name": "addMedia",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_note, $name, array $content = NULL, $title = '', $type = 'file', $private = false)\n  {\n      $cf    = &$this->class_cfg;\n      $media = $this->getMediaInstance();\n      \/\/ Case where we give also the version (i.e. not the latest)\n    if (\\is_array($id_note) && (count($id_note) === 2)) {\n        $version = $id_note[1];\n        $id_note = $id_note[0];\n    } else {\n        $version = $this->latest($id_note) ?: 1;\n    }\n\n    if ($this->exists($id_note)\n        && ($id_media = $media->insert($name, $content, $title, $type, $private))\n        && $this->addMediaToNote($id_media, $id_note, $version)\n    ) {\n        return $id_media;\n    }\n\n      return null;\n  }",
            "startLine": 644,
            "endLine": 664,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 2,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 4,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 5,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "addMediaToNote": {
            "name": "addMediaToNote",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_media, $id_note, $version)\n  {\n    if ($usr = bbn\\User::getInstance()) {\n        $cf = &$this->class_cfg;\n\n        return $this->db->insert(\n          $cf['tables']['nmedias'], [\n          $cf['arch']['nmedias']['id_note'] => $id_note,\n          $cf['arch']['nmedias']['version'] => $version,\n          $cf['arch']['nmedias']['id_media'] => $id_media,\n          $cf['arch']['nmedias']['id_user'] => $usr->getId(),\n          $cf['arch']['nmedias']['creation'] => date('Y-m-d H:i:s'),\n          ]\n        );\n    }\n\n      return null;\n  }",
            "startLine": 667,
            "endLine": 684,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_note",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 2,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "removeMedia": {
            "name": "removeMedia",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_media, $id_note, $version = false)\n  {\n      $cf = &$this->class_cfg;\n    if ($this->db->selectOne($cf['tables']['medias'], $cf['arch']['medias']['id'], [$cf['arch']['medias']['id'] => $id_media])\n        && $this->exists($id_note)\n    ) {\n        $filter = [\n      $cf['arch']['nmedias']['id_note'] => $id_note,\n      $cf['arch']['nmedias']['version'] => $version ?: $this->latest($id_note),\n      $cf['arch']['nmedias']['id_media'] => $id_media,\n        ];\n        if ($version === true) {\n            unset($filter[$cf['arch']['nmedias']['version']]);\n        }\n\n        return $this->db->delete($cf['tables']['nmedias'], $filter);\n    }\n\n      return null;\n  }",
            "startLine": 687,
            "endLine": 706,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_note",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "media2version": {
            "name": "media2version",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_media, $id_note, $version = false)\n  {\n      $cf = &$this->class_cfg;\n\n      return !empty($id_media) &&\n    $this->db->selectOne($cf['tables']['medias'], $cf['arch']['medias']['id'], [$cf['arch']['medias']['id'] => $id_media]) &&\n    $this->exists($id_note) &&\n    $this->db->insert(\n      $cf['tables']['nmedias'], [\n      $cf['arch']['nmedias']['id_note'] => $id_note,\n      $cf['arch']['nmedias']['version'] => $version ?: $this->latest($id_note),\n      $cf['arch']['nmedias']['id_media'] => $id_media,\n      $cf['arch']['nmedias']['id_user'] => \\bbn\\User::getInstance()->getId(),\n      $cf['arch']['nmedias']['creation'] => date('Y-m-d H:i:s'),\n      ]\n    );\n  }",
            "startLine": 709,
            "endLine": 725,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_note",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getMedias": {
            "name": "getMedias",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_note, $version = false, $type = false)\n  {\n      $ret   = [];\n      $media = $this->getMediaInstance();\n      $cf    = &$this->class_cfg;\n    if ($this->exists($id_note)) {\n        $filter = [\n        $cf['arch']['nmedias']['id_note'] => $id_note,\n        $cf['arch']['nmedias']['version'] => $version ?: $this->latest($id_note),\n        ];\n        if ($version === true) {\n            unset($filter[$cf['arch']['nmedias']['version']]);\n        }\n\n        if ($medias = $this->db->getColumnValues($cf['tables']['nmedias'], $cf['arch']['nmedias']['id_media'], $filter)) {\n          foreach ($medias as $m) {\n              $ret[] = $media->getMedia($m, true);\n          }\n        }\n    }\n\n      return $ret;\n  }",
            "startLine": 728,
            "endLine": 750,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "hasMedias": {
            "name": "hasMedias",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_note, $version = false, $id_media = '')\n  {\n      $cf = &$this->class_cfg;\n    if ($this->exists($id_note)) {\n        $where = [\n      $cf['arch']['nmedias']['id_note'] => $id_note,\n      $cf['arch']['nmedias']['version'] => $version ?: $this->latest($id_note),\n        ];\n        if (!empty($id_media) && Str::isUid($id_media)) {\n            $where[$cf['arch']['nmedias']['id_media']] = $id_media;\n        }\n\n        return (bool)$this->db->count($cf['tables']['nmedias'], $where);\n    }\n\n      return null;\n  }",
            "startLine": 753,
            "endLine": 769,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "id_media",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "browse": {
            "name": "browse",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($cfg)\n  {\n    if (isset($cfg['limit']) && ($user = bbn\\User::getInstance())) {\n        \/** @var bbn\\Db $db *\/\n        $db       = &$this->db;\n        $cf       = &$this->class_cfg;\n        $grid_cfg = [\n      'table' => $cf['table'],\n      'fields' => [\n      $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n      $db->cfn($cf['arch']['notes']['id_parent'], $cf['table']),\n      $db->cfn($cf['arch']['notes']['id_alias'], $cf['table']),\n      $db->cfn($cf['arch']['notes']['id_type'], $cf['table']),\n      $db->cfn($cf['arch']['notes']['private'], $cf['table']),\n      $db->cfn($cf['arch']['notes']['locked'], $cf['table']),\n      $db->cfn($cf['arch']['notes']['excerpt'], $cf['table']),\n      $db->cfn($cf['arch']['notes']['pinned'], $cf['table']),\n      $db->cfn($cf['arch']['notes']['creator'], $cf['table']),\n      $db->cfn($cf['arch']['notes']['active'], $cf['table']),\n      'first_version.'.$cf['arch']['versions']['creation'],\n      'last_version.'.$cf['arch']['versions']['title'],\n      \/\/'last_version.'.$cf['arch']['versions']['content'],\n      'last_version.'.$cf['arch']['versions']['id_user'],\n      'last_edit' => 'last_version.'.$cf['arch']['versions']['creation'],\n      ],\n      'join' => [[\n      'table' => $cf['tables']['versions'],\n      'alias' => 'versions',\n      'on' => [\n        'logic' => 'AND',\n        'conditions' => [[\n          'field' => 'versions.'.$cf['arch']['versions']['id_note'],\n          'operator' => '=',\n          'exp' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n        ]],\n      ],\n      ], [\n      'table' => $cf['tables']['versions'],\n      'alias' => 'last_version',\n      'on' => [\n        'logic' => 'AND',\n        'conditions' => [[\n          'field' => 'last_version.'.$cf['arch']['versions']['id_note'],\n          'operator' => '=',\n          'exp' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n        ]],\n      ],\n      ], [\n      'table' => $cf['tables']['versions'],\n      'alias' => 'test_version',\n      'type' => 'left',\n      'on' => [\n        'logic' => 'AND',\n        'conditions' => [[\n          'field' => 'test_version.'.$cf['arch']['versions']['id_note'],\n          'operator' => '=',\n          'exp' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n        ], [\n          'field' => 'last_version.'.$cf['arch']['versions']['version'],\n          'operator' => '<',\n          'exp' => 'test_version.'.$cf['arch']['versions']['version'],\n        ]],\n      ],\n      ], [\n      'table' => $cf['tables']['versions'],\n      'alias' => 'first_version',\n      'on' => [\n        'logic' => 'AND',\n        'conditions' => [[\n          'field' => 'first_version.'.$cf['arch']['versions']['id_note'],\n          'operator' => '=',\n          'exp' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n        ], [\n          'field' => 'first_version.'.$cf['arch']['versions']['version'],\n          'operator' => '=',\n          'value' => 1,\n        ]],\n      ],\n      ]],\n      'filters' => [[\n      'field' => $db->cfn($cf['arch']['notes']['active'], $cf['table']),\n      'operator' => '=',\n      'value' => 1,\n      ], [\n      'field' => 'test_version.'.$cf['arch']['versions']['version'],\n      'operator' => 'isnull',\n      ]],\n      'group_by' => $db->cfn($cf['arch']['notes']['id'], $cf['table']),\n      'order' => [[\n      'field' => 'last_edit',\n      'dir' => 'DESC',\n      ]],\n        ];\n        if (!empty($cfg['fields'])) {\n            $grid_cfg['fields'] = bbn\\X::mergeArrays($grid_cfg['fields'], $cfg['fields']);\n            unset($cfg['fields']);\n        }\n\n        if (!empty($cfg['join'])) {\n            $grid_cfg['join'] = bbn\\X::mergeArrays($grid_cfg['join'], $cfg['join']);\n            unset($cfg['join']);\n        }\n\n        $grid = new Grid($this->db, $cfg, $grid_cfg);\n\n        return $grid->getDatatable();\n    }\n  }",
            "startLine": 772,
            "endLine": 879,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "count": {
            "name": "count",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($user = bbn\\User::getInstance()) {\n        $cf  = &$this->class_cfg;\n        $db  = &$this->db;\n        $sql = \"\n      SELECT COUNT(DISTINCT {$db->cfn($cf['arch']['notes']['id'], $cf['tables']['notes'], 1)})\n      FROM {$db->tsn($cf['tables']['notes'], 1)}\n        JOIN {$db->tsn($cf['tables']['versions'], 1)}\n          ON {$db->cfn($cf['arch']['notes']['id'], $cf['tables']['notes'], 1)} = {$db->cfn($cf['arch']['versions']['id_note'], $cf['tables']['versions'], 1)}\n      WHERE {$db->cfn($cf['arch']['notes']['creator'], $cf['tables']['notes'], 1)} = ?\n      OR {$db->cfn($cf['arch']['versions']['id_user'], $cf['tables']['versions'], 1)} = ?\";\n\n        return $db->getOne($sql, $user->getId(), $user->getId());\n    }\n  }",
            "startLine": 882,
            "endLine": 897,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "remove": {
            "name": "remove",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id, $keep = false)\n  {\n    if (Str::isUid($id)) {\n        $cf = &$this->class_cfg;\n      if (empty($keep)) {\n        if ($medias = $this->getMedias($id, true)) {\n          foreach ($medias as $m) {\n            $this->removeMedia($m['id'], $id, true);\n          }\n        }\n\n        $this->db->delete($cf['tables']['versions'], [$cf['arch']['versions']['id_note'] => $id]);\n\n        return $this->db->delete($cf['table'], [$cf['arch']['notes']['id'] => $id]);\n      } else {\n          return $this->db->update($cf['table'], [$cf['arch']['notes']['active'] => 0], [$cf['arch']['notes']['id'] => $id]);\n      }\n    }\n\n      return false;\n  }",
            "startLine": 906,
            "endLine": 926,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The note's uid"
                },
                {
                    "name": "keep",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "Set it to true if you want change active property to 0 instead of delete the row from db"
                }
            ]
        },
        "copy": {
            "name": "copy",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id, $version = NULL, $private = NULL)\n  {\n    if ($note = $this->getFull($id, $version)) {\n      if ($private === null) {\n        $private = $note['private'];\n      }\n\n        $id_note = $this->insert($note['title'], $note['content'], $note['type'], $private);\n      foreach ($note['medias'] as $m) {\n          $this->addMediaToNote($m['id'], $id, $note['version']);\n      }\n\n        return $id_note;\n    }\n  }",
            "startLine": 929,
            "endLine": 943,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "version",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getMediasNotes": {
            "name": "getMediasNotes",
            "summary": "Selects from db all medias that have the property content not null and a correspondant existing file.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($start, $limit)\n  {\n      $res = [];\n      $cf  = &$this->class_cfg;\n      $all = $this->db->rselectAll(\n        [\n        'table' => $cf['tables']['medias'],\n        'fields' => $cf['arch']['medias'],\n        'where' => [\n        'conditions' => [[\n        'field' => $cf['arch']['medias']['private'],\n        'value' => 0,\n        ], [\n        'field' => $cf['arch']['medias']['content'],\n        'operator' => 'isnotnull',\n        ]],\n        ],\n        'start' => $start,\n        'limit' => $limit,\n        ]\n      );\n    if (!empty($all)) {\n        $root = \\bbn\\Mvc::getDataPath('appui-note').'media\/';\n      foreach ($all as $i => $a) {\n        if (bbn\\Str::isJson($a['content']) && ($media_obj = $this->getMediaInstance())) {\n            $content   = json_decode($a['content'], true);\n            $path      = $root.$content['path'].'\/';\n            $full_path = $path.$a['id'].'\/'.$a['name'];\n          if (file_exists($full_path)) {\n            $all[$i]['notes'] = $this->getMediaNotes($a['id']);\n            \/\/if the media is an image it takes the thumb 60, 60 for src\n            if ($media_obj->isImage($full_path) && ($thumb = $media_obj->getThumbs($full_path))) {\n                  $all[$i]['is_image'] = true;\n            }\n\n            $res[] = $all[$i];\n          }\n        }\n      }\n    }\n\n      return $res;\n  }",
            "startLine": 951,
            "endLine": 993,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "start",
                    "position": 0,
                    "type": "int",
                    "required": true,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getMediaNotes": {
            "name": "getMediaNotes",
            "summary": "returns all the notes linked to the media.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_media)\n  {\n      $notes = [];\n      $cms   = new \\bbn\\Appui\\Cms($this->db);\n      $ids   = $this->db->rselectAll(\n        $this->class_cfg['tables']['nmedias'], [\n        $this->class_cfg['arch']['nmedias']['id_note'],\n        $this->class_cfg['arch']['nmedias']['version'],\n        ],\n        [\n        $this->class_cfg['arch']['nmedias']['id_media'] => $id_media,\n        ]\n      );\n\n    if (!empty($ids)) {\n      foreach ($ids as $i) {\n        $tmp                 = $this->get($i['id_note']);\n        $tmp['is_published'] = $cms->isPublished($i['id_note']);\n        $notes[]             = $tmp;\n        \/\/return $notes;\n      }\n    }\n\n      return $notes;\n  }",
            "startLine": 1001,
            "endLine": 1025,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 51,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 51,
                "endLine": 58,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 65,
            "endLine": 72,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 65,
                "endLine": 72,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->error;\n  }",
            "startLine": 86,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 86,
                "endLine": 89,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 92,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 92,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 98,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 98,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 115,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 115,
                "endLine": 126,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 132,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 132,
                "endLine": 135,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 142,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 142,
                "endLine": 145,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getReferences": {
            "name": "getReferences",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return [\n      'select' => $this->references_select,\n      'join' => $this->references_join\n    ];\n  }",
            "startLine": 52,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "startLine": 145,
            "endLine": 149,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppuiRoot": {
            "name": "getAppuiRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_appui_id;\n  }",
            "startLine": 152,
            "endLine": 156,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $o = bbn\\Appui\\Option::getInstance();\n    if (!$o) {\n      throw new \\Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "startLine": 159,
            "endLine": 167,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "parent": false,
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 176,
            "endLine": 179,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...self::_treat_args(func_get_args())), function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 182,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "startLine": 194,
            "endLine": 197,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 200,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 206,
            "endLine": 209,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 212,
            "endLine": 215,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionId": {
            "name": "getAppuiOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 224,
            "endLine": 227,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsIds": {
            "name": "getAppuiOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(\n          ...self::_treat_args(func_get_args(), true)\n        ),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 230,
            "endLine": 242,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTree": {
            "name": "getAppuiOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args(), true)) ) ? $tree['items'] : [];\n  }",
            "startLine": 245,
            "endLine": 248,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptions": {
            "name": "getAppuiOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 251,
            "endLine": 254,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOption": {
            "name": "getAppuiOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 257,
            "endLine": 260,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTextValue": {
            "name": "getAppuiOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getAppuiOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 263,
            "endLine": 266,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "exists": {
            "name": "exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    $res = $this->db->count(\n      $this->class_table, [\n      $this->class_cfg['arch'][$this->class_table_index]['id'] => $id\n      ]\n    );\n    return (bool)$res;\n  }",
            "startLine": 61,
            "endLine": 69,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Return the",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->class_cfg;\n  }",
            "startLine": 75,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getFields": {
            "name": "getFields",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Note",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->fields;\n  }",
            "startLine": 80,
            "endLine": 83,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        }
    },
    "properties": null,
    "staticProperties": {
        "default_class_cfg": {
            "errors": {
                "19": "wrong fingerprint"
            },
            "table": "bbn_notes",
            "tables": {
                "notes": "bbn_notes",
                "versions": "bbn_notes_versions",
                "nmedias": "bbn_notes_medias",
                "medias": "bbn_medias",
                "url": "bbn_notes_url",
                "events": "bbn_notes_events"
            },
            "arch": {
                "notes": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "id_alias": "id_alias",
                    "id_type": "id_type",
                    "mime": "mime",
                    "lang": "lang",
                    "excerpt": "excerpt",
                    "private": "private",
                    "locked": "locked",
                    "pinned": "pinned",
                    "creator": "creator",
                    "active": "active"
                },
                "versions": {
                    "id_note": "id_note",
                    "version": "version",
                    "title": "title",
                    "content": "content",
                    "id_user": "id_user",
                    "creation": "creation"
                },
                "nmedias": {
                    "id": "id",
                    "id_media": "id_media",
                    "id_note": "id_note",
                    "version": "version",
                    "id_user": "id_user",
                    "comment": "comment",
                    "creation": "creation"
                },
                "medias": {
                    "id": "id",
                    "id_user": "id_user",
                    "type": "type",
                    "name": "name",
                    "title": "title",
                    "content": "content",
                    "private": "private"
                },
                "events": {
                    "id_note": "id_note",
                    "id_event": "id_event"
                },
                "url": {
                    "url": "url",
                    "id_note": "id_note"
                }
            },
            "paths": {
                "medias": "media\/"
            }
        },
        "optional_is_init": false,
        "option_root_id": null,
        "option_appui_id": null
    },
    "constants": null,
    "numMethods": 54,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 4,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\References",
        "bbn\\Models\\Tts\\Optional",
        "bbn\\Models\\Tts\\Dbconfig"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "errors": {
                "19": "wrong fingerprint"
            },
            "table": "bbn_notes",
            "tables": {
                "notes": "bbn_notes",
                "versions": "bbn_notes_versions",
                "nmedias": "bbn_notes_medias",
                "medias": "bbn_medias",
                "url": "bbn_notes_url",
                "events": "bbn_notes_events"
            },
            "arch": {
                "notes": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "id_alias": "id_alias",
                    "id_type": "id_type",
                    "mime": "mime",
                    "lang": "lang",
                    "excerpt": "excerpt",
                    "private": "private",
                    "locked": "locked",
                    "pinned": "pinned",
                    "creator": "creator",
                    "active": "active"
                },
                "versions": {
                    "id_note": "id_note",
                    "version": "version",
                    "title": "title",
                    "content": "content",
                    "id_user": "id_user",
                    "creation": "creation"
                },
                "nmedias": {
                    "id": "id",
                    "id_media": "id_media",
                    "id_note": "id_note",
                    "version": "version",
                    "id_user": "id_user",
                    "comment": "comment",
                    "creation": "creation"
                },
                "medias": {
                    "id": "id",
                    "id_user": "id_user",
                    "type": "type",
                    "name": "name",
                    "title": "title",
                    "content": "content",
                    "private": "private"
                },
                "events": {
                    "id_note": "id_note",
                    "id_event": "id_event"
                },
                "url": {
                    "url": "url",
                    "id_note": "id_note"
                }
            },
            "paths": {
                "medias": "media\/"
            }
        },
        "optional_is_init": false,
        "option_root_id": null,
        "option_appui_id": null,
        "medias": null,
        "db": null,
        "errors": [],
        "error": false,
        "debug": false,
        "log": [],
        "references": null,
        "references_select": "",
        "references_join": "",
        "options": null,
        "class_cfg": null,
        "fields": null,
        "class_table": null,
        "class_table_index": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Note",
    "summary": ""
}