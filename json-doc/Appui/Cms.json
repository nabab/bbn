{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Cms",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/Appui\/Cms.php",
    "startLine": 16,
    "endLine": 763,
    "contentConstructor": {
        "file": "bbn\\Appui\\Cms",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Cms constructor.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db, bbn\\Appui\\Note $note = NULL)\n  {\n    parent::__construct($db);\n    $this->event = new Event($this->db);\n    $this->opt   = Option::getInstance();\n    if (!self::$_id_event) {\n      $id = $this->opt->fromCode('publication', 'types', 'event', 'appui');\n      self::_set_id_event($id);\n    }\n    if (!$note) {\n      $this->note = new Note($this->db);\n    }\n    else {\n      $this->note = $note;\n    }\n\n    $this->class_cfg = X::mergeArrays(\n        $this->note->getClassCfg(),\n        $this->event->getClassCfg()\n    );\n  }",
            "startLine": 87,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Db",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bbn\\Db $db)\n  {\n    $this->db = $db;\n  }",
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ]
            },
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "note",
                    "position": 1,
                    "type": "bbn\\Appui\\Note",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getLatest": {
            "name": "getLatest",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($limit, $start)\n  {\n      $cfg                         = $this->note->getLastVersionCfg();\n      $cf                          = $this->note->getClassCfg();\n      $cf_ev                       = $this->event->getClassCfg();\n      $cfg['fields'][]             = $cf_ev['arch']['events']['start'];\n      $cfg['fields'][]             = $cf_ev['arch']['events']['end'];\n      $cfg['fields']['event_type'] = $this->db->cfn($cf_ev['arch']['events']['id_type'], $cf_ev['tables']['events']);\n      $cfg['fields']['event_name'] = $this->db->cfn($cf_ev['arch']['events']['name'], $cf_ev['tables']['events']);\n      $cfg['join'][]               = [\n          'table' => $cf['tables']['events'],\n          'on' => [\n              [\n                  'field' => $this->db->cfn($cf['arch']['events']['id_note'], $cf['tables']['events']),\n                  'exp' => $this->db->cfn($cf['arch']['notes']['id'], $cf['tables']['notes'])\n              ]\n          ]\n      ];\n\n      $cfg['join'][] = [\n          'table' => $cf_ev['tables']['events'],\n          'on' => [\n              [\n                  'field' => $this->db->cfn($cf['arch']['events']['id_event'], $cf['tables']['events']),\n                  'exp' => $this->db->cfn($cf_ev['arch']['events']['id'], $cf_ev['tables']['events'])\n              ]\n          ]\n      ];\n\n      $cfg['join'][] = [\n          'table' => $cf['tables']['url'],\n          'on' => [\n              [\n                  'field' => $this->db->cfn($cf['arch']['url']['id_note'], $cf['tables']['url']),\n                  'exp' => $this->db->cfn($cf['arch']['notes']['id'], $cf['tables']['notes'])\n              ]\n          ]\n      ];\n\n      $total        = $this->db->count($cfg);\n      $cfg['where'] = [\n          'conditions' => [\n              [\n                  'field' => 'start',\n                  'operator' => '<=',\n                  'exp' => 'NOW()'\n              ]\n          ]\n      ];\n\n      $cfg['order'] = [['field' => 'start', 'dir' => 'DESC']];\n      $cfg['limit'] = $limit;\n      $cfg['start'] = $start;\n\n      return [\n          'data' => $this->db->rselectAll($cfg),\n          'query' => $this->db->last(),\n          'total' => $total\n      ];\n  }",
            "startLine": 110,
            "endLine": 169,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "limit",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getNext": {
            "name": "getNext",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($limit, $start)\n  {\n      $cfg                         = $this->note->getLastVersionCfg();\n      $cf                          = $this->note->getClassCfg();\n      $cf_ev                       = $this->event->getClassCfg();\n      $cfg['fields'][]             = $cf_ev['arch']['events']['start'];\n      $cfg['fields'][]             = $cf_ev['arch']['events']['end'];\n      $cfg['fields']['event_type'] = $this->db->cfn($cf_ev['arch']['events']['id_type'], $cf_ev['tables']['events']);\n      $cfg['fields']['event_name'] = $this->db->cfn($cf_ev['arch']['events']['name'], $cf_ev['tables']['events']);\n      $cfg['join'][]               = [\n          'table' => $cf['tables']['events'],\n          'on' => [\n              [\n                  'field' => $this->db->cfn($cf['arch']['events']['id_note'], $cf['tables']['events']),\n                  'exp' => $this->db->cfn($cf['arch']['notes']['id'], $cf['tables']['notes'])\n              ]\n          ]\n      ];\n\n      $cfg['join'][] = [\n          'table' => $cf_ev['tables']['events'],\n          'on' => [\n              [\n                  'field' => $this->db->cfn($cf['arch']['events']['id_event'], $cf['tables']['events']),\n                  'exp' => $this->db->cfn($cf_ev['arch']['events']['id'], $cf_ev['tables']['events'])\n              ]\n          ]\n      ];\n\n      $cfg['join'][] = [\n          'table' => $cf['tables']['url'],\n          'on' => [\n              [\n                  'field' => $this->db->cfn($cf['arch']['url']['id_note'], $cf['tables']['url']),\n                  'exp' => $this->db->cfn($cf['arch']['notes']['id'], $cf['tables']['notes'])\n              ]\n          ]\n      ];\n\n      $total        = $this->db->count($cfg);\n      $cfg['where'] = [\n          'conditions' => [\n              [\n                  'field' => 'start',\n                  'operator' => '>',\n                  'exp' => 'NOW()'\n              ]\n          ]\n      ];\n\n      $cfg['order'] = [['field' => 'start', 'dir' => 'DESC']];\n      $cfg['limit'] = $limit;\n      $cfg['start'] = $start;\n\n      return [\n          'data' => $this->db->rselectAll($cfg),\n          'total' => $total\n      ];\n  }",
            "startLine": 171,
            "endLine": 229,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "limit",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get": {
            "name": "get",
            "summary": "Returns the note from its id, with its URL, start and end date of publication.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    $res = [];\n    if (!empty($id_note) && ($note = $this->note->get($id_note))) {\n        $res          = $note;\n        $res['url']   = $this->note->getUrl($id_note);\n        $res['start'] = $this->getStart($id_note);\n        $res['end']   = $this->getEnd($id_note);\n        $res['tags']  = $this->note->getTags($id_note);\n        $res['items'] = $note['content'] ? json_decode($note['content'], true) : [];\n    }\n\n    return $res;\n  }",
            "startLine": 237,
            "endLine": 250,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "getLastVersionCfg": {
            "name": "getLastVersionCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $with_content = false)\n  {\n    $cfg = $this->note->getLastVersionCfg($with_content);\n    $cfg['fields'][]             = 'url';\n    $cfg['fields'][]             = 'start';\n    $cfg['fields'][]             = 'end';\n    $cfg['fields']['num_medias'] = 'COUNT(' . $this->db->cfn($this->class_cfg['arch']['notes_medias']['id_note'], $this->class_cfg['tables']['notes_medias'], true) . ')';\n    $cfg['where']['mime']        = 'json\/bbn-cms';\n    $cfg['where']['private']     = 0;\n    $cfg['join'][] = [\n      'table' => $this->class_cfg['tables']['url'],\n      'type' => 'left',\n      'on' => [[\n          'field' => $this->db->cfn($this->class_cfg['arch']['url']['id_note'], $this->class_cfg['tables']['url']),\n          'exp' => $this->db->cfn($this->class_cfg['arch']['notes']['id'], $this->class_cfg['tables']['notes'])\n      ]],\n    ];\n    $cfg['join'][] = [\n        'table' => $this->class_cfg['tables']['notes_events'],\n        'type' => 'left',\n        'on' => [[\n            'field' => $this->db->cfn($this->class_cfg['arch']['notes_events']['id_note'], $this->class_cfg['tables']['notes_events']),\n            'exp' => $this->db->cfn($this->class_cfg['arch']['notes']['id'], $this->class_cfg['tables']['notes'])\n        ]]\n    ];\n    $cfg['join'][] = [\n        'table' => $this->class_cfg['tables']['events'],\n        'type' => 'left',\n        'on' => [[\n            'field' => $this->db->cfn($this->class_cfg['arch']['notes_events']['id_event'], $this->class_cfg['tables']['notes_events']),\n            'exp' => $this->db->cfn($this->class_cfg['arch']['events']['id'], $this->class_cfg['tables']['events'])\n        ]]\n    ];\n    $cfg['join'][] = [\n        'table' => $this->class_cfg['tables']['notes_medias'],\n        'type' => 'left',\n        'on' => [[\n            'field' => $this->db->cfn($this->class_cfg['arch']['notes_medias']['id_note'], $this->class_cfg['tables']['notes_medias']),\n            'exp' => $this->db->cfn($this->class_cfg['arch']['notes']['id'], $this->class_cfg['tables']['notes'])\n        ]]\n    ];\n    $cfg['group_by'] = [$this->db->cfn($this->class_cfg['arch']['notes']['id'], $this->class_cfg['tables']['notes'])];\n\n    return $cfg;\n  }",
            "startLine": 253,
            "endLine": 297,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "with_content",
                    "position": 0,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getAll": {
            "name": "getAll",
            "summary": "Returns all the notes of type 'pages'.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $with_content = false, array $filter = [], array $order = [], int $limit = 50, int $start = 0)\n  {\n    $cfg = $this->getLastVersionCfg($with_content);\n    $cfg['limit'] = $limit;\n    $cfg['start'] = $start >= 0 ? $start : 0;\n    if (!empty($filter)) {\n      $cfg['having'] = $filter;\n    }\n\n    if (!empty($order)) {\n        $cfg['order'] = $order;\n    }\n\n    $total = $this->db->count($cfg);\n    $data  = $this->db->rselectAll($cfg);\n\n    return [\n      'query' => $this->db->last(),\n      'data' => $data,\n      'total' => $total\n    ];\n  }",
            "startLine": 309,
            "endLine": 330,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "with_content",
                    "position": 0,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "content"
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 50,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getNoteType": {
            "name": "getNoteType",
            "summary": "Returns the 'pages' note type ID from options, which should always be the type of the CMS notes.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->noteType) {\n        $this->noteType = $this->opt->fromCode('pages', 'types', 'note', 'appui');\n    }\n\n      return $this->noteType;\n  }",
            "startLine": 338,
            "endLine": 345,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "countAll": {
            "name": "countAll",
            "summary": "Returns the number of all the notes of type 'pages'.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n      return $this->note->countByType($this->getNoteType());\n  }",
            "startLine": 352,
            "endLine": 355,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getByUrl": {
            "name": "getByUrl",
            "summary": "If the given url correspond to a published note returns the id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $url, bool $force = false)\n  {\n    if (($id_note = $this->note->urlToId($url)) && ($force || $this->isPublished($id_note))) {\n      return $this->get($id_note);\n    }\n\n    return null;\n  }",
            "startLine": 364,
            "endLine": 371,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getEvent": {
            "name": "getEvent",
            "summary": "Returns the object event of the given note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    if ($id_event = $this->note->getEventIdFromNote($id_note)) {\n      if (\n              $event = $this->db->rselect([\n                    'table' => $this->class_cfg['table'],\n                    'fields' => [],\n                    'where' => [\n                        'conditions' => [[\n                            'field' => $this->fields['id'],\n                            'value' => $id_event\n                        ]]],\n                    ])\n      ) {\n        \/\/if the event is not in bbn_notes_events it inserts the row\n        $this->note->insertNoteEvent($id_note, $id_event);\n        $event['id_note'] = $id_note;\n        return $event;\n      }\n    }\n\n      return null;\n  }",
            "startLine": 381,
            "endLine": 403,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "getStart": {
            "name": "getStart",
            "summary": "If an event linked to the note exists it returns the start date.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    if ($event = $this->getEvent($id_note)) {\n        return $event[$this->class_cfg['arch']['events']['start']] ?? null;\n    }\n\n      return null;\n  }",
            "startLine": 412,
            "endLine": 419,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "getEnd": {
            "name": "getEnd",
            "summary": "If  an event linked to the note exists it returns the end date.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    if ($event = $this->getEvent($id_note)) {\n        return $event[$this->class_cfg['arch']['events']['end']] ?? null;\n    }\n      return null;\n  }",
            "startLine": 428,
            "endLine": 434,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "isPublished": {
            "name": "isPublished",
            "summary": "If the note has a corresponding event in bbn_events and the date of start is before now,",
            "description": "and the date of end if isset is after now and the note has an url it returns true",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>and the date of end if isset is after now and the note has an url it returns true<\/p>"
                }
            ],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n      $now = strtotime(date('Y-m-d H:i:s'));\n      $cfg = $this->class_cfg;\n\n    if ($event = $this->getEvent($id_note)) {\n      if (\n            isset($event[$cfg['arch']['events']['start']]) &&\n            (is_null($event[$cfg['arch']['events']['end']]) || (strtotime($event[$cfg['arch']['events']['end']]) > $now)) &&\n            $this->note->hasUrl($id_note)\n      ) {\n        return true;\n      }\n    }\n\n      return false;\n  }",
            "startLine": 444,
            "endLine": 460,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "publish": {
            "name": "publish",
            "summary": "Publish a note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, array $cfg)\n  {\n    if ($this->note->get($id_note) && !$this->isPublished($id_note)) {\n        \/\/if $url is given it updates the note_url\n      if (!empty($cfg['url'])) {\n        try {\n            $this->setUrl($id_note, $cfg['url']);\n        }\n        catch (\\Exception $e) {\n            return [\n                'error' => $e->getMessage()\n            ];\n        }\n      }\n      if (!empty($this->note->hasUrl($id_note))) {\n        if (empty($this->getEvent($id_note))) {\n          return $this->setEvent($id_note, [\n              'start'   => $cfg['start'] ?? date('Y-m-d H:i:s'),\n              'end'     => $cfg['end'] ?? null,\n              'id_type' => $cfg['id_type'] ?? self::$_id_event ?? null\n          ]);\n        } else {\n            \/\/case update\n            return $this->updateEvent($id_note, [\n                'start'   => $cfg['start'] ?? date('Y-m-d H:i:s'),\n                'end'     => $cfg['end'] ?? null,\n                'id_type' => $cfg['id_type'] ?? self::$_id_event ?? null\n            ]);\n        }\n      } else {\n          return false;\n      }\n    }\n\n      return false;\n  }",
            "startLine": 469,
            "endLine": 504,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "unpublish": {
            "name": "unpublish",
            "summary": "Unpublish a note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    if ($event = $this->getEvent($id_note)) {\n        $cfg = $this->class_cfg;\n      if (\n              $this->db->delete(\n                  $this->class_cfg['tables']['notes_events'],\n                  [$this->class_cfg['arch']['notes_events']['id_note'] => $id_note]\n              )\n      ) {\n        return (bool)$this->db->delete(\n            $this->class_cfg['tables']['events'],\n            [$this->class_cfg['arch']['events']['id'] => $event['id']]\n        );\n      }\n    }\n\n      return false;\n  }",
            "startLine": 512,
            "endLine": 530,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "setUrl": {
            "name": "setUrl",
            "summary": "Inserts the url for the note if it doesn't exist a published note with the same url or update the url of the given note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $url, $ignore = false)\n  {\n    if ($tmp = $this->note->urlToId($url)) {\n      if ($ignore && ($tmp === $id_note)) {\n        return 0;\n      }\n\n      throw new \\Exception(X::_('The url you are trying to insert already belongs to a published note. Unpublish the note or change the url!'));\n    }\n\n    if (!$this->note->get($id_note)) {\n      throw new \\Exception(X::_('Impossible to find the given note'));\n    }\n\n    return $this->note->insertOrUpdateUrl($id_note, $url);\n  }",
            "startLine": 541,
            "endLine": 556,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "url",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ignore",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "removeUrl": {
            "name": "removeUrl",
            "summary": "Removes the url corresponding to the given id_note from bbn_notes_url.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n      $success = false;\n\n    if ($this->isPublished($id_note)) {\n        $this->unpublish($id_note);\n    }\n\n    if ($this->note->get($id_note) && $this->note->deleteUrl($id_note)) {\n      $success = true;\n    }\n\n      return $success;\n  }",
            "startLine": 565,
            "endLine": 578,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "setEvent": {
            "name": "setEvent",
            "summary": "Inserts in bbn_events and bbn_notes_events the information relative to the publication of the given note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, array $cfg = [])\n  {\n    if (!array_key_exists('start', $cfg)) {\n      throw new \\Exception(X::_(\"A start date is mandatory for CMS event (even null)\"));\n    }\n\n    if (empty($cfg['start'])) {\n      return $this->unpublish($id_note);\n    }\n\n    if (!($note = $this->note->get($id_note))) {\n      throw new \\Exception(X::_(\"The note %s does not exist\", $id_note));\n    }\n    \n    if (!$this->_check_date($cfg['start'], $cfg['end'] ?? null)) {\n      throw new \\Exception(X::_(\"The dates don't work... End before start?\"));\n    }\n\n    if (empty($this->getEvent($id_note))) {\n      $fields = $this->class_cfg['arch']['events'];\n        \/\/if a type is not given it inserts the event as page\n      if (\n        $id_event = $this->event->insert([\n          $fields['name']    => $note['title'] ?? '',\n          $fields['id_type'] => $cfg['id_type'] ?? self::$_id_event ?? null,\n          $fields['start']   => $cfg['start'],\n          $fields['end']     => $cfg['end'] ?? null\n      ])) {\n        return $this->note->insertNoteEvent($id_note, $id_event);\n      }\n      else {\n        X::log([\n          $fields['name']    => $note['title'] ?? '',\n          $fields['id_type'] => $cfg['id_type'] ?? self::$_id_event ?? null,\n          $fields['start']   => $cfg['start'],\n          $fields['end']     => $cfg['end'] ?? null\n        ], 'cmsss');\n        throw new \\Exception(X::_(\"Impossible to insert the event\"));\n      }\n    }\n    else {\n      return $this->updateEvent($id_note, $cfg);\n    }\n\n    return null;\n  }",
            "startLine": 588,
            "endLine": 633,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "updateEvent": {
            "name": "updateEvent",
            "summary": "Updates the event relative to the given note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, array $cfg = [])\n  {\n    if (!array_key_exists('start', $cfg) || !array_key_exists('end', $cfg)) {\n      return false;\n    }\n\n    if ($this->_check_date($cfg['start'], $cfg['end'])) {\n      if ($event = $this->getEvent($id_note)) {\n        if (\n            (strtotime($cfg['start']) !== strtotime($event['start'])) ||\n            (strtotime($cfg['end']) !== strtotime($event['end']) )\n        ) {\n          $cfg['id_type'] = $cfg['id_type'] ?? self::$_id_event ?? null;\n          return $this->event->edit($event['id'], $cfg);\n        } else {\n          return true;\n        }\n      }\n    }\n\n      return false;\n  }",
            "startLine": 642,
            "endLine": 663,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "setContent": {
            "name": "setContent",
            "summary": "Adds a new version to the given note with the new content",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $title, string $content)\n  {\n      return $this->note->insertVersion($id_note, $title, $content);\n  }",
            "startLine": 674,
            "endLine": 677,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setType": {
            "name": "setType",
            "summary": "Changes the type of the note",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $type)\n  {\n      return $this->note->setType($id_note, $type);\n  }",
            "startLine": 687,
            "endLine": 690,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "set": {
            "name": "set",
            "summary": "Sets content, title, start and end for the given URL.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $url, string $title, string $content, string $start = NULL, string $end = NULL, array $tags = NULL, string $id_type = NULL)\n  {\n    string $title,\n    string $content,\n    string $start = null,\n    string $end = null,\n    array $tags = null,\n    string $id_type = null\n  ): bool\n  {\n    if (!($cfg = $this->getByUrl($url, true))) {\n      throw new \\Exception(X::_(\"Impossible to find the article with URL\") . ' ' . $url);\n    }\n\n    $change = 0;\n    if (($cfg['title'] !== $title) || ($cfg['content'] !== $content)) {\n      $change += (int)$this->setContent($cfg['id_note'], $title, $content);\n    }\n\n    if (($cfg['start'] !== $start) || ($cfg['end'] !== $end)) {\n      $change += (int)$this->setEvent($cfg['id_note'], [\n        'start' => $start,\n        'end' => $end\n      ]);\n    }\n\n    if (is_array($tags)) {\n      $change += $this->note->setTags($cfg['id_note'], $tags);\n    }\n\n    if ($id_type && ($cfg['id_type'] !== $id_type)) {\n      $change += $this->setType($cfg['id_note'], $id_type);\n    }\n\n    return $change ? true : false;\n  }",
            "startLine": 705,
            "endLine": 740,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "end",
                    "position": 4,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "tags",
                    "position": 5,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "id_type",
                    "position": 6,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "type"
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes the given note and unpublish it if published.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    if ($note = $this->note->get($id_note)) {\n      if ($this->note->getUrl($id_note)) {\n        $this->removeUrl($id_note);\n      }\n\n      if (!empty($this->note->remove($note['id']))) {\n          return true;\n      }\n    }\n      return false;\n  }",
            "startLine": 750,
            "endLine": 762,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 51,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 51,
                "endLine": 58,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 65,
            "endLine": 72,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 65,
                "endLine": 72,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->error;\n  }",
            "startLine": 86,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 86,
                "endLine": 89,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 92,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 92,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 98,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 98,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 115,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 115,
                "endLine": 126,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 132,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 132,
                "endLine": 135,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 142,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 142,
                "endLine": 145,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": {
        "_id_event": null
    },
    "constants": null,
    "numMethods": 31,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 1,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "_id_event": null,
        "note": null,
        "opt": null,
        "event": null,
        "class_cfg": null,
        "noteType": null,
        "db": null,
        "errors": [],
        "error": false,
        "debug": false,
        "log": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Cms",
    "summary": "",
    "description": "",
    "description_parts": []
}