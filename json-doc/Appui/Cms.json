{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Cms",
    "namespace": true,
    "realName": "Cms",
    "realNamespace": "bbn\\Appui",
    "traits": [
        "bbn\\Models\\Tts\\Cache"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Cms.php",
    "startLine": 21,
    "endLine": 1349,
    "numMethods": 62,
    "numProperties": 17,
    "numConstants": 0,
    "numStaticProperties": 1,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "_id_event": null,
        "note": null,
        "opt": null,
        "event": null,
        "url": null,
        "media": null,
        "class_cfg": null,
        "noteType": null,
        "db": null,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": [],
        "_cache_prefix": null,
        "cache_engine": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Cms",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Cms constructor.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(Db $db, Note $note = null)\n  {\n    parent::__construct($db);\n    $this->cacheInit();\n    $this->event = new Event($this->db);\n    $this->opt   = Option::getInstance();\n    $this->url   = new Url($this->db);\n    $this->media = new Medias($this->db);\n    if (!self::$_id_event) {\n      $id = $this->opt->fromCode('publication', 'types', 'event', 'appui');\n      self::_set_id_event($id);\n    }\n    if (!$note) {\n      $this->note = new Note($this->db);\n    }\n    else {\n      $this->note = $note;\n    }\n\n    $this->class_cfg = X::mergeArrays(\n      $this->note->getClassCfg(),\n      $this->url->getClassCfg(),\n      $this->event->getClassCfg()\n    );\n  }",
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Db",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Db.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function __construct(dbClass $db)\n  {\n    $this->db = $db;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "__construct",
                "returns": [],
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "type_arr": [
                            "bbn\\Db"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ],
                "doc": {
                    "description": "Constructor.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "dbClass",
                            "name": "$db",
                            "description": "A database connection"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Constructor.\n   *\n   * @param dbClass $db A database connection\n   *\/"
            },
            "trait": false,
            "startLine": 56,
            "endLine": 80,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "note",
                    "position": 1,
                    "type": "null|bbn\\Appui\\Note",
                    "type_arr": [
                        "null",
                        "bbn\\Appui\\Note"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Cms constructor.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Db",
                        "name": "$db"
                    },
                    {
                        "tag": "param",
                        "type": "null",
                        "name": "$notes"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Cms constructor.\n   *\n   * @param Db $db\n   * @param null $notes\n   * @throws Exception\n   *\/"
        },
        "getLatest": {
            "name": "getLatest",
            "summary": "Returns a list of the latest published articles",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLatest(array $filter = [], int $limit = 20, int $start = 0): array\n  {\n    $cfg          = $this->getLastVersionCfg(false, true, $filter);\n    $cfg['order'] = [['field' => 'bbn_events.start', 'dir' => 'DESC']];\n    $cfg['limit'] = $limit;\n    $cfg['start'] = $start;\n\n    $db    =& $this->db;\n    $idx   = md5(json_encode($filter));\n    $total = $this->cacheGetSet(function() use (&$db, $cfg) {\n      return $db->count($cfg);\n    }, $idx, 'total', 20);\n\n    return [\n        'data' => $this->db->rselectAll($cfg),\n        'query' => $this->db->last(),\n        'total' => $total\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 91,
            "endLine": 109,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "getLatest",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 20,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a list of the latest published articles\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a list of the latest published articles\n   *\n   * @param array $filter\n   * @param integer $limit\n   * @param integer $start\n   * @return array\n   *\/"
        },
        "get": {
            "name": "get",
            "summary": "Returns the note from its id, with its URL, start and end date of publication.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function get(string $id_note, bool $with_medias = false, bool $with_content = true): array\n  {\n    $cacheName = md5(json_encode(func_get_args()));\n    if ($res = $this->cacheGet($id_note, $cacheName)) {\n      return $res;\n    }\n\n    $res = [];\n    if (!empty($id_note) && ($note = $this->note->get($id_note))) {\n      $res             = $note;\n      $res['url']      = $this->note->getUrl($id_note);\n      $res['start']    = $this->getStart($id_note);\n      $res['end']      = $this->getEnd($id_note);\n      $res['tags']     = $this->note->getTags($id_note);\n      $res['items']    = $note['content'] ? json_decode($note['content'], true) : [];\n      if (($res['id_media'] = $this->getDefaultMedia($id_note)) && !$with_medias) {\n        $res['media'] = $this->getMedia($res['id_media']);\n      }\n\n      if (!$with_content) {\n        unset($res['content']);\n      }\n\n      if ($with_medias) {\n        $res['medias'] = $this->note->getMedias($id_note);\n      }\n\n      if ($res['mime'] === 'json\/bbn-cms') {\n        $res['items'] = $this->normalizeItems($res['items']);\n      }\n\n    }\n\n    $this->cacheSet($id_note, $cacheName, $res);\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 118,
            "endLine": 154,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "get",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "with_medias",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "with_content",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the note from its id, with its URL, start and end date of publication.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the note from its id, with its URL, start and end date of publication.\n   *\n   * @param string $id_note\n   * @return array\n   *\/"
        },
        "getSEO": {
            "name": "getSEO",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSEO(string $id_note): array\n  {\n    $seo = '';\n    if ($note = $this->get($id_note, true, true)) {\n      $seo = PHP_EOL . '<h2>' . $note['title'] . '<\/h2>' . PHP_EOL;\n      if (!empty($note['items'])) {\n        foreach($note['items'] as $it) {\n          if (!empty($it['type']) && ($it['type'] === 'container')) {\n            foreach ($it['items'] as $it2) {\n              $seo .= $this->getBlockString($it2, $note);\n            }\n          }\n          else {\n            $seo .= $this->getBlockString($it, $note);\n          }\n        }\n\n        $seo .= PHP_EOL;\n      }\n    }\n\n    return [\n      'title' => $note['title'],\n      'description' => $note['excerpt'],\n      'tags' => $note['tags'],\n      'seo' => $seo\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 157,
            "endLine": 184,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getSEO",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getBlockString": {
            "name": "getBlockString",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getBlockString(array $it, array $note): string\n  {\n    $seo = '';\n    if (!empty($it['type'])) {\n      $seo .= '<div>';\n      switch ($it['type']) {\n        case 'gallery':\n        case 'carousel':\n          if (!empty($it['content'])) {\n            if (is_string($it['content'])) {\n              $gallery = $this->media->browseByGroup($it['content'], [], 100);\n              if ($gallery && !empty($gallery['data'])) {\n                foreach ($gallery['data'] as $d) {\n                  $tags = $this->media->getTags($d['id']);\n                  $img = $d['path'];\n                  if (!empty($d['thumbs'])) {\n                    \/\/$img = $this->media->getThumbsName($d['path'], [$d['thumbs'][0]]);\n                  }\n    \n                  $seo .= '<a href=\"\/' . $d['path'] . '\">' .\n                      '<img src=\"\/' . $img . '\" title=\"'. _(\"Enlarge\") . ' ' . \n                      basename($d['path']).'\" alt=\"' .\n                      Str::escapeDquotes(\n                        $d['title'] . ' - ' . \n                        (empty($tags) ? '' : X::join($tags, ' | ') . ' | ') .\n                        X::join($note['tags'], ' | ') . ' - ' . $note['title']\n                      ) . '\"><\/a><br>' . PHP_EOL;\n                }\n              }\n            }\n          }\n\n          break;\n        case 'slider':\n          if (!empty($it['content'])) {\n            $features = $this->note->getFeatures($it['content'], false);\n            $seo .= '<ul>';\n            foreach ($features as $feature) {\n              $seo .= '<li><a href=\"' . $feature['url'] . '\">' . PHP_EOL;\n              if (!empty($feature['media'])) {\n                $seo .= '<img src=\"' . $feature['media']['path'] . '\" alt=\"' . $feature['media']['title'] . '\"><br>' . PHP_EOL;\n              }\n\n              $seo .= $feature['title'] . '<a><\/li>';\n            }\n\n            $seo .= '<\/ul>';\n          }\n\n          break;\n        case 'title':\n          $seo .= '<' . ($it['tag'] ?? 'h2') . '>' . $it['content'] . '<\/' . ($it['tag'] ?? 'h2') . '>' . PHP_EOL;\n          break;\n        case 'html':\n          $seo .= $it['content'] . PHP_EOL;\n          break;\n        case 'line':\n          $seo .= '<hr>' . PHP_EOL;\n          break;\n        case 'imagetext':\n          $seo .= '<a href=\"\/' . $it['content'] . '\"><img src=\"\/' . $it['content'] . '\" alt=\"' .\n              Str::escapeDquotes(\n                $it['caption'] . ' - ' . \n                (empty($tags) ? '' : X::join($tags, ' | ') . ' | ') .\n                X::join($note['tags'], ' | ') . ' - ' . $note['title']\n              ) . '\"><\/a><br>' . PHP_EOL .\n              (empty($it['details']) ? '' : '<p>' . $it['details'] . '<\/p>' . PHP_EOL);\n          if (!empty($it['details_title'])) {\n            $seo .= '<caption>' . $it['details_title'] . '<\/caption>' . PHP_EOL;\n          }\n          break;\n        case 'image':\n          $seo .= '<a href=\"\/' . $it['content'] . '\"><img src=\"\/' . $it['content'] . '\" alt=\"' .\n              Str::escapeDquotes(\n                $it['caption'] . ' - ' . \n                (empty($tags) ? '' : X::join($tags, ' | ') . ' | ') .\n                X::join($note['tags'], ' | ') . ' - ' . $note['title']\n              ) . '\"><\/a><br>' . PHP_EOL .\n              (empty($it['details']) ? '' : '<p>' . $it['details'] . '<\/p>' . PHP_EOL);\n          if (!empty($it['details_title'])) {\n            $seo .= '<caption>' . $it['details_title'] . '<\/caption>' . PHP_EOL;\n          }\n          break;\n        case 'video':\n          break;\n        default:\n          X::log($it, 'unknown_types');\n      }\n\n      $seo .= '<\/div>';\n    }\n\n    return $seo;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 187,
            "endLine": 280,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getBlockString",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "it",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "note",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setDefaultMedia": {
            "name": "setDefaultMedia",
            "summary": "Sets a media as the default for the given note",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDefaultMedia(string $id_note, string $id_media): bool\n  {\n    $cfg = $this->note->getClassCfg();\n    if ($this->note->exists($id_note)) {\n      if ($old = $this->getDefaultMedia($id_note)) {\n        if ($id_media === $old) {\n          return true;\n        }\n\n        $this->db->update($cfg['tables']['notes_medias'], [\n          $cfg['arch']['notes_medias']['default_media'] => 0\n        ], [\n          $cfg['arch']['notes_medias']['id_note'] => $id_note\n        ]);\n      }\n\n      if ($res = $this->note->addMediaToNote($id_media, $id_note, 1)) {\n        $this->cacheDelete($id_note);\n      }\n\n      return $res;\n    }\n\n    throw new \\Exception(X::_(\"The note doesn't exist\"));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 290,
            "endLine": 314,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setDefaultMedia",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "id_media",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                }
            ],
            "doc": {
                "description": "Sets a media as the default for the given note\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "media"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets a media as the default for the given note\n   *\n   * @param string $id_note\n   * @param string $id_media\n   * @return boolean\n   *\/"
        },
        "unsetDefaultMedia": {
            "name": "unsetDefaultMedia",
            "summary": "Unsets the media as the default for the given note",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unsetDefaultMedia(string $id_note): bool\n  {\n    $cfg = $this->note->getClassCfg();\n    if ($this->note->exists($id_note)) {\n      if ($this->db->update($cfg['tables']['notes_medias'], [\n        $cfg['arch']['notes_medias']['default_media'] => 0\n      ], [\n        $cfg['arch']['notes_medias']['id_note'] => $id_note\n      ])) {\n        $this->cacheDelete($id_note);\n        return true;\n      }\n      return false;\n    }\n\n    throw new \\Exception(X::_(\"The note doesn't exist\"));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 323,
            "endLine": 339,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "unsetDefaultMedia",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ],
            "doc": {
                "description": "Unsets the media as the default for the given note\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Unsets the media as the default for the given note\n   *\n   * @param string $id_note\n   * @return boolean\n   *\/"
        },
        "getDefaultMedia": {
            "name": "getDefaultMedia",
            "summary": "Returns the default media ID for the given note",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDefaultMedia($id_note): ?string\n  {\n    $cfg = $this->note->getClassCfg();\n    return $this->db->selectOne(\n      $cfg['tables']['notes_medias'],\n      $cfg['arch']['notes_medias']['id_media'],\n      [\n        $cfg['arch']['notes_medias']['id_note'] => $id_note,\n        $cfg['arch']['notes_medias']['default_media'] => 1\n      ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 348,
            "endLine": 358,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getDefaultMedia",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note ID of the note"
                }
            ],
            "doc": {
                "description": "Returns the default media ID for the given note\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "[type]",
                        "name": "$id",
                        "description": "note ID of the note"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the default media ID for the given note\n   *\n   * @param [type] $id_note ID of the note\n   * @return string|null\n   *\/"
        },
        "getLastVersionCfg": {
            "name": "getLastVersionCfg",
            "summary": "Returns a database query configuration getting the latest note version",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastVersionCfg(bool $with_content = false, bool $published = true, array $filter = []): array\n  {\n    $cfg                          = $this->note->getLastVersionCfg($with_content);\n    $cfg['fields'][]              = 'url';\n    $cfg['fields'][]              = 'start';\n    $cfg['fields'][]              = 'end';\n    $cfg['fields']['num_medias']  = 'COUNT(' . $this->db->cfn($this->class_cfg['arch']['notes_medias']['id_note'], $this->class_cfg['tables']['notes_medias'], true) . ')';\n    $cfg['fields']['id_media']    = 'default_medias.id_media';\n    $cfg['where']['conditions'][] = [\n      'field' => 'mime',\n      'value' => 'json\/bbn-cms'\n    ];\n    $cfg['where']['conditions'][] = [\n      'field' => 'private',\n      'value' => 0\n    ];\n\n    if ($published) {\n      $cfg['where']['conditions'][] = [\n        'field' => 'bbn_events.start',\n        'operator' => '<=',\n        'value' => date('Y-m-d H:i:s')\n      ];\n      $cfg['where']['conditions'][] = [\n        'logic' => 'OR',\n        'conditions' => [\n          [\n            'field' => 'bbn_events.end',\n            'operator' => '>=',\n            'value' => date('Y-m-d H:i:s')\n          ], [\n            'field' => 'bbn_events.end',\n            'operator' => 'isnull',\n          ]\n        ]\n      ];\n    }\n\n    if (!empty($filter)) {\n      if (!isset($filter['conditions'])) {\n        $filter = [\n          'conditions' => $filter\n        ];\n      }\n\n      $cfg['where']['conditions'][] = $filter;\n    }\n\n    $cfg['join'][] = [\n        'table' => $this->class_cfg['tables']['notes_url'],\n        'type' => 'left',\n        'on' => [[\n            'field' => $this->db->cfn($this->class_cfg['arch']['notes_url']['id_note'], $this->class_cfg['tables']['notes_url']),\n            'exp' => $this->db->cfn($this->class_cfg['arch']['notes']['id'], $this->class_cfg['tables']['notes'])\n        ]]\n    ];\n    $cfg['join'][] = [\n      'table' => $this->class_cfg['tables']['url'],\n      'type' => 'left',\n      'on' => [[\n          'field' => $this->db->cfn($this->class_cfg['arch']['url']['id'], $this->class_cfg['tables']['url']),\n          'exp' => $this->db->cfn($this->class_cfg['arch']['notes_url']['id_url'], $this->class_cfg['tables']['notes_url'])\n      ]],\n    ];\n\n    $cfg['join'][]   = [\n      'table' => $this->class_cfg['tables']['notes_events'],\n      'type' => 'left',\n      'on' => [[\n          'field' => $this->db->cfn($this->class_cfg['arch']['notes_events']['id_note'], $this->class_cfg['tables']['notes_events']),\n          'exp' => $this->db->cfn($this->class_cfg['arch']['notes']['id'], $this->class_cfg['tables']['notes'])\n      ]]\n    ];\n    $cfg['join'][]   = [\n      'table' => $this->class_cfg['tables']['events'],\n      'type' => 'left',\n      'on' => [[\n          'field' => $this->db->cfn($this->class_cfg['arch']['notes_events']['id_event'], $this->class_cfg['tables']['notes_events']),\n          'exp' => $this->db->cfn($this->class_cfg['arch']['events']['id'], $this->class_cfg['tables']['events'])\n      ]]\n    ];\n    $cfg['join'][]   = [\n      'table' => $this->class_cfg['tables']['notes_medias'],\n      'type' => 'left',\n      'on' => [[\n          'field' => $this->db->cfn($this->class_cfg['arch']['notes_medias']['id_note'], $this->class_cfg['tables']['notes_medias']),\n          'exp' => $this->db->cfn($this->class_cfg['arch']['notes']['id'], $this->class_cfg['tables']['notes'])\n      ]]\n    ];\n    $cfg['join'][]   = [\n      'table' => $this->class_cfg['tables']['notes_medias'],\n      'alias' => 'default_medias',\n      'type' => 'left',\n      'on' => [[\n          'field' => $this->db->cfn($this->class_cfg['arch']['notes_medias']['id_note'], 'default_medias'),\n          'exp' => $this->db->cfn($this->class_cfg['arch']['notes']['id'], $this->class_cfg['tables']['notes'])\n        ], [\n          'field' => $this->db->cfn($this->class_cfg['arch']['notes_medias']['default_media'], 'default_medias'),\n          'value' => 1\n      ]]\n    ];\n    $cfg['group_by'] = [$this->db->cfn($this->class_cfg['arch']['notes']['id'], $this->class_cfg['tables']['notes'])];\n\n    return $cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 369,
            "endLine": 473,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "getLastVersionCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "with_content",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "content"
                },
                {
                    "name": "published",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a database query configuration getting the latest note version\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$with",
                        "description": "content"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$published"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a database query configuration getting the latest note version\n   *\n   * @param boolean $with_content\n   * @param boolean $published\n   * @param array $filter\n   * @return array\n   *\/"
        },
        "getMedia": {
            "name": "getMedia",
            "summary": "Returns the whole information about the given media, including urls and tags",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMedia(string $id_media, $with_notes = false): ?array\n  {\n    if ($media = $this->media->getMedia($id_media, true)) {\n      $media['urls'] = $this->media->getUrls($id_media);\n      $media['tags'] = $this->media->getTags($id_media);\n      if ($with_notes) {\n\n      }\n\n      return $media;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 483,
            "endLine": 496,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getMedia",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "with_notes",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "notes If true returns a list of the notes associated with the media"
                }
            ],
            "doc": {
                "description": "Returns the whole information about the given media, including urls and tags\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "media"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$with",
                        "description": "notes If true returns a list of the notes associated with the media"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the whole information about the given media, including urls and tags\n   *\n   * @param string $id_media\n   * @param boolean $with_notes If true returns a list of the notes associated with the media\n   * @return array|null\n   *\/"
        },
        "getAll": {
            "name": "getAll",
            "summary": "Returns all the notes of type 'pages'.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAll(bool $with_content = false, array $filter = [], array $order = [], int $limit = 50, int $start = 0, string $type = null, bool $published = false): array\n  {\n    $cfg       = $this->getLastVersionCfg($with_content, $published, $filter);\n    $type_cond = [];\n    foreach ($this->getTypes() as $t) {\n      if (!$type || ($type === $t['value'])) {\n        $type_cond[] = [\n          'field' => 'bbn_notes.id_type',\n          'value' => $t['value']\n        ];\n      }\n    }\n    if (empty($type_cond)) {\n      if (!($opt = Note::getOptionsObject()->option($type))) {\n        throw new \\Exception(X::_(\"Impossible to find a type %s\", $type));\n      }\n\n      $type_cond[] = [\n        'field' => 'bbn_notes.id_type',\n        'value' => $type\n      ];\n    }\n\n    $cfg['where']['conditions'][] = [\n      'logic' => 'OR',\n      'conditions' => $type_cond\n    ];\n\n    $cfg['limit'] = $limit;\n    $cfg['start'] = $start >= 0 ? $start : 0;\n\n    if (!empty($order)) {\n      $cfg['order'] = $order;\n    }\n\n    $db    =& $this->db;\n    $idx   = md5(json_encode($filter));\n    $total = $this->cacheGetSet(function() use (&$db, $cfg) {\n      return $db->count($cfg);\n    }, $idx, 'total', 20);\n    $data  = $this->db->rselectAll($cfg);\n    foreach ($data as &$d) {\n      $d['front_img'] = $d['id_media'] ? $this->media->getMedia($d['id_media'], true) : null;\n    }\n\n    return [\n      'query' => $this->db->last(),\n      'data' => $data,\n      'total' => $total\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 511,
            "endLine": 561,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 0,
            "shortName": "getAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "with_content",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "content"
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 50,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 5,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "published",
                    "position": 6,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns all the notes of type 'pages'.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "content"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns all the notes of type 'pages'.\n   *\n   * @param bool   $with_content\n   * @param array  $filter\n   * @param array  $order\n   * @param int    $limit\n   * @param int    $start\n   * @param string $type\n   * @return array\n   * @throws Exception\n   *\/"
        },
        "getNoteType": {
            "name": "getNoteType",
            "summary": "Returns the 'pages' note type ID from options, which should always be the type of the CMS notes.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNoteType(): string\n  {\n    if (!$this->noteType) {\n        $this->noteType = $this->opt->fromCode('pages', 'types', 'note', 'appui');\n    }\n\n      return $this->noteType;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 569,
            "endLine": 576,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getNoteType",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the 'pages' note type ID from options, which should always be the type of the CMS notes.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the 'pages' note type ID from options, which should always be the type of the CMS notes.\n   *\n   * @return string\n   *\/"
        },
        "getByUrl": {
            "name": "getByUrl",
            "summary": "If the given url correspond to a published note returns the id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getByUrl(string $url, bool $force = false): ?array\n  {\n    if (($id_note = $this->note->urlToId($url)) && ($force || $this->isPublished($id_note))) {\n      return $this->get($id_note);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 585,
            "endLine": 592,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getByUrl",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "If the given url correspond to a published note returns the id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * If the given url correspond to a published note returns the id.\n   *\n   * @param string $url\n   * @return string|null\n   *\/"
        },
        "getEvent": {
            "name": "getEvent",
            "summary": "Returns the object event of the given note.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getEvent(string $id_note)\n  {\n    if ($id_event = $this->note->getEventIdFromNote($id_note)) {\n      $event = $this->event->get($id_event);\n      if (!$event) {\n        \/** @todo temporary *\/\n        $this->db->update('bbn_history_uids', ['bbn_active' => 1], ['bbn_uid' => $id_event]);\n        $event = $this->event->get($id_event);\n      }\n      if ($event) {\n        $event['id_note'] = $id_note;\n        return $event;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 602,
            "endLine": 618,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getEvent",
            "returns": [],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ],
            "doc": {
                "description": "Returns the object event of the given note.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the object event of the given note.\n   *\n   * @param string $id_note\n   * @return array|null\n   *\/"
        },
        "getStart": {
            "name": "getStart",
            "summary": "If an event linked to the note exists it returns the start date.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getStart(string $id_note): ?string\n  {\n    if ($event = $this->getEvent($id_note)) {\n        return $event[$this->class_cfg['arch']['events']['start']] ?? null;\n    }\n\n      return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 627,
            "endLine": 634,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getStart",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ],
            "doc": {
                "description": "If an event linked to the note exists it returns the start date.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * If an event linked to the note exists it returns the start date.\n   *\n   * @param string $id_note\n   * @return string|null\n   *\/"
        },
        "getEnd": {
            "name": "getEnd",
            "summary": "If  an event linked to the note exists it returns the end date.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getEnd(string $id_note)\n  {\n    if ($event = $this->getEvent($id_note)) {\n        return $event[$this->class_cfg['arch']['events']['end']] ?? null;\n    }\n      return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 643,
            "endLine": 649,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getEnd",
            "returns": [],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ],
            "doc": {
                "description": "If  an event linked to the note exists it returns the end date.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * If  an event linked to the note exists it returns the end date.\n   *\n   * @param string $id_note\n   * @return string|null\n   *\/"
        },
        "isPublished": {
            "name": "isPublished",
            "summary": "If the note has a corresponding event in bbn_events and the date of start is before now,",
            "description": "and the date of end if isset is after now and the note has an url it returns true",
            "description_parts": [
                {
                    "type": "text",
                    "content": "and the date of end if isset is after now and the note has an url it returns true"
                }
            ],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isPublished(string $id_note): bool\n  {\n    $now = strtotime(date('Y-m-d H:i:s'));\n    $cfg = $this->class_cfg;\n\n    if ($event = $this->getEvent($id_note)) {\n      if (\n            isset($event[$cfg['arch']['events']['start']]) &&\n            (is_null($event[$cfg['arch']['events']['end']]) || (strtotime($event[$cfg['arch']['events']['end']]) > $now)) &&\n            $this->note->hasUrl($id_note)\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 659,
            "endLine": 675,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isPublished",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ],
            "doc": {
                "description": "If the note has a corresponding event in bbn_events and the date of start is before now,\nand the date of end if isset is after now and the note has an url it returns true\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * If the note has a corresponding event in bbn_events and the date of start is before now,\n   * and the date of end if isset is after now and the note has an url it returns true\n   *\n   * @param string $id_note\n   * @return boolean\n   *\/"
        },
        "publish": {
            "name": "publish",
            "summary": "Publish a note.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function publish(string $id_note, array $cfg)\n  {\n    if ($this->note->get($id_note) && !$this->isPublished($id_note)) {\n        \/\/if $url is given it updates the note_url\n      if (!empty($cfg['url'])) {\n        try {\n            $this->setUrl($id_note, $cfg['url']);\n        }\n        catch (Exception $e) {\n            return [\n                'error' => $e->getMessage()\n            ];\n        }\n      }\n      if (!empty($this->note->hasUrl($id_note))) {\n        if (empty($this->getEvent($id_note))) {\n          return $this->setEvent($id_note, [\n              'start'   => $cfg['start'] ?? date('Y-m-d H:i:s'),\n              'end'     => $cfg['end'] ?? null,\n              'id_type' => $cfg['id_type'] ?? self::$_id_event ?? null\n          ]);\n        } else {\n            \/\/case update\n            return $this->updateEvent($id_note, [\n                'start'   => $cfg['start'] ?? date('Y-m-d H:i:s'),\n                'end'     => $cfg['end'] ?? null,\n                'id_type' => $cfg['id_type'] ?? self::$_id_event ?? null\n            ]);\n        }\n      } else {\n          return false;\n      }\n    }\n\n      return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 684,
            "endLine": 719,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "publish",
            "returns": [],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Publish a note.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Publish a note.\n   *\n   * @param string $id_note\n   * @param array  $cfg\n   * @return bool|null|array\n   *\/"
        },
        "unpublish": {
            "name": "unpublish",
            "summary": "Unpublish a note.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unpublish(string $id_note): bool\n  {\n    if ($event = $this->getEvent($id_note)) {\n      \n      if ($this->db->delete($this->class_cfg['tables']['notes_events'], [\n          $this->class_cfg['arch']['notes_events']['id_note'] => $id_note\n        ])\n        && $this->db->delete($this->class_cfg['tables']['events'], [\n          $this->class_cfg['arch']['events']['id'] => $event['id']\n        ])\n      ) {\n        $this->cacheDelete($id_note);\n        return true;\n      }\n    }\n\n      return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 727,
            "endLine": 744,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "unpublish",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ],
            "doc": {
                "description": "Unpublish a note.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n     * Unpublish a note.\n   *\n     * @param string $id_note\n     * @return boolean\n     *\/"
        },
        "setUrl": {
            "name": "setUrl",
            "summary": "Inserts the url for the note if it doesn't exist a published note with the same url or update the url of the given note.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setUrl(string $id_note, string $url, $ignore = false): ?bool\n  {\n    if ($tmp = $this->note->urlToId($url)) {\n      if ($ignore && ($tmp === $id_note)) {\n        return 0;\n      }\n\n      throw new Exception(X::_('The url you are trying to insert already belongs to a published note. Unpublish the note or change the url!'));\n    }\n\n    if (!$this->note->get($id_note)) {\n      throw new Exception(X::_('Impossible to find the given note'));\n    }\n\n    if ($res = $this->note->insertOrUpdateUrl($id_note, $url)) {\n      $this->cacheDelete($id_note);\n    }\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 755,
            "endLine": 773,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "setUrl",
            "returns": [
                null,
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "url",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ignore",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Inserts the url for the note if it doesn't exist a published note with the same url or update the url of the given note.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Inserts the url for the note if it doesn't exist a published note with the same url or update the url of the given note.\n   *\n   * @param string $id_note\n   * @param string $url\n   * @return Boolean\n   * @throws Exception\n   *\/"
        },
        "removeUrl": {
            "name": "removeUrl",
            "summary": "Removes the url corresponding to the given id_note from bbn_notes_url.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeUrl(string $id_note): bool\n  {\n      $success = false;\n\n    if ($this->isPublished($id_note)) {\n        $this->unpublish($id_note);\n    }\n\n    if ($this->note->get($id_note) && $this->note->deleteUrl($id_note)) {\n      $this->cacheDelete($id_note);\n      $success = true;\n    }\n\n      return $success;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 782,
            "endLine": 796,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeUrl",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ],
            "doc": {
                "description": "Removes the url corresponding to the given id_note from bbn_notes_url.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n     * Removes the url corresponding to the given id_note from bbn_notes_url.\n   *\n     * @param string $id_note\n     * @return bool\n     *\/"
        },
        "setEvent": {
            "name": "setEvent",
            "summary": "Inserts in bbn_events and bbn_notes_events the information relative to the publication of the given note.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setEvent(string $id_note, array $cfg = [])\n  {\n    if (!array_key_exists('start', $cfg)) {\n      throw new Exception(X::_(\"A start date is mandatory for CMS event (even null)\"));\n    }\n\n    if (empty($cfg['start'])) {\n      return $this->unpublish($id_note);\n    }\n\n    if (!($note = $this->note->get($id_note))) {\n      throw new Exception(X::_(\"The note %s does not exist\", $id_note));\n    }\n    \n    if (!$this->_check_date($cfg['start'], $cfg['end'] ?? null)) {\n      throw new Exception(X::_(\"The dates don't work... End before start?\"));\n    }\n\n    if (empty($this->getEvent($id_note))) {\n      $fields = $this->class_cfg['arch']['events'];\n        \/\/if a type is not given it inserts the event as page\n      if ($id_event = $this->event->insert([\n          $fields['name']    => $note['title'] ?? '',\n          $fields['id_type'] => $cfg['id_type'] ?? self::$_id_event ?? null,\n          $fields['start']   => $cfg['start'],\n          $fields['end']     => $cfg['end'] ?? null\n        ])\n      ) {\n        if ($res = $this->note->insertNoteEvent($id_note, $id_event)) {\n          $this->cacheDelete($id_note);\n        }\n        return $res;\n      }\n      else {\n        X::log([\n          $fields['name']    => $note['title'] ?? '',\n          $fields['id_type'] => $cfg['id_type'] ?? self::$_id_event ?? null,\n          $fields['start']   => $cfg['start'],\n          $fields['end']     => $cfg['end'] ?? null\n        ], 'cmsss');\n        throw new Exception(X::_(\"Impossible to insert the event\"));\n      }\n    }\n    else if ($this->updateEvent($id_note, $cfg)) {\n      $this->cacheDelete($id_note);\n      return true;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 806,
            "endLine": 855,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setEvent",
            "returns": [],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Inserts in bbn_events and bbn_notes_events the information relative to the publication of the given note.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n     * Inserts in bbn_events and bbn_notes_events the information relative to the publication of the given note.\n   *\n     * @param string $id_note\n     * @param array $cfg\n     * @return boolean|null\n     *\/"
        },
        "updateEvent": {
            "name": "updateEvent",
            "summary": "Updates the event relative to the given note.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateEvent(string $id_note, array $cfg = []): ?bool\n  {\n    if (!array_key_exists('start', $cfg) || !array_key_exists('end', $cfg)) {\n      return false;\n    }\n\n    if ($this->_check_date($cfg['start'], $cfg['end'])) {\n      if ($event = $this->getEvent($id_note)) {\n        if (\n            (strtotime($cfg['start']) !== strtotime($event['start'])) ||\n            (strtotime($cfg['end']) !== strtotime($event['end']) )\n        ) {\n          $cfg['id_type'] = $cfg['id_type'] ?? self::$_id_event ?? null;\n          if ($res = $this->event->edit($event['id'], $cfg)) {\n            $this->cacheDelete($id_note);\n          }\n          return $res;\n        } else {\n          return true;\n        }\n      }\n    }\n\n      return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 864,
            "endLine": 888,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "updateEvent",
            "returns": [
                null,
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Updates the event relative to the given note.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n     * Updates the event relative to the given note.\n   *\n     * @param string $id_note\n     * @param array $cfg\n     *\/"
        },
        "setContent": {
            "name": "setContent",
            "summary": "Adds a new version to the given note with the new content",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setContent(string $id_note, string $title, string $content, string $excerpt = ''): ?int\n  {\n      if ($res = $this->note->insertVersion($id_note, $title, $content, $excerpt)) {\n        $this->cacheDelete($id_note);\n      }\n      return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 899,
            "endLine": 905,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "setContent",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "excerpt",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds a new version to the given note with the new content\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$title"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$content"
                    }
                ],
                "return": "The number of affected rows (1 if ok)"
            },
            "comments": "  \/**\n   * Adds a new version to the given note with the new content\n   *\n   * @param string $id_note\n   * @param string $title\n   * @param string $content\n   * @return null|int The number of affected rows (1 if ok)\n   *\/"
        },
        "setType": {
            "name": "setType",
            "summary": "Changes the type of the note",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setType(string $id_note, string $type): int\n  {\n    if ($res = $this->note->setType($id_note, $type)) {\n      $this->cacheDelete($id_note);\n    }\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 915,
            "endLine": 921,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setType",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Changes the type of the note\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    }
                ],
                "return": "The number of affected rows (1 if ok)"
            },
            "comments": "  \/**\n   * Changes the type of the note\n   *\n   * @param string $id_note\n   * @param string $type\n   * @return int The number of affected rows (1 if ok)\n   *\/"
        },
        "setOption": {
            "name": "setOption",
            "summary": "Changes the id_option of the note",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setOption(string $id_note, string $id_option): int\n  {\n    if ($res = $this->note->setOption($id_note, $id_option)) {\n      $this->cacheDelete($id_note);\n    }\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 931,
            "endLine": 937,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setOption",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "id_option",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "Changes the id_option of the note\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": "The number of affected rows (1 if ok)"
            },
            "comments": "  \/**\n   * Changes the id_option of the note\n   *\n   * @param string $id_note\n   * @param string $id_option\n   * @return int The number of affected rows (1 if ok)\n   *\/"
        },
        "set": {
            "name": "set",
            "summary": "Sets content, title, start and end for the given URL.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function set(\n    $url,\n    string $title = '',\n    string $content = '',\n    string $excerpt = '',\n    string $start = null,\n    string $end = null,\n    array $tags = null,\n    string $id_type = null,\n    string $id_media = null,\n    string $id_option = null\n  ): bool\n  {\n    if (is_array($url)) {\n      $tmp = $url;\n      foreach ($tmp as $k => $v) {\n        $$k = $v;\n      }\n    }\n\n    if (!is_string($url) || empty($url)) {\n      throw new Exception(X::_(\"The CMS article MUST have a URL\"));\n    }\n\n    if ($note = $this->getByUrl($url, true)){\n      $id_note = $note['id'];\n    }\n\n    if (!empty($id_note)) {\n      $cfg = $this->get($id_note);\n    }\n    elseif (!($cfg = $this->getByUrl($url, true))) {\n      throw new Exception(X::_(\"Impossible to find the article with URL\") . ' ' . $url);\n    }\n\n    $change = 0;\n    if (($cfg['title'] !== $title) || ($cfg['content'] !== $content) || ($cfg['excerpt'] !== $excerpt)) {\n      $change += (int)$this->setContent($cfg['id_note'], $title, $content, $excerpt);\n    }\n\n    if (($cfg['start'] !== $start) || ($cfg['end'] !== $end)) {\n      $change += (int)$this->setEvent($cfg['id_note'], [\n        'start' => $start,\n        'end' => $end\n      ]);\n    }\n\n    if (is_array($tags)) {\n      $change += (int)$this->note->setTags($cfg['id_note'], $tags);\n    }\n\n    if ($id_type && ($cfg['id_type'] !== $id_type)) {\n      $change += (int)$this->setType($cfg['id_note'], $id_type);\n    }\n\n    if ($id_option && ($cfg['id_option'] !== $id_option)) {\n      $change += (int)$this->setOption($cfg['id_note'], $id_option);\n    }\n\n    if ($id_media !== $cfg['id_media']) {\n      if ($id_media) {\n        $change += (int)$this->setDefaultMedia($id_note, $id_media);\n      }\n      else {\n        $change += (int)$this->unsetDefaultMedia($id_note);\n      }\n    }\n\n    if ($change) {\n      $this->cacheDelete($cfg['id_note']);\n    }\n\n    return $change ? true : false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 954,
            "endLine": 1027,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 10,
            "numberOfRequiredParameters": 1,
            "shortName": "set",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "excerpt",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "end",
                    "position": 5,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "tags",
                    "position": 6,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "id_type",
                    "position": 7,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "type"
                },
                {
                    "name": "id_media",
                    "position": 8,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "id_option",
                    "position": 9,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets content, title, start and end for the given URL.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$title"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$content"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$excerpt"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$start"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$end"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$tags"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "type"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "media"
                    }
                ],
                "return": "Returns true if something has been modified."
            },
            "comments": "  \/**\n   * Sets content, title, start and end for the given URL.\n   *\n   * @param string $url\n   * @param string $title\n   * @param string $content\n   * @param string $excerpt\n   * @param string $start\n   * @param string $end\n   * @param array $tags\n   * @param string $id_type\n   * @param string $id_media\n   * @return bool Returns true if something has been modified.\n   *\/"
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes the given note and unpublish it if published.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function delete(string $id_note): bool\n  {\n    if ($this->note->exists($id_note)) {\n      if ($this->note->getUrl($id_note)) {\n        $this->removeUrl($id_note);\n      }\n\n      foreach ($this->note->getAliases($id_note) as $id_alias) {\n        if ($this->note->getUrl($id_alias)) {\n          $this->removeUrl($id_alias);\n        }\n      }\n\n      foreach ($this->note->getChildren($id_note) as $id_child) {\n        if ($this->note->getUrl($id_child)) {\n          $this->removeUrl($id_child);\n        }\n      }\n\n      if (!empty($this->note->remove($id_note))) {\n        $this->cacheDelete($id_note);\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1037,
            "endLine": 1063,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "delete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ],
            "doc": {
                "description": "Deletes the given note and unpublish it if published.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "note"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the given note and unpublish it if published.\n   *\n   * @param string $id_note\n   * @return boolean\n   *\/"
        },
        "insertType": {
            "name": "insertType",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insertType(array $t): ?string\n  {\n    $idAlias = $this->opt->fromCode('bbn-cms', 'editors', 'note', 'appui');\n    $idParent = $this->opt->fromCode('types', 'note', 'appui');\n    if (!empty($idAlias)\n      && !empty($idParent)\n      && !empty($t['text'])\n      && !empty($t['code'])\n    ) {\n      if (!empty($t['prefix'])\n        && !str_ends_with($t['prefix'], '\/')\n      ) {\n        $t['prefix'] .= '\/';\n      }\n      return $this->opt->add([\n        'id_parent' => $idParent,\n        'id_alias' => $idAlias,\n        'text' => $t['text'],\n        'code' => $t['code'],\n        'front_img' => !empty($t['front_img']) ? 1 : 0,\n        'prefix' => !empty($t['prefix']) ? $t['prefix'] : ''\n      ]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1066,
            "endLine": 1091,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "insertType",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "t",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "updateType": {
            "name": "updateType",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateType(string $id, array $t): bool\n  {\n    if (($old = $this->opt->option($id))\n      && !empty($t['text'])\n      && !empty($t['code'])\n    ) {\n      if (($old['text'] !== $t['text'])\n        && !$this->opt->setText($id, $t['text'])\n      ) {\n        throw new \\Exception(X::_(\"Error during CMS type's text update: %s\", $id));\n      }\n\n      if (($old['code'] !== $t['code'])\n        && !$this->opt->setCode($id, $t['code'])\n      ) {\n        throw new \\Exception(X::_(\"Error during CMS type's code update: %s\", $id));\n      }\n\n      if ((($old['front_img'] !== $t['front_img'])\n          || ($old['prefix'] !== $t['prefix']))\n        && !$this->opt->setProp($id, [\n          'front_img' => !empty($t['front_img']) ? 1 : 0,\n          'prefix' => !empty($t['prefix']) ? $t['prefix'] : ''\n        ])\n      ) {\n        throw new \\Exception(X::_(\"Error during CMS type's props update: %s\", $id));\n      }\n\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1094,
            "endLine": 1126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "updateType",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "t",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTypes": {
            "name": "getTypes",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTypes(): array\n  {\n    $o =& $this;\n    return $this->cacheGetSet(\n      function () use (&$o) {\n        $id_cms = $o->opt->fromCode('bbn-cms', 'editors', 'note', 'appui');\n        $arr    = [];\n        foreach ($o->opt->fullOptions('types', 'note', 'appui') as $op) {\n          if ($op['id_alias'] === $id_cms) {\n            unset($op['alias']);\n            $arr[] = array_merge($op, [\n              'text' => $op['text'],\n              'value' => $op['id'],\n              'prefix' => $op['prefix'] ?? ''\n            ]);\n          }\n        }\n\n        return $arr;\n      },\n      'types',\n      '',\n      0\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1129,
            "endLine": 1153,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getTypes",
            "returns": [
                "array"
            ],
            "arguments": []
        },
        "clearCache": {
            "name": "clearCache",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function clearCache(string $idNote): bool\n  {\n    return !$this->cacheDelete($idNote)->cacheHas($idNote);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1155,
            "endLine": 1158,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "clearCache",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "idNote",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_set_id_event": {
            "name": "_set_id_event",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function _set_id_event($id)\n  {\n      self::$_id_event = $id;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1166,
            "endLine": 1169,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_set_id_event",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   *\n   * @param string|null $id\n   * @return void\n   *\/"
        },
        "_check_date": {
            "name": "_check_date",
            "summary": "If a date is given for $end checks if it's after the start date.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _check_date(?string $start, ?string $end): bool\n  {\n    if (!isset($start)) {\n      return false;\n    }\n\n    $start = strtotime($start);\n    if (!$start) {\n      throw new Exception(X::_(\"The end date is not valid\"));\n    }\n\n    if (empty($end)) {\n      return true;\n    }\n\n    $end = strtotime($end);\n    if (!$end) {\n      throw new Exception(X::_(\"The end date is not valid\"));\n    }\n\n    if ($end <= $start) {\n      \/\/throw new Exception(X::_(\"The end date is before the start\"));\n      return false;\n    }\n\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1178,
            "endLine": 1204,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_check_date",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "start",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "end",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "If a date is given for $end checks if it's after the start date.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$start"
                    },
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$end"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * If a date is given for $end checks if it's after the start date.\n   *\n   * @param string|null $start\n   * @param null|string $end\n   * @return Boolean\n   *\/"
        },
        "normalizeItems": {
            "name": "normalizeItems",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function normalizeItems(array $items): array\n  {\n    foreach ($items as &$item) {\n      if ($item['type'] === 'container') {\n        foreach ($item['items'] as &$it) {\n          if ($it['type'] === 'slider') {\n            switch ($it['mode']) {\n              case 'features':\n                $it = $this->normalizeItemFeatures($it);\n                break;\n              case 'publications':\n                $it = $this->normalizeItemPublications($it);\n                break;\n              case 'gallery':\n                $it = $this->normalizeItemGallery($it);\n                break;\n            }\n          }\n        }\n      }\n      else {\n        if ($item['type'] === 'slider') {\n          switch ($item['mode']) {\n            case 'features':\n              $item = $this->normalizeItemFeatures($item);\n              break;\n            case 'publications':\n              $item = $this->normalizeItemPublications($item);\n              break;\n            case 'gallery':\n              $item = $this->normalizeItemGallery($item);\n              break;\n          }\n        }\n      }\n    }\n\n    return $items;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1207,
            "endLine": 1245,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "normalizeItems",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "items",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "normalizeItemFeatures": {
            "name": "normalizeItemFeatures",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function normalizeItemFeatures(array $item): array\n  {\n    $item['items'] = [[\n      'component' => \"appui-note-cms-block-slider-slide\",\n      'data' => array_map(\n        function($a) {\n          $a['component'] = \"appui-note-cms-block-slider-slide\";\n          $a['content'] = $a['media']['url'];\n          $a['type'] = 'img';\n          return $a;\n        },\n        $this->note->getFeatures($item['content'])\n      )\n    ]];\n\n    return $item;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1248,
            "endLine": 1264,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "normalizeItemFeatures",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "normalizeItemPublications": {
            "name": "normalizeItemPublications",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function normalizeItemPublications(array $item): array\n  {\n    $itemType = $item['noteType'];\n    if (!empty($item['noteType'])\n      && ($item['noteType'] === 'news')\n    ) {\n      $itemType = null;\n      $filters = [\n        'conditions' => [[\n          'field' => 'start',\n          'operator' => '<=',\n          'value' => date('Y-m-d H:i:s')\n        ], [\n          'field' => 'id_type',\n          'operator' => '!=',\n          'value' => $this->opt->fromCode('pages', 'types', 'note', 'appui'),\n        ], [\n          'logic' => 'OR',\n          'conditions' => [[\n            'field' => 'end',\n            'operator' => '>=',\n            'value' => date('Y-m-d H:i:s')\n          ], [\n            'field' => 'end',\n            'operator' => 'isnull'\n          ]]\n        ]]\n      ];\n    }\n\n    if (!empty($item['content'])) {\n      $filters['conditions'][] = [\n        'field' => 'id_option',\n        'value' => $item['content']\n      ];\n    }\n\n    $item['items'] = [[\n      'component' => \"appui-note-cms-block-slider-slide\",\n      'data' => array_map(\n        function($a) {\n          $a['component'] = \"appui-note-cms-block-slider-slide\";\n          $a['type'] = 'img';\n          $a['content'] = $a['front_img']['url'];\n          return $a;\n        },\n        $this->getAll(\n          false,\n          $filters,\n          [$item['order'] => 'desc'],\n          $item['limit'],\n          0,\n          $itemType\n        )['data']\n      )\n    ]];\n\n    return $item;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1267,
            "endLine": 1325,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "normalizeItemPublications",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "normalizeItemGallery": {
            "name": "normalizeItemGallery",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Cms.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function normalizeItemGallery(array $item): array\n  {\n    $item['items'] = [[\n      'component' => \"appui-note-cms-block-slider-slide\",\n      'data' => array_map(\n        function($a) {\n          $a['component'] = \"appui-note-cms-block-slider-slide\";\n          $a['type'] = 'img';\n          $a['content'] = $a['front_img']['url'];\n          return $a;\n        },\n        $this->media->browseByGroup(\n          $item['content'],\n          ['limit' => $item['limit']]\n        )\n      )\n    ]];\n\n    return $item;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1328,
            "endLine": 1347,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "normalizeItemGallery",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 71,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        },
        "cacheInit": {
            "name": "cacheInit",
            "summary": "Initializes the cache object, must be called in __construct",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheInit(): void\n  {\n    if ( \\is_null($this->cache_engine) ){\n      $this->cache_engine = CacheCls::getEngine();\n      $this->_cache_prefix = Str::encodeFilename(str_replace('\\\\', '\/', \\get_class($this)), true).'\/';\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 27,
            "endLine": 33,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheInit",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Initializes the cache object, must be called in __construct\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Initializes the cache object, must be called in __construct\n   *\n   * @return void\n   *\/"
        },
        "cacheCheck": {
            "name": "cacheCheck",
            "summary": "Throws an exception if the cache has not been initialized",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheCheck(): void\n  {\n    if (!$this->cache_engine) {\n      throw new Exception(X::_(\"The cache object has not been initialized\"));\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 41,
            "endLine": 46,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheCheck",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Throws an exception if the cache has not been initialized\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Throws an exception if the cache has not been initialized\n   *\n   * @return void\n   *\/"
        },
        "_cache_name": {
            "name": "_cache_name",
            "summary": "Generates a name for the cache based on the class name and the method called - or a gievn string",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _cache_name($uid, $method = '', string $locale = ''): string\n  {\n    $uid  = (string)$uid;\n    $path = Str::isUid($uid) ? substr($uid, 0, 3).'\/'.substr($uid, 3, 3).'\/'.substr($uid, 6) : $uid;\n    return $this->_cache_prefix.$path.(empty($method) ? '' : '\/'.(string)$method).(empty($locale) ? '' : \"-$locale\");\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 57,
            "endLine": 62,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "_cache_name",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Generates a name for the cache based on the class name and the method called - or a gievn string\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "[type]",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Generates a name for the cache based on the class name and the method called - or a gievn string\n   *\n   * @param [type] $uid\n   * @param string $method\n   * @param string $locale\n   * @return string\n   *\/"
        },
        "cacheDeleteAll": {
            "name": "cacheDeleteAll",
            "summary": "Deletes all the cache related to the current class",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDeleteAll(): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_prefix);\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 70,
            "endLine": 75,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheDeleteAll",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Deletes all the cache related to the current class\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes all the cache related to the current class\n   *\n   * @return self\n   *\/"
        },
        "cacheDelete": {
            "name": "cacheDelete",
            "summary": "Deletes the given cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDelete(string $uid, string $method = ''): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_name($uid, $method));\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 85,
            "endLine": 90,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheDelete",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the given cache\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the given cache\n   *\n   * @param string $uid\n   * @param string $method\n   * @return self\n   *\/"
        },
        "cacheDeleteLocale": {
            "name": "cacheDeleteLocale",
            "summary": "Deletes the given cache for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDeleteLocale(string $uid, string $locale, string $method = ''): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_name($uid, $method, $locale));\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 101,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheDeleteLocale",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the given cache for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the given cache for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @return self\n   *\/"
        },
        "cacheGet": {
            "name": "cacheGet",
            "summary": "Gets the cached data",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGet(string $uid, string $method = ''): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->get($this->_cache_name($uid, $method));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 116,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheGet",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cached data\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cached data\n   *\n   * @param string $uid\n   * @param string $method\n   * @return mixed\n   *\/"
        },
        "cacheGetLocale": {
            "name": "cacheGetLocale",
            "summary": "Gets the cached data for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetLocale(string $uid, string $locale, string $method = ''): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->get($this->_cache_name($uid, $method, $locale));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 131,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetLocale",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cached data for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cached data for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @return mixed\n   *\/"
        },
        "cacheSet": {
            "name": "cacheSet",
            "summary": "Sets the cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheSet(string $uid, string $method = '', $data = null, int $ttl = 0): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->set($this->_cache_name($uid, $method), $data, $ttl);\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 147,
            "endLine": 152,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheSet",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the cache\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the cache\n   *\n   * @param string $uid\n   * @param string $method\n   * @param array|null $data\n   * @param integer $ttl\n   * @return self\n   *\/"
        },
        "cacheSetLocale": {
            "name": "cacheSetLocale",
            "summary": "Sets the cache for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheSetLocale(string $uid, string $locale, string $method = '', $data = null, int $ttl = 0): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->set($this->_cache_name($uid, $method, $locale), $data, $ttl);\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 165,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheSetLocale",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the cache for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the cache for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @param array|null $data\n   * @param integer $ttl\n   * @return self\n   *\/"
        },
        "cacheGetSet": {
            "name": "cacheGetSet",
            "summary": "Gets the cache or creates it if needs to",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetSet(callable $fn, string $uid, $method = '', int $ttl = 0): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->getSet($fn, $this->_cache_name($uid, $method), $ttl);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 182,
            "endLine": 186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetSet",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cache or creates it if needs to\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$fn"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cache or creates it if needs to\n   *\n   * @param callable $fn\n   * @param string $uid\n   * @param string $method\n   * @param integer $ttl\n   * @return mixed\n   *\/"
        },
        "cacheGetSetLocale": {
            "name": "cacheGetSetLocale",
            "summary": "Gets the cache for a specific locale or creates it if needs to",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetSetLocale(callable $fn, string $uid, string $locale, $method = '', int $ttl = 0): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->getSet($fn, $this->_cache_name($uid, $method, $locale), $ttl);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 199,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 3,
            "shortName": "cacheGetSetLocale",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cache for a specific locale or creates it if needs to\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$fn"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cache for a specific locale or creates it if needs to\n   *\n   * @param callable $fn\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @param integer $ttl\n   * @return mixed\n   *\/"
        },
        "cacheHas": {
            "name": "cacheHas",
            "summary": "Checks whether the cache exists and is valid",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheHas(string $uid, string $method = ''): bool\n  {\n    $this->cacheCheck();\n    return $this->cacheGet($uid, $method) ? true : false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 213,
            "endLine": 217,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheHas",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the cache exists and is valid\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the cache exists and is valid\n   *\n   * @param string $uid\n   * @param string $method\n   * @return boolean\n   *\/"
        },
        "cacheHasLocale": {
            "name": "cacheHasLocale",
            "summary": "Checks whether the cache exists and is valid",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheHasLocale(string $uid, string $locale, string $method = ''): bool\n  {\n    $this->cacheCheck();\n    return $this->cacheGetLocale($uid, $locale, $method) ? true : false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 227,
            "endLine": 231,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheHasLocale",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the cache exists and is valid\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the cache exists and is valid\n   *\n   * @param string $uid\n   * @param string $method\n   * @return boolean\n   *\/"
        },
        "serializeFunction": {
            "name": "serializeFunction",
            "summary": "Transforms a function in a cacheable string",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Cms",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function serializeFunction(callable $function)\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->serializeFunction($function);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 241,
            "endLine": 245,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "serializeFunction",
            "returns": [],
            "arguments": [
                {
                    "name": "function",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Transforms a function in a cacheable string\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$function"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Transforms a function in a cacheable string\n   *\n   * @param callable $function\n   * @return void\n   *\/"
        }
    },
    "properties": {
        "note": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Cms"
            },
            "declaring_trait": "bbn\\Appui\\Cms",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var Note A Note instance.",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "opt": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Cms"
            },
            "declaring_trait": "bbn\\Appui\\Cms",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var Option An Option instance.",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "event": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Cms"
            },
            "declaring_trait": "bbn\\Appui\\Cms",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var Event En Event instance.",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "url": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Cms"
            },
            "declaring_trait": "bbn\\Appui\\Cms",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var Url An Url instance.",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "media": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Cms"
            },
            "declaring_trait": "bbn\\Appui\\Cms",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var Media A Media instance.",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Cms"
            },
            "declaring_trait": "bbn\\Appui\\Cms",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array $class_cfg",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "noteType": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Cms"
            },
            "declaring_trait": "bbn\\Appui\\Cms",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string The option's ID of the type of notes for CMS (pages)",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "_id_event": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Cms"
            },
            "declaring_trait": "bbn\\Appui\\Cms",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Db"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Db",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "dbClass"
                    }
                ]
            },
            "parent": {
                "name": "db",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Db"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Db",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "dbClass"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "_cache_prefix": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Cms"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Cache",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "cache_engine": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Cms"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Cache",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "_id_event": null
    },
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "bbn\\X": "X",
        "bbn\\Str": "Str",
        "bbn\\Db": "Db",
        "bbn\\Models\\Tts\\Cache": "Cache",
        "bbn\\Models\\Cls\\Db": "DbCls"
    },
    "dummyComments": [
        "\/**\n * Created by PhpStorm.\n * User: BBN\n * Date: 14\/04\/2016\n * Time: 20:38\n *\/"
    ],
    "summary": "",
    "description": "",
    "description_parts": []
}