{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Cms",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\Cache"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Cms.php",
    "startLine": 21,
    "endLine": 1179,
    "numMethods": 38,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 1,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\Cache"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "_id_event": null,
        "note": null,
        "opt": null,
        "event": null,
        "url": null,
        "media": null,
        "class_cfg": null,
        "noteType": null,
        "db": null,
        "errors": [],
        "error": false,
        "debug": false,
        "log": [],
        "_cache_prefix": null,
        "cache_engine": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Cms",
    "contentConstructor": {
        "file": "bbn\\Appui\\Cms",
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Cms constructor.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db, bbn\\Appui\\Note $note = NULL)\n  {\n    parent::__construct($db);\n    $this->cacheInit();\n    $this->event = new Event($this->db);\n    $this->opt   = Option::getInstance();\n    $this->url   = new Url($this->db);\n    $this->media = new Medias($this->db);\n    if (!self::$_id_event) {\n      $id = $this->opt->fromCode('publication', 'types', 'event', 'appui');\n      self::_set_id_event($id);\n    }\n    if (!$note) {\n      $this->note = new Note($this->db);\n    }\n    else {\n      $this->note = $note;\n    }\n\n    $this->class_cfg = X::mergeArrays(\n      $this->note->getClassCfg(),\n      $this->url->getClassCfg(),\n      $this->event->getClassCfg()\n    );\n  }",
            "startLine": 100,
            "endLine": 124,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Db",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bbn\\Db $db)\n  {\n    $this->db = $db;\n  }",
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ]
            },
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "note",
                    "position": 1,
                    "type": "bbn\\Appui\\Note",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getLatest": {
            "name": "getLatest",
            "summary": "Returns a list of the latest published articles",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $filter = [], int $limit = 20, int $start = 0)\n  {\n    $cfg          = $this->getLastVersionCfg(false, true, $filter);\n    $cfg['order'] = [['field' => 'bbn_events.start', 'dir' => 'DESC']];\n    $cfg['limit'] = $limit;\n    $cfg['start'] = $start;\n\n    $db    =& $this->db;\n    $idx   = md5(json_encode($filter));\n    $total = $this->cacheGetSet(function() use (&$db, $cfg) {\n      return $db->count($cfg);\n    }, $idx, 'total', 20);\n\n    return [\n        'data' => $this->db->rselectAll($cfg),\n        'query' => $this->db->last(),\n        'total' => $total\n    ];\n  }",
            "startLine": 135,
            "endLine": 153,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 20,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "get": {
            "name": "get",
            "summary": "Returns the note from its id, with its URL, start and end date of publication.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, bool $with_medias = false, bool $with_content = true)\n  {\n    $cacheName = md5(json_encode(func_get_args()));\n    if ($res = $this->cacheGet($id_note, $cacheName)) {\n      return $res;\n    }\n    $res = [];\n    if (!empty($id_note) && ($note = $this->note->get($id_note))) {\n      $res             = $note;\n      $res['url']      = $this->note->getUrl($id_note);\n      $res['start']    = $this->getStart($id_note);\n      $res['end']      = $this->getEnd($id_note);\n      $res['tags']     = $this->note->getTags($id_note);\n      $res['items']    = $note['content'] ? json_decode($note['content'], true) : [];\n      if (($res['id_media'] = $this->getDefaultMedia($id_note)) && !$with_medias) {\n        $res['media'] = $this->getMedia($res['id_media']);\n      }\n      if (!$with_content) {\n        unset($res['content']);\n      }\n      if ($with_medias) {\n        $res['medias'] = $this->note->getMedias($id_note);\n      }\n\n      if ($res['mime'] === 'json\/bbn-cms') {\n        foreach ($res['items'] as &$item) {\n          if ($item['type'] === 'container') {\n            foreach ($item['items'] as &$it) {\n              if ($it['type'] === 'slider') {\n                if ($it['mode'] === 'features') {\n                  $it['currentItems'] = [[\n                    'component' => \"appui-note-cms-block-slider-slide\",\n                    'data' => array_map(\n                      function($a) {\n                        $a['component'] = \"appui-note-cms-block-slider-slide\";\n                        $a['content'] = $a['media']['url'];\n                        $a['type'] = 'img';\n                        return $a;\n                      },\n                      $this->note->getFeatures($it['content'])\n                    )\n                  ]];\n                }\n              }\n            }\n          }\n          else {\n            if ($item['type'] === 'slider') {\n              if ($item['mode'] === 'features') {\n                $item['currentItems'] = [[\n                  'component' => \"appui-note-cms-block-slider-slide\",\n                  'data' => array_map(\n                    function($a) {\n                      $a['component'] = \"appui-note-cms-block-slider-slide\";\n                      $a['content'] = $a['media']['url'];\n                      $a['type'] = 'img';\n                      return $a;\n                    },\n                    $this->note->getFeatures($item['content'])\n                  )\n                ]];\n              }\n            }\n        }\n        }\n\n      }\n\n    }\n\n    $this->cacheSet($id_note, $cacheName, $res);\n\n    return $res;\n  }",
            "startLine": 162,
            "endLine": 235,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "with_medias",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "with_content",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "getSEO": {
            "name": "getSEO",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    $seo = '';\n    if ($note = $this->get($id_note, true, true)) {\n      $seo = PHP_EOL . '<h2>' . $note['title'] . '<\/h2>' . PHP_EOL;\n      if (!empty($note['items'])) {\n        foreach($note['items'] as $it) {\n          if (!empty($it['type']) && ($it['type'] === 'container')) {\n            foreach ($it['items'] as $it2) {\n              $seo .= $this->getBlockString($it2, $note);\n            }\n          }\n          else {\n            $seo .= $this->getBlockString($it, $note);\n          }\n        }\n\n        $seo .= PHP_EOL;\n      }\n    }\n\n    return [\n      'title' => $note['title'],\n      'description' => $note['excerpt'],\n      'tags' => $note['tags'],\n      'seo' => $seo\n    ];\n  }",
            "startLine": 238,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getBlockString": {
            "name": "getBlockString",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $it, array $note)\n  {\n    $seo = '';\n    if (!empty($it['type'])) {\n      $seo .= '<div>';\n      switch ($it['type']) {\n        case 'gallery':\n        case 'carousel':\n          if (!empty($it['content'])) {\n            if (is_string($it['content'])) {\n              $gallery = $this->media->browseByGroup($it['content'], [], 100);\n              if ($gallery && !empty($gallery['data'])) {\n                foreach ($gallery['data'] as $d) {\n                  $tags = $this->media->getTags($d['id']);\n                  $img = $d['path'];\n                  if (!empty($d['thumbs'])) {\n                    \/\/$img = $this->media->getThumbsName($d['path'], [$d['thumbs'][0]]);\n                  }\n    \n                  $seo .= '<a href=\"\/' . $d['path'] . '\">' .\n                      '<img src=\"\/' . $img . '\" title=\"'. _(\"Enlarge\") . ' ' . \n                      basename($d['path']).'\" alt=\"' .\n                      Str::escapeDquotes(\n                        $d['title'] . ' - ' . \n                        (empty($tags) ? '' : X::join($tags, ' | ') . ' | ') .\n                        X::join($note['tags'], ' | ') . ' - ' . $note['title']\n                      ) . '\"><\/a><br>' . PHP_EOL;\n                }\n              }\n            }\n          }\n\n          break;\n        case 'slider':\n          if (!empty($it['content'])) {\n            $features = $this->note->getFeatures($it['content'], false);\n            $seo .= '<ul>';\n            foreach ($features as $feature) {\n              $seo .= '<li><a href=\"' . $feature['url'] . '\">' . PHP_EOL;\n              if (!empty($feature['media'])) {\n                $seo .= '<img src=\"' . $feature['media']['path'] . '\" alt=\"' . $feature['media']['title'] . '\"><br>' . PHP_EOL;\n              }\n\n              $seo .= $feature['title'] . '<a><\/li>';\n            }\n\n            $seo .= '<\/ul>';\n          }\n\n          break;\n        case 'title':\n          $seo .= '<' . ($it['tag'] ?? 'h2') . '>' . $it['content'] . '<\/' . ($it['tag'] ?? 'h2') . '>' . PHP_EOL;\n          break;\n        case 'html':\n          $seo .= $it['content'] . PHP_EOL;\n          break;\n        case 'line':\n          $seo .= '<hr>' . PHP_EOL;\n          break;\n        case 'imagetext':\n          $seo .= '<a href=\"\/' . $it['content'] . '\"><img src=\"\/' . $it['content'] . '\" alt=\"' .\n              Str::escapeDquotes(\n                $it['caption'] . ' - ' . \n                (empty($tags) ? '' : X::join($tags, ' | ') . ' | ') .\n                X::join($note['tags'], ' | ') . ' - ' . $note['title']\n              ) . '\"><\/a><br>' . PHP_EOL .\n              (empty($it['details']) ? '' : '<p>' . $it['details'] . '<\/p>' . PHP_EOL);\n          if (!empty($it['details_title'])) {\n            $seo .= '<caption>' . $it['details_title'] . '<\/caption>' . PHP_EOL;\n          }\n          break;\n        case 'image':\n          $seo .= '<a href=\"\/' . $it['content'] . '\"><img src=\"\/' . $it['content'] . '\" alt=\"' .\n              Str::escapeDquotes(\n                $it['caption'] . ' - ' . \n                (empty($tags) ? '' : X::join($tags, ' | ') . ' | ') .\n                X::join($note['tags'], ' | ') . ' - ' . $note['title']\n              ) . '\"><\/a><br>' . PHP_EOL .\n              (empty($it['details']) ? '' : '<p>' . $it['details'] . '<\/p>' . PHP_EOL);\n          if (!empty($it['details_title'])) {\n            $seo .= '<caption>' . $it['details_title'] . '<\/caption>' . PHP_EOL;\n          }\n          break;\n        case 'video':\n          break;\n        default:\n          X::log($it, 'unknown_types');\n      }\n\n      $seo .= '<\/div>';\n    }\n\n    return $seo;\n  }",
            "startLine": 268,
            "endLine": 361,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "it",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "note",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setDefaultMedia": {
            "name": "setDefaultMedia",
            "summary": "Sets a media as the default for the given note",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $id_media)\n  {\n    $cfg = $this->note->getClassCfg();\n    if ($this->note->exists($id_note)) {\n      if ($old = $this->getDefaultMedia($id_note)) {\n        if ($id_media === $old) {\n          return true;\n        }\n\n        $this->db->update($cfg['tables']['notes_medias'], [\n          $cfg['arch']['notes_medias']['default_media'] => 0\n        ], [\n          $cfg['arch']['notes_medias']['id_note'] => $id_note\n        ]);\n      }\n\n      if ($res = $this->note->addMediaToNote($id_media, $id_note, 1)) {\n        $this->cacheDelete($id_note);\n      }\n\n      return $res;\n    }\n\n    throw new \\Exception(X::_(\"The note doesn't exist\"));\n  }",
            "startLine": 371,
            "endLine": 395,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "id_media",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                }
            ]
        },
        "unsetDefaultMedia": {
            "name": "unsetDefaultMedia",
            "summary": "Unsets the media as the default for the given note",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    $cfg = $this->note->getClassCfg();\n    if ($this->note->exists($id_note)) {\n      if ($this->db->update($cfg['tables']['notes_medias'], [\n        $cfg['arch']['notes_medias']['default_media'] => 0\n      ], [\n        $cfg['arch']['notes_medias']['id_note'] => $id_note\n      ])) {\n        $this->cacheDelete($id_note);\n        return true;\n      }\n      return false;\n    }\n\n    throw new \\Exception(X::_(\"The note doesn't exist\"));\n  }",
            "startLine": 404,
            "endLine": 420,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "getDefaultMedia": {
            "name": "getDefaultMedia",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_note)\n  {\n    $cfg = $this->note->getClassCfg();\n    return $this->db->selectOne(\n      $cfg['tables']['notes_medias'],\n      $cfg['arch']['notes_medias']['id_media'],\n      [\n        $cfg['arch']['notes_medias']['id_note'] => $id_note,\n        $cfg['arch']['notes_medias']['default_media'] => 1\n      ]);\n  }",
            "startLine": 429,
            "endLine": 439,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLastVersionCfg": {
            "name": "getLastVersionCfg",
            "summary": "Returns a database query configuration getting the latest note version",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $with_content = false, bool $published = true, array $filter = [])\n  {\n    $cfg                          = $this->note->getLastVersionCfg($with_content);\n    $cfg['fields'][]              = 'url';\n    $cfg['fields'][]              = 'start';\n    $cfg['fields'][]              = 'end';\n    $cfg['fields']['num_medias']  = 'COUNT(' . $this->db->cfn($this->class_cfg['arch']['notes_medias']['id_note'], $this->class_cfg['tables']['notes_medias'], true) . ')';\n    $cfg['fields']['id_media']    = 'default_medias.id_media';\n    $cfg['where']['conditions'][] = [\n      'field' => 'mime',\n      'value' => 'json\/bbn-cms'\n    ];\n    $cfg['where']['conditions'][] = [\n      'field' => 'private',\n      'value' => 0\n    ];\n\n    if ($published) {\n      $cfg['where']['conditions'][] = [\n        'field' => 'bbn_events.start',\n        'operator' => '<=',\n        'value' => date('Y-m-d H:i:s')\n      ];\n      $cfg['where']['conditions'][] = [\n        'logic' => 'OR',\n        'conditions' => [\n          [\n            'field' => 'bbn_events.end',\n            'operator' => '>=',\n            'value' => date('Y-m-d H:i:s')\n          ], [\n            'field' => 'bbn_events.end',\n            'operator' => 'isnull',\n          ]\n        ]\n      ];\n    }\n\n    if (!empty($filter)) {\n      if (!isset($filter['conditions'])) {\n        $filter = [\n          'conditions' => $filter\n        ];\n      }\n\n      $cfg['where']['conditions'][] = $filter;\n    }\n\n    $cfg['join'][] = [\n        'table' => $this->class_cfg['tables']['notes_url'],\n        'type' => 'left',\n        'on' => [[\n            'field' => $this->db->cfn($this->class_cfg['arch']['notes_url']['id_note'], $this->class_cfg['tables']['notes_url']),\n            'exp' => $this->db->cfn($this->class_cfg['arch']['notes']['id'], $this->class_cfg['tables']['notes'])\n        ]]\n    ];\n    $cfg['join'][] = [\n      'table' => $this->class_cfg['tables']['url'],\n      'type' => 'left',\n      'on' => [[\n          'field' => $this->db->cfn($this->class_cfg['arch']['url']['id'], $this->class_cfg['tables']['url']),\n          'exp' => $this->db->cfn($this->class_cfg['arch']['notes_url']['id_url'], $this->class_cfg['tables']['notes_url'])\n      ]],\n    ];\n\n    $cfg['join'][]   = [\n      'table' => $this->class_cfg['tables']['notes_events'],\n      'type' => 'left',\n      'on' => [[\n          'field' => $this->db->cfn($this->class_cfg['arch']['notes_events']['id_note'], $this->class_cfg['tables']['notes_events']),\n          'exp' => $this->db->cfn($this->class_cfg['arch']['notes']['id'], $this->class_cfg['tables']['notes'])\n      ]]\n    ];\n    $cfg['join'][]   = [\n      'table' => $this->class_cfg['tables']['events'],\n      'type' => 'left',\n      'on' => [[\n          'field' => $this->db->cfn($this->class_cfg['arch']['notes_events']['id_event'], $this->class_cfg['tables']['notes_events']),\n          'exp' => $this->db->cfn($this->class_cfg['arch']['events']['id'], $this->class_cfg['tables']['events'])\n      ]]\n    ];\n    $cfg['join'][]   = [\n      'table' => $this->class_cfg['tables']['notes_medias'],\n      'type' => 'left',\n      'on' => [[\n          'field' => $this->db->cfn($this->class_cfg['arch']['notes_medias']['id_note'], $this->class_cfg['tables']['notes_medias']),\n          'exp' => $this->db->cfn($this->class_cfg['arch']['notes']['id'], $this->class_cfg['tables']['notes'])\n      ]]\n    ];\n    $cfg['join'][]   = [\n      'table' => $this->class_cfg['tables']['notes_medias'],\n      'alias' => 'default_medias',\n      'type' => 'left',\n      'on' => [[\n          'field' => $this->db->cfn($this->class_cfg['arch']['notes_medias']['id_note'], 'default_medias'),\n          'exp' => $this->db->cfn($this->class_cfg['arch']['notes']['id'], $this->class_cfg['tables']['notes'])\n        ], [\n          'field' => $this->db->cfn($this->class_cfg['arch']['notes_medias']['default_media'], 'default_medias'),\n          'value' => 1\n      ]]\n    ];\n    $cfg['group_by'] = [$this->db->cfn($this->class_cfg['arch']['notes']['id'], $this->class_cfg['tables']['notes'])];\n\n    return $cfg;\n  }",
            "startLine": 450,
            "endLine": 554,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "with_content",
                    "position": 0,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "content"
                },
                {
                    "name": "published",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "getMedia": {
            "name": "getMedia",
            "summary": "Returns the whole information about the given media, including urls and tags",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_media, $with_notes = false)\n  {\n    if ($media = $this->media->getMedia($id_media, true)) {\n      $media['urls'] = $this->media->getUrls($id_media);\n      $media['tags'] = $this->media->getTags($id_media);\n      if ($with_notes) {\n\n      }\n\n      return $media;\n    }\n\n    return null;\n  }",
            "startLine": 564,
            "endLine": 577,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_media",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "with_notes",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "notes If true returns a list of the notes associated with the media"
                }
            ]
        },
        "getAll": {
            "name": "getAll",
            "summary": "Returns all the notes of type 'pages'.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $with_content = false, array $filter = [], array $order = [], int $limit = 50, int $start = 0, string $type = NULL, bool $published = false)\n  {\n    $cfg       = $this->getLastVersionCfg($with_content, $published, $filter);\n    $type_cond = [];\n    foreach ($this->getTypes() as $t) {\n      if (!$type || ($type === $t['value'])) {\n        $type_cond[] = [\n          'field' => 'bbn_notes.id_type',\n          'value' => $t['value']\n        ];\n      }\n    }\n    if (empty($type_cond)) {\n      if (!($opt = Note::getOptionsObject()->option($type))) {\n        throw new \\Exception(X::_(\"Impossible to find a type %s\", $type));\n      }\n\n      $type_cond[] = [\n        'field' => 'bbn_notes.id_type',\n        'value' => $type\n      ];\n    }\n\n    $cfg['where']['conditions'][] = [\n      'logic' => 'OR',\n      'conditions' => $type_cond\n    ];\n\n    $cfg['limit'] = $limit;\n    $cfg['start'] = $start >= 0 ? $start : 0;\n\n    if (!empty($order)) {\n      $cfg['order'] = $order;\n    }\n\n    $db    =& $this->db;\n    $idx   = md5(json_encode($filter));\n    $total = $this->cacheGetSet(function() use (&$db, $cfg) {\n      return $db->count($cfg);\n    }, $idx, 'total', 20);\n    $data  = $this->db->rselectAll($cfg);\n    foreach ($data as &$d) {\n      $d['front_img'] = $d['id_media'] ? $this->media->getMedia($d['id_media'], true) : null;\n\n    }\n\n    return [\n      'query' => $this->db->last(),\n      'data' => $data,\n      'total' => $total\n    ];\n  }",
            "startLine": 592,
            "endLine": 643,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "with_content",
                    "position": 0,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "content"
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 50,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 5,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "published",
                    "position": 6,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getNoteType": {
            "name": "getNoteType",
            "summary": "Returns the 'pages' note type ID from options, which should always be the type of the CMS notes.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->noteType) {\n        $this->noteType = $this->opt->fromCode('pages', 'types', 'note', 'appui');\n    }\n\n      return $this->noteType;\n  }",
            "startLine": 651,
            "endLine": 658,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getByUrl": {
            "name": "getByUrl",
            "summary": "If the given url correspond to a published note returns the id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $url, bool $force = false)\n  {\n    if (($id_note = $this->note->urlToId($url)) && ($force || $this->isPublished($id_note))) {\n      return $this->get($id_note);\n    }\n\n    return null;\n  }",
            "startLine": 667,
            "endLine": 674,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getEvent": {
            "name": "getEvent",
            "summary": "Returns the object event of the given note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    if ($id_event = $this->note->getEventIdFromNote($id_note)) {\n      $event = $this->event->get($id_event);\n      if (!$event) {\n        \/** @todo temporary *\/\n        $this->db->update('bbn_history_uids', ['bbn_active' => 1], ['bbn_uid' => $id_event]);\n        $event = $this->event->get($id_event);\n      }\n      if ($event) {\n        $event['id_note'] = $id_note;\n        return $event;\n      }\n    }\n\n    return null;\n  }",
            "startLine": 684,
            "endLine": 700,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "getStart": {
            "name": "getStart",
            "summary": "If an event linked to the note exists it returns the start date.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    if ($event = $this->getEvent($id_note)) {\n        return $event[$this->class_cfg['arch']['events']['start']] ?? null;\n    }\n\n      return null;\n  }",
            "startLine": 709,
            "endLine": 716,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "getEnd": {
            "name": "getEnd",
            "summary": "If  an event linked to the note exists it returns the end date.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    if ($event = $this->getEvent($id_note)) {\n        return $event[$this->class_cfg['arch']['events']['end']] ?? null;\n    }\n      return null;\n  }",
            "startLine": 725,
            "endLine": 731,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "isPublished": {
            "name": "isPublished",
            "summary": "If the note has a corresponding event in bbn_events and the date of start is before now,",
            "description": "and the date of end if isset is after now and the note has an url it returns true",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>and the date of end if isset is after now and the note has an url it returns true<\/p>"
                }
            ],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    $now = strtotime(date('Y-m-d H:i:s'));\n    $cfg = $this->class_cfg;\n\n    if ($event = $this->getEvent($id_note)) {\n      if (\n            isset($event[$cfg['arch']['events']['start']]) &&\n            (is_null($event[$cfg['arch']['events']['end']]) || (strtotime($event[$cfg['arch']['events']['end']]) > $now)) &&\n            $this->note->hasUrl($id_note)\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 741,
            "endLine": 757,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "publish": {
            "name": "publish",
            "summary": "Publish a note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, array $cfg)\n  {\n    if ($this->note->get($id_note) && !$this->isPublished($id_note)) {\n        \/\/if $url is given it updates the note_url\n      if (!empty($cfg['url'])) {\n        try {\n            $this->setUrl($id_note, $cfg['url']);\n        }\n        catch (Exception $e) {\n            return [\n                'error' => $e->getMessage()\n            ];\n        }\n      }\n      if (!empty($this->note->hasUrl($id_note))) {\n        if (empty($this->getEvent($id_note))) {\n          return $this->setEvent($id_note, [\n              'start'   => $cfg['start'] ?? date('Y-m-d H:i:s'),\n              'end'     => $cfg['end'] ?? null,\n              'id_type' => $cfg['id_type'] ?? self::$_id_event ?? null\n          ]);\n        } else {\n            \/\/case update\n            return $this->updateEvent($id_note, [\n                'start'   => $cfg['start'] ?? date('Y-m-d H:i:s'),\n                'end'     => $cfg['end'] ?? null,\n                'id_type' => $cfg['id_type'] ?? self::$_id_event ?? null\n            ]);\n        }\n      } else {\n          return false;\n      }\n    }\n\n      return false;\n  }",
            "startLine": 766,
            "endLine": 801,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "unpublish": {
            "name": "unpublish",
            "summary": "Unpublish a note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    if ($event = $this->getEvent($id_note)) {\n      \n      if ($this->db->delete($this->class_cfg['tables']['notes_events'], [\n          $this->class_cfg['arch']['notes_events']['id_note'] => $id_note\n        ])\n        && $this->db->delete($this->class_cfg['tables']['events'], [\n          $this->class_cfg['arch']['events']['id'] => $event['id']\n        ])\n      ) {\n        $this->cacheDelete($id_note);\n        return true;\n      }\n    }\n\n      return false;\n  }",
            "startLine": 809,
            "endLine": 826,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "setUrl": {
            "name": "setUrl",
            "summary": "Inserts the url for the note if it doesn't exist a published note with the same url or update the url of the given note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $url, $ignore = false)\n  {\n    if ($tmp = $this->note->urlToId($url)) {\n      if ($ignore && ($tmp === $id_note)) {\n        return 0;\n      }\n\n      throw new Exception(X::_('The url you are trying to insert already belongs to a published note. Unpublish the note or change the url!'));\n    }\n\n    if (!$this->note->get($id_note)) {\n      throw new Exception(X::_('Impossible to find the given note'));\n    }\n\n    if ($res = $this->note->insertOrUpdateUrl($id_note, $url)) {\n      $this->cacheDelete($id_note);\n    }\n    return $res;\n  }",
            "startLine": 837,
            "endLine": 855,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                null,
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "url",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ignore",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "removeUrl": {
            "name": "removeUrl",
            "summary": "Removes the url corresponding to the given id_note from bbn_notes_url.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n      $success = false;\n\n    if ($this->isPublished($id_note)) {\n        $this->unpublish($id_note);\n    }\n\n    if ($this->note->get($id_note) && $this->note->deleteUrl($id_note)) {\n      $this->cacheDelete($id_note);\n      $success = true;\n    }\n\n      return $success;\n  }",
            "startLine": 864,
            "endLine": 878,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "setEvent": {
            "name": "setEvent",
            "summary": "Inserts in bbn_events and bbn_notes_events the information relative to the publication of the given note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, array $cfg = [])\n  {\n    if (!array_key_exists('start', $cfg)) {\n      throw new Exception(X::_(\"A start date is mandatory for CMS event (even null)\"));\n    }\n\n    if (empty($cfg['start'])) {\n      return $this->unpublish($id_note);\n    }\n\n    if (!($note = $this->note->get($id_note))) {\n      throw new Exception(X::_(\"The note %s does not exist\", $id_note));\n    }\n    \n    if (!$this->_check_date($cfg['start'], $cfg['end'] ?? null)) {\n      throw new Exception(X::_(\"The dates don't work... End before start?\"));\n    }\n\n    if (empty($this->getEvent($id_note))) {\n      $fields = $this->class_cfg['arch']['events'];\n        \/\/if a type is not given it inserts the event as page\n      if ($id_event = $this->event->insert([\n          $fields['name']    => $note['title'] ?? '',\n          $fields['id_type'] => $cfg['id_type'] ?? self::$_id_event ?? null,\n          $fields['start']   => $cfg['start'],\n          $fields['end']     => $cfg['end'] ?? null\n        ])\n      ) {\n        if ($res = $this->note->insertNoteEvent($id_note, $id_event)) {\n          $this->cacheDelete($id_note);\n        }\n        return $res;\n      }\n      else {\n        X::log([\n          $fields['name']    => $note['title'] ?? '',\n          $fields['id_type'] => $cfg['id_type'] ?? self::$_id_event ?? null,\n          $fields['start']   => $cfg['start'],\n          $fields['end']     => $cfg['end'] ?? null\n        ], 'cmsss');\n        throw new Exception(X::_(\"Impossible to insert the event\"));\n      }\n    }\n    else if ($this->updateEvent($id_note, $cfg)) {\n      $this->cacheDelete($id_note);\n      return true;\n    }\n\n    return null;\n  }",
            "startLine": 888,
            "endLine": 937,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "updateEvent": {
            "name": "updateEvent",
            "summary": "Updates the event relative to the given note.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, array $cfg = [])\n  {\n    if (!array_key_exists('start', $cfg) || !array_key_exists('end', $cfg)) {\n      return false;\n    }\n\n    if ($this->_check_date($cfg['start'], $cfg['end'])) {\n      if ($event = $this->getEvent($id_note)) {\n        if (\n            (strtotime($cfg['start']) !== strtotime($event['start'])) ||\n            (strtotime($cfg['end']) !== strtotime($event['end']) )\n        ) {\n          $cfg['id_type'] = $cfg['id_type'] ?? self::$_id_event ?? null;\n          if ($res = $this->event->edit($event['id'], $cfg)) {\n            $this->cacheDelete($id_note);\n          }\n          return $res;\n        } else {\n          return true;\n        }\n      }\n    }\n\n      return false;\n  }",
            "startLine": 946,
            "endLine": 970,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "setContent": {
            "name": "setContent",
            "summary": "Adds a new version to the given note with the new content",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $title, string $content, string $excerpt = '')\n  {\n      if ($res = $this->note->insertVersion($id_note, $title, $content, $excerpt)) {\n        $this->cacheDelete($id_note);\n      }\n      return $res;\n  }",
            "startLine": 981,
            "endLine": 987,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "excerpt",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setType": {
            "name": "setType",
            "summary": "Changes the type of the note",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $type)\n  {\n    if ($res = $this->note->setType($id_note, $type)) {\n      $this->cacheDelete($id_note);\n    }\n    return $res;\n  }",
            "startLine": 997,
            "endLine": 1003,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setOption": {
            "name": "setOption",
            "summary": "Changes the id_option of the note",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note, string $id_option)\n  {\n    if ($res = $this->note->setOption($id_note, $id_option)) {\n      $this->cacheDelete($id_note);\n    }\n    return $res;\n  }",
            "startLine": 1013,
            "endLine": 1019,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                },
                {
                    "name": "id_option",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ]
        },
        "set": {
            "name": "set",
            "summary": "Sets content, title, start and end for the given URL.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($url, string $title = '', string $content = '', string $excerpt = '', string $start = NULL, string $end = NULL, array $tags = NULL, string $id_type = NULL, string $id_media = NULL, string $id_option = NULL)\n  {\n    string $title = '',\n    string $content = '',\n    string $excerpt = '',\n    string $start = null,\n    string $end = null,\n    array $tags = null,\n    string $id_type = null,\n    string $id_media = null,\n    string $id_option = null\n  ): bool\n  {\n    if (is_array($url)) {\n      $tmp = $url;\n      foreach ($tmp as $k => $v) {\n        $$k = $v;\n      }\n    }\n\n    if (!is_string($url) || empty($url)) {\n      throw new Exception(X::_(\"The CMS article MUST have a URL\"));\n    }\n\n    if ($note = $this->getByUrl($url, true)){\n      $id_note = $note['id'];\n    }\n\n    if (!empty($id_note)) {\n      $cfg = $this->get($id_note);\n    }\n    elseif (!($cfg = $this->getByUrl($url, true))) {\n      throw new Exception(X::_(\"Impossible to find the article with URL\") . ' ' . $url);\n    }\n\n    $change = 0;\n    if (($cfg['title'] !== $title) || ($cfg['content'] !== $content) || ($cfg['excerpt'] !== $excerpt)) {\n      $change += (int)$this->setContent($cfg['id_note'], $title, $content, $excerpt);\n    }\n\n    if (($cfg['start'] !== $start) || ($cfg['end'] !== $end)) {\n      $change += (int)$this->setEvent($cfg['id_note'], [\n        'start' => $start,\n        'end' => $end\n      ]);\n    }\n\n    if (is_array($tags)) {\n      $change += (int)$this->note->setTags($cfg['id_note'], $tags);\n    }\n\n    if ($id_type && ($cfg['id_type'] !== $id_type)) {\n      $change += (int)$this->setType($cfg['id_note'], $id_type);\n    }\n\n    if ($id_option && ($cfg['id_option'] !== $id_option)) {\n      $change += (int)$this->setOption($cfg['id_note'], $id_option);\n    }\n\n    if ($id_media !== $cfg['id_media']) {\n      if ($id_media) {\n        $change += (int)$this->setDefaultMedia($id_note, $id_media);\n      }\n      else {\n        $change += (int)$this->unsetDefaultMedia($id_note);\n      }\n    }\n\n    if ($change) {\n      $this->cacheDelete($cfg['id_note']);\n    }\n\n    return $change ? true : false;\n  }",
            "startLine": 1036,
            "endLine": 1109,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 10,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "excerpt",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "end",
                    "position": 5,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "tags",
                    "position": 6,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "id_type",
                    "position": 7,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "type"
                },
                {
                    "name": "id_media",
                    "position": 8,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "media"
                },
                {
                    "name": "id_option",
                    "position": 9,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes the given note and unpublish it if published.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_note)\n  {\n    if ($this->note->exists($id_note)) {\n      if ($this->note->getUrl($id_note)) {\n        $this->removeUrl($id_note);\n      }\n\n      foreach ($this->note->getAliases($id_note) as $id_alias) {\n        if ($this->note->getUrl($id_alias)) {\n          $this->removeUrl($id_alias);\n        }\n      }\n\n      foreach ($this->note->getChildren($id_note) as $id_child) {\n        if ($this->note->getUrl($id_child)) {\n          $this->removeUrl($id_child);\n        }\n      }\n\n      if (!empty($this->note->remove($id_note))) {\n        $this->cacheDelete($id_note);\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 1119,
            "endLine": 1145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_note",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "note"
                }
            ]
        },
        "getTypes": {
            "name": "getTypes",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $o =& $this;\n    return $this->cacheGetSet(\n      function () use (&$o) {\n        $id_cms = $o->opt->fromCode('bbn-cms', 'editors', 'note', 'appui');\n        $arr    = [];\n        foreach ($o->opt->fullOptions('types', 'note', 'appui') as $op) {\n          if ($op['id_alias'] === $id_cms) {\n            unset($op['alias']);\n            $arr[] = array_merge($op, [\n              'text' => $op['text'],\n              'value' => $op['id'],\n              'prefix' => $op['prefix'] ?? ''\n            ]);\n          }\n        }\n\n        return $arr;\n      },\n      'types',\n      '',\n      0\n    );\n  }",
            "startLine": 1148,
            "endLine": 1172,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "clearCache": {
            "name": "clearCache",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Cms",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idNote)\n  {\n    return !$this->cacheDelete($idNote)->cacheHas($idNote);\n  }",
            "startLine": 1174,
            "endLine": 1177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idNote",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 50,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 50,
                "endLine": 57,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 64,
            "endLine": 71,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 64,
                "endLine": 71,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->error;\n  }",
            "startLine": 85,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 85,
                "endLine": 88,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 91,
            "endLine": 94,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 91,
                "endLine": 94,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 97,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 97,
                "endLine": 106,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 114,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 114,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": {
        "_id_event": null
    },
    "constants": null,
    "summary": "",
    "description": "",
    "description_parts": []
}