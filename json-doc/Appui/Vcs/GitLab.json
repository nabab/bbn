{
    "doc": {
        "description": "VCS\\Git class\n",
        "tags": {
            "category": "Appui",
            "package": "Appui\\Vcs",
            "author": "Mirko Argentino <mirko@bbn.solutions>",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.html MIT License",
            "link": "https:\/\/bbn.io\/bbn-php\/doc\/class\/Appui\/Vcs\/Git"
        }
    },
    "name": "bbn\\Appui\\Vcs\\GitLab",
    "namespace": true,
    "traits": [
        "bbn\\Appui\\Vcs\\Common"
    ],
    "interfaces": {
        "bbn\\Appui\\Vcs\\Server": {
            "name": "bbn\\Appui\\Vcs\\Server"
        }
    },
    "fileName": "\/Appui\/Vcs\/GitLab.php",
    "startLine": 19,
    "endLine": 811,
    "numMethods": 46,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [
        "bbn\\Appui\\Vcs\\Server"
    ],
    "isInterface": false,
    "traitNames": [
        "bbn\\Appui\\Vcs\\Common"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "db": null,
        "pwd": null,
        "idServer": null,
        "server": null,
        "userConnection": null,
        "adminConnection": null,
        "opt": null,
        "idUser": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui\\Vcs",
    "shortName": "GitLab",
    "contentConstructor": {
        "file": "bbn\\Appui\\Vcs\\GitLab",
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Constructor.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db, string $idServer)\n  {\n    $this->db = $db;\n    $this->opt = Option::getInstance();\n    $this->pwd = new Passwords($this->db);\n    $this->idServer = $idServer;\n    $this->server = $this->getServer();\n    $this->checkServerHost($this->server->host);\n    $this->userConnection = new bbn\\Api\\GitLab($this->server->userAccessToken, $this->server->host);\n    $this->adminConnection = new bbn\\Api\\GitLab($this->getAdminAccessToken(), $this->server->host);\n  }",
            "startLine": 47,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "idServer",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "erver"
                }
            ]
        },
        "getConnection": {
            "name": "getConnection",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $asAdmin = false)\n  {\n    return $asAdmin ? $this->adminConnection : $this->userConnection;\n  }",
            "startLine": 64,
            "endLine": 67,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "object"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "asAdmin",
                    "position": 0,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "dmin"
                }
            ]
        },
        "getCurrentUser": {
            "name": "getCurrentUser",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->getConnection()->getUser();\n  }",
            "startLine": 73,
            "endLine": 76,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getProjectsList": {
            "name": "getProjectsList",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(int $page = 1, int $perPage = 25)\n  {\n    $list = $this->getConnection()->getProjectsList($page, $perPage) ?: [];\n    $list['data'] = \\array_map([$this, 'normalizeProject'], $list['data']);\n    return $list;\n  }",
            "startLine": 84,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "page",
                    "position": 0,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                },
                {
                    "name": "perPage",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 25,
                    "default_name": "",
                    "description": "age"
                }
            ]
        },
        "getProject": {
            "name": "getProject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject)\n  {\n    if ($proj = $this->getConnection(true)->getProject($idProject, true)) {\n      return $this->normalizeProject((object)$proj);\n    }\n    return null;\n  }",
            "startLine": 96,
            "endLine": 102,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                }
            ]
        },
        "getProjectBranches": {
            "name": "getProjectBranches",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject)\n  {\n    return X::sortBy(\n      \\array_map(\n        [$this, 'normalizeBranch'],\n        $this->getConnection()->getBranches($idProject) ?: []\n      ),\n      'created',\n      'desc'\n    );\n  }",
            "startLine": 109,
            "endLine": 119,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                }
            ]
        },
        "getProjectTags": {
            "name": "getProjectTags",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject)\n  {\n    return $this->getConnection()->getTags($idProject) ?: [];\n  }",
            "startLine": 126,
            "endLine": 129,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                }
            ]
        },
        "getProjectUsers": {
            "name": "getProjectUsers",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject)\n  {\n    return \\array_map([$this, 'normalizeMember'], $this->getConnection(true)->getProjectUsers($idProject) ?: []);\n  }",
            "startLine": 136,
            "endLine": 139,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                }
            ]
        },
        "getProjectUsersRoles": {
            "name": "getProjectUsersRoles",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return bbn\\Api\\GitLab::$accessLevels;\n  }",
            "startLine": 145,
            "endLine": 148,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getProjectUsersEvents": {
            "name": "getProjectUsersEvents",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject)\n  {\n    return \\array_map([$this, 'normalizeEvent'], $this->getConnection()->getUsersEvents($idProject) ?: []);\n  }",
            "startLine": 155,
            "endLine": 158,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                }
            ]
        },
        "getProjectEvents": {
            "name": "getProjectEvents",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject)\n  {\n    return \\array_map([$this, 'normalizeEvent'], $this->getConnection()->getEvents($idProject) ?: []);\n  }",
            "startLine": 165,
            "endLine": 168,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                }
            ]
        },
        "getProjectCommitsEvents": {
            "name": "getProjectCommitsEvents",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject)\n  {\n    return \\array_values(\n      \\array_filter(\n        \\array_map(\n          [$this, 'normalizeEvent'],\n          $this->getConnection()->getCommitsEvents($idProject) ?: []\n        ),\n        function($e){\n          return $e['type'] === 'commit';\n        }\n      )\n    );\n  }",
            "startLine": 175,
            "endLine": 188,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                }
            ]
        },
        "getProjectLabels": {
            "name": "getProjectLabels",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject)\n  {\n    return X::sortBy(\\array_map(\n      [$this, 'normalizeLabel'],\n      $this->getConnection()->getProjectLabels($idProject) ?: []\n    ), 'name', 'asc');\n  }",
            "startLine": 195,
            "endLine": 201,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                }
            ]
        },
        "getUsers": {
            "name": "getUsers",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return \\array_map([$this, 'normalizeUser'], $this->getConnection(true)->getUsers() ?: []);\n  }",
            "startLine": 207,
            "endLine": 210,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "normalizeBranch": {
            "name": "normalizeBranch",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(object $branch)\n  {\n    return [\n      'id' => $branch->commit->id,\n      'ref' => $branch->commit->short_id,\n      'name' => $branch->name,\n      'created' => Date::format($branch->commit->created_at, 'dbdate'),\n      'default' => $branch->default,\n      'author' => [\n        'id' => '',\n        'name' => $branch->commit->author_name,\n        'username' => '',\n        'email' => $branch->commit->author_email\n      ],\n      'url' => $branch->web_url\n    ];\n  }",
            "startLine": 217,
            "endLine": 233,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "branch",
                    "position": 0,
                    "type": "object",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "normalizeEvent": {
            "name": "normalizeEvent",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(object $event)\n  {\n    $data = [\n      'id' => $event->id,\n      'created' => Date::format($event->created_at, 'dbdate'),\n      'author' => $this->normalizeUser($event->author),\n      'type' => '',\n      'title' => '',\n      'text' => '',\n      'originalEvent' => $event\n    ];\n    switch ($event->action_name) {\n      case 'pushed to':\n        $data = X::mergeArrays($data, [\n          'type' => 'commit',\n          'text' => $event->push_data->commit_title,\n          'branch' => $event->push_data->ref\n        ]);\n        break;\n      case 'pushed new':\n        $data = X::mergeArrays($data, [\n          'type' => 'branch',\n          'text' => X::_('Branch created'),\n          'branch' => $event->push_data->ref\n        ]);\n        break;\n      case 'imported':\n        $data = X::mergeArrays($data, [\n          'type' => 'import',\n          'title' => X::_('Project imported')\n        ]);\n        break;\n      case 'removed':\n      case 'deleted':\n        if (isset($event->push_data)) {\n          $data = X::mergeArrays($data, [\n            'type' => 'branch',\n            'title' => X::_('Branch removed'),\n            'branch' => $event->push_data->ref\n          ]);\n        }\n        break;\n      case 'accepted':\n        if (isset($event->target_type) && ($event->target_type === 'MergeRequest')) {\n          $data = X::mergeArrays($data, [\n            'type' => 'merge',\n            'title' => X::_('Merge request accepted'),\n            'text' => $event->target_title ?: ''\n          ]);\n        }\n        break;\n      case 'opened':\n        if (isset($event->target_type) && ($event->target_type === 'MergeRequest')) {\n          $data = X::mergeArrays($data, [\n            'type' => 'merge',\n            'title' => X::_('Merge request created'),\n            'text' => $event->target_title ?: ''\n          ]);\n        }\n        break;\n      case 'joined':\n        $data = X::mergeArrays($data, [\n          'type' => 'user',\n          'title' => X::_('Has been included among the users of the project')\n        ]);\n        break;\n      case 'left':\n        $data = X::mergeArrays($data, [\n          'type' => 'user',\n          'title' => X::_('Has been removed from project users')\n        ]);\n        break;\n    }\n    return $data;\n  }",
            "startLine": 240,
            "endLine": 314,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "event",
                    "position": 0,
                    "type": "object",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "normalizeUser": {
            "name": "normalizeUser",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(object $user)\n  {\n    return [\n      'id' => $user->id,\n      'name' => $user->name,\n      'username' => $user->username,\n      'email' => $user->email ?? '',\n      'avatar' => $user->avatar_url,\n      'url' => $user->web_url\n    ];\n  }",
            "startLine": 321,
            "endLine": 331,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "object",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "normalizeMember": {
            "name": "normalizeMember",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(object $member)\n  {\n    return X::mergeArrays([\n      'created' => Date::format($member->created_at, 'dbdate'),\n      'author' => !empty($member->created_by) ? $this->normalizeUser($member->created_by) : [],\n      'expire' => !empty($member->expires_at) ? Date::format($member->expires_at, 'dbdate') : '',\n      'role' => $this->getProjectUsersRoles()[$member->access_level]\n    ], $this->normalizeUser($member));\n  }",
            "startLine": 338,
            "endLine": 346,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "member",
                    "position": 0,
                    "type": "object",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "normalizeLabel": {
            "name": "normalizeLabel",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(object $label)\n  {\n    return [\n      'id' => $label->id,\n      'name' => $label->name,\n      'description' => $label->description ?: '',\n      'backgroundColor' => $label->color,\n      'fontColor' => $label->text_color,\n      'openedIssues' => $label->open_issues_count,\n      'closedIssues' => $label->closed_issues_count\n    ];\n  }",
            "startLine": 353,
            "endLine": 364,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "label",
                    "position": 0,
                    "type": "object",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "normalizeProject": {
            "name": "normalizeProject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(object $project)\n  {\n    return [\n      'id' => $project->id,\n      'type' => 'git',\n      'name' => $project->name,\n      'fullname' => $project->name_with_namespace,\n      'description' => $project->description ?: '',\n      'path' => $project->path,\n      'fullpath' => $project->path_with_namespace,\n      'url' => $project->web_url,\n      'urlGit' => $project->http_url_to_repo,\n      'urlSsh' => $project->ssh_url_to_repo,\n      'namespace' => (object)[\n        'id' => $project->namespace->id,\n        'idParent' => $project->namespace->parent_id,\n        'name' => $project->namespace->name,\n        'path' => $project->namespace->path,\n        'fullpath' => $project->namespace->full_path,\n        'url' => $project->namespace->web_url\n      ],\n      'created' => Date::format($project->created_at, 'dbdate'),\n      'creator' => $project->creator_id,\n      'private' => !empty($project->owner),\n      'visibility' => $project->visibility,\n      'defaultBranch' => $project->default_branch,\n      'archived' => $project->archived,\n      'avatar' => $project->avatar_url,\n      'license' => (object)[\n        'name' => $project->license->name,\n        'code' => $project->license->nickname\n      ],\n      'noCommits' => $project->statistics['commit_count'],\n      'size' => $project->statistics['repository_size'],\n      'noForks' => $project->forks_count,\n      'noStars' => $project->star_count\n    ];\n  }",
            "startLine": 371,
            "endLine": 408,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "project",
                    "position": 0,
                    "type": "object",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "normalizeIssue": {
            "name": "normalizeIssue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(object $issue)\n  {\n    return [\n      'id' => $issue->id,\n      'iid' => $issue->iid,\n      'title' => $issue->title,\n      'description' => $issue->description ?: '',\n      'url' => $issue->web_url,\n      'author' => $this->normalizeUser((object)$issue->author),\n      'created' => Date::format($issue->created_at, 'dbdate'),\n      'updated' => !empty($issue->updated_at) ?\n        Date::format($issue->updated_at, 'dbdate') :\n        Date::format($issue->created_at, 'dbdate'),\n      'closed' => !empty($issue->closed_at) ? Date::format($issue->closed_at, 'dbdate') : '',\n      'closedBy' => !empty($issue->closed_by) ? $this->normalizeUser((object)$issue->closed_by) : [],\n      'assigned' => !empty($issue->assignees) ? $this->normalizeUser((object)$issue->assignees[0]) : [],\n      'private' => $issue->confidential,\n      'labels' => $issue->labels,\n      'state' => $issue->state,\n      'notes' => $issue->user_notes_count,\n      'tasks' => [\n        'count' => $issue->task_completion_status->count ?: 0,\n        'completed' => $issue->task_completion_status->completed_count ?: 0,\n      ],\n      'originalIssue' => $issue\n    ];\n  }",
            "startLine": 415,
            "endLine": 441,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "issue",
                    "position": 0,
                    "type": "object",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "insertBranch": {
            "name": "insertBranch",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject, string $branch, string $fromBranch)\n  {\n    return $this->getConnection()->insertBranch($idProject, $branch, $fromBranch);\n  }",
            "startLine": 450,
            "endLine": 453,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                },
                {
                    "name": "branch",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fromBranch",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ranch"
                }
            ]
        },
        "deleteBranch": {
            "name": "deleteBranch",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject, string $branch)\n  {\n    return $this->getConnection()->deleteBranch($idProject, $branch);\n  }",
            "startLine": 461,
            "endLine": 464,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                },
                {
                    "name": "branch",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "insertProjectUser": {
            "name": "insertProjectUser",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject, int $idUser, int $idRole)\n  {\n    return $this->getConnection()->insertProjectUser($idProject, $idUser, $idRole);\n  }",
            "startLine": 473,
            "endLine": 476,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                },
                {
                    "name": "idUser",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ser"
                },
                {
                    "name": "idRole",
                    "position": 2,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ols"
                }
            ]
        },
        "removeProjectUser": {
            "name": "removeProjectUser",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject, int $idUser)\n  {\n    return $this->getConnection()->removeProjectUser($idProject, $idUser);\n  }",
            "startLine": 484,
            "endLine": 487,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                },
                {
                    "name": "idUser",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ser"
                }
            ]
        },
        "getProjectIssues": {
            "name": "getProjectIssues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject)\n  {\n    return \\array_map(\n      [$this, 'normalizeIssue'],\n      $this->getConnection()->getIssues($idProject)\n    );\n  }",
            "startLine": 494,
            "endLine": 500,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                }
            ]
        },
        "getProjectIssue": {
            "name": "getProjectIssue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject, int $idIssue)\n  {\n    return $this->normalizeIssue((object)$this->getConnection(true)->getIssue($idIssue));\n  }",
            "startLine": 507,
            "endLine": 510,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                },
                {
                    "name": "idIssue",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "createProjectIssue": {
            "name": "createProjectIssue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject, string $title, string $description = '', array $labels = [], int $assigned = NULL, bool $private = false, string $date = '')\n  {\n    string $title,\n    string $description = '',\n    array $labels = [],\n    int $assigned = null,\n    bool $private = false,\n    string $date = ''\n  ): ?array\n  {\n    if ($issue = $this->getConnection()->createIssue($idProject, $title, $description, $labels, $assigned, $private, $date)) {\n      return $this->normalizeIssue((object)$issue);\n    }\n    return null;\n  }",
            "startLine": 523,
            "endLine": 537,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 2,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "description",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "labels",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "assigned",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 5,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "date",
                    "position": 6,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "editProjectIssue": {
            "name": "editProjectIssue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject, int $idIssue, string $title, string $description = '', array $labels = [], int $assigned = NULL, bool $private = false)\n  {\n    int $idIssue,\n    string $title,\n    string $description = '',\n    array $labels = [],\n    int $assigned = null,\n    bool $private = false\n  ): ?array\n  {\n    if (($i = $this->getConnection(true)->getIssue($idIssue))\n      && !empty($i['iid'])\n      && ($issue = $this->getConnection()->editIssue($idProject, $i['iid'], $title, $description, $labels, $assigned, $private))\n    ) {\n      return $this->normalizeIssue((object)$issue);\n    }\n    return null;\n  }",
            "startLine": 549,
            "endLine": 566,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 3,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                },
                {
                    "name": "idIssue",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "description",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "labels",
                    "position": 4,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "assigned",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 6,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "closeProjectIssue": {
            "name": "closeProjectIssue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject, int $idIssue)\n  {\n    if (($i = $this->getConnection(true)->getIssue($idIssue))\n      && !empty($i['iid'])\n      && ($issue = $this->getConnection()->closeIssue($idProject, $i['iid']))\n    ) {\n      return $this->normalizeIssue((object)$issue);\n    }\n    return null;\n  }",
            "startLine": 574,
            "endLine": 583,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                },
                {
                    "name": "idIssue",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ssue"
                }
            ]
        },
        "reopenProjectIssue": {
            "name": "reopenProjectIssue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject, int $idIssue)\n  {\n    if (($i = $this->getConnection(true)->getIssue($idIssue))\n      && !empty($i['iid'])\n      && ($issue = $this->getConnection()->reopenIssue($idProject, $i['iid']))\n    ) {\n      return $this->normalizeIssue((object)$issue);\n    }\n    return null;\n  }",
            "startLine": 591,
            "endLine": 600,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                },
                {
                    "name": "idIssue",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ssue"
                }
            ]
        },
        "assignProjectIssue": {
            "name": "assignProjectIssue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject, int $idIssue, int $idUser)\n  {\n    if (($i = $this->getConnection(true)->getIssue($idIssue))\n      && !empty($i['iid'])\n      && ($issue = $this->getConnection()->assignIssue($idProject, $i['iid'], $idUser))\n    ) {\n      return $this->normalizeIssue((object)$issue);\n    }\n    return null;\n  }",
            "startLine": 609,
            "endLine": 618,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                },
                {
                    "name": "idIssue",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ssue"
                },
                {
                    "name": "idUser",
                    "position": 2,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ser"
                }
            ]
        },
        "getProjectIssueComment": {
            "name": "getProjectIssueComment",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject, int $idIssue, int $idComment)\n  {\n    if (($i = $this->getConnection(true)->getIssue($idIssue))\n      && !empty($i['iid'])\n      && ($comment = $this->getConnection()->getIssueNote($idProject, $i['iid'], $idComment))\n    ){\n      return $this->normalizeIssueComment((object)$comment);\n    }\n    return [];\n  }",
            "startLine": 626,
            "endLine": 635,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                },
                {
                    "name": "idIssue",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ssue"
                },
                {
                    "name": "idComment",
                    "position": 2,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getProjectIssueComments": {
            "name": "getProjectIssueComments",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject, int $idIssue)\n  {\n    if (($i = $this->getConnection(true)->getIssue($idIssue))\n      && !empty($i['iid'])\n    ){\n      return \\array_map(\n        [$this, 'normalizeIssueComment'],\n        $this->getConnection()->getIssueNotes($idProject, $i['iid'])\n      );\n    }\n    return [];\n  }",
            "startLine": 643,
            "endLine": 654,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                },
                {
                    "name": "idIssue",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ssue"
                }
            ]
        },
        "normalizeIssueComment": {
            "name": "normalizeIssueComment",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(object $comment)\n  {\n    return [\n      'id' => $comment->id,\n      'author' => $this->normalizeUser((object)$comment->author),\n      'created' => Date::format($comment->created_at, 'dbdate'),\n      'updated' => !empty($comment->updated_at) ?\n        Date::format($comment->updated_at, 'dbdate') :\n        Date::format($comment->created_at, 'dbdate'),\n      'content' => $comment->body,\n      'auto' => $comment->system,\n      'private' => $comment->internal,\n      'attachment' => $comment->attachment,\n      'originalComment' => $comment\n    ];\n  }",
            "startLine": 661,
            "endLine": 676,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "comment",
                    "position": 0,
                    "type": "object",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "insertProjectIssueComment": {
            "name": "insertProjectIssueComment",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject, int $idIssue, string $content, bool $pvt = false, string $date = '')\n  {\n    if (($i = $this->getConnection(true)->getIssue($idIssue))\n      && !empty($i['iid'])\n      && ($comment = $this->getConnection()->createIssueNote($idProject, $i['iid'], $content, $pvt, $date))\n    ) {\n      return $this->normalizeIssueComment((object)$comment);\n    }\n    return null;\n  }",
            "startLine": 687,
            "endLine": 696,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 3,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                },
                {
                    "name": "idIssue",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ssue"
                },
                {
                    "name": "content",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "pvt",
                    "position": 3,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "date",
                    "position": 4,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "editProjectIssueComment": {
            "name": "editProjectIssueComment",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject, int $idIssue, int $idComment, string $content, bool $pvt = false)\n  {\n    if (($i = $this->getConnection(true)->getIssue($idIssue))\n      && !empty($i['iid'])\n      && ($comment = $this->getConnection()->editIssueNote($idProject, $i['iid'], $idComment, $content, $pvt))\n    ) {\n      return $this->normalizeIssueComment((object)$comment);\n    }\n    return null;\n  }",
            "startLine": 707,
            "endLine": 716,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 4,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                },
                {
                    "name": "idIssue",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ssue"
                },
                {
                    "name": "idComment",
                    "position": 2,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "omment"
                },
                {
                    "name": "content",
                    "position": 3,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "pvt",
                    "position": 4,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "deleteProjectIssueComment": {
            "name": "deleteProjectIssueComment",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject, int $idIssue, int $idComment)\n  {\n    if (($i = $this->getConnection(true)->getIssue($idIssue))\n      && !empty($i['iid'])\n    ){\n      return $this->getConnection()->deleteIssueNote($idProject, $i['iid'], $idComment);\n    }\n    return false;\n  }",
            "startLine": 725,
            "endLine": 733,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                },
                {
                    "name": "idIssue",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ssue"
                },
                {
                    "name": "idComment",
                    "position": 2,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "omment"
                }
            ]
        },
        "createProjectLabel": {
            "name": "createProjectLabel",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject, string $name, string $color)\n  {\n    if ($label = $this->getConnection()->createProjectLabel($idProject, $name, $color)) {\n      return $this->normalizeLabel((object)$label);\n    }\n    return null;\n  }",
            "startLine": 742,
            "endLine": 748,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "color",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addLabelToProjectIssue": {
            "name": "addLabelToProjectIssue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject, int $idIssue, string $label)\n  {\n    if (($i = $this->getConnection(true)->getIssue($idIssue))\n      && !empty($i['iid'])\n    ){\n      return $this->getConnection()->addLabelToProjectIssue($idProject, $i['iid'], $label);\n    }\n    return false;\n  }",
            "startLine": 757,
            "endLine": 765,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                },
                {
                    "name": "idIssue",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ssue"
                },
                {
                    "name": "label",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "removeLabelFromProjectIssue": {
            "name": "removeLabelFromProjectIssue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProject, int $idIssue, string $label)\n  {\n    if (($i = $this->getConnection(true)->getIssue($idIssue))\n      && !empty($i['iid'])\n    ){\n      return $this->getConnection()->removeLabelFromProjectIssue($idProject, $i['iid'], $label);\n    }\n    return false;\n  }",
            "startLine": 774,
            "endLine": 782,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProject",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roject"
                },
                {
                    "name": "idIssue",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ssue"
                },
                {
                    "name": "label",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "analyzeWebhook": {
            "name": "analyzeWebhook",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $data)\n  {\n    $d = [\n      'idProject' => $data['project_id'] ?? null,\n      'idUser' => $data['user_id'] ?? (!empty($data['user']) ? $data['user']['id'] : null),\n    ];\n    switch ($data['event_type']) {\n      case 'note':\n        if (empty($data['object_attributes']['system'])) {\n          $d = X::mergeArrays($d, [\n            'type' => 'comment',\n            'action' => 'insert',\n            'idIssue' => $data['issue']['id'],\n            'idComment' => $data['object_attributes']['id'],\n            'text' => $data['object_attributes']['note'],\n            'created' => Date::format($data['object_attributes']['created_at'], 'dbdate'),\n            'updated' => !empty($data['object_attributes']['updated_at']) ?\n              Date::format($data['object_attributes']['updated_at'], 'dbdate') :\n              Date::format($data['object_attributes']['created_at'], 'dbdate')\n          ]);\n        }\n        break;\n    }\n    return $d;\n  }",
            "startLine": 785,
            "endLine": 809,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hasAdminAccessToken": {
            "name": "hasAdminAccessToken",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id = '')\n  {\n    return !!$this->getAdminAccessToken($id ?: $this->idServer);\n  }",
            "startLine": 24,
            "endLine": 27,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getAdminAccessToken": {
            "name": "getAdminAccessToken",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id = '')\n  {\n    return $this->pwd->get($id ?: $this->idServer);\n  }",
            "startLine": 30,
            "endLine": 33,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUserAccessToken": {
            "name": "getUserAccessToken",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id = '')\n  {\n    if (!empty($this->idUser)) {\n      $user = new User($this->db, ['id' => $this->idUser]);\n      $pref = new Preferences($this->db);\n      $pref->setUser($user);\n    }\n    else {\n      if (!($user = User::getInstance())) {\n        throw new \\Exception(X::_('No User class instance found'));\n      }\n      if (X::isCli()\n        && defined('BBN_EXTERNAL_USER_ID')\n        && ($user->getId() === BBN_EXTERNAL_USER_ID)\n      ) {\n        return $this->getAdminAccessToken($id);\n      }\n      if (!($pref = Preferences::getInstance())) {\n        throw new \\Exception(X::_('No User\\Preferences class instance found'));\n      }\n    }\n    if (!($userPref = $pref->getByOption($id ?: $this->idServer))) {\n      throw new \\Exception(X::_('No user\\'s preference found for the server %s', $id ?: $this->idServer));\n    }\n    else {\n      $idPref = $userPref[$pref->getFields()['id']];\n    }\n    if (!($token = $this->pwd->userGet($idPref, $user))) {\n      throw new \\Exception(X::_('No user\\'s access token found for the server %s', $id ?: $this->idServer));\n    }\n    return $token;\n  }",
            "startLine": 36,
            "endLine": 67,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getServer": {
            "name": "getServer",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Vcs\\GitLab",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id = '')\n  {\n    if (!($server = $this->opt->option($id ?: $this->idServer))) {\n      throw new \\Exception(X::_('No server found with ID %s', $id ?: $this->idServer));\n    }\n    return $this->normalizeServer($server);\n  }",
            "startLine": 70,
            "endLine": 76,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "object"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": [],
    "constants": null,
    "summary": "VCS\\Git class",
    "description": "",
    "description_parts": []
}