{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Ide",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\Optional",
        "bbn\\Mvc\\Common"
    ],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
    "startLine": 13,
    "endLine": 3680,
    "contentConstructor": {
        "file": "bbn\\Appui\\Ide",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "ide constructor.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db, bbn\\Appui\\Option $options, $routes, bbn\\User\\Preferences $pref, $project = '', $plugin = 'appui-ide')\n  {\n    $this->db      = $db;\n    $this->options = $options;\n    $this->routes  = $routes;\n    $this->pref    = $pref;\n    $this->fs      = new \\bbn\\File\\System();\n    $this->origin  = $plugin;\n    $this->setProject($project);\n  }",
            "startLine": 105,
            "endLine": 114,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 4,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "options",
                    "position": 1,
                    "type": "bbn\\Appui\\Option",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "routes",
                    "position": 2,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "pref",
                    "position": 3,
                    "type": "bbn\\User\\Preferences",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "project",
                    "position": 4,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 5,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "appui-ide",
                    "default_name": ""
                }
            ]
        },
        "init": {
            "name": "init",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if  (!empty($this->project)) {\n      $this->repository_default = '';\n      $this->repositories       = $this->getRepositories();\n      foreach($this->repositories as $i => $rep){\n        if (empty($this->repository_default)) {\n          $this->repository_default = $rep['name'];\n        }\n\n        $this->repositories[$i]['root_path'] = $this->getRootPath($rep['name']);\n        if (!empty($rep['default'])) {\n          $this->repository_default = $rep['name'];\n        }\n      }\n    }\n  }",
            "startLine": 117,
            "endLine": 133,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getDefaultRepository": {
            "name": "getDefaultRepository",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->repository_default;\n  }",
            "startLine": 136,
            "endLine": 139,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "setProject": {
            "name": "setProject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($project)\n  {\n    $project_name = false;\n    \/\/case project is uid\n    if (\\bbn\\Str::isUid($project) && !empty($rep = $this->options->option($project))) {\n      $this->projects = new \\bbn\\Appui\\Project($this->db, $project);\n      $project_name   = $rep['name'];\n    }\n    \/\/case project is name\n    elseif((strlen($project) > 0) && !empty($opt = $this->options->fromCode($project, 'list', self::IDE_PROJECTS, self::BBN_APPUI))) {\n      $this->projects = new \\bbn\\Appui\\Project($this->db, $opt);\n      $project_name   = $project;\n    }\n    \/\/ case project is not defined get default\n    elseif (defined('BBN_APP_NAME') && !empty($opt = $this->options->fromCode(constant('BBN_APP_NAME'), 'list', self::IDE_PROJECTS, self::BBN_APPUI))) {\n      $this->projects = new \\bbn\\Appui\\Project($this->db, $opt);\n      $project_name   = constant('BBN_APP_NAME');\n    }\n\n    $this->project = $project_name;\n    if ($project_name && !empty($this->projects)) {\n      $this->init();\n      $this->_ide_path();\n    }\n\n    return $project_name;\n  }",
            "startLine": 142,
            "endLine": 168,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "project",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isProject": {
            "name": "isProject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($url)\n  {\n    $rep = $this->repositoryFromUrl($url);\n    \/\/$repository = $this->repositories($rep);\n    $repository = $this->repository($rep);\n    if (is_array($repository) && !empty($repository)) {\n      if (($repository['alias_code'] === 'bbn-project')) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 171,
            "endLine": 183,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOrigin": {
            "name": "getOrigin",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->origin;\n  }",
            "startLine": 186,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "isComponent": {
            "name": "isComponent",
            "summary": "Checks if a repository is a Component manager",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($rep)\n  {\n    \/\/$rep = $this->repositories($rep);\n    $rep = $this->repository($rep);\n    if ($rep && isset($rep['tabs']) && ($rep['alias_code'] === \"components\")) {\n      return true;\n    }\n\n    return false;\n  }",
            "startLine": 198,
            "endLine": 207,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "rep",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isComponentFromUrl": {
            "name": "isComponentFromUrl",
            "summary": "Checks if a repository is a Component from URL",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($url)\n  {\n    $ele = explode(\"\/\",$url);\n    if (is_array($ele)) {\n      if ($ele[2] === 'components') {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 216,
            "endLine": 226,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isLibFromUrl": {
            "name": "isLibFromUrl",
            "summary": "Checks if is a Lib from URL",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($url)\n  {\n    $ele = explode(\"\/\",$url);\n    if (is_array($ele)) {\n      if ($ele[2] === 'lib') {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 235,
            "endLine": 245,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isCliFromUrl": {
            "name": "isCliFromUrl",
            "summary": "Checks if is a Cli from URL",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($url)\n  {\n    $ele = explode(\"\/\",$url);\n    if (is_array($ele)) {\n      if ($ele[2] === 'cli') {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 254,
            "endLine": 264,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "listTabsWithFile": {
            "name": "listTabsWithFile",
            "summary": "Function that returns the list of tab that contains a file or not for mvc and component",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($type, $path, $repository)\n  {\n    $list = [];\n    $root = $this->getRootPath($repository);\n    if ($type === 'mvc') {\n      if (is_string($path)) {\n        if (strpos($path, 'mvc\/') === 0) {\n          $path = substr($path, 4);\n        }\n\n        if (strpos($path, '\/mvc') === 0) {\n          $path = substr($path, 5);\n        }\n      }\n    }\n\n    $tabs = $this->tabsOfTypeProject($type);\n\n    if (is_string($path) && is_array($tabs)) {\n      foreach($tabs as $tab){\n        $exist = false;\n        if ($type === 'mvc') {\n          $file = $root.'mvc\/'.$tab['path'].$path.'.';\n        }\n        elseif ($type === 'components') {\n          $file = $root. $path.'.';\n        }\n\n        foreach($tab['extensions'] as $ext){\n          if ($this->fs->exists($file.$ext['ext'])) {\n            $exist = true;\n            break;\n          }\n        }\n\n        if (($exist === false) && !in_array($tab['url'], $list)) {\n          $list[] = $tab['url'];\n        }\n      }\n\n      return $list;\n    }\n\n    return false;\n  }",
            "startLine": 274,
            "endLine": 318,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "path project"
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "repository",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hasError": {
            "name": "hasError",
            "summary": "Returns true if the error function has been called.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return !empty($this->last_error);\n  }",
            "startLine": 326,
            "endLine": 329,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getLastError": {
            "name": "getLastError",
            "summary": "Returns last recorded error, and null if none.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_error;\n  }",
            "startLine": 337,
            "endLine": 340,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getRepositories": {
            "name": "getRepositories",
            "summary": "Makes the repositories' configurations.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($project_name = '')\n  {\n    return $this->projects ? $this->projects->getRepositories($project_name) : null;\n  }",
            "startLine": 352,
            "endLine": 355,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "project_name",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "repository": {
            "name": "repository",
            "summary": "Gets a repository's configuration.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name)\n  {\n    return $this->projects ? $this->projects->repository($name) : null;\n  }",
            "startLine": 364,
            "endLine": 367,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "repositoryById": {
            "name": "repositoryById",
            "summary": "Returns the repository object basing on the given id",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    return $this->projects ? $this->projects->repositoryById($id) : null;\n  }",
            "startLine": 376,
            "endLine": 379,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "repositoryFromUrl": {
            "name": "repositoryFromUrl",
            "summary": "Returns the repository's name or object from an URL.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($url, $obj = false)\n  {\n    \/\/search repository\n    return $this->projects ? $this->projects->repositoryFromUrl($url, $obj) : null;\n  }",
            "startLine": 389,
            "endLine": 393,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "obj",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "isMVC": {
            "name": "isMVC",
            "summary": "Checks if a repository is a MVC",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $rep)\n  {\n    if (isset($rep['tabs'])\n        && ($rep['alias_code'] === 'mvc')\n    ) {\n      return true;\n    }\n\n    return false;\n  }",
            "startLine": 402,
            "endLine": 411,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "rep",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isMVCFromUrl": {
            "name": "isMVCFromUrl",
            "summary": "Checks if a repository is a MVC from URL",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($url)\n  {\n    $ele = explode(\"\/\",$url);\n    if (is_array($ele)) {\n      if ($ele[2] === 'mvc') {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 420,
            "endLine": 430,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "decipherPath": {
            "name": "decipherPath",
            "summary": "Replaces the constant at the first part of the path with its value.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    \/\/return $this->projects::decipherPath($st);\n    $st = \\bbn\\Str::parsePath($st);\n    \/\/get root absolute of the file\n    foreach($this->repositories as $i => $rep){\n      if (strpos($st, $rep['name']) === 0) {\n        $root    = $rep['root_path'];\/\/$this->getRootPath($i);\n        $bit_rep = explode('\/', $i);\n        break;\n      }\n    }\n\n    \/\/the root of the file is removed\n    if (!empty($root) && !empty($bit_rep)) {\n      $bits      = explode('\/', $st);\n      $part_bits = array_diff($bits, $bit_rep);\n      array_shift($part_bits);\n      \/** @var string $path The path that will be returned *\/\n      $path = $root.'\/'.implode('\/', $part_bits);\n      return \\bbn\\Str::parsePath($path);\n    }\n\n    return false;\n  }",
            "startLine": 439,
            "endLine": 463,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getAppPath": {
            "name": "getAppPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->projects->getAppPath();\n  }",
            "startLine": 466,
            "endLine": 469,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getLibPath": {
            "name": "getLibPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->projects->getLibPath();\n  }",
            "startLine": 472,
            "endLine": 475,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getDataPath": {
            "name": "getDataPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin = '')\n  {\n    if ($this->project !== 'apst-app') {\n      if ((strlen($plugin) > 0)\n          && empty(array_search(substr($plugin, strlen('appui-')),array_keys($this->routes)))\n      ) {\n        return false;\n      }\n    }\n\n    return $this->projects->getDataPath($plugin);\n  }",
            "startLine": 478,
            "endLine": 489,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getNameProject": {
            "name": "getNameProject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->project;\n  }",
            "startLine": 492,
            "endLine": 495,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getRootPath": {
            "name": "getRootPath",
            "summary": "Gets the real root path from a repository's id as recorded in the options.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($rep)\n  {\n    return $this->projects->getRootPath($rep);\n  }",
            "startLine": 504,
            "endLine": 507,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "rep",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "load": {
            "name": "load",
            "summary": "(Load)s a file.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($url)\n  {\n    $real = $this->urlToReal($url, true);\n\n    if (is_array($real)\n        && !empty($real['file'])\n        && !empty($real['mode'])\n        && !empty($real['repository'])\n    ) {\n      $this->_set_current_file($real['file']);\n      $f = [\n        'mode' => $real['mode'],\n        'tab' => $real['tab'],\n        'ssctrl' => $real['ssctrl'] ?? 0,\n        'extension' => \\bbn\\Str::fileExt(self::$current_file),\n        'permissions' => false,\n        'selections' => false,\n        'line' => false,\n        'char' => false,\n        'marks' => false,\n        'repository' => $real['repository']['code'],\n        \/\/'file' => self::$current_file\n      ];\n\n      if ($this->fs->isFile(self::$current_file)) {\n        $f['value'] = $this->fs->getContents(self::$current_file);\n\n        $root = $this->getRootPath($real['repository']['name']);\n\n        $file      = substr($real['file'], strlen($root));\n        $file_name = \\bbn\\Str::fileExt($real['file'],1)[0];\n\n        $file_path = substr($url,  strlen($real['repository']['name']) + 1);\n\n        $file_path = substr($file_path, 0, strpos($file_path,$file_name) - 1);\n\n        $val = [\n          'repository' => $real['repository'],\n          'filePath' => dirname($file),\n          'ssctrl' => $real['ssctrl'] ?? 0,\n          'filename' => $file_name,\n          'component_vue' => $this->isComponentFromUrl($url),\n          'extension' => \\bbn\\Str::fileExt($real['file'],1)[1],\n          'full_path' => \\bbn\\Str::parsePath($real['repository']['path'].'\/'.$file),\n          'path' => $file_path, \/\/ substr($file_path,  strlen($real['repository']['path'])+1),\n          'tab' => $real['tab']\n        ];\n\n        if ($preferences = $this->getFilePreferences($val)) {\n          $f = array_merge($f, $preferences);\n        }\n\n        if (($permissions = $this->getFilePermissions())\n            && ($this->project === BBN_APP_NAME)\n        ) {\n          $f = array_merge($f, $permissions);\n          \/*if ( $id_opt = $this->optionId() ){\n            $val_opt = $this->options->option($id_opt);\n          }*\/\n          \/*if( !empty($val_opt) ){\n            foreach ( $f as $n => $v ){\n              if ( isset($val_opt[$n]) ){\n                $f[$n] = $val_opt[$n];\n              }\n            }\n          }*\/\n        }\n      }\n      elseif (!empty($real['tab'])\n          && ( ($i = \\bbn\\X::find($real['repository']['tabs'], ['url' => $real['tab']])) !== null )\n      ) {\n        if(!empty($real['repository']['tabs'][$i]['extensions'][0]['default'])) {\n          $f['value'] = $real['repository']['tabs'][$i]['extensions'][0]['default'];\n        }\n      }\n      elseif (!empty($real['repository']['extensions'][0]['default'])) {\n        $f['value'] = $real['repository']['extensions'][0]['default'];\n      }\n      else {\n        $f['value'] = '';\n      }\n\n      $f['id'] = self::$current_id;\n      return $f;\n    }\n\n    return false;\n  }",
            "startLine": 521,
            "endLine": 608,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "save": {
            "name": "save",
            "summary": "Saves a file.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $file)\n  {\n    if ($this->_set_current_file($this->decipherPath($file['full_path']))) {\n      \/*if ( $this->getOrigin() !== 'appui-ide' ){\n        die(var_dump(self::$current_file, self::$current_id));\n      }*\/\n\n      \/\/ Delete the file if code is empty and if it isn't a super controller\n      if (empty($file['code']) && ($file['tab'] !== '_ctrl')) {\n        if (@unlink(self::$current_file)) {\n          if ($file['extension'] === 'ts') {\n            @unlink(substr(self::$current_file, 0, -2).'js');\n          }\n\n            \/\/temporaney\n          if ($this->getOrigin() !== 'appui-ide') {\n            \/\/ Remove permissions\n            $this->deletePerm();\n          }\n\n          if (!empty(self::$current_id)) {\n            \/\/ Remove ide backups ad file preference\n            $this->_backup_history($file ,'delete');\n          }\n\n          return ['deleted' => true];\n        }\n      }\n\n      \/\/in case of file create or modify history and if exists file prference modify\n      if ($this->fs->isFile(self::$current_file)) {\n        $this->_backup_history($file ,'create');\n        $this->_backup_preference_files($file, $file['state'], 'change');\n      }\n      elseif (!$this->fs->isDir(dirname(self::$current_file))) {\n        $this->fs->createPath(dirname(self::$current_file));\n      }\n\n      if (!empty($file['tab']) && ($file['tab'] === 'php') && !$this->fs->isFile(self::$current_file)) {\n        if (!$this->createPermByReal($file['full_path'])) {\n          return $this->error(X::_(\"Impossible to create the option\"));\n        }\n      }\n\n      if (!file_put_contents(self::$current_file, $file['code'])) {\n        return $this->error(X::_('Error: Save'));\n      }\n\n      if ($file['extension'] === 'ts') {\n        $cmd = \"tsc -t 'ES2015' \";\n        if (!defined('BBN_IS_DEV') || !BBN_IS_DEV) {\n          $cmd .= '--removeComments ';\n        }\n\n        $error = shell_exec($cmd.escapeshellcmd(self::$current_file));\n        if ($error) {\n          return ['success' => true, 'error' => $error];\n        }\n      }\n\n      return ['success' => true];\n    }\n\n    return $this->error(X::_('Error: Save'));\n  }",
            "startLine": 617,
            "endLine": 681,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "createMvcVue": {
            "name": "createMvcVue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 684,
            "endLine": 687,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "createMvcJs": {
            "name": "createMvcJs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 690,
            "endLine": 693,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "createMvc": {
            "name": "createMvc",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 696,
            "endLine": 699,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "createAction": {
            "name": "createAction",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 702,
            "endLine": 705,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "create": {
            "name": "create",
            "summary": "Creates a new file|directory",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    if (X::hasDeepProp($cfg, ['repository', 'path'], true)\n        && X::hasProps($cfg, ['name', 'path'], true)\n        && X::hasProps($cfg, ['is_file', 'extension', 'tab', 'tab_path'])\n    ) {\n      $path = $this->getRootPath($cfg['repository']['name']);\n\n      if (($cfg['repository']['alias_code'] === 'bbn-project') && X::hasProp($cfg, 'template')) {\n        switch ($cfg['template']) {\n          case 'mvc_vue':\n            return;\n            break;\n          case 'mvc_js':\n            return;\n            break;\n          case 'mvc':\n            return;\n            break;\n          case 'action':\n            return;\n            break;\n          default:\n            if (!empty($cfg['type'])) {\n              if ($cfg['type'] === 'components') {\n                $path .= $cfg['path'].$cfg['name'];\n              }\n\n              if ($cfg['type'] === 'mvc') {\n                if ($cfg['path'] === 'mvc\/') {\n                  $path .= 'mvc\/'.$cfg['tab_path'];\n                }\n                else{\n                  $path .= 'mvc\/'.$cfg['tab_path'].$cfg['path'];\n                }\n              }\n\n              if (($cfg['type'] === 'lib') || ($cfg['type'] === 'cli')) {\n                $path .= $cfg['path'];\n              }\n            }\n        }\n      }\n      else {\n        if (!empty($cfg['tab_path'])) {\n          $path .= $cfg['tab_path'];\n        }\n      }\n\n      if (($cfg['path'] !== '.\/') && empty($cfg['type'])) {\n        $path .= $cfg['path'];\n      }\n\n      \/\/ New folder\n      if (empty($cfg['is_file'])) {\n        if ($this->fs->isDir($path.$cfg['name'])) {\n          $this->error(X::_(\"Directory exists\"));\n          return false;\n        }\n\n        if ((($cfg['repository']['alias_code'] !== 'bbn-project'))\n            || (($cfg['repository']['alias_code'] === 'bbn-project') && !empty($cfg['type']))\n            && ($cfg['type'] !== 'components')\n        ) {\n          $path .= $cfg['name'];\n        }\n\n        if (empty($this->fs->createPath($path))) {\n          $this->error(X::_(\"Impossible to create the directory\"));\n          return false;\n        }\n\n        return true;\n      }\n      \/\/ New file\n      elseif (!empty($cfg['is_file']) && !empty($cfg['extension'])) {\n        $file = $path .'\/'. $cfg['name'] . '.' . $cfg['extension'];\n        $file = str_replace('\/\/','\/', $file);\n        if (!$this->fs->isDir($path) && empty($this->fs->createPath($path))) {\n          $this->error(X::_(\"Impossible to create the container directory\"));\n          return false;\n        }\n\n        if ($this->fs->isDir($path)) {\n          if ($this->fs->isFile($file)) {\n            $this->error(X::_(\"File exists\"));\n            return false;\n          }\n\n          if (!file_put_contents($file, $cfg['default_text'])) {\n            $this->error(X::_(\"Impossible to create the file\"));\n            return false;\n          }\n        }\n\n        \/\/ Add item to options table for permissions\n        if ((empty($cfg['type']) || ($cfg['type'] !== 'components'))\n            && !empty($cfg['tab']) && ($cfg['tab_url'] === 'php') && !empty($file)\n        ) {\n          if (!$this->createPermByReal($file)) {\n            return $this->error(X::_(\"Impossible to create the option\"));\n          }\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 714,
            "endLine": 823,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "copy": {
            "name": "copy",
            "summary": "Copies a file or a folder.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->_operations($cfg, 'copy');\n  }",
            "startLine": 832,
            "endLine": 835,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "rename": {
            "name": "rename",
            "summary": "Renames a file or a folder.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->_operations($cfg, 'rename');\n  }",
            "startLine": 844,
            "endLine": 847,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "move": {
            "name": "move",
            "summary": "Moves a file or a folder.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->_operations($cfg, 'move');\n  }",
            "startLine": 856,
            "endLine": 859,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "Renames a file or a folder.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    return $this->_operations($cfg, 'delete');\n  }",
            "startLine": 868,
            "endLine": 871,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getFilePermissions": {
            "name": "getFilePermissions",
            "summary": "Gets file's permissions",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($file = NULL)\n  {\n\n    if (empty($file)) {\n      $file = self::$current_file;\n    }\n\n    if (!empty($file)\n        && ($id_opt = $this->realToPerm($file))\n        && ($opt = $this->options->option($id_opt))\n    ) {\n      $ret = [\n        'permissions' => [\n          'id' => $opt['id'],\n          'code' => $opt['code'],\n          'text' => $opt['text'],\n          'children' => []\n        ]\n      ];\n      if (isset($opt['help'])) {\n        $ret['permissions']['help'] = $opt['help'];\n      }\n\n      $sopt = $this->options->fullOptions($opt['id']);\n      foreach ($sopt as $so){\n        array_push(\n          $ret['permissions']['children'], [\n          'code' => $so['code'],\n          'text' => $so['text']\n          ]\n        );\n      }\n\n      return $ret;\n    }\n\n    return false;\n  }",
            "startLine": 885,
            "endLine": 922,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "createPermByReal": {
            "name": "createPermByReal",
            "summary": "Creates a permission option from a real file\/dir's path",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($file, $type = 'file')\n  {\n    if (!empty($file)\n        \/\/ It must be a controller\n        && (strpos($file, '\/src\/mvc\/public\/') !== false)\n        && ($perm = bbn\\User\\Permissions::getInstance())\n    ) {\n      $is_file = $type === 'file';\n      \/\/ Check if it's an external route\n      if (($root_path = $this->getAppPath().'mvc\/public\/')\n          && (strpos($file, $root_path) === 0)\n      ) {\n        \/\/ Remove root path\n        $f = substr($file, \\strlen($root_path), \\strlen($file) -4);\n      }\n      else {\n        foreach ($this->routes as $r){\n          if (strpos($file, $r['path']) === 0) {\n            \/\/ Remove route\n            $f = substr($file, strlen($r['path']) + strlen('src\/mvc\/public'), -4);\n            \/\/ Add the route's name to path\n            $f = $r['url'] . '\/' . $f;\n            break;\n          }\n        }\n      }\n\n      return !!$perm->fromPath($f, 'access', true);\n    }\n\n    return false;\n  }",
            "startLine": 932,
            "endLine": 963,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The type of real (file\/dir)"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": ""
                }
            ]
        },
        "deletePerm": {
            "name": "deletePerm",
            "summary": "Deletes permission from a real file's path",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($file = NULL)\n  {\n    if (empty($file)) {\n      $file = self::$current_file;\n    }\n\n    if (!empty($file) && ($id_opt = $this->realToPerm($file)) && $this->options->remove($id_opt)) {\n      return true;\n    }\n\n    return false;\n  }",
            "startLine": 972,
            "endLine": 983,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "changePermByReal": {
            "name": "changePermByReal",
            "summary": "Changes permissions to a file\/dir from the old and new real file\/dir's path",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($old, $new, $type = 'file')\n  {\n    $type = strtolower($type);\n    if (!empty($old)\n        && !empty($new)\n        && !empty($this->fs->exists($new))\n        && ($id_opt = $this->realToPerm($old, $type))\n        && !$this->realToPerm($new, $type)\n    ) {\n      $is_file = $type === 'file';\n      $code    = $is_file ? \\bbn\\Str::fileExt(basename($new), 1)[0] : basename($new).'\/';\n      if ($id_parent = $this->createPermByReal(dirname($new).'\/', 'dir')) {\n        $this->options->setCode($id_opt, $code);\n        $this->options->move($id_opt, $id_parent);\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 994,
            "endLine": 1013,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "old",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The new file\/dir's path"
                },
                {
                    "name": "new",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The type (file\/dir)"
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": ""
                }
            ]
        },
        "movePermByReal": {
            "name": "movePermByReal",
            "summary": "Moves permissions to a file\/dir from the old and new real file\/dir's path",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($old, $new, $type = 'file')\n  {\n    $type = strtolower($type);\n    if (!empty($old)\n        && !empty($new)\n        && !empty($this->fs->exists($new))\n    ) {\n      $id_opt     = $this->realToPerm($old, $type);\n      $id_new_opt = $this->realToPerm($new, $type);\n      if (empty($id_new_opt)) {\n        $id_new_opt = $this->createPermByReal(dirname($new).'\/', 'dir');\n      }\n\n      if (($id_opt !== $id_new_opt) && !empty($id_new_opt)) {\n        $is_file = $type === 'file';\n        $code    = $is_file ? \\bbn\\Str::fileExt(basename($new), 1)[0] : basename($new).'\/';\n        if ($id_parent = $this->createPermByReal(dirname($new).'\/', 'dir')) {\n          $this->options->setCode($id_opt, $code);\n          $this->options->move($id_opt, $id_parent);\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
            "startLine": 1024,
            "endLine": 1049,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "old",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The new file\/dir's path"
                },
                {
                    "name": "new",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The type (file\/dir)"
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": ""
                }
            ]
        },
        "realToPerm": {
            "name": "realToPerm",
            "summary": "Returns the permission's id from a real file\/dir's path",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($file, $type = 'file')\n  {\n    if (empty($file)) {\n      $file = self::$current_file;\n    }\n\n    if (empty($file)) {\n      throw new \\Exception(X::_(\"The file can't be empty\"));\n    }\n\n    if (!empty($file)\n        \/\/ It must be a controller\n        && (strpos($file, '\/mvc\/public\/') !== false)\n    ) {\n      $is_file = $type === 'file';\n      $plugin = false;\n      $root_path = $this->getAppPath().'mvc\/public\/';\n      if (strpos($file, $root_path) === 0) {\n        \/\/ Remove root path\n        $f = substr($file, \\strlen($root_path));\n      }\n      \/\/ Internal route\n      if (empty($f)) {\n        \/\/ Check if it's an external route\n        foreach ($this->routes as  $r){\n          if (substr($r['path'], -1) !== '\/') {\n            $r['path'] .= '\/';\n          }\n\n          if (strpos($file, $r['path']) === 0) {\n            $plugin = $r['name'];\n            \/\/ Remove route\n            $f = substr($file, \\strlen($r['path']));\n            \/\/ Remove \/mvc\/public\n            $f = substr($f, \\strlen('src\/mvc\/public'));\n            break;\n          }\n        }\n      }\n\n      if (!empty($f)) {\n        $bits = \\bbn\\X::removeEmpty(explode('\/', $f));\n        $code = $is_file ? basename(array_pop($bits), '.php') : array_pop($bits).'\/';\n        $bits = array_map(\n          function ($b) {\n            return $b.'\/';\n          }, array_reverse($bits)\n        );\n        array_unshift($bits, $code);\n        if ($plugin) {\n          array_push(\n            $bits,\n            'access',\n            'permissions',\n            strpos($plugin, 'appui-') === 0 ? substr($plugin, 6) : $plugin,\n            strpos($plugin, 'appui-') === 0 ? 'appui' : null\n          );\n        }\n        else {\n          array_push($bits, $this->_permissions());\n        }\n\n        return $this->options->fromCode($bits);\n      }\n    }\n\n    return false;\n  }",
            "startLine": 1059,
            "endLine": 1126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path type (file or dir)"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": ""
                }
            ]
        },
        "getFilePreferences": {
            "name": "getFilePreferences",
            "summary": "Gets file's preferences",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg = [])\n  {\n    if (!empty($cfg)) {\n      if (!empty($backup = $this->_get_path_backup($cfg)) && !empty($backup['path_preference'])\n          && $this->fs->exists($backup['path_preference'].$cfg['filename'].'.json')\n      ) {\n        $pref = json_decode($this->fs->getContents($backup['path_preference'].$cfg['filename'].'.json'), true);\n        if (!empty($pref)) {\n          return [\n            'selections' => $pref['selections'] ?: [],\n            'marks' => isset($pref['marks']) ? $pref['marks'] : [],\n            'line' => (int)$pref['line'] ?: 0,\n            'char' => (int)$pref['char'] ?: 0,\n          ];\n        }\n      }\n    }\n\n    return null;\n  }",
            "startLine": 1140,
            "endLine": 1159,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "getTheme": {
            "name": "getTheme",
            "summary": "Get theme current of the project",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $opt_theme = $this->options->fromCode(self::THEME, self::IDE_PATH, self::BBN_APPUI);\n    $pref_arch = $this->pref->getClassCfg();\n    if ($this->pref && $this->projects) {\n      $pref = $this->db->selectOne(\n        $pref_arch['tables']['user_options'],  $pref_arch['arch']['user_options']['id'], [\n        $pref_arch['arch']['user_options']['id_user'] => $this->pref->getUser(),\n        $pref_arch['arch']['user_options']['id_option'] => $this->projects->getId()\n         ]\n      );\n      \/\/if there is no preference, the theme value will take it from the option\n      if (!empty($pref)) {\n        $val = $this->db->selectOne(\n          $pref_arch['tables']['user_options_bits'],  'cfg', [\n          $pref_arch['arch']['user_options_bits']['id_user_option'] => $pref,\n          $pref_arch['arch']['user_options_bits']['id_option'] => $opt_theme,\n           ]\n        );\n        $val = json_decode($val, true);\n        if (isset($val['theme'])) {\n          return $val['theme'];\n        }\n      }\n    }\n\n    return '';\n  }",
            "startLine": 1167,
            "endLine": 1194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "setTheme": {
            "name": "setTheme",
            "summary": "Function for set preference theme for every single project",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($theme = '')\n  {\n    $opt_theme = $this->options->fromCode(self::THEME, self::IDE_PATH, self::BBN_APPUI);\n    $pref_arch = $this->pref->getClassCfg();\n\n    if (!empty($opt_theme)) {\n      \/\/id_option is the project\n      $pref = $this->db->selectOne(\n        $pref_arch['tables']['user_options'],  $pref_arch['arch']['user_options']['id'], [\n        $pref_arch['arch']['user_options']['id_user'] => $this->pref->getUser(),\n        $pref_arch['arch']['user_options']['id_option'] => $this->projects->getId()\n         ]\n      );\n      \/\/if it does not exist, the preference for user and project is created\n      if (empty($pref)) {\n        $pref = $this->pref->add($this->projects->getId(), []);\n      }\n\n      if (!empty($pref)) {\n        $id_bit = $this->db->selectOne(\n          $pref_arch['tables']['user_options_bits'],  $pref_arch['arch']['user_options_bits']['id'], [\n          $pref_arch['arch']['user_options_bits']['id_user_option'] => $pref,\n          $pref_arch['arch']['user_options_bits']['id_option'] => $opt_theme\n           ]\n        );\n        $cfg    = [\n          'id_option' => $opt_theme,\n          'cfg' => json_encode(['theme' => $theme])\n        ];\n\n        if (!empty($id_bit) && \\bbn\\Str::isUid($id_bit)) {\n          if (!empty($this->pref->updateBit($id_bit, $cfg, true))) {\n            return true;\n          }\n        }\n        else{\n          if (!empty($this->pref->addBit($pref, $cfg))) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }",
            "startLine": 1203,
            "endLine": 1247,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "theme",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setRecentFile": {
            "name": "setRecentFile",
            "summary": "Create or update bit recent file preference",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($file)\n  {\n    $bit            = false;\n    $id_recent_file = $this->options->fromCode(self::RECENT_FILE, self::IDE_PATH, self::BBN_APPUI);\n    if (!empty($id_recent_file)) {\n      \/\/search preference and if not exsist preference add a new\n      $pref    = $this->pref->getByOption($id_recent_file);\n      $id_pref = !empty($pref) ? $pref['id'] : $this->pref->add($id_recent_file, []);\n    }\n\n    if (!empty($id_pref)) {\n      \/\/search bit in relation at user preference\n      $bit_data = $this->_get_bit_by_file($file, $id_pref);\n    }\n\n    $date = date('Y-m-d H:i:s');\n    $cfg  = [];\n    \/\/set bit\n    if (($bit_data !== null)) {\n      $info = json_decode($bit_data['cfg'], true);\n      $cfg  = [\n        'id_option' => null,\n        'text' => $file,\n        'cfg' => [\n          'bit_creation' => $info['bit_creation'],\n          'last_date' => $date,\n          'number' => $info['number'] + 1,\n        ]\n      ];\n      if (!empty($this->pref->updateBit($bit_data['id'], $cfg, true))) {\n        $bit = true;\n      }\n    }\n    \/\/add bit\n    else{\n      $cfg = [\n        'bit_creation' => $date,\n        'last_date' => $date,\n        'number' => 0,\n      ];\n      if (!empty($id_pref) && $this->pref->addBit(\n        $id_pref,[\n        \/\/'id_option' => $id_link,\n        'id_option' => null,\n        'cfg' => json_encode($cfg),\n        'text' => $file,\n        ]\n      )\n      ) {\n        $bit = true;\n      }\n    }\n\n    return !empty($bit) && !empty($id_pref);\n  }",
            "startLine": 1262,
            "endLine": 1316,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "link id option file preference"
                }
            ]
        },
        "tracking": {
            "name": "tracking",
            "summary": "Add or update option file in repository",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $file, $file_code, array $info, $setRecent = true)\n  {\n    $bit = false;\n    if (($id_option_opened = $this->options->fromCode(self::OPENED_FILE,self::IDE_PATH, self::BBN_APPUI))) {\n      \/\/search preference and if not exsist preference add a new\n      $pref      = $this->pref->getByOption($id_option_opened);\n      $id_pref   = !empty($pref) ? $pref['id'] : $this->pref->add($id_option_opened, []);\n      $pref_file = $this->_backup_preference_files($file, $info, 'create');\n      if (!empty($pref_file) && !empty($id_pref)) {\n        $file_path = $file['repository']['name'].'\/'.$file_code;\n        $bit_data  = $this->_get_bit_by_file($pref_file, $id_pref);\n        if ($bit_data !== null) {\n          $cfg = [\n            'cfg' => [\n              'last_open' => date('Y-m-d H:i:s')\n            ]\n          ];\n          \/\/set bit why exist\n          if (!empty($this->pref->updateBit($bit_data['id'], $cfg, true))) {\n            $bit = true;\n          }\n        }\n        \/\/add bit why not exist\n        else {\n          $cfg = [\n            'last_open' => date('Y-m-d H:i:s')\n          ];\n\n          if (!empty($id_pref) && $this->pref->addBit(\n            $id_pref,[\n            'id_option' => null,\n            'cfg' => json_encode($cfg),\n            'text' => $file_path\n            ]\n          )\n          ) {\n            $bit = true;\n          }\n        }\n\n        if ($setRecent) {\n          return !empty($bit) && !empty($pref_file) && !empty($id_pref) && $this->setRecentFile($file_path);\n        }\n        else{\n          return !empty($bit) && !empty($pref_file) && !empty($id_pref);\n        }\n      }\n    }\n\n    return $pref_file;\n  }",
            "startLine": 1324,
            "endLine": 1374,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "file_code",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "info",
                    "position": 2,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "setRecent",
                    "position": 3,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "getRecentFiles": {
            "name": "getRecentFiles",
            "summary": "return list files preferences",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($limit = 10)\n  {\n    $perm = $this->options->fromCode(self::RECENT_FILE, self::IDE_PATH, self::BBN_APPUI);\n    $all  = [];\n    if (!empty($perm)) {\n      $pref = $this->pref->getByOption($perm);\n      if (!empty($pref['id'])) {\n        $pref_arch = $this->pref->getClassCfg();\n        $arch      =& $pref_arch['arch']['user_options_bits'];\n        $recents   = $this->db->rselectAll(\n          [\n          'table' => $pref_arch['tables']['user_options_bits'],\n          'fields' => [\n            $arch['id'],\n            $arch['id_user_option'],\n            $arch['id_option'],\n            $arch['cfg'],\n            $arch['text'],\n            'date' => 'bbn_users_options_bits.cfg->\"$.last_date\"',\n            'num' => 'bbn_users_options_bits.cfg->\"$.number\"'\n          ],\n          'where' => [\n            'conditions' => [[\n              'field' => $arch['id_user_option'],\n              'value' => $pref['id']\n            ]]\n          ],\n          'limit' => 10,\n          'order' => ['date' => \"DESC\"]\n          ]\n        );\n        \/\/configure path for link  for each recent file\n        foreach ($recents as $id => $bit){\n          \/\/path for link\n          $arr  = explode(\"\/\",$bit['text']);\n          $type = '';\n          $root = $arr[0].'\/'.$arr[1];\n          if (!empty($arr[2])) {\n            $type = $arr[2];\n            unset($arr[2]);\n          }\n\n          unset($arr[0]);\n          unset($arr[1]);\n          if (($type !== 'mvc') && ($type !== 'components')) {\n            $tab = 'code';\n          }\n          else{\n            $tab = array_shift($arr);\n            $tab = $tab === 'public' ? 'php' : $tab;\n          }\n\n          $arr  = implode('\/', $arr);\n          $file = explode('.', $arr)[0];\n          $path = \\bbn\\Str::parsePath('file\/'.$root.'\/'.$type.'\/'.$file.'\/_end_\/'.$tab);\n\n          $value = json_decode($bit['cfg'], true);\n          $all[] = [\n            'cfg' => !empty($value['file_json']) ? json_decode($this->fs->getContents(self::$backup_path.$value['file_json']), true) : [],\n            'file' => \\bbn\\Str::parsePath($bit['text']),\n            'repository' => $root,\n            'path' => $path,\n            'type' => $type === '' ? false : $type\n          ];\n        }\n      }\n    }\n\n    return !empty($all) ? $all : null;\n  }",
            "startLine": 1383,
            "endLine": 1452,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "limit",
                    "position": 0,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 10,
                    "default_name": ""
                }
            ]
        },
        "realToUrl": {
            "name": "realToUrl",
            "summary": "Returns the file's URL from the real file's path.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($file)\n  {\n    return $this->projects->realToUrl($file);\n    \/\/get root for path\n    \/\/foreach ( $this->repositories() as $i => $d ){\n    \/* foreach ( $this->repositories as $i => $d ){\n      $root = $d['root_path'];\n      if (\n        $root &&\n        (strpos($file, $root) === 0)\n      ){\n        $rep = $i;\n        break;\n      }\n    }\n    if ( isset($rep) ){\n      $res = $rep.'\/src\/';\n      $bits = explode('\/', substr($file, \\strlen($root)));\n\n      \/\/ MVC\n      if ( !empty($d['tabs']) ){\n        $tab_path = array_shift($bits);\n        $fn = array_pop($bits);\n        $ext = \\bbn\\Str::fileExt($fn);\n        $fn = \\bbn\\Str::fileExt($fn, 1)[0];\n        $res .= implode('\/', $bits);\n        foreach ( $d['tabs'] as $k => $t ){\n          if (\n            empty($t['fixed']) &&\n            ($t['path'] === $tab_path . '\/')\n          ){\n            $res .= \"\/$fn\/$t[url]\";\n            break;\n          }\n        }\n      }\n      \/\/ Normal file\n      else {\n        $res .= implode('\/', $bits);\n      }\n      return \\bbn\\Str::parsePath($res);\n    }\n    return false;*\/\n  }",
            "startLine": 1468,
            "endLine": 1511,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isPlugin": {
            "name": "isPlugin",
            "summary": "check if $path is of a plugin",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path)\n  {\n    $plugin = false;\n    if (is_array($this->routes)) {\n      foreach($this->routes as $route){\n        if ($path === $route['path'].'src\/') {\n          $plugin = true;\n          break;\n        }\n      }\n    }\n\n    return $plugin;\n  }",
            "startLine": 1520,
            "endLine": 1533,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "urlToReal": {
            "name": "urlToReal",
            "summary": "Gets the real file's path from an URL",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($url, $obj = false)\n  {\n     \/\/get reposiotry of the url\n    if (($rep = $this->repositoryFromUrl($url, true))\n        && ($res = $this->getRootPath($rep['name']))\n    ) {\n      $plugin = $this->isPlugin($res);\n      \/\/for analyze url for get tab , type etc..\n      $bits = explode('\/', substr($url, \\strlen($rep['name']) + 1));\n      \/\/if is project get tabs or if is components or is mvc\n      if ($rep['alias_code'] === 'bbn-project') {\n        if (!empty($this->isComponentFromUrl($url))\n            && !empty($ptype = $this->getType('components'))\n        ) {\n          $rep['tabs'] = $ptype['tabs'];\n        }\n\n        if (!empty($this->isMVCFromUrl($url))\n            && !empty($ptype = $this->getType('mvc'))\n        ) {\n          $rep['tabs'] = $ptype['tabs'];\n        }\n      }\n\n      $o            = [\n        'mode' => false,\n        'repository' => $rep,\n        'tab' => false\n      ];\n      $position_end = $bits[count($bits) - 2] === '_end_' ? count($bits) - 2 : false;\n      if (!empty($bits) && $position_end) {\n        \/\/ Tab's nane\n        \/\/case component or mvc\n        if (!empty($rep['tabs']) && (end($bits) !== 'code')) {\n          \/\/ Tab's nane\n          $tab = $bits[$position_end + 1];\n          unset($bits[$position_end + 1]);\n          \/\/ File's name\n          $file_name = $bits[$position_end - 1];\n          unset($bits[$position_end - 1]);\n\n          unset($bits[$position_end]);\n          array_shift($bits);\n          \/\/ File's path\n          $file_path = implode('\/', $bits);\n          \/\/ Check if the file is a superior super-controller\n          $ssc       = $this->_superior_sctrl($tab, $file_path);\n          $tab       = $ssc['tab'];\n          $o['tab']  = $tab;\n          $file_path = $ssc['path'].'\/';\n          $i         = \\bbn\\X::find($rep['tabs'], ['url' => $tab]);\n          if ($i !== null) {\n            if (!isset($rep['tabs'][$i])) {\n              throw new \\Error(\"No index corresponding to $i\");\n            }\n\n            $tab = $rep['tabs'][$i];\n            if(!empty($this->isMVCFromUrl($url))) {\n              $res .= 'mvc\/';\n            }\n\n            if(empty($this->isComponentFromUrl($url))) {\n              $res .= $tab['path'];\n            }\n            elseif (!empty($this->isComponentFromUrl($url))) {\n              $res .= 'components\/';\n            }\n\n            if (!empty($tab['fixed'])) {\n              $res        .= $file_path . $tab['fixed'];\n              $o['mode']   = $tab['extensions'][0]['mode'];\n              $o['ssctrl'] = $ssc['ssctrl'];\n            }\n            else {\n              $res   .= $file_path . $file_name;\n              $ext_ok = false;\n              foreach ($tab['extensions'] as $e){\n                if ($this->fs->isFile(\"$res.$e[ext]\")) {\n                  $res      .= \".$e[ext]\";\n                  $ext_ok    = true;\n                  $o['mode'] = $e['mode'];\n                  break;\n                }\n              }\n\n              if (empty($ext_ok)) {\n                $res      .= '.' . $tab['extensions'][0]['ext'];\n                $o['mode'] = $tab['extensions'][0]['mode'];\n              }\n            }\n          }\n\n          \/*else {\n            return false;\n          }*\/\n        }\n        else {\n          unset($bits[$position_end + 1]);\n          \/\/ File's name\n          $file_name = $bits[$position_end - 1];\n          unset($bits[$position_end]);\n          $res .= '\/'.implode('\/', $bits);\n          if(is_array($rep)) {\n            \/\/temporaney for lib plugin\n            if (!empty($rep['extensions'])) {\n              foreach ($rep['extensions'] as $ext){\n                if ($this->fs->isFile(\"$res.$ext[ext]\")) {\n                  $res      .= \".$ext[ext]\";\n                  $o['mode'] = $ext['mode'];\n                }\n              }\n            }\n            else{\n              if ($this->fs->isFile($res.'.php')) {\n                $res      .= \".php\";\n                $o['mode'] = 'php';\n              }\n            }\n          }\n\n          if (empty($o['mode']) && !empty($rep['extensions'])) {\n            $res      .= '.' . $rep['extensions'][0]['ext'];\n            $o['mode'] = $rep['extensions'][0]['mode'];\n          }\n        }\n\n        $res = \\bbn\\Str::parsePath($res);\n        if ($obj) {\n          $o['file'] = $res;\n          return $o;\n        }\n\n        return $res;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 1543,
            "endLine": 1680,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "obj",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "history": {
            "name": "history",
            "summary": "Returns all backups of a file.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($url, array $repository = [], $all = false)\n  {\n    $check_ctrl   = false;\n    $copy_url     = explode(\"\/\", $url);\n    $backups      = [];\n    $history_ctrl = [];\n    if (!empty($repository) && !empty($repository['name'])) {\n      $path = self::$backup_path . $repository['root'].'\/'.substr($url, Strpos($url,$repository['code'],1));\n    }\n    else{\n      \/\/ File's backup path\n      $path = self::$backup_path . $url;\n    }\n\n    if (!empty($url) && !empty(self::$backup_path)) {\n      $ctrl_path = explode(\"\/\", $path);\n      for($y = 0; $y < 2; $y++){\n        array_pop($ctrl_path);\n      }\n\n      \/\/check if there is \"_ctrl\" in the url as the last step of the \"$url\"; in that case we tart $url to give the right path to get it to take its own backup files.\n      if (end($copy_url) === \"_ctrl\") {\n        $url = explode(\"\/\", $url);\n        array_pop($url);\n        $url              = implode(\"\/\", $url);\n        $check_ctrl_files = true;\n        $copy_url         = explode(\"\/\", $url);\n        for($y = 0; $y < 2; $y++){\n          array_pop($copy_url);\n        }\n\n        $copy_url = implode(\"\/\", $copy_url).\"\/\".\"_ctrl\";\n      }\n\n      \/\/First, check the presence of _ctrl backups.\n      $ctrl_path = implode(\"\/\", $ctrl_path).\"\/\".\"_ctrl\";\n      \/\/ read _ctrl if exsist\n      if ($this->fs->isDir($ctrl_path)) {\n          \/\/If there is a \"_ctrl\" backup, insert it into the array that will be merged with the remaining backup at the end of the function.\n        if ($files_ctrl = $this->fs->getFiles($ctrl_path)) {\n           $mode = basename($ctrl_path);\n\n           $history_ctrl = [\n             'text' => basename($ctrl_path),\n             'icon' => 'folder-icon',\n             'folder' => true,\n             'items' => [],\n             'num_items' => \\count($this->fs->getFiles($ctrl_path))\n             \/\/'num_items' => \\count(\\bbn\\File\\Dir::getFiles($files_ctrl))\n           ];\n\n           \/\/If we are requesting all files with their contents, this block returns to the \"_ctrl\" block.\n           if ($all === true) {\n             foreach ($files_ctrl as $file){\n               $filename  = \\bbn\\Str::fileExt($file, true)[0];\n               $file_name = $filename;\n               $moment    = strtotime(str_replace('_', ' ', $filename));\n               $date      = date('d\/m\/Y', $moment);\n               $time      = date('H:i:s', $moment);\n\n               if (($i = \\bbn\\X::find($history_ctrl['items'], ['text' => $date])) === null) {\n                array_push(\n                  $history_ctrl['items'], [\n                  'text' => $date,\n                  'items' => [],\n                  'folder' => true,\n                  'icon' => 'folder-icon'\n                    ]\n                );\n\n                 $i = \\count($history_ctrl['items']) - 1;\n                 if (($idx = \\bbn\\X::find($history_ctrl['items'][$i]['items'], ['text' => $time])) === null) {\n                  array_push(\n                    $history_ctrl['items'][$i]['items'], [\n                    'text' => $time,\n                    'mode' => basename($ctrl_path),\n                    'file' => $file_name,\n                    'ext' => \\bbn\\Str::fileExt($file, true)[1],\n                    'uid' => $url,\n                    'folder' => false\n                      ]\n                  );\n                 }\n               }\n               else {\n                 $j = \\bbn\\X::find($history_ctrl['items'], ['text' => $date]);\n                 if (($idx = \\bbn\\X::find($history_ctrl['items'][$j]['items'], ['text' => $time])) === null) {\n                  array_push(\n                    $history_ctrl['items'][$j]['items'], [\n                    'text' => $time,\n                    'code' => $this->fs->getContents($file),\n                    'folder' => false,\n                    'mode' => basename($ctrl_path),\n                    'folder' => false\n                      ]\n                  );\n                 }\n               }\n             }\n           }\n           \/\/otherwise pass some useful parameters to get information with other posts see block in case of \"$all\" to false.\n           else{\n             $check_ctrl = true;\n           }\n        }\n      }\n\n       \/\/taken or not the backup of the \"_ctrl\" we move on to acquire the date of the project, if set to true then as done before, we will take into consideration all the date including the contents of the files.\n      if ($all === true) {\n        \/\/if ( is_dir($path) ){\n        if ($this->fs->isDir($path)) {\n          \/\/if we pass a path that contains all the backups\n          if ($dirs = $this->fs->getDirs($path)) {\n            if (!empty($dirs)) {\n              $mode = basename($path) === \"_ctrl\" || basename($path) === \"model\" ? \"php\" : basename($path);\n              foreach ($dirs as $dir){\n                \/\/if ( $files = \\bbn\\File\\Dir::getFiles($dir) ){\n                if ($files = $this->fs->getFiles($dir)) {\n                  foreach ($files as $file){\n                    $filename = \\bbn\\Str::fileExt($file, true)[0];\n                    $moment   = strtotime(str_replace('_', ' ', $filename));\n                    $date     = date('d\/m\/Y', $moment);\n                    $time     = date('H:i:s', $moment);\n                    if (($i = \\bbn\\X::find($backups, ['text' => $date])) === null) {\n                      array_push(\n                        $backups, [\n                        'text' => $date,\n                        'folder' => true,\n                        'items' => [],\n                        'icon' => 'folder-icon'\n                        ]\n                      );\n                      $i = \\count($backups) - 1;\n                    }\n\n                    if (($idx = \\bbn\\X::find($backups[$i]['items'], ['title' => $d])) === null) {\n                      array_push(\n                        $backups[$i]['items'], [\n                        'text' => $d,\n                        'folder' => true,\n                        'items' => [],\n                        'icon' => 'folder-icon'\n                        ]\n                      );\n                      $idx = \\count($backups[$i]['items']) - 1;\n                    }\n\n                    array_push(\n                      $backups[$i]['items'][$idx]['items'], [\n                      'text' => $time,\n                      'mode' => $mode,\n                      'code' => $this->fs->getContents($file),\n                      'folder' => false\n                      ]\n                    );\n                  }\n                }\n              }\n            }\n          }\n          \/\/If we pass a path that contains the specific backups of a type and is set to \"$all\" to true then all backups of this type will return.\n          else {\n            if ($files = $this->fs->getFiles($path)) {\n              if (!empty($files)) {\n                $mode = basename($path) === \"_ctrl\" || basename($path) === \"model\" ? \"php\" : basename($path);\n                foreach ($files as $file){\n                  $filename  = \\bbn\\Str::fileExt($file, true)[0];\n                  $file_name = $filename;\n                  $moment    = strtotime(str_replace('_', ' ', $filename));\n                  $date      = date('d\/m\/Y', $moment);\n                  $time      = date('H:i:s', $moment);\n\n                  if (($i = \\bbn\\X::find($backups, ['text' => $date])) === null) {\n                    array_push(\n                      $backups, [\n                      'text' => $date,\n                      'folder' => true,\n                      'items' => [],\n                      'icon' => 'folder-icon'\n                      ]\n                    );\n\n                    $i = \\count($backups) - 1;\n                    if (($idx = \\bbn\\X::find($backups[$i]['items'], ['text' => $time])) === null) {\n                      array_push(\n                        $backups[$i]['items'], [\n                        'text' => $time,\n                        'mode' => $mode,\n                        'code' => $this->fs->getContents($file),\n                        'folder' => false\n                        ]\n                      );\n                    }\n                  } else {\n                    $j = \\bbn\\X::find($backups, ['text' => $date]);\n                    if (($idx = \\bbn\\X::find($backups[$j]['items'], ['text' => $time])) === null) {\n                      array_push(\n                        $backups[$j]['items'], [\n                        'text' => $time,\n                        'mode' => $mode,\n                        'code' => $this->fs->getContents($file),\n                        'folder' => false\n                        ]\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\/\/otherwise returns the useful information for processing and to make any subsequent postings.\n      else {\n        \/\/if we want you to return all the backup information useful to process and make other posts\n        $listDir = $this->fs->getDirs($path);\n        if (!empty($listDir) && !isset($check_ctrl_files)) {\n          foreach ($listDir as $val){\n            array_push(\n              $backups, [\n              'text' => basename($val),\n              'icon' => 'folder-icon',\n              'folder' => true,\n              \/\/'num_items' => \\count(\\bbn\\File\\Dir::getFiles($val))\n              'num_items' => \\count($this->fs->getFiles($val))\n              ]\n            );\n          }\n\n          \/\/If the _ctrl backup folder exists, then it will be added to the list.\n          if($check_ctrl === true) {\n            array_push($backups, $history_ctrl);\n          }\n        }\/\/If we pass a path that contains the specific backups of a type and is not set \"$all\" then the backup of with useful information for any other posts returns.\n        else {\n          \/\/If we are requesting ctrl backup files then we give it the right path and \"$check_ctrl_files\" is a variable that makes us understand whether or not we ask for backup files of \"_ctrl\".\n          if (isset($check_ctrl_files) && ($check_ctrl_files === true)) {\n            $url  = $copy_url;\n            $path = self::$backup_path . $url;\n          }\n\n          \/\/if ( $files = \\bbn\\File\\Dir::getFiles($path) ){\n          if ($files = $this->fs->getFiles($path)) {\n            if (!empty($files)) {\n              $mode = basename($path) === \"_ctrl\" || basename($path) === \"model\" ? \"php\" : basename($path);\n              foreach ($files as $file){\n                if (\\bbn\\Str::fileExt($file, true)[1] !== 'json') {\n                  $filename  = \\bbn\\Str::fileExt($file, true)[0];\n                  $file_name = $filename;\n                  $moment    = strtotime(str_replace('_', ' ', $filename));\n                  $date      = date('d\/m\/Y', $moment);\n                  $time      = date('H:i:s', $moment);\n\n                  if (($i = \\bbn\\X::find($backups, ['text' => $date])) === null) {\n                    array_push(\n                      $backups, [\n                      'text' => $date,\n                      'folder' => true,\n                      'items' => [],\n                      'icon' => 'folder-icon'\n                      ]\n                    );\n\n                    $i = \\count($backups) - 1;\n                    if (($idx = \\bbn\\X::find($backups[$i]['items'], ['text' => $time])) === null) {\n                      array_push(\n                        $backups[$i]['items'], [\n                        'text' => $time,\n                        'mode' => $mode,\n                        'file' => $file_name,\n                        'ext' => \\bbn\\Str::fileExt($file, true)[1],\n                        'uid' => $url,\n                        'folder' => false\n                        ]\n                      );\n                    }\n                  }\n                  else {\n                    $j = \\bbn\\X::find($backups, ['text' => $date]);\n                    if (($idx = \\bbn\\X::find($backups[$j]['items'], ['text' => $time])) === null) {\n                      array_push(\n                        $backups[$j]['items'], [\n                        'text' => $time,\n                        'mode' => $mode,\n                        'file' => $file_name,\n                        'ext' => \\bbn\\Str::fileExt($file, true)[1],\n                        'uid' => $url,\n                        'folder' => false\n                        ]\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    \/\/If you add the \"_ctrl \" backup, enter it to the rest of the date.\n    if(!empty($history_ctrl) && !empty($backups) && ($all === true) && ($check_ctrl === false)) {\n      array_push($backups, $history_ctrl);\n    }\/\/if you have only the backups of the super _ctrl and no other, it has been differentiated because of different paths\n    elseif(!empty($history_ctrl) && empty($backups) && $check_ctrl === true) {\n      array_push($backups, $history_ctrl);\n    }\n\n    return $backups;\n  }",
            "startLine": 1743,
            "endLine": 2051,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Tparameter that allows you to have all the code if it is set to true"
                },
                {
                    "name": "repository",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "all",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getType": {
            "name": "getType",
            "summary": "Returns all data of type repository",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($type)\n  {\n    if (!empty($type)) {\n      return self::getAppuiOption($type, self::PATH_TYPE);\n    }\n  }",
            "startLine": 2060,
            "endLine": 2065,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTypes": {
            "name": "getTypes",
            "summary": "Returns all data of all types repository",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getAppuiOption(self::PATH_TYPE);\n  }",
            "startLine": 2073,
            "endLine": 2076,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "tabsOfTypeProject": {
            "name": "tabsOfTypeProject",
            "summary": "Returns the tabs of type repository",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($type)\n  {\n    if (!empty($type) && ($ptype = $this->getType($type))) {\n      return !empty($ptype['tabs']) ? $ptype['tabs'] : false;\n    }\n  }",
            "startLine": 2085,
            "endLine": 2090,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "search": {
            "name": "search",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $info)\n  {\n    $res['success'] = false;\n\n    if (!empty($info['search'])\n        && !empty($info['nameRepository'])\n        && !empty($info['repository'])\n        && isset($info['typeSearch'])\n    ) {\n      $list          = [];\n      $fileData      = [];\n      $result        = [];\n      $totLines      = 0;\n      $tot_num_files = 0;\n      $occourences   = 0;\n      $base          = $info['repository']['name'];\n      $base_rep      = $this->getRootPath($base);\n      \/\/function that defines whether the search is sensitive or non-sensitive\n      $typeSearch = function ($element, $code, $type) {\n        if ($type === \"sensitive\") {\n          return strpos($element, $code);\n        }\n        else{\n          return stripos($element, $code);\n        }\n      };\n\n      if (!empty($info['isProject'])) {\n        $part = $info['type'];\n      }\n      else{\n        $part = $info['repository']['path'];\n      }\n\n      $path = $base_rep.$part;\n\n      $all = $this->fs->getFiles($path, true);\n      if (is_array($all) && count($all)) {\n        foreach($all as $i => $v){\n          if (basename($v) !== \"cfg\") {\n            \/\/if folder\n            if ($this->fs->isDir($v)) {\n              \/\/case tree\n              if (!empty($info['searchFolder'])) {\n                if (!empty($info['mvc']) || ($info['type'] === 'mvc')) {\n                  $content = $v;\n                }\n                else{\n                  $content = $path;\n                }\n\n                $content .= $info['searchFolder'];\n              }\n              else{\n                $content = $v;\n              }\n\n              $content = $this->fs->scan($content);\n              if (is_array($content) && count($content)) {\n                foreach ($content as $j => $val){\n                  $list = [];\n                  \/\/ case file into folder\n                  if ($this->fs->isFile($val)) {\n                    $tot_num_files++;\n                    if ($typeSearch($this->fs->getContents($val), $info['search'], $info['typeSearch']) !== false) {\n                      $path      = $base_rep.$part;\n                      $path_file = $val;\n                      $link      = explode(\"\/\", substr($val, strlen($path) + 1, strlen($val)));\n                      if ((!empty($info['isProject']) && $info['type'] === 'mvc')\n                          || !empty($info['mvc'])\n                      ) {\n                        $tab  = array_shift($link);\n                        $link = implode('\/', $link);\n                        $link = explode('.', $link);\n                        $link = array_shift($link);\n                      }\n                      elseif ((!empty($info['isProject']) && ($info['type'] === 'components') )\n                          || !empty($info['components'])\n                      ) {\n                        $link = implode('\/', $link);\n                        $link = explode('.', $link);\n                        $tab  = array_pop($link);\n                        $link = $link[0];\n                      }\n                      elseif (!empty($info['isProject']) && (($info['type'] === 'lib') || ($info['type'] === 'cli'))) {\n                        $link = implode('\/', $link);\n                        $link = explode('.', $link);\n                        $tab  = 'code';\n                        $link = $link[0];\n                      }\n                      elseif(empty($info['isProject']) && empty($info['type'])) {\n                        $file                   = $link[count($link) - 1];\n                        $file                   = explode('.', $file);\n                        $tab                    = array_pop($file);\n                        $link[count($link) - 1] = array_shift($file);\n                        $link                   = implode('\/', $link);\n                      }\n\n                      \/\/object initialization with every single file to check the lines that contain it\n                      $file = new \\SplFileObject($val);\n                      \/\/cycle that reads all the lines of the file, it means until it has finished reading a file\n                      while(!$file->eof()){\n                        \/\/current line reading\n                        $lineCurrent = $file->current();\n                        \/\/if we find what we are looking for in this line and that this is not '\\ n' then we will take the coirispjective line number with the key function, insert it into the array and the line number\n                        if (($typeSearch($lineCurrent, $info['search'], $info['typeSearch']) !== false) && (strpos($lineCurrent, '\\n') === false)) {\n                          $lineNumber = $file->key() + 1;\n                          $name_path  = $info['repository']['path'].substr(dirname($val), strlen($base_rep));\n                          $position   = $typeSearch($lineCurrent, $info['search'], $info['typeSearch']);\n                          $line       = \"<strong>\".'line ' . $lineNumber . ' : '.\"<\/strong>\";\n\n                          $text = $line;\n                          if (!empty($info['mvc'])\n                              || (!empty($info['isProject']) && $info['type'] === 'mvc')\n                          ) {\n                            if ($tab === \"public\") {\n                              $tab = 'php';\n                            }\n                            else{\n                              if (explode(\"\/\",$path_file)[1] === \"html\") {\n                                $lineCurrent = htmlentities($lineCurrent);\n                              }\n                            }\n                          }\n\n                          $text       .= str_replace($info['search'], \"<strong><span class='underlineSeach'>\".$info['search'].\"<\/span><\/strong>\", $lineCurrent);\n                          $file_name   = basename($path_file);\n                          $path        = dirname($base.'\/'.substr($path_file, strlen($base_rep)));\n                          $occourences = $occourences + substr_count($lineCurrent, $info['search']);\n                          \/\/ info for code\n                          $list[] = [\n                            'text' => strlen($text) > 1000 ? $line.\"<strong><i>\".X::_('content too long to be shown').\"<\/i><\/strong>\" : $text,\n                            'line' => $lineNumber - 1,\n                            'position' => $position,\n                            'link' => $link,\n                            'tab' => !empty($tab) ? $tab : false,\n                            'code' => true,\n                            'uid' => $path.'\/'.$file_name,\n                            'icon' => 'nf nf-fa-code'\n                          ];\n                        }\n\n                        \/\/next line\n                        $file->next();\n                      }\n                    }\n                  }\n\n                  \/\/if we find rows then we will create the tree structure with all the information\n                  if (count($list) > 0) {\n                    $totLines = $totLines + count($list);\n                    if (!empty($info['mvc'])) {\n                      if (explode(\"\/\",$path_file)[1] === \"public\") {\n                        $tab = 'php';\n                      }\n                      else{\n                        $tab = explode(\"\/\",$path_file)[1];\n                      }\n\n                      $link = explode(\".\",substr($path_file, strlen(explode(\"\/\",$path_file)[0].'\/'.explode(\"\/\",$path_file)[1]) + 1))[0];\n                    }\n\n                    \/\/info file\n                    $fileData = [\n                      'text' => $path.'\/'.$file_name.\"&nbsp;<span class='bbn-badge bbn-s bbn-bg-lightgrey'>\".count($list).\"<\/span>\",\n                      'icon' => 'nf nf-fa-file_code_o',\n                      'numChildren' => count($list),\n                      'repository' => $info['repository']['path'],\n                      'uid' => $path.$file_name,\n                      'file' => basename($path_file),\n                      'link' => !empty($link) ? $link : false,\n                      'tab' => !empty($tab) ? $tab : false,\n                      'items' => $list,\n                    ];\n                    $result[] = $fileData;\n\n                    \/\/die(var_dump($path.$name_path,$base_rep));\n                    \/*if ( !isset($result[$path.$name_path]) ){\n                      \/\/info folder\n                      $result[$path.$name_path]= [\n                        'text' => dirname($path.$file_name),\n                        'num' => 1,\n                        'numChildren' => 1,\n                        'items' => [],\n                        'icon' => !empty($info['component']) || ($info['type'] === 'components')  ? 'nf nf-mdi-vuejs' : 'nf nf-fa-folder'\n                      ];\n                      $result[$path.$name_path]['items'][] = $fileData;\n                    }\n                    else {\n                      $ctrlFile = false;\n                      \/\/  check if the file where we found one or more search results is not reinserted\n                      foreach( $result[$path.$name_path]['items'] as $key => $item ){\n                        if ( $item['file'] === dirname($path_file) ){\n                          $ctrlFile = true;\n                        }\n                      }\n                      \/\/if we do not have the file, we will insert it\n                      if ( empty($ctrlFile) ){\n                        $result[$path.$name_path]['items'][] = $fileData;\n                        $result[$path.$name_path]['num']++;\n                        $result[$path.$name_path]['numChildren']++;\n                      }\n                    }*\/\n                  }\n                }\n              }\n            } \/\/ file not contained in the folder\n            else {\n              $tot_num_files++;\n              $list = [];\n              if ($typeSearch($this->fs->getContents($v), $info['search'], $info['typeSearch']) !== false) {\n                $path_file = substr($v, Strpos($v, $info['repository']['path']));\n                $file      = new \\SplFileObject($v);\n                while(!$file->eof()){\n                  $lineCurrent = $file->current();\n                  if (($typeSearch($lineCurrent, $info['search'], $info['typeSearch']) !== false)\n                      && (strpos($lineCurrent, '\\n') === false)\n                  ) {\n                    $lineNumber  = $file->key() + 1;\n                    $link        = explode(\".\",substr($path_file, strlen(explode(\"\/\",$path_file)[0].'\/'.explode(\"\/\",$path_file)[1]) + 1))[0];\n                    $name_path   = substr(dirname($v), Strpos($v, $info['repository']['path']));\n                    $position    = $typeSearch($lineCurrent, $info['search'], $info['typeSearch']);\n                    $text        = \"<strong>\".'line ' . $lineNumber . ' : '.\"<\/strong>\";\n                    $text       .= str_replace($info['search'], \"<strong><span class='underlineSeach'>\".$info['search'].\"<\/span><\/strong>\", $lineCurrent);\n                    $occourences = $occourences + substr_count($lineCurrent, $info['search']);\n                    \/\/see\n                    $path = str_replace($base, (strpos($path_file, $this->getAppPath()) === 0 ? 'app\/' : 'lib\/'), $path);\n\n                    if (!empty($info['mvc'])) {\n                      if (explode(\"\/\",$path_file)[1] === \"public\") {\n                        $tab = 'php';\n                      }\n                      else{\n                        $tab = explode(\"\/\",$path_file)[1];\n                      }\n\n                      $link = explode(\".\",substr($path_file, strlen(explode(\"\/\",$path_file)[0].'\/'.explode(\"\/\",$path_file)[1]) + 1))[0];\n                    }\n\n                    \/\/ info for file\n                    $list[] = [\n                      'text' => strlen($text) > 1000 ? $line.\"<strong><i>\".X::_('content too long to be shown').\"<\/i><\/strong>\" : $text,\n                      'line' => $lineNumber - 1,\n                      'position' => $position,\n                      'code' => true,\n                      'uid' => $path.'\/'.$file_name,\n                      'icon' => 'nf nf-fa-code',\n                      'linkPosition' => explode(\".\",substr($path_file, strlen(explode(\"\/\",$path_file)[0].'\/'.explode(\"\/\",$path_file)[1]) + 1))[0],\n                      'tab' => !empty($tab) ? $tab : false\n                    ];\n                  }\n\n                  $file->next();\n                }\n\n                if (count($list) > 0) {\n                  $totLines .= count($list);\n                  \/\/ info for file who contain a code\n                  $fileData = [\n                    'text' => basename($path_file),\n                    'icon' => 'nf nf-fa-file_code',\n                    'num' => count($list),\n                    'numChildren' => count($list),\n                    'repository' => $info['repository']['bbn_path'].'\/',\n                    'uid' => $path.'\/'.$file_name,\n                    'file' => basename($path_file),\n                    'link' => !empty($link) ? $link : false,\n                    'tab' => !empty($tab) ? $tab : false,\n                    'items' => $list\n                  ];\n\n                  $result[] = $fileData;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if(!empty($result)) {\n        $totFiles = 0;\n        foreach ($result as $key => $value) {\n          $totFiles = $totFiles + $value['items'][0]['numChildren'];\n        }\n\n        return [\n          'list' => array_values($result),\n          'occurences' => $occourences,\n          'totFiles' => $tot_num_files,\n          'filesFound' => count($result),\/\/$tot_num_files++,\n          'totLines' => $totLines\n        ];\n      }\n    }\n\n    return false;\n  }",
            "startLine": 2093,
            "endLine": 2389,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "info",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "searchAll": {
            "name": "searchAll",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($seek)\n  {\n    if (isset($seek)) {\n      $res             = [];\n      $occourences     = 0;\n      $totalFiles      = 0;\n      $numRepositories = 0;\n      $foundRepos      = [];\n      foreach ($this->repositories as $rep) {\n        \/\/temporaney\n        if ($rep['root'] !== 'cdn') {\n          $totalFiles += $this->fs->getNumFiles($rep['root_path']);\n          if ($found = $this->fs->searchContents($seek, $rep['root_path'], true, false, 'js|php|less|html')) {\n            foreach ($found as $fn => $val){\n              $list = [];\n              \/\/ case file into folder\n              if ($this->fs->isFile($fn)) {\n                $path_file = $val;\n                \/\/object initialization with every single file to check the lines that contain it\n                $file     = new \\SplFileObject($fn);\n                $totLines = 0;\n                \/\/cycle that reads all the lines of the file, it means until it has finished reading a file\n                while(!$file->eof()){\n                  \/\/current line reading\n                  $lineCurrent = $file->current();\n                  \/\/if we find what we are looking for in this line and that this is not '\\ n' then we will take the coirispjective line number with the key function, insert it into the array and the line number\n                  if (!empty($position = strpos($lineCurrent, $seek) !== false) && (strpos($lineCurrent, '\\n') === false)) {\n                    $lineNumber = $file->key() + 1;\n                    $name_path  = $rep['path'].substr(dirname($val), strlen($base_rep));\n                    $line       = \"<strong>\".'line ' . $lineNumber . ' : '.\"<\/strong>\";\n\n                    $text      = $line;\n                    $text     .= str_replace($seek, \"<strong><span class='underlineSeach'>\".$seek.\"<\/span><\/strong>\", $lineCurrent);\n                    $file_name = basename($path_file);\n\n                    $occourences = $occourences + substr_count($lineCurrent, $seek);\n                    if (in_array($rep['name'], $foundRepos) === false) {\n                      $foundRepos[] = $rep['name'];\n                      $numRepositories++;\n                    }\n\n                    \/\/ info for code\n                    $list[] = [\n                      'text' => strlen($text) > 1000 ? $line.\"<strong><i>\".X::_('content too long to be shown').\"<\/i><\/strong>\" : $text,\n                      'line' => $lineNumber - 1,\n                      'position' => $position,\n                     \/\/ 'link' => $link,\n                      'tab' => !empty($tab) ? $tab : false,\n                      'code' => true,\n                      'uid' => $rep['path'].'\/'.$file_name,\n                      'icon' => 'nf nf-fa-code'\n                    ];\n                  }\n\n                  \/\/next line\n                  $file->next();\n                }\n\n                \/\/if we find rows then we will create the tree structure with all the information\n                if (count($list) > 0) {\n                  $totLines = $totLines + count($list);\n                  if (explode(\"\/\",$path_file)[1] === \"public\") {\n                    $tab = 'php';\n                  }\n                  else {\n                    $tab = explode(\"\/\",$path_file)[1];\n                  }\n\n                  $link = explode(\".\",substr($path_file, strlen(explode(\"\/\",$path_file)[0].'\/'.explode(\"\/\",$path_file)[1]) + 1))[0];\n                }\n\n                \/\/info file\n                $ext      = \\bbn\\Str::fileExt($fn,0);\n                $fileData = [\n                  'text' => $rep['name'].'\/'.substr($fn, strlen($rep['root_path'])).\"&nbsp;<span class='bbn-badge bbn-s bbn-bg-lightgrey'>\".count($list).\"<\/span>\",\n                  'icon' => 'nf nf-fa-file_code_o',\n                  'numChildren' => count($list),\n                  'repository' => $rep['name'],\n                  'uid' => $rep['name'].'\/'.substr($fn, strlen($rep['root_path'])),\n                  'file' => basename($fn),\n                  'items' => $list,\n                ];\n\n                $path = explode('\/', substr($fn, strlen($rep['root_path'])));\n                \/\/die(var_dump(\"sss\", $path));\n                if ($path[0] === 'mvc') {\n                  if ($path[1] === \"public\") {\n                    $tab = 'php';\n                  }\n                  else{\n                    $tab = $path[1];\n                  }\n                }\n                elseif ($path[0] === 'components') {\n                  $tab        = $ext;\n                  $components = true;\n                }\n\n                unset($path[1]);\n                $path = implode('\/', $path);\n\n                $link             = $components === true ? $rep['name'].'\/'.substr($path, 0,  strpos($path,'.'.$ext)).'\/'.basename($path, '.'.$ext) : $rep['name'].'\/'.substr($path, 0,  strpos($path,'.'.$ext));\n                $fileData['tab']  = !empty($tab) ? $tab : false;\n                $fileData['link'] = $link;\n                foreach ($fileData['items'] as &$item){\n                  $item['link'] = $link;\n                  $item['tab']  = !empty($tab) ? $tab : false;\n                }\n\n                $result[] = $fileData;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (!empty($result)) {\n      return [\n        'list' => array_values($result),\n        'occurences' => $occourences,\n        'totFiles' => $totalFiles,\n        'filesFound' => count($result),\n        'repositoriesFound' => $numRepositories,\n        'totalRepositories' => count($this->repositories),\n        'totLines' => $totLines\n      ];\n    }\n    else {\n      return ['success'  => false];\n    }\n  }",
            "startLine": 2392,
            "endLine": 2523,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "seek",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "startLine": 145,
            "endLine": 149,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppuiRoot": {
            "name": "getAppuiRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_appui_id;\n  }",
            "startLine": 152,
            "endLine": 156,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $o = bbn\\Appui\\Option::getInstance();\n    if (!$o) {\n      throw new \\Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "startLine": 159,
            "endLine": 167,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "parent": false,
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 176,
            "endLine": 179,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...self::_treat_args(func_get_args())), function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 182,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "startLine": 194,
            "endLine": 197,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 200,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 206,
            "endLine": 209,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 212,
            "endLine": 215,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionId": {
            "name": "getAppuiOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 224,
            "endLine": 227,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsIds": {
            "name": "getAppuiOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(\n          ...self::_treat_args(func_get_args(), true)\n        ),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 230,
            "endLine": 242,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTree": {
            "name": "getAppuiOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args(), true)) ) ? $tree['items'] : [];\n  }",
            "startLine": 245,
            "endLine": 248,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptions": {
            "name": "getAppuiOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 251,
            "endLine": 254,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOption": {
            "name": "getAppuiOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 257,
            "endLine": 260,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTextValue": {
            "name": "getAppuiOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getAppuiOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 263,
            "endLine": 266,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (bbn\\Mvc::getDebug()) {\n      $ar = \\func_get_args();\n      bbn\\X::log(\\count($ar) > 1 ? $ar : $ar[0], 'mvc');\n    }\n  }",
            "startLine": 61,
            "endLine": 67,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "pluginDataPath": {
            "name": "pluginDataPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin = NULL)\n  {\n    if (($this->_plugin || $plugin) && \\defined('BBN_DATA_PATH')) {\n      return BBN_DATA_PATH.'plugins\/'.$this->pluginName($plugin ?: $this->_plugin).'\/';\n    }\n\n    return null;\n  }",
            "startLine": 70,
            "endLine": 77,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getPlugins": {
            "name": "getPlugins",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_mvc->getPlugins();\n  }",
            "startLine": 80,
            "endLine": 83,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "hasPlugin": {
            "name": "hasPlugin",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin)\n  {\n    return $this->_mvc->hasPlugin($plugin);\n  }",
            "startLine": 86,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "pluginPath": {
            "name": "pluginPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin = NULL, $raw = false)\n  {\n    return $this->_mvc->pluginPath($plugin ?: $this->pluginName($this->_plugin), $raw);\n  }",
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "raw",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "pluginUrl": {
            "name": "pluginUrl",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin = NULL)\n  {\n    return $this->_mvc->pluginUrl($plugin ?: $this->pluginName($this->_plugin));\n  }",
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "pluginName": {
            "name": "pluginName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path = NULL)\n  {\n    return $this->_mvc->pluginName($path ?: $this->_path);\n  }",
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getCookie": {
            "name": "getCookie",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_mvc->getCookie();\n  }",
            "startLine": 116,
            "endLine": 119,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getRoutes": {
            "name": "getRoutes",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_mvc->getRoutes();\n  }",
            "startLine": 122,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAliases": {
            "name": "getAliases",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_mvc->getRoutes('alias');\n  }",
            "startLine": 128,
            "endLine": 131,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getRoute": {
            "name": "getRoute",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path, $mode, $root = NULL)\n  {\n    return $this->_mvc->getRoute($path, $mode, $root);\n  }",
            "startLine": 134,
            "endLine": 137,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "root",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "setLocale": {
            "name": "setLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($locale)\n  {\n    return $this->_mvc->setLocale($locale);\n  }",
            "startLine": 140,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "locale",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLocale": {
            "name": "getLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_mvc->getLocale();\n  }",
            "startLine": 146,
            "endLine": 149,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "appPath": {
            "name": "appPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($raw = false)\n  {\n    return \\bbn\\Mvc::getAppPath($raw);\n  }",
            "startLine": 152,
            "endLine": 155,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "raw",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "libPath": {
            "name": "libPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return \\bbn\\Mvc::getLibPath();\n  }",
            "startLine": 158,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "dataPath": {
            "name": "dataPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin = NULL)\n  {\n    return \\bbn\\Mvc::getDataPath().($plugin ? 'plugins\/'.$plugin.'\/' : '');\n  }",
            "startLine": 164,
            "endLine": 167,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "tmpPath": {
            "name": "tmpPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin = NULL)\n  {\n    return \\bbn\\Mvc::getTmpPath($plugin);\n  }",
            "startLine": 170,
            "endLine": 173,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "logPath": {
            "name": "logPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin = NULL)\n  {\n    return \\bbn\\Mvc::getLogPath($plugin);\n  }",
            "startLine": 176,
            "endLine": 179,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "cachePath": {
            "name": "cachePath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin = NULL)\n  {\n    return \\bbn\\Mvc::getCachePath($plugin);\n  }",
            "startLine": 182,
            "endLine": 185,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "contentPath": {
            "name": "contentPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin = NULL)\n  {\n    return \\bbn\\Mvc::getContentPath($plugin);\n  }",
            "startLine": 188,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "userTmpPath": {
            "name": "userTmpPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_user = NULL, $plugin = NULL)\n  {\n    return \\bbn\\Mvc::getUserTmpPath($id_user, $plugin);\n  }",
            "startLine": 194,
            "endLine": 197,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "userDataPath": {
            "name": "userDataPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Ide",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_user = NULL, $plugin = NULL)\n  {\n    return \\bbn\\Mvc::getUserDataPath($id_user, $plugin);\n  }",
            "startLine": 200,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "backup_path": {
            "static": true,
            "visibility": "public",
            "doc": {
                "description": "@var string Name for get repositories",
                "tags": []
            }
        },
        "backup_pref_path": {
            "static": true,
            "visibility": "public",
            "doc": {
                "description": "@var string Name for get repositories",
                "tags": []
            }
        }
    },
    "staticProperties": {
        "backup_path": null,
        "backup_pref_path": null,
        "ide_path": false,
        "dev_path": false,
        "path_type": false,
        "permissions": false,
        "current_file": false,
        "current_id": false,
        "optional_is_init": false,
        "option_root_id": null,
        "option_appui_id": null
    },
    "constants": [],
    "numMethods": 94,
    "numProperties": 2,
    "numConstants": 10,
    "numStaticProperties": 11,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\Optional",
        "bbn\\Mvc\\Common"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "backup_path": null,
        "backup_pref_path": null,
        "ide_path": false,
        "dev_path": false,
        "path_type": false,
        "permissions": false,
        "current_file": false,
        "current_id": false,
        "optional_is_init": false,
        "option_root_id": null,
        "option_appui_id": null,
        "project": "",
        "repository_default": "",
        "origin": "",
        "db": null,
        "options": null,
        "last_error": null,
        "routes": [],
        "pref": null,
        "projects": null,
        "repositories_list": [],
        "_mvc": null,
        "_plugin": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Ide",
    "summary": ""
}