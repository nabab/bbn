{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Ide",
    "namespace": true,
    "realName": "Ide",
    "realNamespace": "bbn\\Appui",
    "traits": [
        "bbn\\Models\\Tts\\Optional",
        "bbn\\Mvc\\Common"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Ide.php",
    "startLine": 22,
    "endLine": 3727,
    "numMethods": 120,
    "numProperties": 24,
    "numConstants": 10,
    "numStaticProperties": 10,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "backup_path": null,
        "backup_pref_path": null,
        "ide_path": false,
        "dev_path": false,
        "path_type": false,
        "permissions": false,
        "current_file": false,
        "current_id": false,
        "optional_is_init": false,
        "option_root_id": null,
        "project": "",
        "repository_default": "",
        "origin": "",
        "db": null,
        "options": null,
        "last_error": null,
        "routes": [],
        "pref": null,
        "projects": null,
        "repositories_list": [],
        "_mvc": null,
        "_plugin": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Ide",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "error": {
            "name": "error",
            "summary": "Sets the last error as the given string.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function error(string $st)\n  {\n    X::log($st, \"ide\");\n    $this->last_error = $st;\n    return $this->last_error;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 102,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "error",
            "returns": [],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the last error as the given string.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the last error as the given string.\n   *\n   * @param string $st\n   * @return string\n   *\/"
        },
        "__construct": {
            "name": "__construct",
            "summary": "ide constructor.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(Db $db,  Option $options, $routes, Preferences $pref, string $project = '', string $plugin = 'appui-ide')\n  {\n    $this->db      = $db;\n    $this->options = $options;\n    $this->routes  = $routes;\n    $this->pref    = $pref;\n    $this->fs      = new System();\n    $this->origin  = $plugin;\n    $this->setProject($project);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 117,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 4,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "options",
                    "position": 1,
                    "type": "bbn\\Appui\\Option",
                    "type_arr": [
                        "bbn\\Appui\\Option"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "routes",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "pref",
                    "position": 3,
                    "type": "bbn\\User\\Preferences",
                    "type_arr": [
                        "bbn\\User\\Preferences"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "project",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 5,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "appui-ide",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "ide constructor.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Option",
                        "name": "$options"
                    },
                    {
                        "tag": "param",
                        "type": "$routes"
                    },
                    {
                        "tag": "param",
                        "type": "Preferences",
                        "name": "$pref"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * ide constructor.\n   *\n   * @param Option    $options\n   * @param $routes\n   * @param Preferences $pref\n   *\/"
        },
        "init": {
            "name": "init",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function init()\n  {\n    if (!empty($this->project)) {\n      $this->repository_default = '';\n      $this->repositories       = $this->getRepositories();\n      foreach ($this->repositories as $i => $rep) {\n        if (empty($this->repository_default)) {\n          $this->repository_default = $rep['name'];\n        }\n\n        $this->repositories[$i]['root_path'] = $this->getRootPath($rep['name']);\n        if (!empty($rep['default'])) {\n          $this->repository_default = $rep['name'];\n        }\n      }\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 129,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "init",
            "returns": [],
            "arguments": []
        },
        "getDefaultRepository": {
            "name": "getDefaultRepository",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDefaultRepository()\n  {\n    return $this->repository_default;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 148,
            "endLine": 151,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDefaultRepository",
            "returns": [],
            "arguments": []
        },
        "setProject": {
            "name": "setProject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setProject(string $project)\n  {\n    $project_name = false;\n    \/\/case project is uid\n    if (Str::isUid($project) && !empty($rep = $this->options->option($project))) {\n      $this->projects = new Project($this->db, $project);\n      $project_name   = $rep['text'];\n    }\n    \/\/case project is name\n    elseif ((strlen($project) > 0) && !empty($opt = $this->options->fromCode($project, 'list', self::IDE_PROJECTS, self::BBN_APPUI))) {\n      $this->projects = new Project($this->db, $opt);\n      $project_name   = $this->options->text($opt);\n    }\n    \/\/ case project is not defined get default\n    elseif (defined('BBN_APP_NAME') && !empty($opt = $this->options->fromCode(constant('BBN_APP_NAME'), 'list', self::IDE_PROJECTS, self::BBN_APPUI))) {\n      $this->projects = new Project($this->db, $opt);\n      $project_name   = constant('BBN_APP_NAME');\n    }\n\n    $this->project = $project_name;\n    if ($project_name && !empty($this->projects)) {\n      $this->init();\n      $this->_ide_path();\n    }\n\n    return $project_name;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 154,
            "endLine": 180,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setProject",
            "returns": [],
            "arguments": [
                {
                    "name": "project",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getProject": {
            "name": "getProject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getProject(): ?string\n  {\n    return $this->projects ? $this->projects->getId() : null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 183,
            "endLine": 186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getProject",
            "returns": [
                null,
                "string"
            ],
            "arguments": []
        },
        "isProject": {
            "name": "isProject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isProject(string $url)\n  {\n    $rep = $this->repositoryFromUrl($url);\n    \/\/$repository = $this->repositories($rep);\n    $repository = $this->repository($rep);\n    if (is_array($repository) && !empty($repository)) {\n      if (($repository['alias_code'] === 'bbn-project')) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 189,
            "endLine": 201,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isProject",
            "returns": [],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOrigin": {
            "name": "getOrigin",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getOrigin()\n  {\n    return $this->origin;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 204,
            "endLine": 207,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOrigin",
            "returns": [],
            "arguments": []
        },
        "isComponent": {
            "name": "isComponent",
            "summary": "Checks if a repository is a Component manager",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isComponent($rep)\n  {\n    \/\/$rep = $this->repositories($rep);\n    if (is_string($rep)) {\n      $rep = $this->repository($rep);\n    }\n    if ($rep && isset($rep['tabs']) && ($rep['alias_code'] === \"components\")) {\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 216,
            "endLine": 227,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isComponent",
            "returns": [],
            "arguments": [
                {
                    "name": "rep",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if a repository is a Component manager\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$rep"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if a repository is a Component manager\n   *\n   * @param string|array $rep\n   * @return bool\n   *\/"
        },
        "isComponentFromUrl": {
            "name": "isComponentFromUrl",
            "summary": "Checks if a repository is a Component from URL",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isComponentFromUrl(string $url)\n  {\n    $bits = explode(\"\/\", $url);\n    $idx = array_search('components', $bits);\n    if (($idx > 1) && ($idx < (count($bits) - 2))) {\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 237,
            "endLine": 246,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isComponentFromUrl",
            "returns": [],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if a repository is a Component from URL\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "This is wrong as it will return true if a file or a folder are called components"
                }
            },
            "comments": "  \/**\n   * Checks if a repository is a Component from URL\n   *\n   * @todo This is wrong as it will return true if a file or a folder are called components\n   * @param string $url\n   * @return bool\n   *\/"
        },
        "isLibFromUrl": {
            "name": "isLibFromUrl",
            "summary": "Checks if is a Lib from URL",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isLibFromUrl(string $url)\n  {\n    $ele = explode(\"\/\", $url);\n    if (is_array($ele)) {\n      if ($ele[2] === 'lib') {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 255,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isLibFromUrl",
            "returns": [],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if is a Lib from URL\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if is a Lib from URL\n   *\n   * @param string $url\n   * @return bool\n   *\/"
        },
        "isCliFromUrl": {
            "name": "isCliFromUrl",
            "summary": "Checks if is a Cli from URL",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isCliFromUrl(string $url)\n  {\n    $ele = explode(\"\/\", $url);\n    if (is_array($ele)) {\n      if ($ele[2] === 'cli') {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 274,
            "endLine": 284,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isCliFromUrl",
            "returns": [],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if is a Cli from URL\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if is a Cli from URL\n   *\n   * @param string $url\n   * @return bool\n   *\/"
        },
        "listTabsWithFile": {
            "name": "listTabsWithFile",
            "summary": "Function that returns the list of tab that contains a file or not for mvc and component",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function listTabsWithFile(string $type, string $path, string $repository)\n  {\n    $list = [];\n    $root = $this->getRootPath($repository);\n    if ($type === 'mvc') {\n      if (is_string($path)) {\n        if (strpos($path, 'mvc\/') === 0) {\n          $path = substr($path, 4);\n        }\n\n        if (strpos($path, '\/mvc') === 0) {\n          $path = substr($path, 5);\n        }\n      }\n    }\n\n    $tabs = $this->tabsOfTypeProject($type);\n\n    if (is_string($path) && is_array($tabs)) {\n      foreach ($tabs as $tab) {\n        $exist = false;\n        if ($type === 'mvc') {\n          $file = $root . 'mvc\/' . $tab['path'] . $path . '.';\n        } elseif ($type === 'components') {\n          $file = $root . $path . '.';\n        }\n\n        foreach ($tab['extensions'] as $ext) {\n          if ($this->fs->exists($file . $ext['ext'])) {\n            $exist = true;\n            break;\n          }\n        }\n\n        if (($exist === false) && !in_array($tab['url'], $list)) {\n          $list[] = $tab['url'];\n        }\n      }\n\n      return $list;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 294,
            "endLine": 337,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "listTabsWithFile",
            "returns": [],
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "type project of check"
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "path project"
                },
                {
                    "name": "repository",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Function that returns the list of tab that contains a file or not for mvc and component\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "type project of check"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "path project"
                    }
                ],
                "return": "list file with property extension and value the path of the file existing or not"
            },
            "comments": "  \/**\n   * Function that returns the list of tab that contains a file or not for mvc and component\n   *\n   * @param string $type type project of check\n   * @param string $path path project\n   * @return bool||array list file with property extension and value the path of the file existing or not\n   *\/"
        },
        "hasError": {
            "name": "hasError",
            "summary": "Returns true if the error function has been called.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasError()\n  {\n    return !empty($this->last_error);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 345,
            "endLine": 348,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "hasError",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns true if the error function has been called.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the error function has been called.\n   *\n   * @return bool\n   *\/"
        },
        "getLastError": {
            "name": "getLastError",
            "summary": "Returns last recorded error, and null if none.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastError()\n  {\n    return $this->last_error;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 356,
            "endLine": 359,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLastError",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns last recorded error, and null if none.\n",
                "params": [],
                "return": "last recorded error, and null if none"
            },
            "comments": "  \/**\n   * Returns last recorded error, and null if none.\n   *\n   * @return mixed last recorded error, and null if none\n   *\/"
        },
        "getRepositories": {
            "name": "getRepositories",
            "summary": "Makes the repositories' configurations.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRepositories(string $project_name = '')\n  {\n    return $this->projects ? $this->projects->getRepositories($project_name ?: $this->project) : null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 371,
            "endLine": 374,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getRepositories",
            "returns": [],
            "arguments": [
                {
                    "name": "project_name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The repository's name (code)"
                }
            ],
            "doc": {
                "description": "Makes the repositories' configurations.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code",
                        "description": "The repository's name (code)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Makes the repositories' configurations.\n   *\n   * @param string $code The repository's name (code)\n   * @return array|bool\n   *\/"
        },
        "repository": {
            "name": "repository",
            "summary": "Gets a repository's configuration.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function repository($name)\n  {\n    return $this->projects ? $this->projects->repository($name) : null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 383,
            "endLine": 386,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "repository",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The repository's name (code)"
                }
            ],
            "doc": {
                "description": "Gets a repository's configuration.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code",
                        "description": "The repository's name (code)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets a repository's configuration.\n   *\n   * @param string $code The repository's name (code)\n   * @return array|bool\n   *\/"
        },
        "repositoryById": {
            "name": "repositoryById",
            "summary": "Returns the repository object basing on the given id",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function repositoryById(string $id)\n  {\n    return $this->projects ? $this->projects->repositoryById($id) : null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 395,
            "endLine": 398,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "repositoryById",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the repository object basing on the given id\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the repository object basing on the given id\n   *\n   * @param string $id\n   * @return void\n   *\/"
        },
        "repositoryFromUrl": {
            "name": "repositoryFromUrl",
            "summary": "Returns the repository's name or object from an URL.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function repositoryFromUrl(string $url, bool $obj = false)\n  {\n    \/\/search repository\n    return $this->projects ? $this->projects->repositoryFromUrl($url, $obj) : null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 408,
            "endLine": 412,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "repositoryFromUrl",
            "returns": [],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "obj",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the repository's name or object from an URL.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$obj"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the repository's name or object from an URL.\n   *\n   * @param string $url\n   * @param bool   $obj\n   * @return bool|int|string\n   *\/"
        },
        "isMVC": {
            "name": "isMVC",
            "summary": "Checks if a repository is a MVC",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isMVC(array $rep)\n  {\n    if (\n      isset($rep['tabs'])\n      && ($rep['alias_code'] === 'mvc')\n    ) {\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 421,
            "endLine": 431,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isMVC",
            "returns": [],
            "arguments": [
                {
                    "name": "rep",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if a repository is a MVC\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$rep"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if a repository is a MVC\n   *\n   * @param string $rep\n   * @return bool\n   *\/"
        },
        "isMVCFromUrl": {
            "name": "isMVCFromUrl",
            "summary": "Checks if a repository is a MVC from URL",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isMVCFromUrl(string $url)\n  {\n    $ele = explode(\"\/\", $url);\n    if (is_array($ele)) {\n      if ($ele[2] === 'mvc') {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 440,
            "endLine": 450,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isMVCFromUrl",
            "returns": [],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if a repository is a MVC from URL\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if a repository is a MVC from URL\n   *\n   * @param string $url\n   * @return bool\n   *\/"
        },
        "decipherPath": {
            "name": "decipherPath",
            "summary": "Replaces the constant at the first part of the path with its value.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function decipherPath($st)\n  {\n    \/\/return $this->projects::decipherPath($st);\n    $st = Str::parsePath($st);\n    \/\/get root absolute of the file\n    foreach ($this->repositories as $i => $rep) {\n      if (strpos($st, $rep['name']) === 0) {\n        $root    = $rep['root_path']; \/\/$this->getRootPath($i);\n        $bit_rep = explode('\/', $i);\n        break;\n      }\n    }\n\n    \/\/the root of the file is removed\n    if (!empty($root) && !empty($bit_rep)) {\n      $bits      = explode('\/', $st);\n      $part_bits = array_diff($bits, $bit_rep);\n      \/\/array_shift($part_bits);\n      \/** @var string $path The path that will be returned *\/\n      $path = $root . '\/' . implode('\/', $part_bits);\n      return Str::parsePath($path);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 459,
            "endLine": 483,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "decipherPath",
            "returns": [],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Replaces the constant at the first part of the path with its value.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Replaces the constant at the first part of the path with its value.\n   *\n   * @param string $st\n   * @return bool|string\n   *\/"
        },
        "getAppPath": {
            "name": "getAppPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAppPath(): string\n  {\n    return $this->projects->getAppPath();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 486,
            "endLine": 489,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getAppPath",
            "returns": [
                "string"
            ],
            "arguments": []
        },
        "getLibPath": {
            "name": "getLibPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLibPath(): string\n  {\n    return $this->projects->getLibPath();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 492,
            "endLine": 495,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLibPath",
            "returns": [
                "string"
            ],
            "arguments": []
        },
        "getDataPath": {
            "name": "getDataPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDataPath(string $plugin = '')\n  {\n    if ($this->project !== 'apst-app') {\n      if ((strlen($plugin) > 0)\n        && empty(array_search(substr($plugin, strlen('appui-')), array_keys($this->routes)))\n      ) {\n        return false;\n      }\n    }\n\n    return $this->projects->getDataPath($plugin);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 498,
            "endLine": 509,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getDataPath",
            "returns": [],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getNameProject": {
            "name": "getNameProject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNameProject()\n  {\n    return $this->project;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 512,
            "endLine": 515,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getNameProject",
            "returns": [],
            "arguments": []
        },
        "getRootPath": {
            "name": "getRootPath",
            "summary": "Gets the real root path from a repository's id as recorded in the options.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRootPath($rep)\n  {\n    return $this->projects->getRootPath($rep);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 524,
            "endLine": 527,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getRootPath",
            "returns": [],
            "arguments": [
                {
                    "name": "rep",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The repository's name (code) or the repository's configuration"
                }
            ],
            "doc": {
                "description": "Gets the real root path from a repository's id as recorded in the options.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$repository",
                        "description": "The repository's name (code) or the repository's configuration"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the real root path from a repository's id as recorded in the options.\n   *\n   * @param string|array $repository The repository's name (code) or the repository's configuration\n   * @return bool|string\n   *\/"
        },
        "load": {
            "name": "load",
            "summary": "(Load)s a file.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function load(string $url)\n  {\n    $real = $this->urlToReal($url, true);\n\n    if (\n      is_array($real)\n      && !empty($real['file'])\n      && !empty($real['mode'])\n      && !empty($real['repository'])\n    ) {\n      $this->_set_current_file($real['file']);\n      X::log([$url, $real['file'], self::$current_file, self::$current_id], 'load');\n      $f = [\n        'mode' => $real['mode'],\n        'tab' => $real['tab'],\n        'ssctrl' => $real['ssctrl'] ?? 0,\n        'extension' => Str::fileExt(self::$current_file),\n        'permissions' => false,\n        'selections' => false,\n        'line' => false,\n        'char' => false,\n        'marks' => false,\n        'repository' => $real['repository']['code'],\n        \/\/'file' => self::$current_file\n      ];\n\n      if ($this->fs->isFile(self::$current_file)) {\n        $f['value'] = $this->fs->getContents(self::$current_file);\n\n        $root = $this->getRootPath($real['repository']['name']);\n\n        $file      = substr($real['file'], strlen($root));\n        $file_name = Str::fileExt($real['file'], 1)[0];\n\n        $file_path = substr($url,  strlen($real['repository']['name']) + 1);\n\n        $file_path = substr($file_path, 0, strpos($file_path, $file_name) - 1);\n\n        $val = [\n          'repository' => $real['repository'],\n          'filePath' => X::dirname($file),\n          'ssctrl' => $real['ssctrl'] ?? 0,\n          'filename' => $file_name,\n          'component_vue' => $this->isComponentFromUrl($url),\n          'extension' => Str::fileExt($real['file'], 1)[1],\n          'full_path' => Str::parsePath($real['repository']['path'] . '\/' . $file),\n          'path' => $file_path, \/\/ substr($file_path,  strlen($real['repository']['path'])+1),\n          'tab' => $real['tab']\n        ];\n\n        if ($preferences = $this->getFilePreferences($val)) {\n          $f = array_merge($f, $preferences);\n        }\n\n        if (($permissions = $this->getFilePermissions())\n          && ($this->project === BBN_APP_NAME)\n        ) {\n          $f = array_merge($f, $permissions);\n          \/*if ( $id_opt = $this->optionId() ){\n            $val_opt = $this->options->option($id_opt);\n          }*\/\n          \/*if( !empty($val_opt) ){\n            foreach ( $f as $n => $v ){\n              if ( isset($val_opt[$n]) ){\n                $f[$n] = $val_opt[$n];\n              }\n            }\n          }*\/\n        }\n      } elseif (\n        !empty($real['tab'])\n        && (($i = X::find($real['repository']['tabs'], ['url' => $real['tab']])) !== null)\n      ) {\n        if (!empty($real['repository']['tabs'][$i]['extensions'][0]['default'])) {\n          $f['value'] = $real['repository']['tabs'][$i]['extensions'][0]['default'];\n        }\n      } elseif (!empty($real['repository']['extensions'][0]['default'])) {\n        $f['value'] = $real['repository']['extensions'][0]['default'];\n      } else {\n        $f['value'] = '';\n      }\n\n      $f['id'] = self::$current_id;\n      return $f;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 541,
            "endLine": 628,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "load",
            "returns": [],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "File's URL"
                }
            ],
            "doc": {
                "description": "(Load)s a file.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url",
                        "description": "File's URL"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * (Load)s a file.\n   *\n   * @param string $url File's URL\n   * @return array|bool\n   *\/"
        },
        "save": {
            "name": "save",
            "summary": "Saves a file.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function save(array $file)\n  {\n    if (empty($file['full_path'])) {\n      throw new \\Exception(X::_(\"No file given to save\"));\n    }\n\n    $file['full_path'] = str_replace('\/_end_', '', $file['full_path']);\n    if ($this->_set_current_file($this->decipherPath($file['full_path']))) {\n      \/*if ( $this->getOrigin() !== 'appui-ide' ){\n        die(var_dump(self::$current_file, self::$current_id));\n      }*\/\n\n      \/\/ Delete the file if code is empty and if it isn't a super controller\n      if (empty($file['code']) && ($file['tab'] !== '_super')) {\n        if (@unlink(self::$current_file)) {\n          if ($file['extension'] === 'ts') {\n            @unlink(substr(self::$current_file, 0, -2) . 'js');\n          }\n\n          \/\/temporaney\n          if ($this->getOrigin() !== 'appui-ide') {\n            \/\/ Remove permissions\n            $this->deletePerm();\n          }\n\n          if (!empty(self::$current_id)) {\n            \/\/ Remove ide backups ad file preference\n            $this->_backup_history($file, 'delete');\n          }\n\n          return ['deleted' => true];\n        }\n      }\n\n      \/\/in case of file create or modify history and if exists file prference modify\n      if ($this->fs->isFile(self::$current_file)) {\n        $this->_backup_history($file, 'create');\n        $this->_backup_preference_files($file, $file['state'], 'change');\n      } elseif (!$this->fs->isDir(X::dirname(self::$current_file))) {\n        $this->fs->createPath(X::dirname(self::$current_file));\n      }\n\n      if (!empty($file['tab']) && ($file['tab'] === 'php') && !$this->fs->isFile(self::$current_file)) {\n        if (!$this->createPermByReal($file['full_path'])) {\n          return $this->error(X::_(\"Impossible to create the option\"));\n        }\n      }\n\n      if (!file_put_contents(self::$current_file, $file['code'])) {\n        return $this->error(X::_('Error: Save'));\n      }\n\n      if ($file['extension'] === 'ts') {\n        $cmd = \"tsc -t 'ES2015' \";\n        if (!defined('BBN_IS_DEV') || !BBN_IS_DEV) {\n          $cmd .= '--removeComments ';\n        }\n\n        $error = shell_exec($cmd . escapeshellcmd(self::$current_file));\n        if ($error) {\n          return ['success' => true, 'error' => $error];\n        }\n      }\n\n      return ['success' => true];\n    }\n\n    return $this->error(X::_('Error: Save'));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 637,
            "endLine": 705,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "save",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Saves a file.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Saves a file.\n   *\n   * @param array $file\n   * @return array|string\n   *\/"
        },
        "createMvcVue": {
            "name": "createMvcVue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createMvcVue()\n  {\n  }",
            "parent": false,
            "trait": false,
            "startLine": 708,
            "endLine": 710,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "createMvcVue",
            "returns": [],
            "arguments": []
        },
        "createMvcJs": {
            "name": "createMvcJs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createMvcJs()\n  {\n  }",
            "parent": false,
            "trait": false,
            "startLine": 713,
            "endLine": 715,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "createMvcJs",
            "returns": [],
            "arguments": []
        },
        "createMvc": {
            "name": "createMvc",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createMvc()\n  {\n  }",
            "parent": false,
            "trait": false,
            "startLine": 718,
            "endLine": 720,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "createMvc",
            "returns": [],
            "arguments": []
        },
        "createAction": {
            "name": "createAction",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createAction()\n  {\n  }",
            "parent": false,
            "trait": false,
            "startLine": 723,
            "endLine": 725,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "createAction",
            "returns": [],
            "arguments": []
        },
        "create": {
            "name": "create",
            "summary": "Creates a new file|directory",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function create(array $cfg)\n  {\n    if (\n      X::hasDeepProp($cfg, ['repository', 'path'], true)\n      && X::hasProps($cfg, ['name', 'path'], true)\n      && X::hasProps($cfg, ['is_file', 'extension', 'tab', 'tab_path'])\n    ) {\n      $path = $this->getRootPath($cfg['repository']['name']);\n\n      if (($cfg['repository']['alias_code'] === 'bbn-project') && X::hasProp($cfg, 'template')) {\n        switch ($cfg['template']) {\n          case 'mvc_vue':\n            return;\n            break;\n          case 'mvc_js':\n            return;\n            break;\n          case 'mvc':\n            return;\n            break;\n          case 'action':\n            return;\n            break;\n          default:\n            if (!empty($cfg['type'])) {\n              if ($cfg['type'] === 'components') {\n                $path .= $cfg['path'] . $cfg['name'];\n              }\n\n              if ($cfg['type'] === 'mvc') {\n                if ($cfg['path'] === 'mvc\/') {\n                  $path .= 'mvc\/' . $cfg['tab_path'];\n                } else {\n                  $path .= 'mvc\/' . $cfg['tab_path'] . $cfg['path'];\n                }\n              }\n\n              if (in_array($cfg['type'], ['lib', 'cli', 'classes'])) {\n                $path .= $cfg['path'];\n              }\n            }\n        }\n      } else {\n        if (!empty($cfg['tab_path'])) {\n          $path .= $cfg['tab_path'];\n        }\n      }\n\n      if (($cfg['path'] !== '.\/') && empty($cfg['type'])) {\n        $path .= $cfg['path'];\n      }\n\n      \/\/ New folder\n      if (empty($cfg['is_file'])) {\n        if ($this->fs->isDir($path . $cfg['name'])) {\n          $this->error(X::_(\"Directory exists\"));\n          return false;\n        }\n\n        if ((($cfg['repository']['alias_code'] !== 'bbn-project'))\n          || (($cfg['repository']['alias_code'] === 'bbn-project') && !empty($cfg['type']))\n          && ($cfg['type'] !== 'components')\n        ) {\n          $path .= $cfg['name'];\n        }\n\n        if (empty($this->fs->createPath($path))) {\n          $this->error(X::_(\"Impossible to create the directory\"));\n          return false;\n        }\n\n        return true;\n      }\n      \/\/ New file\n      elseif (!empty($cfg['is_file']) && !empty($cfg['extension'])) {\n        $file = $path . '\/' . $cfg['name'] . '.' . $cfg['extension'];\n        $file = str_replace('\/\/', '\/', $file);\n        if (!$this->fs->isDir($path) && empty($this->fs->createPath($path))) {\n          $this->error(X::_(\"Impossible to create the container directory\"));\n          return false;\n        }\n\n        if ($this->fs->isDir($path)) {\n          if ($this->fs->isFile($file)) {\n            $this->error(X::_(\"File exists\"));\n            return false;\n          }\n\n          if (!file_put_contents($file, $cfg['default_text'])) {\n            $this->error(X::_(\"Impossible to create the file\"));\n            return false;\n          }\n        }\n\n        \/\/ Add item to options table for permissions\n        if ((empty($cfg['type']) || ($cfg['type'] !== 'components'))\n          && !empty($cfg['tab']) && ($cfg['tab_url'] === 'php') && !empty($file)\n        ) {\n          if (!$this->createPermByReal($file)) {\n            return $this->error(X::_(\"Impossible to create the option\"));\n          }\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 734,
            "endLine": 842,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "create",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Creates a new file|directory\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates a new file|directory\n   *\n   * @param array $cfg\n   * @return bool\n   *\/"
        },
        "copy": {
            "name": "copy",
            "summary": "Copies a file or a folder.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function copy(array $cfg)\n  {\n    return $this->_operations($cfg, 'copy');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 851,
            "endLine": 854,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "copy",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Copies a file or a folder.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Copies a file or a folder.\n   *\n   * @param $cfg\n   * @return bool\n   *\/"
        },
        "rename": {
            "name": "rename",
            "summary": "Renames a file or a folder.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function rename(array $cfg)\n  {\n    return $this->_operations($cfg, 'rename');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 863,
            "endLine": 866,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "rename",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Renames a file or a folder.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Renames a file or a folder.\n   *\n   * @param $cfg\n   * @return bool\n   *\/"
        },
        "move": {
            "name": "move",
            "summary": "Moves a file or a folder.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function move(array $cfg)\n  {\n    return $this->_operations($cfg, 'move');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 875,
            "endLine": 878,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "move",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Moves a file or a folder.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Moves a file or a folder.\n   *\n   * @param $cfg\n   * @return bool\n   *\/"
        },
        "delete": {
            "name": "delete",
            "summary": "Renames a file or a folder.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function delete(array $cfg)\n  {\n    return $this->_operations($cfg, 'delete');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 887,
            "endLine": 890,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "delete",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Renames a file or a folder.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Renames a file or a folder.\n   *\n   * @param $cfg\n   * @return bool\n   *\/"
        },
        "getFilePermissions": {
            "name": "getFilePermissions",
            "summary": "Gets file's permissions",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFilePermissions(string $file = null)\n  {\n\n    if (empty($file)) {\n      $file = self::$current_file;\n    }\n\n    if (\n      !empty($file)\n      && ($id_opt = $this->realToPerm($file))\n      && ($opt = $this->options->option($id_opt))\n    ) {\n      $ret = [\n        'permissions' => [\n          'id' => $opt['id'],\n          'code' => $opt['code'],\n          'text' => $opt['text'],\n          'children' => []\n        ]\n      ];\n      if (isset($opt['help'])) {\n        $ret['permissions']['help'] = $opt['help'];\n      }\n\n      $sopt = $this->options->fullOptions($opt['id']);\n      foreach ($sopt as $so) {\n        array_push(\n          $ret['permissions']['children'],\n          [\n            'code' => $so['code'],\n            'text' => $so['text']\n          ]\n        );\n      }\n\n      return $ret;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 904,
            "endLine": 943,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getFilePermissions",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The file's path"
                }
            ],
            "doc": {
                "description": "Gets file's permissions\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file",
                        "description": "The file's path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets file's permissions\n   *\n   * @param string $file The file's path\n   * @return array|false\n   *\/"
        },
        "createPermByReal": {
            "name": "createPermByReal",
            "summary": "Creates a permission option from a real file\/dir's path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createPermByReal(string $file, string $type = 'file'): ?string\n  {\n    if (\n      !empty($file)\n      \/\/ It must be a controller\n      && (strpos($file, '\/src\/mvc\/public\/') !== false)\n      && ($perm = Permissions::getInstance())\n    ) {\n      $is_file = $type === 'file';\n      \/\/ Check if it's an external route\n      $root_path = $this->getAppPath() . 'mvc\/public\/';\n      if (strpos($file, $root_path) === 0) {\n        \/\/ Remove root path\n        $f = substr($file, \\strlen($root_path), \\strlen($file) - 4);\n      }\n      else {\n        foreach ($this->routes as $r) {\n          if (strpos($file, $r['path']) === 0) {\n            \/\/ Remove route\n            $f = substr($file, strlen($r['path']) + strlen('src\/mvc\/public'), -4);\n            \/\/ Add the route's name to path\n            $f = str_replace('\/\/', '\/', $r['url'] . '\/' . $f);\n            break;\n          }\n        }\n      }\n\n      return $perm->fromPath($f, 'access', true);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 953,
            "endLine": 984,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "createPermByReal",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The real file\/dir's path"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": "",
                    "description": "The type of real (file\/dir)"
                }
            ],
            "doc": {
                "description": "Creates a permission option from a real file\/dir's path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file",
                        "description": "The real file\/dir's path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "The type of real (file\/dir)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates a permission option from a real file\/dir's path\n   *\n   * @param string $file The real file\/dir's path\n   * @param string $type The type of real (file\/dir)\n   * @return null|string\n   *\/"
        },
        "deletePerm": {
            "name": "deletePerm",
            "summary": "Deletes permission from a real file's path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deletePerm($file = null): bool\n  {\n    if (empty($file)) {\n      $file = self::$current_file;\n    }\n\n    if (!empty($file) && ($id_opt = $this->realToPerm($file)) && $this->options->remove($id_opt)) {\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 993,
            "endLine": 1004,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "deletePerm",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The real file's path"
                }
            ],
            "doc": {
                "description": "Deletes permission from a real file's path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file",
                        "description": "The real file's path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes permission from a real file's path\n   *\n   * @param string $file The real file's path\n   * @return bool\n   *\/"
        },
        "changePermByReal": {
            "name": "changePermByReal",
            "summary": "Changes permissions to a file\/dir from the old and new real file\/dir's path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function changePermByReal(string $old, string $new, string $type = 'file'): bool\n  {\n    $type = strtolower($type);\n    if (\n      !empty($old)\n      && !empty($new)\n      && !empty($this->fs->exists($new))\n      && ($id_opt = $this->realToPerm($old, $type))\n      && !$this->realToPerm($new, $type)\n    ) {\n      $is_file = $type === 'file';\n      $code    = $is_file ? Str::fileExt(X::basename($new), 1)[0] : X::basename($new) . '\/';\n      if ($id_parent = $this->createPermByReal(X::dirname($new) . '\/', 'dir')) {\n        $this->options->setCode($id_opt, $code);\n        $this->options->move($id_opt, $id_parent);\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1015,
            "endLine": 1035,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "changePermByReal",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "old",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The old file\/dir's path"
                },
                {
                    "name": "new",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The new file\/dir's path"
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": "",
                    "description": "The type (file\/dir)"
                }
            ],
            "doc": {
                "description": "Changes permissions to a file\/dir from the old and new real file\/dir's path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$old",
                        "description": "The old file\/dir's path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$new",
                        "description": "The new file\/dir's path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "The type (file\/dir)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Changes permissions to a file\/dir from the old and new real file\/dir's path\n   *\n   * @param string $old  The old file\/dir's path\n   * @param string $new  The new file\/dir's path\n   * @param string $type The type (file\/dir)\n   * @return bool\n   *\/"
        },
        "movePermByReal": {
            "name": "movePermByReal",
            "summary": "Moves permissions to a file\/dir from the old and new real file\/dir's path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function movePermByReal(string $old, string $new, string $type = 'file'): bool\n  {\n    $type = strtolower($type);\n    if (\n      !empty($old)\n      && !empty($new)\n      && !empty($this->fs->exists($new))\n    ) {\n      $id_opt     = $this->realToPerm($old, $type);\n      $id_new_opt = $this->realToPerm($new, $type);\n      if (empty($id_new_opt)) {\n        $id_new_opt = $this->createPermByReal(X::dirname($new) . '\/', 'dir');\n      }\n\n      if (($id_opt !== $id_new_opt) && !empty($id_new_opt)) {\n        $is_file = $type === 'file';\n        $code    = $is_file ? Str::fileExt(X::basename($new), 1)[0] : X::basename($new) . '\/';\n        if ($id_parent = $this->createPermByReal(X::dirname($new) . '\/', 'dir')) {\n          $this->options->setCode($id_opt, $code);\n          $this->options->move($id_opt, $id_parent);\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1046,
            "endLine": 1072,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "movePermByReal",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "old",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The old file\/dir's path"
                },
                {
                    "name": "new",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The new file\/dir's path"
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": "",
                    "description": "The type (file\/dir)"
                }
            ],
            "doc": {
                "description": "Moves permissions to a file\/dir from the old and new real file\/dir's path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$old",
                        "description": "The old file\/dir's path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$new",
                        "description": "The new file\/dir's path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "The type (file\/dir)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Moves permissions to a file\/dir from the old and new real file\/dir's path\n   *\n   * @param string $old  The old file\/dir's path\n   * @param string $new  The new file\/dir's path\n   * @param string $type The type (file\/dir)\n   * @return bool\n   *\/"
        },
        "realToPerm": {
            "name": "realToPerm",
            "summary": "Returns the permission's id from a real file\/dir's path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function realToPerm(string $file, $type = 'file')\n  {\n    if (empty($file)) {\n      $file = self::$current_file;\n    }\n\n    if (empty($file)) {\n      throw new \\Exception(X::_(\"The file can't be empty\"));\n    }\n\n    if (\n      !empty($file)\n      \/\/ It must be a controller\n      && (strpos($file, '\/src\/mvc\/public\/') !== false)\n    ) {\n      $is_file = $type === 'file';\n      $plugin = false;\n      $root_path = $this->getAppPath() . 'mvc\/public\/';\n      if (strpos($file, $root_path) === 0) {\n        \/\/ Remove root path\n        $f = substr($file, \\strlen($root_path));\n      }\n      \/\/ Internal route\n      if (empty($f)) {\n        \/\/ Check if it's an external route\n        foreach ($this->routes as  $r) {\n          if (substr($r['path'], -1) !== '\/') {\n            $r['path'] .= '\/';\n          }\n\n          if (strpos($file, $r['path']) === 0) {\n            $plugin = $r['name'];\n            \/\/ Remove route\n            $f = substr($file, \\strlen($r['path']));\n            \/\/ Remove \/mvc\/public\n            $f = substr($f, \\strlen('src\/mvc\/public\/'));\n            break;\n          }\n        }\n      }\n\n      if (!empty($f)) {\n        $bits = X::removeEmpty(explode('\/', $f));\n        $code = $is_file ? X::basename(array_pop($bits), '.php') : array_pop($bits) . '\/';\n        $bits = array_map(\n          function ($b) {\n            return $b . '\/';\n          },\n          array_reverse($bits)\n        );\n        array_unshift($bits, $code);\n        if ($plugin) {\n          array_push(\n            $bits,\n            'access',\n            'permissions',\n            strpos($plugin, 'appui-') === 0 ? substr($plugin, 6) : $plugin,\n            strpos($plugin, 'appui-') === 0 ? 'appui' : 'plugins'\n          );\n        } else {\n          array_push($bits, $this->_permissions());\n        }\n\n        return $this->options->fromCode($bits);\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1082,
            "endLine": 1150,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "realToPerm",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The real file\/dir's path"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": "",
                    "description": "The path type (file or dir)"
                }
            ],
            "doc": {
                "description": "Returns the permission's id from a real file\/dir's path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file",
                        "description": "The real file\/dir's path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "The path type (file or dir)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the permission's id from a real file\/dir's path\n   *\n   * @param string $file The real file\/dir's path\n   * @param string $type The path type (file or dir)\n   * @return bool|int\n   *\/"
        },
        "getFilePreferences": {
            "name": "getFilePreferences",
            "summary": "Gets file's preferences",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFilePreferences(array $cfg = []): ?array\n  {\n    if (!empty($cfg)) {\n      if (\n        !empty($backup = $this->_get_path_backup($cfg)) && !empty($backup['path_preference'])\n        && $this->fs->exists($backup['path_preference'] . $cfg['filename'] . '.json')\n      ) {\n        $pref = json_decode($this->fs->getContents($backup['path_preference'] . $cfg['filename'] . '.json'), true);\n        if (!empty($pref)) {\n          return [\n            'selections' => $pref['selections'] ?: [],\n            'marks' => isset($pref['marks']) ? $pref['marks'] : [],\n            'line' => (int)$pref['line'] ?: 0,\n            'char' => (int)$pref['char'] ?: 0,\n          ];\n        }\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1164,
            "endLine": 1184,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getFilePreferences",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "info for get file json"
                }
            ],
            "doc": {
                "description": "Gets file's preferences\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$cfg",
                        "description": "info for get file json"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets file's preferences\n   *\n   * @param string $cfg info for get file json\n   * @return array|null\n   *\/"
        },
        "getTheme": {
            "name": "getTheme",
            "summary": "Get theme current of the project",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTheme(): string\n  {\n    $opt_theme = $this->options->fromCode(self::THEME, self::IDE_PATH, self::BBN_APPUI);\n    $pref_arch = $this->pref->getClassCfg();\n    if ($this->pref && $this->projects) {\n      $pref = $this->db->selectOne(\n        $pref_arch['tables']['user_options'],\n        $pref_arch['arch']['user_options']['id'],\n        [\n          $pref_arch['arch']['user_options']['id_user'] => $this->pref->getUser(),\n          $pref_arch['arch']['user_options']['id_option'] => $this->projects->getId()\n        ]\n      );\n      \/\/if there is no preference, the theme value will take it from the option\n      if (!empty($pref)) {\n        $val = $this->db->selectOne(\n          $pref_arch['tables']['user_options_bits'],\n          'cfg',\n          [\n            $pref_arch['arch']['user_options_bits']['id_user_option'] => $pref,\n            $pref_arch['arch']['user_options_bits']['id_option'] => $opt_theme,\n          ]\n        );\n        $val = json_decode($val, true);\n        if (isset($val['theme'])) {\n          return $val['theme'];\n        }\n      }\n    }\n\n    return '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1192,
            "endLine": 1223,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getTheme",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Get theme current of the project\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Get theme current of the project\n   *\n   * @return string\n   *\/"
        },
        "setTheme": {
            "name": "setTheme",
            "summary": "Function for set preference theme for every single project",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setTheme(string $theme = '')\n  {\n    $opt_theme = $this->options->fromCode(self::THEME, self::IDE_PATH, self::BBN_APPUI);\n    $pref_arch = $this->pref->getClassCfg();\n\n    if (!empty($opt_theme)) {\n      \/\/id_option is the project\n      $pref = $this->db->selectOne(\n        $pref_arch['tables']['user_options'],\n        $pref_arch['arch']['user_options']['id'],\n        [\n          $pref_arch['arch']['user_options']['id_user'] => $this->pref->getUser(),\n          $pref_arch['arch']['user_options']['id_option'] => $this->projects->getId()\n        ]\n      );\n      \/\/if it does not exist, the preference for user and project is created\n      if (empty($pref)) {\n        $pref = $this->pref->add($this->projects->getId(), []);\n      }\n\n      if (!empty($pref)) {\n        $id_bit = $this->db->selectOne(\n          $pref_arch['tables']['user_options_bits'],\n          $pref_arch['arch']['user_options_bits']['id'],\n          [\n            $pref_arch['arch']['user_options_bits']['id_user_option'] => $pref,\n            $pref_arch['arch']['user_options_bits']['id_option'] => $opt_theme\n          ]\n        );\n        $cfg    = [\n          'id_option' => $opt_theme,\n          'cfg' => json_encode(['theme' => $theme])\n        ];\n\n        if (!empty($id_bit) && Str::isUid($id_bit)) {\n          if (!empty($this->pref->updateBit($id_bit, $cfg, true))) {\n            return true;\n          }\n        } else {\n          if (!empty($this->pref->addBit($pref, $cfg))) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1232,
            "endLine": 1279,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "setTheme",
            "returns": [],
            "arguments": [
                {
                    "name": "theme",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Function for set preference theme for every single project\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$theme"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Function for set preference theme for every single project\n   *\n   * @param string $theme\n   * @return string\n   *\/"
        },
        "setRecentFile": {
            "name": "setRecentFile",
            "summary": "Create or update bit recent file preference",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setRecentFile(string $file): bool\n  {\n    $bit            = false;\n    $id_recent_file = $this->options->fromCode(self::RECENT_FILE, self::IDE_PATH, self::BBN_APPUI);\n    if (!empty($id_recent_file)) {\n      \/\/search preference and if not exsist preference add a new\n      $pref    = $this->pref->getByOption($id_recent_file);\n      $id_pref = !empty($pref) ? $pref['id'] : $this->pref->add($id_recent_file, []);\n    }\n\n    if (!empty($id_pref)) {\n      \/\/search bit in relation at user preference\n      $bit_data = $this->_get_bit_by_file($file, $id_pref);\n    }\n\n    $date = date('Y-m-d H:i:s');\n    $cfg  = [];\n    \/\/set bit\n    if (($bit_data !== null)) {\n      $info = json_decode($bit_data['cfg'], true);\n      $cfg  = [\n        'id_option' => null,\n        'text' => $file,\n        'cfg' => [\n          'bit_creation' => $info['bit_creation'],\n          'last_date' => $date,\n          'number' => $info['number'] + 1,\n        ]\n      ];\n      if (!empty($this->pref->updateBit($bit_data['id'], $cfg, true))) {\n        $bit = true;\n      }\n    }\n    \/\/add bit\n    else {\n      $cfg = [\n        'bit_creation' => $date,\n        'last_date' => $date,\n        'number' => 0,\n      ];\n      if (\n        !empty($id_pref) && $this->pref->addBit(\n          $id_pref,\n          [\n            \/\/'id_option' => $id_link,\n            'id_option' => null,\n            'cfg' => json_encode($cfg),\n            'text' => $file,\n          ]\n        )\n      ) {\n        $bit = true;\n      }\n    }\n\n    return !empty($bit) && !empty($id_pref);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1294,
            "endLine": 1350,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setRecentFile",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "code option"
                }
            ],
            "doc": {
                "description": "Create or update bit recent file preference\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file",
                        "description": "code option"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "link id option file preference"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Create or update bit recent file preference\n   *\n   * @param string $file    code option\n   * @param string $id_link id option file preference\n   * @return bool\n   *\/"
        },
        "tracking": {
            "name": "tracking",
            "summary": "Add or update option file in repository",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tracking(array $file, string $file_code, array $info, bool $setRecent = true): bool\n  {\n    $bit = false;\n    if (($id_option_opened = $this->options->fromCode(self::OPENED_FILE, self::IDE_PATH, self::BBN_APPUI))) {\n      \/\/search preference and if not exsist preference add a new\n      $pref      = $this->pref->getByOption($id_option_opened);\n      $id_pref   = !empty($pref) ? $pref['id'] : $this->pref->add($id_option_opened, []);\n      $pref_file = $this->_backup_preference_files($file, $info, 'create');\n      if (!empty($pref_file) && !empty($id_pref)) {\n        $file_path = $file['repository']['name'] . '\/' . $file_code;\n        $bit_data  = $this->_get_bit_by_file($pref_file, $id_pref);\n        if ($bit_data !== null) {\n          $cfg = [\n            'cfg' => [\n              'last_open' => date('Y-m-d H:i:s')\n            ]\n          ];\n          \/\/set bit why exist\n          if (!empty($this->pref->updateBit($bit_data['id'], $cfg, true))) {\n            $bit = true;\n          }\n        }\n        \/\/add bit why not exist\n        else {\n          $cfg = [\n            'last_open' => date('Y-m-d H:i:s')\n          ];\n\n          if (\n            !empty($id_pref) && $this->pref->addBit(\n              $id_pref,\n              [\n                'id_option' => null,\n                'cfg' => json_encode($cfg),\n                'text' => $file_path\n              ]\n            )\n          ) {\n            $bit = true;\n          }\n        }\n\n        if ($setRecent) {\n          return !empty($bit) && !empty($pref_file) && !empty($id_pref) && $this->setRecentFile($file_path);\n        } else {\n          return !empty($bit) && !empty($pref_file) && !empty($id_pref);\n        }\n      }\n    }\n\n    return $pref_file;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1358,
            "endLine": 1409,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "tracking",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "file_code",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "info",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "setRecent",
                    "position": 3,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Add or update option file in repository\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Add or update option file in repository\n   *\n   * @return bool\n   *\/"
        },
        "getRecentFiles": {
            "name": "getRecentFiles",
            "summary": "return list files preferences",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRecentFiles(int $limit = 10): ?array\n  {\n    $perm = $this->options->fromCode(self::RECENT_FILE, self::IDE_PATH, self::BBN_APPUI);\n    $all  = [];\n    if (!empty($perm)) {\n      $pref = $this->pref->getByOption($perm);\n      if (!empty($pref['id'])) {\n        $pref_arch = $this->pref->getClassCfg();\n        $arch      = &$pref_arch['arch']['user_options_bits'];\n        $recents   = $this->db->rselectAll(\n          [\n            'table' => $pref_arch['tables']['user_options_bits'],\n            'fields' => [\n              $arch['id'],\n              $arch['id_user_option'],\n              $arch['id_option'],\n              $arch['cfg'],\n              $arch['text'],\n              'date' => 'JSON_UNQUOTE(JSON_EXTRACT('.$this->db->csn($arch['cfg'], true).', \"$.last_date\"))',\n              'num' => 'JSON_UNQUOTE(JSON_EXTRACT('.$this->db->csn($arch['cfg'], true).', \"$.number\"))'\n            ],\n            'where' => [\n              'conditions' => [[\n                'field' => $arch['id_user_option'],\n                'value' => $pref['id']\n              ]]\n            ],\n            'limit' => 10,\n            'order' => ['date' => \"DESC\"]\n          ]\n        );\n        \/\/configure path for link  for each recent file\n        foreach ($recents as $id => $bit) {\n          \/\/path for link\n          $arr  = explode(\"\/\", $bit['text']);\n          $type = '';\n          $root = $arr[0] . '\/' . $arr[1];\n          if (!empty($arr[2])) {\n            $type = $arr[2];\n            unset($arr[2]);\n          }\n\n          unset($arr[0]);\n          unset($arr[1]);\n          if (($type !== 'mvc') && ($type !== 'components')) {\n            $tab = 'code';\n          } else {\n            $tab = array_shift($arr);\n            $tab = $tab === 'public' ? 'php' : $tab;\n          }\n\n          $arr  = implode('\/', $arr);\n          $file = explode('.', $arr)[0];\n          $path = Str::parsePath('file\/' . $root . '\/' . $type . '\/' . $file . '\/_end_\/' . $tab);\n\n          $value = json_decode($bit['cfg'], true);\n          $all[] = [\n            'cfg' => !empty($value['file_json']) ? json_decode($this->fs->getContents(self::$backup_path . $value['file_json']), true) : [],\n            'file' => Str::parsePath($bit['text']),\n            'repository' => $root,\n            'path' => $path,\n            'type' => $type === '' ? false : $type\n          ];\n        }\n      }\n    }\n\n    return !empty($all) ? $all : null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1418,
            "endLine": 1486,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getRecentFiles",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "limit",
                    "position": 0,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 10,
                    "default_name": "",
                    "description": "file numbers to be taken"
                }
            ],
            "doc": {
                "description": "return list files preferences\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$limit",
                        "description": "file numbers to be taken"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * return list files preferences\n   *\n   * @param integer $limit file numbers to be taken\n   * @return null|array\n   *\/"
        },
        "realToUrl": {
            "name": "realToUrl",
            "summary": "Returns the file's URL from the real file's path.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function realToUrl(string $file)\n  {\n    return $this->projects->realToUrl($file);\n    \/\/get root for path\n    \/\/foreach ( $this->repositories() as $i => $d ){\n    \/* foreach ( $this->repositories as $i => $d ){\n      $root = $d['root_path'];\n      if (\n        $root &&\n        (strpos($file, $root) === 0)\n      ){\n        $rep = $i;\n        break;\n      }\n    }\n    if ( isset($rep) ){\n      $res = $rep.'\/src\/';\n      $bits = explode('\/', substr($file, \\strlen($root)));\n\n      \/\/ MVC\n      if ( !empty($d['tabs']) ){\n        $tab_path = array_shift($bits);\n        $fn = array_pop($bits);\n        $ext = Str::fileExt($fn);\n        $fn = Str::fileExt($fn, 1)[0];\n        $res .= implode('\/', $bits);\n        foreach ( $d['tabs'] as $k => $t ){\n          if (\n            empty($t['fixed']) &&\n            ($t['path'] === $tab_path . '\/')\n          ){\n            $res .= \"\/$fn\/$t[url]\";\n            break;\n          }\n        }\n      }\n      \/\/ Normal file\n      else {\n        $res .= implode('\/', $bits);\n      }\n      return Str::parsePath($res);\n    }\n    return false;*\/\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1502,
            "endLine": 1545,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "realToUrl",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The real file's path"
                }
            ],
            "doc": {
                "description": "Returns the file's URL from the real file's path.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file",
                        "description": "The real file's path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the file's URL from the real file's path.\n   *\n   * @param string $file The real file's path\n   * @return bool|string\n   *\/"
        },
        "isPlugin": {
            "name": "isPlugin",
            "summary": "check if $path is of a plugin",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isPlugin($path)\n  {\n    $plugin = false;\n    if (is_array($this->routes)) {\n      foreach ($this->routes as $route) {\n        if ($path === $route['path'] . 'src\/') {\n          $plugin = true;\n          break;\n        }\n      }\n    }\n\n    return $plugin;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1554,
            "endLine": 1567,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isPlugin",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "check if $path is of a plugin\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * check if $path is of a plugin\n   *\n   * @param string $path\n   * @return bool\n   *\/"
        },
        "urlToReal": {
            "name": "urlToReal",
            "summary": "Gets the real file's path from an URL",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function urlToReal(string $url, bool $obj = false)\n  {\n    \/\/get reposiotry of the url\n    if (($rep = $this->repositoryFromUrl($url, true))\n      && ($res = $this->getRootPath($rep['name']))\n    ) {\n      \/\/for analyze url for get tab , type etc..\n      $bits = explode('\/', substr($url, \\strlen($rep['name']) + 1));\n      \/\/if is project get tabs or if is components or is mvc\n      if ($rep['alias_code'] === 'bbn-project') {\n        if (\n          !empty($this->isComponentFromUrl($url))\n          && !empty($ptype = $this->getType('components'))\n        ) {\n          $rep['tabs'] = $ptype['tabs'];\n        }\n\n        if (\n          !empty($this->isMVCFromUrl($url))\n          && !empty($ptype = $this->getType('mvc'))\n        ) {\n          $rep['tabs'] = $ptype['tabs'];\n        }\n      }\n      \/*\n      elseif (!empty($rep['tabs'])) {\n        $rep['tabs'] = $rep['tabs'];\n      }*\/\n\n      $o            = [\n        'mode' => false,\n        'repository' => $rep,\n        'tab' => false\n      ];\n      $tab = array_pop($bits);\n      $end = array_pop($bits);\n      $file_name = array_pop($bits);\n      if ($end === '_end_') {\n        \/\/ Tab's nane\n        \/\/case component or mvc\n        if (!empty($rep['tabs']) && (end($bits) !== 'code')) {\n          \/\/ Tab's nane\n          \/\/ File's name\n          if ($rep['alias_code'] === 'bbn-project') {\n            array_shift($bits);\n          }\n          \/\/ File's path\n          $file_path = implode('\/', $bits);\n          \/\/ Check if the file is a superior super-controller\n          $ssc       = $this->_superior_sctrl($tab, $file_path);\n          $tab       = $ssc['tab'];\n          $o['tab']  = $tab;\n          $file_path = $ssc['path'] . '\/';\n          $i         = X::find($rep['tabs'], ['url' => $tab]);\n          if ($i !== null) {\n            if (!isset($rep['tabs'][$i])) {\n              throw new \\Error(\"No index corresponding to $i\");\n            }\n\n            $tab = $rep['tabs'][$i];\n            if (!empty($this->isMVCFromUrl($url))) {\n              $res .= 'mvc\/';\n            }\n\n            if (!isset($rep['type']) || ($rep['type'] !== 'components')) {\n              if (empty($this->isComponentFromUrl($url))) {\n                $res .= $tab['path'];\n              }\n              else {\n                $res .= 'components\/';\n              }\n            }\n\n\n            if (!empty($tab['fixed'])) {\n              $res        .= $file_path . $tab['fixed'];\n              $o['mode']   = $tab['extensions'][0]['mode'];\n              $o['ssctrl'] = $ssc['ssctrl'];\n            } else {\n              $res   .= $file_path . $file_name;\n              $ext_ok = false;\n              foreach ($tab['extensions'] as $e) {\n                if ($this->fs->isFile(\"$res.$e[ext]\")) {\n                  $res      .= \".$e[ext]\";\n                  $ext_ok    = true;\n                  $o['mode'] = $e['mode'];\n                  break;\n                }\n              }\n\n              if (empty($ext_ok)) {\n                $res      .= '.' . $tab['extensions'][0]['ext'];\n                $o['mode'] = $tab['extensions'][0]['mode'];\n              }\n            }\n          }\n\n          \/*else {\n            return false;\n          }*\/\n        }\n        else {\n          \/\/ File's name\n          $res .= '\/' . implode('\/', $bits) . '\/' . $file_name;\n          if (is_array($rep)) {\n            \/\/temporaney for lib plugin\n            if (!empty($rep['extensions'])) {\n              foreach ($rep['extensions'] as $ext) {\n                if ($this->fs->isFile(\"$res.$ext[ext]\")) {\n                  $res      .= \".$ext[ext]\";\n                  $o['mode'] = $ext['mode'];\n                }\n              }\n            } else {\n              if ($this->fs->isFile($res . '.php')) {\n                $res      .= \".php\";\n                $o['mode'] = 'php';\n              }\n            }\n          }\n\n          if (empty($o['mode']) && !empty($rep['extensions'])) {\n            $res      .= '.' . $rep['extensions'][0]['ext'];\n            $o['mode'] = $rep['extensions'][0]['mode'];\n          }\n        }\n\n        $res = Str::parsePath($res);\n        \/\/X::ddump($res, $tab, $bits, $rep);\n        if ($obj) {\n          $o['file'] = $res;\n          return $o;\n        }\n\n        return $res;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1577,
            "endLine": 1716,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "urlToReal",
            "returns": [],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The file's URL"
                },
                {
                    "name": "obj",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the real file's path from an URL\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url",
                        "description": "The file's URL"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$obj"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the real file's path from an URL\n   *\n   * @param string $url The file's URL\n   * @param bool   $obj\n   * @return bool|string|array\n   *\/"
        },
        "history": {
            "name": "history",
            "summary": "Returns all backups of a file.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function history(string $url, array $repository = [], bool $all = false)\n  {\n    $check_super   = false;\n    $copy_url     = explode(\"\/\", $url);\n    $backups      = [];\n    $history_super = [];\n    if (!empty($repository) && !empty($repository['name'])) {\n      $path = self::$backup_path . $repository['root'] . '\/' . substr($url, Strpos($url, $repository['code'], 1));\n    } else {\n      \/\/ File's backup path\n      $path = self::$backup_path . $url;\n    }\n\n    if (!empty($url) && !empty(self::$backup_path)) {\n      $ctrl_path = explode(\"\/\", $path);\n      for ($y = 0; $y < 2; $y++) {\n        array_pop($ctrl_path);\n      }\n\n      \/\/check if there is \"_super\" in the url as the last step of the \"$url\"; in that case we tart $url to give the right path to get it to take its own backup files.\n      if (end($copy_url) === \"_super\") {\n        $url = explode(\"\/\", $url);\n        array_pop($url);\n        $url              = implode(\"\/\", $url);\n        $check_super_files = true;\n        $copy_url         = explode(\"\/\", $url);\n        for ($y = 0; $y < 2; $y++) {\n          array_pop($copy_url);\n        }\n\n        $copy_url = implode(\"\/\", $copy_url) . \"\/\" . \"_super\";\n      }\n\n      \/\/First, check the presence of _super backups.\n      $ctrl_path = implode(\"\/\", $ctrl_path) . \"\/\" . \"_super\";\n      \/\/ read _super if exsist\n      if ($this->fs->isDir($ctrl_path)) {\n        \/\/If there is a \"_super\" backup, insert it into the array that will be merged with the remaining backup at the end of the function.\n        if ($files_super = $this->fs->getFiles($ctrl_path)) {\n          $mode = X::basename($ctrl_path);\n\n          $history_super = [\n            'text' => X::basename($ctrl_path),\n            'icon' => 'folder-icon',\n            'folder' => true,\n            'items' => [],\n            'num_items' => \\count($this->fs->getFiles($ctrl_path))\n            \/\/'num_items' => \\count(\\bbn\\File\\Dir::getFiles($files_super))\n          ];\n\n          \/\/If we are requesting all files with their contents, this block returns to the \"_super\" block.\n          if ($all === true) {\n            foreach ($files_super as $file) {\n              $filename  = Str::fileExt($file, true)[0];\n              $file_name = $filename;\n              $moment    = strtotime(str_replace('_', ' ', $filename));\n              $date      = date('d\/m\/Y', $moment);\n              $dir       = date('Y\/m\/d', $moment);\n              $time      = date('H:i:s', $moment);\n\n              if (($i = X::find($history_super['items'], ['text' => $date])) === null) {\n                array_push(\n                  $history_super['items'],\n                  [\n                    'text' => $date,\n                    'items' => [],\n                    'folder' => true,\n                    'icon' => 'folder-icon'\n                  ]\n                );\n\n                $i = \\count($history_super['items']) - 1;\n                if (($idx = X::find($history_super['items'][$i]['items'], ['text' => $time])) === null) {\n                  array_push(\n                    $history_super['items'][$i]['items'],\n                    [\n                      'text' => $time,\n                      'mode' => X::basename($ctrl_path),\n                      'file' => $file_name,\n                      'ext' => Str::fileExt($file, true)[1],\n                      'uid' => $url,\n                      'folder' => false\n                    ]\n                  );\n                }\n              } else {\n                $j = X::find($history_super['items'], ['text' => $date]);\n                if (($idx = X::find($history_super['items'][$j]['items'], ['text' => $time])) === null) {\n                  array_push(\n                    $history_super['items'][$j]['items'],\n                    [\n                      'text' => $time,\n                      'code' => $this->fs->getContents($file),\n                      'folder' => false,\n                      'mode' => X::basename($ctrl_path),\n                      'folder' => false\n                    ]\n                  );\n                }\n              }\n            }\n          }\n          \/\/otherwise pass some useful parameters to get information with other posts see block in case of \"$all\" to false.\n          else {\n            $check_super = true;\n          }\n        }\n      }\n\n      \/\/taken or not the backup of the \"_super\" we move on to acquire the date of the project, if set to true then as done before, we will take into consideration all the date including the contents of the files.\n      if ($all === true) {\n        \/\/if ( is_dir($path) ){\n        if ($this->fs->isDir($path)) {\n          \/\/if we pass a path that contains all the backups\n          if ($dirs = $this->fs->getDirs($path)) {\n            if (!empty($dirs)) {\n              $basepath = X::basename($path);\n              $mode = $basepath === \"_super\" || ($basepath === \"model\") ? \"php\" : $basepath;\n              foreach ($dirs as $dir) {\n                \/\/if ( $files = \\bbn\\File\\Dir::getFiles($dir) ){\n                if ($files = $this->fs->getFiles($dir)) {\n                  foreach ($files as $file) {\n                    $filename = Str::fileExt($file, true)[0];\n                    $moment   = strtotime(str_replace('_', ' ', $filename));\n                    $date     = date('d\/m\/Y', $moment);\n                    $time     = date('H:i:s', $moment);\n                    if (($i = X::find($backups, ['text' => $date])) === null) {\n                      array_push(\n                        $backups,\n                        [\n                          'text' => $date,\n                          'folder' => true,\n                          'items' => [],\n                          'icon' => 'folder-icon'\n                        ]\n                      );\n                      $i = \\count($backups) - 1;\n                    }\n\n                    if (($idx = X::find($backups[$i]['items'], ['title' => $d])) === null) {\n                      array_push(\n                        $backups[$i]['items'],\n                        [\n                          'text' => $d,\n                          'folder' => true,\n                          'items' => [],\n                          'icon' => 'folder-icon'\n                        ]\n                      );\n                      $idx = \\count($backups[$i]['items']) - 1;\n                    }\n\n                    array_push(\n                      $backups[$i]['items'][$idx]['items'],\n                      [\n                        'text' => $time,\n                        'mode' => $mode,\n                        'code' => $this->fs->getContents($file),\n                        'folder' => false\n                      ]\n                    );\n                  }\n                }\n              }\n            }\n          }\n          \/\/If we pass a path that contains the specific backups of a type and is set to \"$all\" to true then all backups of this type will return.\n          else {\n            if ($files = $this->fs->getFiles($path)) {\n              if (!empty($files)) {\n                $basepath = X::basename($path);\n                $mode = ($basepath === \"_super\") || ($basepath === \"model\") ? \"php\" : $basepath;\n                foreach ($files as $file) {\n                  $filename  = Str::fileExt($file, true)[0];\n                  $file_name = $filename;\n                  $moment    = strtotime(str_replace('_', ' ', $filename));\n                  $date      = date('d\/m\/Y', $moment);\n                  $time      = date('H:i:s', $moment);\n\n                  if (($i = X::find($backups, ['text' => $date])) === null) {\n                    array_push(\n                      $backups,\n                      [\n                        'text' => $date,\n                        'folder' => true,\n                        'items' => [],\n                        'icon' => 'folder-icon'\n                      ]\n                    );\n\n                    $i = \\count($backups) - 1;\n                    if (($idx = X::find($backups[$i]['items'], ['text' => $time])) === null) {\n                      array_push(\n                        $backups[$i]['items'],\n                        [\n                          'text' => $time,\n                          'mode' => $mode,\n                          'code' => $this->fs->getContents($file),\n                          'folder' => false\n                        ]\n                      );\n                    }\n                  } else {\n                    $j = X::find($backups, ['text' => $date]);\n                    if (($idx = X::find($backups[$j]['items'], ['text' => $time])) === null) {\n                      array_push(\n                        $backups[$j]['items'],\n                        [\n                          'text' => $time,\n                          'mode' => $mode,\n                          'code' => $this->fs->getContents($file),\n                          'folder' => false\n                        ]\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } \/\/otherwise returns the useful information for processing and to make any subsequent postings.\n      else {\n        \/\/if we want you to return all the backup information useful to process and make other posts\n        $listDir = $this->fs->getDirs($path);\n        if (!empty($listDir) && !isset($check_super_files)) {\n          foreach ($listDir as $val) {\n            array_push(\n              $backups,\n              [\n                'text' => X::basename($val),\n                'icon' => 'folder-icon',\n                'folder' => true,\n                \/\/'num_items' => \\count(\\bbn\\File\\Dir::getFiles($val))\n                'num_items' => \\count($this->fs->getFiles($val))\n              ]\n            );\n          }\n\n          \/\/If the _super backup folder exists, then it will be added to the list.\n          if ($check_super === true) {\n            array_push($backups, $history_super);\n          }\n        } \/\/If we pass a path that contains the specific backups of a type and is not set \"$all\" then the backup of with useful information for any other posts returns.\n        else {\n          \/\/If we are requesting ctrl backup files then we give it the right path and \"$check_super_files\" is a variable that makes us understand whether or not we ask for backup files of \"_super\".\n          if (isset($check_super_files) && ($check_super_files === true)) {\n            $url  = $copy_url;\n            $path = self::$backup_path . $url;\n          }\n\n          \/\/if ( $files = \\bbn\\File\\Dir::getFiles($path) ){\n          if ($files = $this->fs->getFiles($path)) {\n            if (!empty($files)) {\n              $basepath = X::basename($path);\n              $mode = ($basepath === \"_super\") || ($basepath === \"model\") ? \"php\" : $basepath;\n              foreach ($files as $file) {\n                if (Str::fileExt($file, true)[1] !== 'json') {\n                  $filename  = Str::fileExt($file, true)[0];\n                  $file_name = $filename;\n                  $moment    = strtotime(str_replace('_', ' ', $filename));\n                  $date      = date('d\/m\/Y', $moment);\n                  $time      = date('H:i:s', $moment);\n\n                  if (($i = X::find($backups, ['text' => $date])) === null) {\n                    array_push(\n                      $backups,\n                      [\n                        'text' => $date,\n                        'folder' => true,\n                        'items' => [],\n                        'icon' => 'folder-icon'\n                      ]\n                    );\n\n                    $i = \\count($backups) - 1;\n                    if (($idx = X::find($backups[$i]['items'], ['text' => $time])) === null) {\n                      array_push(\n                        $backups[$i]['items'],\n                        [\n                          'text' => $time,\n                          'mode' => $mode,\n                          'file' => $file_name,\n                          'ext' => Str::fileExt($file, true)[1],\n                          'uid' => $url,\n                          'folder' => false\n                        ]\n                      );\n                    }\n                  } else {\n                    $j = X::find($backups, ['text' => $date]);\n                    if (($idx = X::find($backups[$j]['items'], ['text' => $time])) === null) {\n                      array_push(\n                        $backups[$j]['items'],\n                        [\n                          'text' => $time,\n                          'mode' => $mode,\n                          'file' => $file_name,\n                          'ext' => Str::fileExt($file, true)[1],\n                          'uid' => $url,\n                          'folder' => false\n                        ]\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    \/\/If you add the \"_super \" backup, enter it to the rest of the date.\n    if (!empty($history_super) && !empty($backups) && ($all === true) && ($check_super === false)) {\n      array_push($backups, $history_super);\n    } \/\/if you have only the backups of the super _super and no other, it has been differentiated because of different paths\n    elseif (!empty($history_super) && empty($backups) && $check_super === true) {\n      array_push($backups, $history_super);\n    }\n\n    return $backups;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1779,
            "endLine": 2101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "history",
            "returns": [],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The file's URL"
                },
                {
                    "name": "repository",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Tparameter that allows you to have all the code if it is set to true"
                },
                {
                    "name": "all",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns all backups of a file.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url",
                        "description": "The file's URL"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$all",
                        "description": "Tparameter that allows you to have all the code if it is set to true"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns all backups of a file.\n   *\n   * @param string $url The file's URL\n   * @param bool   $all Tparameter that allows you to have all the code if it is set to true\n   * @return array|bool\n   *\/"
        },
        "getType": {
            "name": "getType",
            "summary": "Returns all data of type repository",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getType(string $type)\n  {\n    if (!empty($type)) {\n      return self::getOption($type, self::PATH_TYPE);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2110,
            "endLine": 2115,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getType",
            "returns": [],
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name ohf type"
                }
            ],
            "doc": {
                "description": "Returns all data of type repository\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "name ohf type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns all data of type repository\n   *\n   * @param string $type name ohf type\n   * @return array|bool\n   *\/"
        },
        "getTypes": {
            "name": "getTypes",
            "summary": "Returns all data of all types repository",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTypes()\n  {\n    return self::getOption(self::PATH_TYPE);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2123,
            "endLine": 2126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getTypes",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns all data of all types repository\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns all data of all types repository\n   *\n   * @return array|bool\n   *\/"
        },
        "tabsOfTypeProject": {
            "name": "tabsOfTypeProject",
            "summary": "Returns the tabs of type repository",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tabsOfTypeProject(string $type)\n  {\n    if (!empty($type) && ($ptype = $this->getType($type))) {\n      return !empty($ptype['tabs']) ? $ptype['tabs'] : false;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2135,
            "endLine": 2140,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "tabsOfTypeProject",
            "returns": [],
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name ohf type"
                }
            ],
            "doc": {
                "description": "Returns the tabs of type repository\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "name ohf type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the tabs of type repository\n   *\n   * @param string $type name ohf type\n   * @return array|bool\n   *\/"
        },
        "search": {
            "name": "search",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function search(array $info)\n  {\n    $res['success'] = false;\n\n    if (\n      !empty($info['search'])\n      && !empty($info['nameRepository'])\n      && !empty($info['repository'])\n      && isset($info['typeSearch'])\n    ) {\n      $list          = [];\n      $fileData      = [];\n      $result        = [];\n      $totLines      = 0;\n      $tot_num_files = 0;\n      $occourences   = 0;\n      $base          = $info['repository']['name'];\n      $base_rep      = $this->getRootPath($base);\n      \/\/function that defines whether the search is sensitive or non-sensitive\n      $typeSearch = function ($element, $code, $type) {\n        if ($type === \"sensitive\") {\n          return strpos($element, $code);\n        } else {\n          return stripos($element, $code);\n        }\n      };\n\n      if (!empty($info['isProject'])) {\n        $part = $info['type'];\n      } else {\n        $part = $info['repository']['path'];\n      }\n\n      $path = $base_rep . $part;\n\n      $all = $this->fs->getFiles($path, true);\n      if (is_array($all) && count($all)) {\n        foreach ($all as $i => $v) {\n          if (X::basename($v) !== \"cfg\") {\n            \/\/if folder\n            if ($this->fs->isDir($v)) {\n              \/\/case tree\n              if (!empty($info['searchFolder'])) {\n                if (!empty($info['mvc']) || ($info['type'] === 'mvc')) {\n                  $content = $v;\n                } else {\n                  $content = $path;\n                }\n\n                $content .= $info['searchFolder'];\n              } else {\n                $content = $v;\n              }\n\n              $content = $this->fs->scan($content);\n              if (is_array($content) && count($content)) {\n                foreach ($content as $j => $val) {\n                  $list = [];\n                  \/\/ case file into folder\n                  if ($this->fs->isFile($val)) {\n                    $tot_num_files++;\n                    if ($typeSearch($this->fs->getContents($val), $info['search'], $info['typeSearch']) !== false) {\n                      $path      = $base_rep . $part;\n                      $path_file = $val;\n                      $link      = explode(\"\/\", substr($val, strlen($path) + 1, strlen($val)));\n                      if ((!empty($info['isProject']) && $info['type'] === 'mvc')\n                        || !empty($info['mvc'])\n                      ) {\n                        $tab  = array_shift($link);\n                        $link = implode('\/', $link);\n                        $link = explode('.', $link);\n                        $link = array_shift($link);\n                      } elseif ((!empty($info['isProject']) && ($info['type'] === 'components'))\n                        || !empty($info['components'])\n                      ) {\n                        $link = implode('\/', $link);\n                        $link = explode('.', $link);\n                        $tab  = array_pop($link);\n                        $link = $link[0];\n                      } elseif (!empty($info['isProject']) && (($info['type'] === 'lib') || ($info['type'] === 'cli'))) {\n                        $link = implode('\/', $link);\n                        $link = explode('.', $link);\n                        $tab  = 'code';\n                        $link = $link[0];\n                      } elseif (empty($info['isProject']) && empty($info['type'])) {\n                        $file                   = $link[count($link) - 1];\n                        $file                   = explode('.', $file);\n                        $tab                    = array_pop($file);\n                        $link[count($link) - 1] = array_shift($file);\n                        $link                   = implode('\/', $link);\n                      }\n\n                      \/\/object initialization with every single file to check the lines that contain it\n                      $file = new \\SplFileObject($val);\n                      \/\/cycle that reads all the lines of the file, it means until it has finished reading a file\n                      while (!$file->eof()) {\n                        \/\/current line reading\n                        $lineCurrent = $file->current();\n                        \/\/if we find what we are looking for in this line and that this is not '\\ n' then we will take the coirispjective line number with the key function, insert it into the array and the line number\n                        if (($typeSearch($lineCurrent, $info['search'], $info['typeSearch']) !== false) && (strpos($lineCurrent, '\\n') === false)) {\n                          $lineNumber = $file->key() + 1;\n                          $name_path  = $info['repository']['path'] . substr(X::dirname($val), strlen($base_rep));\n                          $position   = $typeSearch($lineCurrent, $info['search'], $info['typeSearch']);\n                          $line       = \"<strong>\" . 'line ' . $lineNumber . ' : ' . \"<\/strong>\";\n\n                          $text = $line;\n                          if (\n                            !empty($info['mvc'])\n                            || (!empty($info['isProject']) && $info['type'] === 'mvc')\n                          ) {\n                            if ($tab === \"public\") {\n                              $tab = 'php';\n                            } else {\n                              if (explode(\"\/\", $path_file)[1] === \"html\") {\n                                $lineCurrent = htmlentities($lineCurrent);\n                              }\n                            }\n                          }\n\n                          $text       .= str_replace($info['search'], \"<strong><span class='underlineSeach'>\" . $info['search'] . \"<\/span><\/strong>\", $lineCurrent);\n                          $file_name   = X::basename($path_file);\n                          $path        = X::dirname($base . '\/' . substr($path_file, strlen($base_rep)));\n                          $occourences = $occourences + substr_count($lineCurrent, $info['search']);\n                          \/\/ info for code\n                          $list[] = [\n                            'text' => strlen($text) > 1000 ? $line . \"<strong><i>\" . X::_('content too long to be shown') . \"<\/i><\/strong>\" : $text,\n                            'line' => $lineNumber - 1,\n                            'position' => $position,\n                            'link' => $link,\n                            'tab' => !empty($tab) ? $tab : false,\n                            'code' => true,\n                            'uid' => $path . '\/' . $file_name,\n                            'icon' => 'nf nf-fa-code'\n                          ];\n                        }\n\n                        \/\/next line\n                        $file->next();\n                      }\n                    }\n                  }\n\n                  \/\/if we find rows then we will create the tree structure with all the information\n                  if (count($list) > 0) {\n                    $totLines = $totLines + count($list);\n                    if (!empty($info['mvc'])) {\n                      if (explode(\"\/\", $path_file)[1] === \"public\") {\n                        $tab = 'php';\n                      } else {\n                        $tab = explode(\"\/\", $path_file)[1];\n                      }\n\n                      $link = explode(\".\", substr($path_file, strlen(explode(\"\/\", $path_file)[0] . '\/' . explode(\"\/\", $path_file)[1]) + 1))[0];\n                    }\n\n                    \/\/info file\n                    $fileData = [\n                      'text' => $path . '\/' . $file_name . \"&nbsp;<span class='bbn-badge bbn-s bbn-bg-lightgrey'>\" . count($list) . \"<\/span>\",\n                      'icon' => 'nf nf-fa-file_code_o',\n                      'numChildren' => count($list),\n                      'repository' => $info['repository']['path'],\n                      'uid' => $path . $file_name,\n                      'file' => X::basename($path_file),\n                      'link' => !empty($link) ? $link : false,\n                      'tab' => !empty($tab) ? $tab : false,\n                      'items' => $list,\n                    ];\n                    $result[] = $fileData;\n\n                    \/\/die(var_dump($path.$name_path,$base_rep));\n                    \/*if ( !isset($result[$path.$name_path]) ){\n                      \/\/info folder\n                      $result[$path.$name_path]= [\n                        'text' => X::dirname($path.$file_name),\n                        'num' => 1,\n                        'numChildren' => 1,\n                        'items' => [],\n                        'icon' => !empty($info['component']) || ($info['type'] === 'components')  ? 'nf nf-mdi-vuejs' : 'nf nf-fa-folder'\n                      ];\n                      $result[$path.$name_path]['items'][] = $fileData;\n                    }\n                    else {\n                      $ctrlFile = false;\n                      \/\/  check if the file where we found one or more search results is not reinserted\n                      foreach( $result[$path.$name_path]['items'] as $key => $item ){\n                        if ( $item['file'] === X::dirname($path_file) ){\n                          $ctrlFile = true;\n                        }\n                      }\n                      \/\/if we do not have the file, we will insert it\n                      if ( empty($ctrlFile) ){\n                        $result[$path.$name_path]['items'][] = $fileData;\n                        $result[$path.$name_path]['num']++;\n                        $result[$path.$name_path]['numChildren']++;\n                      }\n                    }*\/\n                  }\n                }\n              }\n            } \/\/ file not contained in the folder\n            else {\n              $tot_num_files++;\n              $list = [];\n              if ($typeSearch($this->fs->getContents($v), $info['search'], $info['typeSearch']) !== false) {\n                $path_file = substr($v, Strpos($v, $info['repository']['path']));\n                $file      = new \\SplFileObject($v);\n                while (!$file->eof()) {\n                  $lineCurrent = $file->current();\n                  if (($typeSearch($lineCurrent, $info['search'], $info['typeSearch']) !== false)\n                    && (strpos($lineCurrent, '\\n') === false)\n                  ) {\n                    $lineNumber  = $file->key() + 1;\n                    $link        = explode(\".\", substr($path_file, strlen(explode(\"\/\", $path_file)[0] . '\/' . explode(\"\/\", $path_file)[1]) + 1))[0];\n                    $name_path   = substr(X::dirname($v), Strpos($v, $info['repository']['path']));\n                    $position    = $typeSearch($lineCurrent, $info['search'], $info['typeSearch']);\n                    $text        = \"<strong>\" . 'line ' . $lineNumber . ' : ' . \"<\/strong>\";\n                    $text       .= str_replace($info['search'], \"<strong><span class='underlineSeach'>\" . $info['search'] . \"<\/span><\/strong>\", $lineCurrent);\n                    $occourences = $occourences + substr_count($lineCurrent, $info['search']);\n                    \/\/see\n                    $path = str_replace($base, (strpos($path_file, $this->getAppPath()) === 0 ? 'app\/' : 'lib\/'), $path);\n\n                    if (!empty($info['mvc'])) {\n                      if (explode(\"\/\", $path_file)[1] === \"public\") {\n                        $tab = 'php';\n                      } else {\n                        $tab = explode(\"\/\", $path_file)[1];\n                      }\n\n                      $link = explode(\".\", substr($path_file, strlen(explode(\"\/\", $path_file)[0] . '\/' . explode(\"\/\", $path_file)[1]) + 1))[0];\n                    }\n\n                    \/\/ info for file\n                    $list[] = [\n                      'text' => strlen($text) > 1000 ? $line . \"<strong><i>\" . X::_('content too long to be shown') . \"<\/i><\/strong>\" : $text,\n                      'line' => $lineNumber - 1,\n                      'position' => $position,\n                      'code' => true,\n                      'uid' => $path . '\/' . $file_name,\n                      'icon' => 'nf nf-fa-code',\n                      'linkPosition' => explode(\".\", substr($path_file, strlen(explode(\"\/\", $path_file)[0] . '\/' . explode(\"\/\", $path_file)[1]) + 1))[0],\n                      'tab' => !empty($tab) ? $tab : false\n                    ];\n                  }\n\n                  $file->next();\n                }\n\n                if (count($list) > 0) {\n                  $totLines .= count($list);\n                  \/\/ info for file who contain a code\n                  $fileData = [\n                    'text' => X::basename($path_file),\n                    'icon' => 'nf nf-fa-file_code',\n                    'num' => count($list),\n                    'numChildren' => count($list),\n                    'repository' => $info['repository']['bbn_path'] . '\/',\n                    'uid' => $path . '\/' . $file_name,\n                    'file' => X::basename($path_file),\n                    'link' => !empty($link) ? $link : false,\n                    'tab' => !empty($tab) ? $tab : false,\n                    'items' => $list\n                  ];\n\n                  $result[] = $fileData;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (!empty($result)) {\n        $totFiles = 0;\n        foreach ($result as $key => $value) {\n          $totFiles = $totFiles + $value['items'][0]['numChildren'];\n        }\n\n        return [\n          'list' => array_values($result),\n          'occurences' => $occourences,\n          'totFiles' => $tot_num_files,\n          'filesFound' => count($result), \/\/$tot_num_files++,\n          'totLines' => $totLines\n        ];\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2143,
            "endLine": 2431,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "search",
            "returns": [],
            "arguments": [
                {
                    "name": "info",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "searchAll": {
            "name": "searchAll",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function searchAll(string $seek)\n  {\n    if (isset($seek)) {\n      $res             = [];\n      $occourences     = 0;\n      $totalFiles      = 0;\n      $numRepositories = 0;\n      $foundRepos      = [];\n      foreach ($this->repositories as $rep) {\n        \/\/temporaney\n        if ($rep['root'] !== 'cdn') {\n          $totalFiles += $this->fs->getNumFiles($rep['root_path']);\n          if ($found = $this->fs->searchContents($seek, $rep['root_path'], true, false, 'js|php|less|html')) {\n            foreach ($found as $fn => $val) {\n              $list = [];\n              \/\/ case file into folder\n              if ($this->fs->isFile($fn)) {\n                $path_file = $val;\n                \/\/object initialization with every single file to check the lines that contain it\n                $file     = new \\SplFileObject($fn);\n                $totLines = 0;\n                \/\/cycle that reads all the lines of the file, it means until it has finished reading a file\n                while (!$file->eof()) {\n                  \/\/current line reading\n                  $lineCurrent = $file->current();\n                  \/\/if we find what we are looking for in this line and that this is not '\\ n' then we will take the coirispjective line number with the key function, insert it into the array and the line number\n                  if (!empty($position = strpos($lineCurrent, $seek) !== false) && (strpos($lineCurrent, '\\n') === false)) {\n                    $lineNumber = $file->key() + 1;\n                    $name_path  = $rep['path'] . substr(X::dirname($val), strlen($base_rep));\n                    $line       = \"<strong>\" . 'line ' . $lineNumber . ' : ' . \"<\/strong>\";\n\n                    $text      = $line;\n                    $text     .= str_replace($seek, \"<strong><span class='underlineSeach'>\" . $seek . \"<\/span><\/strong>\", $lineCurrent);\n                    $file_name = X::basename($path_file);\n\n                    $occourences = $occourences + substr_count($lineCurrent, $seek);\n                    if (in_array($rep['name'], $foundRepos) === false) {\n                      $foundRepos[] = $rep['name'];\n                      $numRepositories++;\n                    }\n\n                    \/\/ info for code\n                    $list[] = [\n                      'text' => strlen($text) > 1000 ? $line . \"<strong><i>\" . X::_('content too long to be shown') . \"<\/i><\/strong>\" : $text,\n                      'line' => $lineNumber - 1,\n                      'position' => $position,\n                      \/\/ 'link' => $link,\n                      'tab' => !empty($tab) ? $tab : false,\n                      'code' => true,\n                      'uid' => $rep['path'] . '\/' . $file_name,\n                      'icon' => 'nf nf-fa-code'\n                    ];\n                  }\n\n                  \/\/next line\n                  $file->next();\n                }\n\n                \/\/if we find rows then we will create the tree structure with all the information\n                if (count($list) > 0) {\n                  $totLines = $totLines + count($list);\n                  if (explode(\"\/\", $path_file)[1] === \"public\") {\n                    $tab = 'php';\n                  } else {\n                    $tab = explode(\"\/\", $path_file)[1];\n                  }\n\n                  $link = explode(\".\", substr($path_file, strlen(explode(\"\/\", $path_file)[0] . '\/' . explode(\"\/\", $path_file)[1]) + 1))[0];\n                }\n\n                \/\/info file\n                $ext      = Str::fileExt($fn, 0);\n                $fileData = [\n                  'text' => $rep['name'] . '\/' . substr($fn, strlen($rep['root_path'])) . \"&nbsp;<span class='bbn-badge bbn-s bbn-bg-lightgrey'>\" . count($list) . \"<\/span>\",\n                  'icon' => 'nf nf-fa-file_code_o',\n                  'numChildren' => count($list),\n                  'repository' => $rep['name'],\n                  'uid' => $rep['name'] . '\/' . substr($fn, strlen($rep['root_path'])),\n                  'file' => X::basename($fn),\n                  'items' => $list,\n                ];\n\n                $path = explode('\/', substr($fn, strlen($rep['root_path'])));\n                \/\/die(var_dump(\"sss\", $path));\n                if ($path[0] === 'mvc') {\n                  if ($path[1] === \"public\") {\n                    $tab = 'php';\n                  } else {\n                    $tab = $path[1];\n                  }\n                } elseif ($path[0] === 'components') {\n                  $tab        = $ext;\n                  $components = true;\n                }\n\n                unset($path[1]);\n                $path = implode('\/', $path);\n\n                $link             = $rep['name'] . '\/' . substr($path, 0,  strpos($path, '.' . $ext)).\n                  ($components === true ? '\/' . X::basename($path, '.' . $ext) : '');\n                $fileData['tab']  = !empty($tab) ? $tab : false;\n                $fileData['link'] = $link;\n                foreach ($fileData['items'] as &$item) {\n                  $item['link'] = $link;\n                  $item['tab']  = !empty($tab) ? $tab : false;\n                }\n\n                $result[] = $fileData;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (!empty($result)) {\n      return [\n        'list' => array_values($result),\n        'occurences' => $occourences,\n        'totFiles' => $totalFiles,\n        'filesFound' => count($result),\n        'repositoriesFound' => $numRepositories,\n        'totalRepositories' => count($this->repositories),\n        'totLines' => $totLines\n      ];\n    } else {\n      return ['success'  => false];\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2434,
            "endLine": 2562,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "searchAll",
            "returns": [],
            "arguments": [
                {
                    "name": "seek",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_ide_path": {
            "name": "_ide_path",
            "summary": "Gets the ID of the development paths option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _ide_path()\n  {\n    self::optionalInit();\n    if (!self::$ide_path) {\n      $this->_init_ide();\n    }\n\n    return self::$ide_path;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2570,
            "endLine": 2578,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "_ide_path",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Gets the ID of the development paths option\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the ID of the development paths option\n   *\n   * @return int\n   *\/"
        },
        "_init_ide": {
            "name": "_init_ide",
            "summary": "Sets the root of the development paths option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _init_ide()\n  {\n    self::$ide_path         = self::$option_root_id;\n    self::$backup_path      = $this->getDataPath('appui-ide') . 'backup\/';\n    self::$backup_pref_path = $this->getDataPath('appui-ide') . 'backup\/preference\/';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2586,
            "endLine": 2591,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "_init_ide",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Sets the root of the development paths option\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the root of the development paths option\n   *\n   * @param $id\n   *\/"
        },
        "_dev_path": {
            "name": "_dev_path",
            "summary": "Gets the ID of the development paths option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _dev_path()\n  {\n    if (!self::$dev_path) {\n      if ($id = self::getOptionId(self::DEV_PATH)) {\n        self::_set_dev_path($id);\n      }\n    }\n\n    return self::$dev_path;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2599,
            "endLine": 2608,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "_dev_path",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Gets the ID of the development paths option\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the ID of the development paths option\n   *\n   * @return int\n   *\/"
        },
        "_set_dev_path": {
            "name": "_set_dev_path",
            "summary": "Sets the root of the development paths option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function _set_dev_path($id)\n  {\n    self::$dev_path = $id;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2616,
            "endLine": 2619,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_set_dev_path",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the root of the development paths option\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the root of the development paths option\n   *\n   * @param $id\n   *\/"
        },
        "_permissions": {
            "name": "_permissions",
            "summary": "Gets the ID of the page (permissions) option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _permissions()\n  {\n    if (!self::$permissions) {\n      if ($id = $this->options->fromCode(self::BBN_ACCESS, self::BBN_PERMISSIONS)) {\n        self::_set_permissions($id);\n      }\n    }\n\n    return self::$permissions;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2627,
            "endLine": 2636,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "_permissions",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Gets the ID of the page (permissions) option\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the ID of the page (permissions) option\n   *\n   * @return int\n   *\/"
        },
        "_set_permissions": {
            "name": "_set_permissions",
            "summary": "Sets the ID of the page (permissions) option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function _set_permissions($id)\n  {\n    self::$permissions = $id;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2644,
            "endLine": 2647,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_set_permissions",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the ID of the page (permissions) option\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the ID of the page (permissions) option\n   *\n   * @param int $id\n   *\/"
        },
        "_get_bit_by_file": {
            "name": "_get_bit_by_file",
            "summary": "Function that returns corresponding bit with option id",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_bit_by_file(string $file, string $id_user = null): ?array\n  {\n    if (\n      !empty($file)\n      && !empty($this->db)\n      && !empty($this->pref)\n      && !empty($pref_arch = $this->pref->getClassCfg())\n    ) {\n      if (is_null($id_user)) {\n        $id_user = $this->pref->id_user;\n      }\n\n      return $this->db->rselect(\n        [\n          'table' => $pref_arch['tables']['user_options_bits'],\n          'fields' => [],\n          'where' => [\n            'conditions' => [[\n              'field' => $pref_arch['arch']['user_options_bits']['text'],\n              'value' => $file\n            ], [\n              'field' => $pref_arch['arch']['user_options_bits']['id_user_option'],\n              'value' => $id_user\n            ]]\n          ]\n        ]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2657,
            "endLine": 2687,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_get_bit_by_file",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "path"
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "user if set user id will return the result for that user otherwise the current one will return"
                }
            ],
            "doc": {
                "description": "Function that returns corresponding bit with option id\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file",
                        "description": "path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "user if set user id will return the result for that user otherwise the current one will return"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Function that returns corresponding bit with option id\n   *\n   * @param string $file    path\n   * @param string $id_user if set user id will return the result for that user otherwise the current one will return\n   * @return array|null\n   *\/"
        },
        "_set_current_file": {
            "name": "_set_current_file",
            "summary": "Sets the current file path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _set_current_file(string $file = null)\n  {\n    if (empty($file)) {\n      self::$current_file = false;\n      return false;\n    }\n\n    self::$current_file = $file;\n    \/\/$this->realToUrl($file);\n    $this->_set_current_id();\n    return self::$current_file;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2696,
            "endLine": 2707,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "_set_current_file",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the current file path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the current file path\n   *\n   * @param string $file\n   * @return string|false\n   *\/"
        },
        "_set_current_id": {
            "name": "_set_current_id",
            "summary": "Sets the current file's ID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _set_current_id(string $file = null)\n  {\n    self::$current_id = false;\n    if (empty($file)) {\n      $file = self::$current_file;\n    }\n\n    if (!empty($file)) {\n      if ($id = $this->realToUrl($file)) {\n        self::$current_id = $id;\n      }\n    }\n\n    return self::$current_id;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2716,
            "endLine": 2730,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "_set_current_id",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the current file's ID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the current file's ID\n   *\n   * @param string $file\n   * @return string\n   *\/"
        },
        "_superior_sctrl": {
            "name": "_superior_sctrl",
            "summary": "Checks if the file is a superior super-controller and returns the corrected name and path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _superior_sctrl(string $tab, string $path = '')\n  {\n    if (($pos = strpos($tab, '_super')) > -1) {\n      if (($pos === 0)) {\n        $path = '';\n      } else {\n        \/\/ Fix the right path\n        $bits  = explode('\/', $path);\n        $count = \\strlen(substr($tab, 0, $pos));\n        if (!empty($bits)) {\n          foreach ($bits as $i => $b) {\n            if (($i + 1) > $count) {\n              unset($bits[$i]);\n            }\n          }\n\n          $path = implode('\/', $bits) . '\/';\n        }\n      }\n\n      \/\/ Fix the tab's name\n      $tab = '_super';\n    }\n\n    return [\n      'tab' => $tab,\n      'path' => $path,\n      'ssctrl' => $count ?? 0\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2740,
            "endLine": 2769,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_superior_sctrl",
            "returns": [],
            "arguments": [
                {
                    "name": "tab",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The tab'name from file's URL"
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The file's path from file's URL"
                }
            ],
            "doc": {
                "description": "Checks if the file is a superior super-controller and returns the corrected name and path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$tab",
                        "description": "The tab'name from file's URL"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "The file's path from file's URL"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the file is a superior super-controller and returns the corrected name and path\n   *\n   * @param string $tab  The tab'name from file's URL\n   * @param string $path The file's path from file's URL\n   * @return array\n   *\/"
        },
        "_check_normal": {
            "name": "_check_normal",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _check_normal(array $cfg, array $rep, string $path)\n  {\n    if (!empty($cfg) && !empty($path) && !empty($cfg['name'])) {\n      $old = $new = $path;\n      if (!empty($cfg['path']) && ($cfg['path'] !== '.\/')) {\n        $old .= $cfg['path'] . (substr($cfg['path'], -1) !== '\/' ? '\/' : '');\n      }\n\n      if (!empty($cfg['new_path']) && ($cfg['new_path'] !== '.\/')) {\n        $new .= $cfg['new_path'] . (substr($cfg['new_path'], -1) !== '\/' ? '\/' : '');\n      }\n\n      if (\n        !empty($cfg['is_file'])\n        && ((!empty($cfg['ext']) && (X::find($rep['extensions'], ['ext' => $cfg['ext']]) === null))\n          || (!empty($cfg['new_ext']) && (X::find($rep['extensions'], ['ext' => $cfg['new_ext']]) === null)))\n      ) {\n        return false;\n      }\n\n      $old .= $cfg['name'] . (!empty($cfg['is_file']) ? '.' . $cfg['ext'] : '');\n\n      $new .= ($cfg['new_name'] ?? '') .\n        (!empty($cfg['is_file']) && !empty($cfg['new_ext']) ? '.' . $cfg['new_ext'] : '');\n\n      if (($path !== $new) && !empty($this->fs->exists($new))) {\n        $this->error(\"The new file|folder exists: $new\");\n        return false;\n      }\n\n      if ($this->fs->exists($old)) {\n        return [\n          'old' => $old,\n          'new' => ($path === $new) ? false : $new\n        ];\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2772,
            "endLine": 2811,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "_check_normal",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "rep",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_check_mvc": {
            "name": "_check_mvc",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _check_mvc(array $cfg, array $rep, string $path)\n  {\n    $todo = [];\n    if (\n      !empty($cfg)\n      && !empty($rep)\n      && !empty($rep['tabs'])\n      && !empty($cfg['name'])\n      && isset($cfg['is_file'], $path)\n    ) {\n      if (!empty($rep['alias_code']) && ($rep['alias_code'] === 'bbn-project')) {\n        $path .= 'mvc\/';\n      }\n\n      \/\/ Each file associated with the structure (MVC case)\n      foreach ($rep['tabs'] as $i => $tab) {\n        \/\/ The path of each file\n        $tmp = $path;\n        if (!empty($tab['path'])) {\n          $tmp .= $tab['path'];\n        }\n\n        $old = $new = $tmp;\n\n        if (!empty($cfg['path']) && ($cfg['path'] !== '.\/')) {\n          $old .= (($cfg['path'] === 'mvc\/') ? '' : $cfg['path']) . (substr($cfg['path'], -1) !== '\/' ? '\/' : '');\n        }\n\n        if (!empty($cfg['new_path']) && ($cfg['new_path'] !== '.\/')) {\n          $new .= (($cfg['new_path'] === 'mvc\/') ? '' : $cfg['new_path']) . (substr($cfg['new_path'], -1) !== '\/' ? '\/' : '');\n        }\n\n        if (($tab['url'] !== '_super') && !empty($tab['extensions'])) {\n          $old   .= $cfg['name'];\n          $new   .= $cfg['new_name'] ?? '';\n          $ext_ok = false;\n          if (!empty($cfg['is_file'])) {\n            foreach ($tab['extensions'] as $k => $ext) {\n              if ($k === 0) {\n                if (!empty($cfg['new_name']) && $this->fs->isFile($new . '.' . $ext['ext'])) {\n                  $this->error(\"The new file exists: $new.$ext[ext]\");\n                  return false;\n                }\n              }\n\n              if ($this->fs->isFile($old . '.' . $ext['ext'])) {\n                $ext_ok = $ext['ext'];\n              }\n            }\n          }\n\n          if (!empty($cfg['is_file']) && empty($ext_ok)) {\n            continue;\n          }\n\n          $old .= !empty($cfg['is_file']) ? '.' . $ext_ok : '';\n          $new .= !empty($cfg['is_file']) ? '.' . $tab['extensions'][0]['ext'] : '';\n\n          if (!empty($cfg['new_name']) && ($new !== $tmp) && !empty($this->fs->exists($new))) {\n            $this->error(\"The new file|folder exists.\");\n            return false;\n          }\n\n          if ($this->fs->exists($old)) {\n            array_push(\n              $todo,\n              [\n                'old' => Str::parsePath($old),\n                'new' => (empty($cfg['new_name']) || ($new === $tmp)) ? false : Str::parsePath($new),\n                'perms' => $tab['url'] === 'php' \/\/$i === 'php'\n              ]\n            );\n          }\n        }\n      }\n    }\n\n    return $todo;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2814,
            "endLine": 2892,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "_check_mvc",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "rep",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_delete_component": {
            "name": "_delete_component",
            "summary": "Delete a component vue or all folder",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _delete_component(array $cfg)\n  {\n    if (!empty($cfg) && !empty($cfg['repository'])) {\n      $path = $this->getRootPath($cfg['repository']['name']);\n      if (!empty($cfg['path']) && !empty($cfg['is_file'])) {\n        if (empty($this->fs->delete($path . $cfg['path']))) {\n          return false;\n        }\n\n        return true;\n      }\n      \/\/case of context menu\n      else {\n        $folder     = !empty($cfg['is_file']) ? false : true;\n        $ctrl_error = false;\n        if (!empty($cfg['repository']['path']) && !empty($cfg['path']) && !empty($cfg['name'])) {\n          \/\/all\n          if (empty($cfg['only_component'])) {\n            $component = $path . $cfg['path'] . $cfg['name'];\n            if (empty($this->fs->delete($component))) {\n              return false;\n            }\n\n            return true;\n          } else {\n            if (!empty($cfg['repository']['tabs']) && is_array($cfg['repository']['tabs'])) {\n              foreach ($cfg['repository']['tabs'] as $tab) {\n                if (empty($ctrl_error)) {\n                  if (is_array($tab['extensions'])) {\n                    foreach ($tab['extensions'] as $a) {\n                      $component = $path . $cfg['path'] . $cfg['name'] . '\/' . $cfg['name'] . '.' . $a['ext'];\n                      if (!empty($this->fs->exists($component))) {\n                        if (empty($this->fs->delete($component))) {\n                          $ctrl_error = true;\n                          break;\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  return false;\n                }\n              }\n\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2901,
            "endLine": 2953,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_delete_component",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "component info"
                }
            ],
            "doc": {
                "description": "Delete a component vue or all folder\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "component info"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Delete a component vue or all folder\n   *\n   * @param array $cfg component info\n   * @return bool\n   *\/"
        },
        "_move_component": {
            "name": "_move_component",
            "summary": "Function for move component vue",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _move_component(array $cfg, array $rep, string $path)\n  {\n    $ele = $this->_check_normal($cfg, $rep, $path);\n    if (!empty($ele) && is_array($ele) && empty($this->fs->move($ele['old'], X::dirname($ele['new'])))) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2964,
            "endLine": 2972,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "_move_component",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "rep",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Function for move component vue\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$rep"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Function for move component vue\n   *\n   * @param array  $cfg\n   * @param array  $rep\n   * @param string $path\n   * @return boolean\n   *\/"
        },
        "_copy_component": {
            "name": "_copy_component",
            "summary": "Copy a component vue or all folder",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _copy_component(array $cfg)\n  {\n    if (\n      !empty($cfg)\n      && !empty($cfg['path'])\n      && !empty($cfg['new_path'])\n      && !empty($cfg['name'])\n      && !empty($cfg['new_name'])\n      && !empty($cfg['repository'])\n      && is_array($cfg['repository'])\n    ) {\n      $ctrl_error = false;\n      if (!empty($cfg['repository']['path'])) {\n        \/\/ get root in absolute path\n        $path                 = $this->getRootPath($cfg['repository']['name']);\n        $old_folder_component = $path . $cfg['path'] . $cfg['name'];\n        $new_folder_component = $path . $cfg['new_path'] . $cfg['new_name'];\n        \/\/copy only component parent\n        if (!empty($cfg['only_component'])) {\n          if (!empty($this->fs->createPath($new_folder_component))) {\n            if (\n              is_array($cfg['repository']['tabs'])\n              && count($cfg['repository']['tabs'])\n            ) {\n              foreach ($cfg['repository']['tabs'] as $ele) {\n                if (empty($ctrl_error)) {\n                  if (!empty($ele['extensions']) && is_array($ele['extensions'])) {\n                    foreach ($ele['extensions'] as $a) {\n                      $old_component = $old_folder_component . '\/' . $cfg['name'] . '.' . $a['ext'];\n                      $new_component = $new_folder_component . '\/' . $cfg['new_name'] . '.' . $a['ext'];\n                      if (!empty($this->fs->exists($old_component)) && empty($this->fs->exists($new_component))) {\n                        if (empty($this->fs->copy($old_component, $new_component))) {\n                          $ctrl_error = true;\n                          break;\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  $this->error(\"Error during the copy of component\");\n                  return false;\n                }\n              }\n            }\n\n            return true;\n          }\n        } \/\/copy only component who hasn't children\n        else {\n          if (empty($this->fs->copy($old_folder_component, $new_folder_component))) {\n            \/\/case error\n            $ctrl_error = true;\n          }\n\n          if (\n            empty($ctrl_error)\n            && empty($cfg['is_file'])\n            && !empty($cfg['component_vue'])\n          ) {\n            if (\n              is_array($cfg['repository']['tabs'])\n              && count($cfg['repository']['tabs'])\n            ) {\n              foreach ($cfg['repository']['tabs'] as $tab) {\n                if (empty($ctrl_error)) {\n                  if (!empty($tab['extensions']) && is_array($tab['extensions'])) {\n                    foreach ($tab['extensions'] as $a) {\n                      $old_component = $new_folder_component . '\/' . $cfg['name'] . '.' . $a['ext'];\n                      $new_component = $new_folder_component . '\/' . $cfg['new_name'] . '.' . $a['ext'];\n                      if (!empty($this->fs->exists($old_component)) && empty($this->fs->exists($new_component))) {\n                        if (empty($this->fs->rename($old_component, $cfg['new_name'] . '.' . $a['ext']))) {\n                          $ctrl_error = true;\n                          break;\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  $this->error(\"Error during the copy component\");\n                  return false;\n                }\n              }\n            }\n\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2981,
            "endLine": 3072,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_copy_component",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "component info"
                }
            ],
            "doc": {
                "description": "Copy a component vue or all folder\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "component info"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Copy a component vue or all folder\n   *\n   * @param array $cfg component info\n   * @return bool\n   *\/"
        },
        "_rename_component": {
            "name": "_rename_component",
            "summary": "Rename a component vue or all folder",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _rename_component(array $cfg)\n  {\n    if (\n      !empty($cfg)\n      && !empty($cfg['path'])\n      && !empty($cfg['new_path'])\n      && !empty($cfg['name'])\n      && !empty($cfg['new_name'])\n      && !empty($cfg['repository'])\n      && is_array($cfg['repository'])\n    ) {\n      if (!empty($cfg['repository']['path'])) {\n        $path                 = $this->getRootPath($cfg['repository']['name']);\n        $ctrl_error           = false;\n        $old_folder_component = $path . $cfg['path'] . $cfg['name'];\n        $new_folder_component = $path . $cfg['path'] . $cfg['new_name'];\n        \/\/folder\n        if (empty($cfg['only_component'])) {\n          if (empty($this->fs->rename($old_folder_component, $cfg['new_name']))) {\n            $ctrl_error = true;\n            $this->error(\"Error during the rename component\");\n          }\n        } else {\n          if (\n            empty($this->fs->isDir($new_folder_component))\n            && empty($this->fs->createPath($new_folder_component))\n          ) {\n            $ctrl_error = true;\n          }\n        }\n\n        \/\/case rename component\n        if (\n          empty($ctrl_error)\n          && empty($cfg['is_file'])\n          && !empty($cfg['component_vue'])\n        ) {\n          if (\n            is_array($cfg['repository']['tabs'])\n            && count($cfg['repository']['tabs'])\n          ) {\n            foreach ($cfg['repository']['tabs'] as $tab) {\n              if (empty($ctrl_error)) {\n                if (\n                  is_array($tab['extensions'])\n                  && count($tab['extensions'])\n                ) {\n                  foreach ($tab['extensions'] as $a) {\n                    $old_file      = $cfg['name'] . '.' . $a['ext'];\n                    $new_file      = $cfg['new_name'] . '.' . $a['ext'];\n                    $old_component = $old_folder_component . '\/' . $old_file;\n                    $new_component = $new_folder_component . '\/' . $new_file;\n                    if (empty($this->fs->exists($new_component))) {\n                      \/\/if direct component\n                      if (!empty($cfg['only_component'])) {\n                        if (!empty($this->fs->move($old_component, $new_folder_component))) {\n                          if (empty($this->fs->rename($new_folder_component . '\/' . $old_file, $new_file))) {\n                            $ctrl_error = true;\n                            $this->error(\"Error during the rename component\");\n                            return false;\n                          }\n                        }\n                      } else {\n                        if (!empty($this->fs->exists($new_folder_component . '\/' . $old_file))) {\n                          if (empty($this->fs->rename($new_folder_component . '\/' . $old_file, $new_file))) {\n                            $ctrl_error = true;\n                            $this->error(\"Error during the rename component\");\n                            return false;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                break;\n              }\n            }\n          }\n        }\n\n        if (!empty($ctrl_error)) {\n          $this->error(\"Impossible to the file|folder.\");\n          return false;\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3081,
            "endLine": 3172,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_rename_component",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "component info"
                }
            ],
            "doc": {
                "description": "Rename a component vue or all folder\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "component info"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Rename a component vue or all folder\n   *\n   * @param array $cfg component info\n   * @return bool\n   *\/"
        },
        "_get_path_backup": {
            "name": "_get_path_backup",
            "summary": "Function who return path relative for backup history or preferences",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_path_backup(array $file)\n  {\n    \/\/if in the case of a rescue of _super\n    if ($file['tab'] === \"_super\") {\n      if (isset($file['ssctrl']) && is_numeric($file['ssctrl'])) {\n        $backup_path = self::$backup_path . $file['repository']['path'] . '\/' . $file['filePath'] . '\/' . $file['tab'] . '\/';\n      }\n    } else {\n      $backup_path = self::$backup_path;\n      \/\/there isn't reposiotry\n      if (!isset($file['repository'])) {\n        $backup_path  .= X::dirname($file['full_path']);\n        $fn            = Str::fileExt($file['full_path'], 1);\n        $terminal_path = ($file['tab'] ?: $fn[1]) . '\/';\n        $relative_path = $fn[0] . '\/__end__\/';\n        $backup_path  .= '\/' . $relative_path;\n      } else {\n        $terminal_path = ($file['tab'] ?: $file['extension']) . '\/';\n        $relative_path = $file['repository']['root'] . '\/' . $file['repository']['code'] . '\/src\/' . $file['path'] . '\/' . $file['filename'] . (!empty($file['component_vue']) ? '\/' . $file['filename'] . '\/' : '\/') . '__end__\/';\n        $backup_path  .= $relative_path;\n      }\n    }\n\n    if (isset($backup_path)) {\n      return [\n        'absolute_path' => Str::parsePath($backup_path),\n        'path_preference' => Str::parsePath($backup_path . $file['tab'] . '\/'),\n        'path_history' => Str::parsePath($backup_path . $terminal_path)\n      ];\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3180,
            "endLine": 3212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_get_path_backup",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Function who return path relative for backup history or preferences\n\n",
                "tags": []
            },
            "comments": "  \/**\n   * Function who return path relative for backup history or preferences\n   *\n   *\n   *\/"
        },
        "_backup_preference_files": {
            "name": "_backup_preference_files",
            "summary": "Function who create,change or delete file preference",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _backup_preference_files(array $file, array $state, string $type = '')\n  {\n    $state       = json_encode($state);\n    $backup_path = $this->_get_path_backup($file);\n\n    $backup = $backup_path['path_preference'] . $file['filename'] . '.json';\n    X::log([$backup, $this->getDataPath('appui-ide')], 'pref');\n    if (!empty($backup_path)) {\n      if (($type === 'create')) {\n        if (\n          $this->fs->createPath(X::dirname($backup))\n          && $this->fs->putContents($backup, $state)\n        ) {\n          return $backup;\n        }\n      } elseif (($type === 'change')) {\n        if (\n          $this->fs->exists($backup)\n          && empty($this->fs->delete($backup, 1))\n        ) {\n          return false;\n        }\n\n        if (\n          $this->fs->createPath(X::dirname($backup))\n          && $this->fs->putContents($backup, $state)\n        ) {\n          return $backup;\n        }\n      } elseif ($type === 'delete' && $this->fs->delete($backup, 1)) {\n        return $backup;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3223,
            "endLine": 3258,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "_backup_preference_files",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "state",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Function who create,change or delete file preference\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$file"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$state"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Function who create,change or delete file preference\n   *\n   * @param array  $file\n   * @param array  $state\n   * @param string $type\n   * @return string|boolean\n   *\/"
        },
        "_backup_history": {
            "name": "_backup_history",
            "summary": "create|delete history file",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _backup_history(array $file, string $type = '')\n  {\n    if (!empty($backup_path = $this->_get_path_backup($file))) {\n      $backup = $backup_path['path_history'] . date('Y-m-d_His') . '.' . $file['extension'];\n      if (($type === 'create') && $this->fs->isFile(self::$current_file)) {\n        $this->fs->createPath(X::dirname($backup));\n        $this->fs->copy(self::$current_file, $backup);\n      } elseif ($type === 'delete') {\n        $this->fs->delete($backup_path['path_history'], 1);\n      }\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3268,
            "endLine": 3279,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_backup_history",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "create|delete history file\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$file"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * create|delete history file\n   *\n   * @param array  $file\n   * @param string $type\n   * @return void\n   *\/"
        },
        "_manager_backup_components": {
            "name": "_manager_backup_components",
            "summary": "Renames|movie|delete a file or a folder of the backup.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _manager_backup_components(array $cfg, string $case)\n  {\n    if (!empty($cfg['is_component'])) {\n      $component_type       = $this->getType('components');\n      $tabs                 = $component_type['tabs'];\n      $backup_path          = self::$backup_path . $cfg['repository']['name'] . '\/src\/';\n      $old_folder_component = $backup_path . $cfg['path'] . $cfg['name'];\n      \/\/file preferences json in not correctly name\n      if ($this->fs->isDir($old_folder_component)) {\n        switch ($case) {\n          case 'move':\n            if (\n              $this->fs->isDir($backup_path . $cfg['new_path'])\n              && empty($this->fs->move($old_folder_component, $backup_path . $cfg['new_path']))\n            ) {\n              $this->error(\"Error during the folder backup move: old -> $old_folder_component\");\n              return false;\n            }\n            break;\n          case 'copy':\n            \/\/copy general folder\n            if (!empty($this->fs->copy($old_folder_component, $backup_path . $cfg['new_path'] . $cfg['new_name']))) {\n              \/\/if exist component into new general folder to do rename\n              if ($this->fs->exists($backup_path . $cfg['new_path'] . $cfg['new_name'])) {\n                if (!empty($this->fs->rename($backup_path . $cfg['new_path'] . $cfg['new_name'] . '\/' . $cfg['name'], $cfg['new_name']))) {\n                  \/\/if exist old file preference rename file\n                  foreach ($tabs as $tab) {\n                    $old_file_preferences = $backup_path . $cfg['new_path'] . $cfg['new_name'] . '\/' . $cfg['new_name'] . '\/__end__\/' . $tab['path'] . $cfg['name'] . '.json';\n                    if ($this->fs->isFile($old_file_preferences)) {\n                      if (empty($this->fs->rename($old_file_preferences, $cfg['new_name'] . '.json'))) {\n                        $this->error(\"Error during rename file preferences for component\");\n                        return false;\n                      }\n\n                      break;\n                    }\n                  }\n                } else {\n                  $this->error(\"Error during the component backup copy: old -> $old_folder_component\");\n                  return false;\n                }\n              }\n            } else {\n              $this->error(X::_(\"Error during the component backup copy: old ->\") . $old_folder_component);\n              return false;\n            }\n            return true;\n            break;\n          case 'rename':\n            \/\/rename general folder backup\n            if (!empty($this->fs->rename($old_folder_component, $cfg['new_name']))) {\n              if (\n                $this->fs->exists($backup_path . $cfg['path'] . $cfg['new_name'] . '\/' . $cfg['name'])\n                && empty($this->fs->rename($backup_path . $cfg['path'] . $cfg['new_name'] . '\/' . $cfg['name'], $cfg['new_name']))\n              ) {\n                $this->error(X::_(\"Error during the folder backup rename copmonent\"));\n                return false;\n              } \/\/rename file preferences\n              else {\n                foreach ($tabs as $tab) {\n                  $old_file_preferences = $backup_path . $cfg['path'] . $cfg['new_name'] . '\/' . $cfg['new_name'] . '\/__end__\/' . $tab['path'] . $cfg['name'] . '.json';\n                  if ($this->fs->isFile($old_file_preferences)) {\n                    if (empty($this->fs->rename($old_file_preferences, $cfg['new_name'] . '.json'))) {\n                      $this->error(\"Error during rename file preferences for component\");\n                      return false;\n                    }\n\n                    break;\n                  }\n                }\n              }\n            }\n            return true;\n            break;\n          case 'delete':\n            if (empty($this->fs->delete($old_folder_component))) {\n              $this->error(\"Error during the component backup delete\");\n              return false;\n            }\n            return true;\n            break;\n        }\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3289,
            "endLine": 3375,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_manager_backup_components",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The components info"
                },
                {
                    "name": "case",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The operation type (rename, copy)"
                }
            ],
            "doc": {
                "description": "Renames|movie|delete a file or a folder of the backup.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The components info"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$ope",
                        "description": "The operation type (rename, copy)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Renames|movie|delete a file or a folder of the backup.\n   *\n   * @param array  $cfg The components info\n   * @param string $ope The operation type (rename, copy)\n   * @return bool\n   *\/"
        },
        "_manager_backup": {
            "name": "_manager_backup",
            "summary": "Renames|movie|copy|delete a file or a folder of the backup and file preferernces.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _manager_backup(array $path,  array $cfg, string $case)\n  {\n    \/\/configuration path for backup\n    $backup_path = self::$backup_path . $cfg['repository']['path'] . '\/src';\n    \/\/ for case of copy the type is included in path and new_path\n    if (\n      !empty($path['old'])\n      && !empty($cfg)\n    ) {\n      if (\n        !empty($cfg['is_project'])\n        && !empty($cfg['type'])\n        && ($case !== 'copy')\n      ) {\n        $type = $cfg['type'];\n      }\n\n      $old_backup = $backup_path . (isset($type) ? '\/' . $type . '\/' : '\/');\n\n      $path_old = explode(\"\/\", $path['old']);\n      if (is_array($path_old) && count($path_old)) {\n        $path_old    = array_pop($path_old);\n        $path_old    = explode(\".\", $path_old)[0];\n        $old_backup .= $cfg['path'] . '\/' . $path_old;\n        $old_backup  = str_replace('\/\/', '\/', $old_backup);\n      } else {\n        $this->error(\"Error during the file|folder backup delete: old -> $old_backup\");\n      }\n\n      \/\/CASE MOVE, RENAME and COPY\n      if ((($case === 'move') || ($case === 'rename') || ($case === 'copy'))\n        && !empty($path['new'])\n      ) {\n        $new_backup  = $backup_path . '\/' . (isset($type) ? $type . '\/' : '');\n        $new_backup .= ($case === 'rename' ? $cfg['path'] : $cfg['new_path']) . '\/' . Str::fileExt($path['new'], 1)[0];\n        $new_backup  = str_replace('\/\/', '\/', $new_backup);\n      }\n    }\n\n    if (isset($old_backup) && $this->fs->isDir($old_backup)) {\n      \/\/ if it isn't a folder\n      if (!$this->fs->isDir($path['old']) && !$this->fs->isDir($path['new'])) {\n        \/\/move or rename\n        if (($case === 'move') || ($case === 'rename')) {\n          \/\/if exist a backup folder\n          \/\/if the folder containing the backup does not exist, it is created\n          if (!$this->fs->exists($new_backup)) {\n            if (empty($this->fs->createPath($new_backup))) {\n              $this->error(\"Error during the file|folder backup create new -> $new_backup\");\n              return false;\n            }\n          }\n\n          if (\n            $this->fs->isDir($new_backup)\n            && empty($this->fs->move($old_backup . \"\/__end__\", $new_backup))\n          ) {\n            $this->error(\"Error during the file|folder backup move: old -> $old_backup , new -> $new_backup\");\n            return false;\n          } else {\n            if ($this->fs->isDir($old_backup) && empty($this->fs->delete($old_backup))) {\n              $this->error(\"Error during the file|folder backup delete: old -> $old_backup\");\n              return false;\n            }\n\n            \/\/for file json preferences\n            \/\/ if not rename file preferences and exist\n            $old_file_preferences = $new_backup . \"\/__end__\/\" . X::basename($path['old'], Str::fileExt($path['old'], 1)[1]) . 'json';\n            if ($this->fs->exists($old_file_preferences)) {\n              \/\/get new name for file preference\n              $new_file_preferences = X::basename($path['new'], Str::fileExt($path['new'], 1)[1]) . 'json';\n              if (empty($this->fs->rename($old_file_preferences, $new_file_preferences))) {\n                $this->error(\"Error during the file|folder backup delete: old -> $old_backup\");\n                return false;\n              }\n            }\n          }\n        } \/\/case delete\n        elseif ($case === 'delete') {\n          if (empty($this->fs->delete($old_backup))) {\n            $this->error(\"Error during the file backup delete: old -> $old_backup\");\n            return false;\n          }\n        } \/\/case in copy\n        elseif (($case === 'copy')\n          && !$this->fs->exists($new_backup)\n          && empty($this->fs->copy($old_backup, $new_backup))\n        ) {\n          $this->error(X::_(\"Error during the file backup copy: old ->\") . $old_backup);\n          return false;\n        }\n      } \/\/case folder\n      else {\n        \/\/case copy\n        if (($case === 'copy') && empty($this->fs->copy($old_backup, $new_backup))) {\n          $this->error(\"Error during the folder backup copy: old -> $old_backup\");\n          return false;\n        } \/\/case rename\n        elseif (($case === 'rename') && empty($this->fs->rename($old_backup,  X::basename($new_backup)))) {\n          $this->error(\"Error during the folder rename old -> $old_backup , new -> $new_backup\");\n          return false;\n        }\n        \/\/case delete\n        elseif (($case === 'delete') && empty($this->fs->delete($old_backup))) {\n          $this->error(\"Error during the folder backup delete: old -> $old_backup\");\n          return false;\n        } \/\/case move\n        elseif (($case === 'move')\n          && $this->fs->isDir(X::dirname($new_backup))\n          && empty($this->fs->move($old_backup, X::dirname($new_backup)))\n        ) {\n          $this->error(\"Error during the folder backup move: old -> $old_backup\");\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3386,
            "endLine": 3506,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "_manager_backup",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "paths of file|folder, old and new"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The file|folder info"
                },
                {
                    "name": "case",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The operation type (rename, copy)"
                }
            ],
            "doc": {
                "description": "Renames|movie|copy|delete a file or a folder of the backup and file preferernces.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path",
                        "description": "paths of file|folder, old and new"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The file|folder info"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$ope",
                        "description": "The operation type (rename, copy)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Renames|movie|copy|delete a file or a folder of the backup and file preferernces.\n   *\n   * @param array  $path paths of file|folder, old and new\n   * @param array  $cfg  The file|folder info\n   * @param string $ope  The operation type (rename, copy)\n   * @return bool\n   *\/"
        },
        "_operations": {
            "name": "_operations",
            "summary": "Renames|copies a file or a folder.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Ide.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _operations(array $cfg, string $ope)\n  {\n    \/\/die(var_dump($cfg, $ope));\n    if (\n      is_string($ope)\n      && !empty($cfg['repository'])\n      && !empty($cfg['name'])\n      && isset($cfg['is_mvc'], $cfg['is_file'], $cfg['path'])\n      && (($ope === 'delete')\n        || (($ope !== 'delete')\n          && ((isset($cfg['new_name'])\n            && ($cfg['name'] !== $cfg['new_name']))\n            || (isset($cfg['new_path'])\n              && ($cfg['path'] !== $cfg['new_path']))\n            || (!empty($cfg['is_file'])\n              && isset($cfg['ext'], $cfg['new_ext'])\n              && ($cfg['ext'] !== $cfg['new_ext'])))))\n    ) {\n      $rep = $cfg['repository'];\n\n      $path = $this->getRootPath($rep['name']);\n      if ($ope === 'rename') {\n        $cfg['new_path'] = $cfg['path'];\n      }\n\n      \/\/ Normal file|folder\n      if (\n        empty($cfg['is_component'])\n        && empty($cfg['is_mvc'])\n        && (empty($cfg['is_file'])\n          || (!empty($cfg['is_file'])\n            && !empty($rep['extensions'])))\n      ) {\n        $f = $this->_check_normal($cfg, $rep, $path);\n        if ($ope === 'move' && !empty($cfg['is_file'])) {\n          $f['new'] = $f['new'] . '.' . $cfg['ext'];\n        }\n\n        if (\n          $f\n          \/\/ Copy\n          && ((($ope === 'copy')\n            && $this->fs->copy($f['old'], $f['new']))\n            \/\/ Rename\n            || (($ope === 'rename')\n              \/\/rename or file or folder, in case of file addded extension\n              && $this->fs->rename($f['old'], $cfg['new_name'] . ($this->fs->isFile($f['old']) ? '.' . $cfg['ext'] : '')))\n            \/\/Move\n            || (($ope === 'move')\n              && $this->fs->move($f['old'], $f['new']))\n            \/\/ Delete\n            || (($ope === 'delete')\n              && $this->fs->delete($f['old'])\n              \/** @todo Remove backups *\/\n            ))\n        ) {\n          \/\/for rename and move backup\n          return $this->_manager_backup($f, $cfg, $ope);\n          \/\/return true;\n        }\n      }\n      \/\/ MVC\n      elseif (\n        !empty($rep['tabs'])\n        && (($rep['alias_code'] === 'mvc') || ($rep['alias_code'] === 'bbn-project'))\n        && !empty($cfg['is_mvc'])\n      ) {\n        if (($rep['alias_code'] === 'bbn-project')\n          && ($ope === 'delete')\n          && !empty($cfg['active_file'])\n        ) {\n          if (empty($this->fs->delete($path . $cfg['path']))) {\n            $this->error(\"Error during the file|folder delete: $t[old]\");\n            return false;\n          }\n\n          return true;\n        }\n\n        if ($todo = $this->_check_mvc($cfg, $rep, $path)) {\n          foreach ($todo as $t) {\n            \/\/case rename and move\n            if (($ope === 'rename') || ($ope === 'move')) {\n              \/\/ Change permissions\n              \/\/case rename\n              if ($ope === 'rename') {\n                \/\/case rename file\n                if ($this->fs->isFile($t['old'])) {\n                  $new_name = X::basename($t['new']);\n                }\n                \/\/case rename folder\n                else {\n                  $new_name = $cfg['new_name'];\n                }\n\n                if (empty($this->fs->rename($t['old'], $new_name))) {\n                  $this->error(\"Error during the file|folder move: old -> $t[old] , new -> $t[new]\");\n                  return false;\n                }\n\n                if (\n                  empty($this->realToPerm($t['old']))\n                  && !empty($cfg['is_file'])\n                  && (strpos($t['old'], '\/mvc\/public\/') !== false)\n                ) {\n                  if (!$this->createPermByReal($t['old'])) {\n                    return $this->error(X::_(\"Impossible to create the option for rename\"));\n                  }\n                }\n\n                if (\n                  !empty($t['perms'])\n                  && !$this->changePermByReal($t['old'], $t['new'], empty($cfg['is_file']) ? 'dir' : 'file')\n                ) {\n                  if (!empty($this->realToPerm($t['old']))) {\n                    $this->error(\"Error during the file|folder permissions change: old -> $t[old] , new -> $t[new]\");\n                    return false;\n                  }\n                }\n              } \/\/case move\n              else {\n                if (empty($this->fs->move($t['old'], X::dirname($t['new'])))) {\n                  $this->error(\"Error during the file|folder move: old -> $t[old] , new -> $t[new]\");\n                  return false;\n                }\n\n                if (\n                  !empty($this->realToPerm($t['old']))\n                  && !empty($cfg['is_file']) && (strpos($t['old'], '\/mvc\/public\/') !== false)\n                ) {\n                  if (!$this->createPermByReal($t['old'])) {\n                    return $this->error(X::_(\"Impossible to create the option for move\"));\n                  }\n                }\n\n                if (\n                  !empty($t['perms'])\n                  && !$this->movePermByReal($t['old'], $t['new'], empty($cfg['is_file']) ? 'dir' : 'file')\n                ) {\n                  $this->error(\"Error during the file|folder permissions change: old -> $t[old] , new -> $t[new]\");\n                  return false;\n                }\n              }\n\n              \/\/move,copy  or rename preference and history\n              $this->_manager_backup($t, $cfg, $ope);\n            }\n            \/\/ Copy\n            elseif ($ope === 'copy') {\n              if (empty($this->fs->copy($t['old'], $t['new']))) {\n                $this->error(\"Error during the file|folder copy: old -> $t[old] , new -> $t[new]\");\n                return false;\n              }\n\n              \/\/ Create permissions\n              if (!empty($t['perms']) && !$this->createPermByReal($t['new'], empty($cfg['is_file']) ? 'dir' : 'file')) {\n                $this->error(\"Error during the file|folder permissions create: $t[new]\");\n                return false;\n              }\n\n              \/\/Copy preferences and history\n              $this->_manager_backup($t, $cfg, $ope);\n            }\n            \/\/case Delete\n            elseif ($ope === 'delete') {\n              if (empty($this->fs->delete($t['old']))) {\n                $this->error(\"Error during the file|folder delete: $t[old]\");\n                return false;\n              }\n\n              \/\/ Delete permissions\n              if (!empty($t['perms'])) {\n                $this->deletePerm($t['old']);\n              }\n\n              \/\/\/delete backup and file preference\n              $this->_manager_backup($t, $cfg, $ope);\n            }\n          }\n\n          return true;\n        }\n      }\n      \/\/case components\n      elseif (!empty($cfg['is_component'])) {\n        \/\/ DELETE COMPONENT\n        if (($ope === 'delete') && empty($this->_delete_component($cfg))) {\n          return false;\n        }\n        \/\/ COPY COMPONENT\n        elseif (($ope === 'copy') && empty($this->_copy_component($cfg))) {\n          return false;\n        }\n        \/\/ RENAME COMPONENT\n        elseif (($ope === 'rename') && empty($this->_rename_component($cfg))) {\n          return false;\n        }\n        \/\/MOVE COMPONENT\n        elseif (($ope === 'move') && empty($this->_move_component($cfg, $rep, $path))) {\n          return false;\n        }\n\n        \/\/if the operation was successful then the backup and history will be managed\n        $this->_manager_backup_components($cfg, $ope);\n        return true;\n      }\n    } else {\n      $this->error(\"Impossible to $ope the file|folder.\");\n      return false;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 3516,
            "endLine": 3726,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_operations",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The file|folder info"
                },
                {
                    "name": "ope",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The operation type (rename, copy)"
                }
            ],
            "doc": {
                "description": "Renames|copies a file or a folder.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The file|folder info"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$ope",
                        "description": "The operation type (rename, copy)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Renames|copies a file or a folder.\n   *\n   * @param array  $cfg The file|folder info\n   * @param string $ope The operation type (rename, copy)\n   * @return bool\n   *\/"
        },
        "optionalInit": {
            "name": "optionalInit",
            "summary": "Returns the option's root ID for the current class based on {@link $option_root_code}",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function optionalInit(array $path = null)\n  {\n    if (!self::$optional_is_init) {\n      $opt = Option::getInstance();\n      if (!$opt) {\n        throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n      }\n\n      $justDefined = false;\n      if (!\\defined(\"BBN_APPUI\")) {\n        $justDefined = true;\n        \\define('BBN_APPUI', $opt->fromCode('appui', 'plugins'));\n      }\n\n      if (!$path) {\n        if (!BBN_APPUI) {\n          throw new Exception('Impossible to find the option appui for ' . __CLASS__ . ($justDefined ? '' : 'not') . ' defined ' . ($opt->fromCode('appui', 'plugins') ?: '') . ($opt->fromCode('appui') ?: '') . ' ' . $opt->getRoot() . ' ' . $opt->getDefault() . X::getDump($opt->option($opt->getRoot())));\n        }\n\n        $tmp                   = explode('\\\\', __CLASS__);\n        $cls                   = strtolower(end($tmp));\n        $path                  = [$cls, 'appui'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      if (!self::$option_root_id) {\n        if (!$cls) {\n          throw new Exception(\"Impossible to find the option \".json_encode($path).\" !!! for \".__CLASS__);\n        }\n        throw new Exception(\"Impossible to find the option $cls for \".__CLASS__);\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 41,
            "endLine": 75,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "optionalInit",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the option's root ID for the current class based on {@link $option_root_code}\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the option's root ID for the current class based on {@link $option_root_code}\n   *\n   * @return false|int\n   *\/"
        },
        "initOptionalGlobal": {
            "name": "initOptionalGlobal",
            "summary": "Sets only once all the constants used by the class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function initOptionalGlobal(Option $opt, array $path = null)\n  {\n    if (!self::$optional_is_init) {\n      if (!\\defined(\"BBN_APPUI\")) {\n        \\define('BBN_APPUI', $opt->fromCode('appui', 'plugins'));\n      }\n\n      if (!$path) {\n        if (!BBN_APPUI) {\n          X::log('Impossible to find the option appui for '.__CLASS__, 'errors');\n          return;\n        }\n\n        $tmp                   = explode('\\\\', __CLASS__);\n        $cls                   = end($tmp);\n        $path                  = [$cls, 'appui'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n            if (!self::$option_root_id) {\n        X::log(\"Impossible to find the option $cls for \".__CLASS__, 'errors');\n        return;\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 85,
            "endLine": 111,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "initOptionalGlobal",
            "returns": [],
            "arguments": [
                {
                    "name": "opt",
                    "position": 0,
                    "type": "bbn\\Appui\\Option",
                    "type_arr": [
                        "bbn\\Appui\\Option"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets only once all the constants used by the class.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Option",
                        "name": "$opt"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets only once all the constants used by the class.\n   *\n   * @param Option $opt\n   * @param array             $path\n   * @return void\n   *\/"
        },
        "initOptional": {
            "name": "initOptional",
            "summary": "Defines the options prop and launches the static init method.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initOptional(array $path = null)\n  {\n    $this->options = Option::getInstance();\n    if (!$this->options) {\n      throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n    }\n\n    self::initOptionalGlobal($this->options, $path);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 120,
            "endLine": 128,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initOptional",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Defines the options prop and launches the static init method.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Defines the options prop and launches the static init method.\n   *\n   * @param array $path\n   * @return void\n   *\/"
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionRoot()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 131,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionRoot",
            "returns": [],
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsObject(): Option\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 138,
            "endLine": 146,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsObject",
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionId()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 155,
            "endLine": 158,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionId",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns The option's ID of a category, i.e. direct children of option's root\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns The option's ID of a category, i.e. direct children of option's root\n   *\n   * @param string $code\n   * @return int|false\n   *\/"
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsIds(): array\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...self::_treat_args(func_get_args())),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 167,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsIds",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Undocumented function\n",
                "params": [],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Check it, it doesn't seem ok"
                }
            },
            "comments": "  \/**\n   * Undocumented function\n   *\n   * @todo Check it, it doesn't seem ok\n   * @return array\n   *\/"
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTree()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 180,
            "endLine": 183,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTree",
            "returns": [],
            "arguments": []
        },
        "getOptionsTreeRef": {
            "name": "getOptionsTreeRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTreeRef()\n  {\n    return ($tree = self::getOptionsObject()->fullTreeRef(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 186,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTreeRef",
            "returns": [],
            "arguments": []
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptions()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 192,
            "endLine": 195,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptions",
            "returns": [],
            "arguments": []
        },
        "getOptionsRef": {
            "name": "getOptionsRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsRef()\n  {\n    return self::getOptionsObject()->fullOptionsRef(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 198,
            "endLine": 201,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsRef",
            "returns": [],
            "arguments": []
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOption()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 204,
            "endLine": 207,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOption",
            "returns": [],
            "arguments": []
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValue()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 210,
            "endLine": 213,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTextValue",
            "returns": [],
            "arguments": []
        },
        "getOptionsTextValueRef": {
            "name": "getOptionsTextValueRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValueRef()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptionsRef($id) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 216,
            "endLine": 219,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTextValueRef",
            "returns": [],
            "arguments": []
        },
        "_treat_args": {
            "name": "_treat_args",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function _treat_args(array $args, $appui = false): array\n  {\n    $hasUid = Str::isUid(end($args));\n    if (count($args) && !$hasUid) {\n      self::optionalInit();\n      if (!in_array($args[0], ['permissions', 'options', 'plugins'])) {\n        $args[] = 'options';\n      }\n    }\n\n    if (!$hasUid) {\n      $args[] = self::$option_root_id;\n    }\n\n    return $args;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 223,
            "endLine": 238,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_treat_args",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "appui",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "checkPath": {
            "name": "checkPath",
            "summary": "This checks whether an argument used for getting controller, View or model - which are files - doesn't contain malicious content.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function checkPath()\n  {\n    $ar = \\func_get_args();\n    foreach ($ar as $a){\n      $b = Str::parsePath($a, true);\n      if (empty($b) && !empty($a)) {\n        $this->error(\"The path $a is not an acceptable value\");\n        return false;\n      }\n    }\n\n    return 1;\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 37,
            "endLine": 49,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "checkPath",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "This checks whether an argument used for getting controller, View or model - which are files - doesn't contain malicious content.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$p",
                        "description": "The request path <em>(e.g books\/466565 or html\/home)<\/em>"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This checks whether an argument used for getting controller, View or model - which are files - doesn't contain malicious content.\n   *\n   * @param string $p The request path <em>(e.g books\/466565 or html\/home)<\/em>\n   * @return bool\n   *\/"
        },
        "log": {
            "name": "log",
            "summary": "Log to a specific log with debug info",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if (Mvc::getDebug()) {\n      $ar = \\func_get_args();\n      X::log(\\count($ar) > 1 ? $ar : $ar[0], 'mvc');\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 67,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Log to a specific log with debug info",
                "tags": []
            },
            "comments": "  \/**\n   * Log to a specific log with debug info\n   *\/"
        },
        "pluginDataPath": {
            "name": "pluginDataPath",
            "summary": "Returns the path of a plugin in the data",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function pluginDataPath(string $plugin = null): ?string\n  {\n    if ($this->_plugin || $plugin) {\n      return $this->dataPath().'plugins\/'.$this->pluginName($plugin ?: $this->_plugin).'\/';\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 82,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "pluginDataPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the path of a plugin in the data\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the path of a plugin in the data\n   *\n   * @param string $plugin\n   * @return string|null\n   *\/"
        },
        "pluginTmpPath": {
            "name": "pluginTmpPath",
            "summary": "Returns the path of a plugin in the data",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function pluginTmpPath(string $plugin = null): ?string\n  {\n    if ($this->_plugin || $plugin) {\n      return $this->tmpPath().'plugins\/'.$this->pluginName($plugin ?: $this->_plugin).'\/';\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 98,
            "endLine": 105,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "pluginTmpPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the path of a plugin in the data\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the path of a plugin in the data\n   *\n   * @param string $plugin\n   * @return string|null\n   *\/"
        },
        "getPlugins": {
            "name": "getPlugins",
            "summary": "Returns all the plugins available with their name, path and url",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPlugins(): ?array\n  {\n    return $this->_mvc->getPlugins();\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 112,
            "endLine": 115,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getPlugins",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns all the plugins available with their name, path and url\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns all the plugins available with their name, path and url\n   * @return array|null\n   *\/"
        },
        "hasPlugin": {
            "name": "hasPlugin",
            "summary": "Checks whether a plugin is available",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasPlugin(string $plugin): bool\n  {\n    return $this->_mvc->hasPlugin($plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 124,
            "endLine": 127,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "hasPlugin",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The plugin name"
                }
            ],
            "doc": {
                "description": "Checks whether a plugin is available\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin",
                        "description": "The plugin name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether a plugin is available\n   *\n   * @param string $plugin The plugin name\n   * @return boolean\n   *\/"
        },
        "pluginPath": {
            "name": "pluginPath",
            "summary": "Returns the path of a plugin from its root directory (app, lib...) based on its name",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function pluginPath(string $plugin = null, $raw = false): ?string\n  {\n    return $this->_mvc->pluginPath($plugin ?: $this->pluginName($this->_plugin), $raw);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 150,
            "endLine": 153,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "pluginPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The plugin name"
                },
                {
                    "name": "raw",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If true will not include `src`"
                }
            ],
            "doc": {
                "description": "Returns the path of a plugin from its root directory (app, lib...) based on its name\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$plugin",
                        "description": "The plugin name"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$raw",
                        "description": "If true will not include `src`"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the path of a plugin from its root directory (app, lib...) based on its name\n   *\n   * @param string|null $plugin The plugin name\n   * @param boolean $raw If true will not include `src`\n   * @return string|null\n   *\/"
        },
        "pluginUrl": {
            "name": "pluginUrl",
            "summary": "Returns the url of a plugin based on its name",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function pluginUrl(string $plugin = null): ?string\n  {\n    return $this->_mvc->pluginUrl($plugin ?: $this->pluginName($this->_plugin));\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 162,
            "endLine": 165,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "pluginUrl",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The plugin name"
                }
            ],
            "doc": {
                "description": "Returns the url of a plugin based on its name\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$plugin",
                        "description": "The plugin name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the url of a plugin based on its name\n   *\n   * @param string|null $plugin The plugin name\n   * @return string|null\n   *\/"
        },
        "pluginName": {
            "name": "pluginName",
            "summary": "Returns the name of a plugin based on its path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function pluginName($path = null): ?string\n  {\n    return $this->_mvc->pluginName($path ?: $this->_path);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 174,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "pluginName",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The plugin path"
                }
            ],
            "doc": {
                "description": "Returns the name of a plugin based on its path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$path",
                        "description": "The plugin path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the name of a plugin based on its path\n   *\n   * @param string|null $path The plugin path\n   * @return string|null\n   *\/"
        },
        "getCookie": {
            "name": "getCookie",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCookie()\n  {\n    return $this->_mvc->getCookie();\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 180,
            "endLine": 183,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCookie",
            "returns": [],
            "arguments": []
        },
        "getRoutes": {
            "name": "getRoutes",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRoutes(): ?array\n  {\n    return $this->_mvc->getRoutes();\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 186,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRoutes",
            "returns": [
                null,
                "array"
            ],
            "arguments": []
        },
        "getAliases": {
            "name": "getAliases",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAliases(): ?array\n  {\n    return $this->_mvc->getRoutes('alias');\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 192,
            "endLine": 195,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getAliases",
            "returns": [
                null,
                "array"
            ],
            "arguments": []
        },
        "getRoute": {
            "name": "getRoute",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRoute(string $path, string $mode)\n  {\n    return $this->_mvc->getRoute($path, $mode);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 198,
            "endLine": 201,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getRoute",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setLocale": {
            "name": "setLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setLocale(string $locale)\n  {\n    return $this->_mvc->setLocale($locale);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 204,
            "endLine": 207,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setLocale",
            "returns": [],
            "arguments": [
                {
                    "name": "locale",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLocale": {
            "name": "getLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLocale(): ?string\n  {\n    return $this->_mvc->getLocale();\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 210,
            "endLine": 213,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLocale",
            "returns": [
                null,
                "string"
            ],
            "arguments": []
        },
        "appPath": {
            "name": "appPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function appPath($raw = false): string\n  {\n    return Mvc::getAppPath($raw);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 216,
            "endLine": 219,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "appPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "raw",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "libPath": {
            "name": "libPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function libPath(): string\n  {\n    return Mvc::getLibPath();\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 222,
            "endLine": 225,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "libPath",
            "returns": [
                "string"
            ],
            "arguments": []
        },
        "dataPath": {
            "name": "dataPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dataPath(string $plugin = null): string\n  {\n    return Mvc::getDataPath().($plugin ? 'plugins\/'.$plugin.'\/' : '');\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 228,
            "endLine": 231,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dataPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "tmpPath": {
            "name": "tmpPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tmpPath(string $plugin = null): string\n  {\n    return Mvc::getTmpPath($plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 234,
            "endLine": 237,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "tmpPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "logPath": {
            "name": "logPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function logPath(string $plugin = null): string\n  {\n    return Mvc::getLogPath($plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 240,
            "endLine": 243,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "logPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "cachePath": {
            "name": "cachePath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function cachePath(string $plugin = null): string\n  {\n    return Mvc::getCachePath($plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 246,
            "endLine": 249,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "cachePath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "contentPath": {
            "name": "contentPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function contentPath(string $plugin = null): string\n  {\n    return Mvc::getContentPath($plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 252,
            "endLine": 255,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "contentPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "userTmpPath": {
            "name": "userTmpPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function userTmpPath(string $id_user = null, string $plugin = null):? string\n  {\n    return Mvc::getUserTmpPath($id_user, $plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 258,
            "endLine": 261,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "userTmpPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "userDataPath": {
            "name": "userDataPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Ide",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function userDataPath(string $id_user = null, string $plugin = null):? string\n  {\n    return Mvc::getUserDataPath($id_user, $plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 264,
            "endLine": 267,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "userDataPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "backup_path": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "@var string Name for get repositories",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "backup_pref_path": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "@var string Name for get repositories",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "project": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string Name for get repositories",
                "tags": []
            },
            "parent": false,
            "value": ""
        },
        "repository_default": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string $project name for get repositories",
                "tags": []
            },
            "parent": false,
            "value": ""
        },
        "origin": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string $project name for get repositories",
                "tags": []
            },
            "parent": false,
            "value": ""
        },
        "ide_path": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var bool|int $ide_path",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "dev_path": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var bool|int $dev_path",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "path_type": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var bool|int $path_type",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "permissions": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var bool|int $permissions",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "current_file": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var bool|string $current_file",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "current_id": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var bool|string $current_id",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var Db $db",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "options": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var Option $options",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "last_error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var null|string The last error recorded by the class",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "routes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array MVC routes for linking with repositories",
                "tags": []
            },
            "parent": false,
            "value": []
        },
        "pref": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var Preferences $pref",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "projects": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var Project $projects",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "repositories_list": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": []
        },
        "fs": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "bbn\\File\\System",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "repositories": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "array",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Appui\\Ide",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "optional_is_init": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Set as true from the moment a first instance has been initiated and has defined the constants."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "option_root_id": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The ID of the root option"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_mvc": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Mvc\\Common",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "The MVC class from which the controller is called\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bbn\\Mvc"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_plugin": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Ide"
            },
            "declaring_trait": "bbn\\Mvc\\Common",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "null|string",
                        "description": "If the controller is inside a plugin this property will be set to its name"
                    }
                ]
            },
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "backup_path": null,
        "backup_pref_path": null,
        "ide_path": false,
        "dev_path": false,
        "path_type": false,
        "permissions": false,
        "current_file": false,
        "current_id": false,
        "optional_is_init": false,
        "option_root_id": null
    },
    "constants": {
        "BBN_APPUI": {
            "name": "BBN_APPUI",
            "value": "appui",
            "class": "bbn\\Appui\\Ide",
            "parent": false,
            "private": false,
            "protected": false,
            "public": true,
            "final": false,
            "doc": {
                "description": "",
                "tags": []
            }
        },
        "BBN_PERMISSIONS": {
            "name": "BBN_PERMISSIONS",
            "value": "permissions",
            "class": "bbn\\Appui\\Ide",
            "parent": false,
            "private": false,
            "protected": false,
            "public": true,
            "final": false,
            "doc": {
                "description": "",
                "tags": []
            }
        },
        "BBN_ACCESS": {
            "name": "BBN_ACCESS",
            "value": "access",
            "class": "bbn\\Appui\\Ide",
            "parent": false,
            "private": false,
            "protected": false,
            "public": true,
            "final": false,
            "doc": {
                "description": "",
                "tags": []
            }
        },
        "IDE_PROJECTS": {
            "name": "IDE_PROJECTS",
            "value": "project",
            "class": "bbn\\Appui\\Ide",
            "parent": false,
            "private": false,
            "protected": false,
            "public": true,
            "final": false,
            "doc": {
                "description": "",
                "tags": []
            }
        },
        "IDE_PATH": {
            "name": "IDE_PATH",
            "value": "ide",
            "class": "bbn\\Appui\\Ide",
            "parent": false,
            "private": false,
            "protected": false,
            "public": true,
            "final": false,
            "doc": {
                "description": "",
                "tags": []
            }
        },
        "DEV_PATH": {
            "name": "DEV_PATH",
            "value": "paths",
            "class": "bbn\\Appui\\Ide",
            "parent": false,
            "private": false,
            "protected": false,
            "public": true,
            "final": false,
            "doc": {
                "description": "",
                "tags": []
            }
        },
        "PATH_TYPE": {
            "name": "PATH_TYPE",
            "value": "types",
            "class": "bbn\\Appui\\Ide",
            "parent": false,
            "private": false,
            "protected": false,
            "public": true,
            "final": false,
            "doc": {
                "description": "",
                "tags": []
            }
        },
        "OPENED_FILE": {
            "name": "OPENED_FILE",
            "value": "opened",
            "class": "bbn\\Appui\\Ide",
            "parent": false,
            "private": false,
            "protected": false,
            "public": true,
            "final": false,
            "doc": {
                "description": "",
                "tags": []
            }
        },
        "RECENT_FILE": {
            "name": "RECENT_FILE",
            "value": "recent",
            "class": "bbn\\Appui\\Ide",
            "parent": false,
            "private": false,
            "protected": false,
            "public": true,
            "final": false,
            "doc": {
                "description": "",
                "tags": []
            }
        },
        "THEME": {
            "name": "THEME",
            "value": "theme",
            "class": "bbn\\Appui\\Ide",
            "parent": false,
            "private": false,
            "protected": false,
            "public": true,
            "final": false,
            "doc": {
                "description": "",
                "tags": []
            }
        }
    },
    "uses": {
        "bbn\\X": "X",
        "bbn\\Str": "Str",
        "bbn\\Db": "Db",
        "bbn\\User\\Preferences": "Preferences",
        "bbn\\User\\Permissions": "Permissions",
        "bbn\\Mvc\\Common": "Common",
        "bbn\\Models\\Tts\\Optional": "Optional",
        "bbn\\File\\System": "System"
    },
    "dummyComments": [
        "\/**\n * Created by BBN Solutions.\n * User: Mirko Argentino\n * Date: 04\/02\/2017\n * Time: 15:56\n *\/"
    ],
    "summary": "",
    "description": "",
    "description_parts": []
}