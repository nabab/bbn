{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Database",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\Optional"
    ],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
    "startLine": 15,
    "endLine": 1739,
    "contentConstructor": {
        "file": "bbn\\Appui\\Database",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Constructor",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db)\n  {\n    parent::__construct($db);\n    self::optionalInit();\n    $this->o = bbn\\Appui\\Option::getInstance();\n\n  }",
            "startLine": 67,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "__construct",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Cache",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bbn\\Db $db)\n  {\n\t\t$this->cacher = bbn\\Cache::getEngine();\n\t\t$this->_cache_prefix = str_replace('\\\\', '\/', \\get_class($this)).'\/';\n  }",
                "startLine": 33,
                "endLine": 37,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "connection": {
            "name": "connection",
            "summary": "Returns a connection with the given user@host selecting the given database.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $host = NULL, string $engine = 'mysql', string $db = '')\n  {\n    if (bbn\\Str::isUid($host)) {\n      $id_host = $host;\n    }\n    elseif (!($id_host = $this->hostId($host, $engine))) {\n      throw new \\Exception(X::_(\"Impossible to find the host\").' '.\"$host ($engine)\");\n    }\n\n    if (!($cfg = $this->o->option($id_host))) {\n      throw new \\Exception(X::_(\"Impossible to find the option corresponding to host\").' '.\"$host ($engine)\");\n    }\n\n    if ($id_host && ($parent = $this->o->parent($this->o->getIdParent($id_host)))) {\n      if (!isset($this->connections[$parent['code']])) {\n        throw new \\Exception(X::_(\"Unknown engine\").\" \".$parent['code']);\n      }\n\n      if (!isset($this->connections[$parent['code']][$cfg['code']])) {\n        switch ($parent['code']) {\n          case 'mysql':\n            if (strpos($cfg['code'], '@')) {\n              $bits = bbn\\X::split($cfg['code'], '@');\n              if ((count($bits) === 2) && ($password = $this->getPassword($id_host))) {\n                $db_cfg = [\n                  'engine' => 'mysql',\n                  'user' => $bits[0],\n                  'host' => $bits[1],\n                  'db' => $db,\n                  'pass' => $password\n                ];\n              }\n              else {\n                $db_cfg = [\n                  'engine' => 'mysql',\n                  'host' => $cfg['code'],\n                  'db' => $db\n                ];\n              }\n\n              try {\n                $this->connections[$parent['code']][$cfg['code']] = new bbn\\Db($db_cfg);\n              }\n              catch (\\Exception $e) {\n                throw new \\Exception($e->getMessage());\n              }\n            }\n            break;\n\n          case 'postgre':\n            if (empty($db) || empty($cfg['path'])) {\n              throw new \\Exception(X::_('db or path empty'));\n            }\n            break;\n\n          case 'sqlite':\n            if (empty($db) || empty($cfg['path']) || !file_exists($cfg['path'].'\/'.$db)) {\n              throw new \\Exception(X::_('db or path empty'));\n            }\n            \n            $db_cfg = [\n              'engine' => 'sqlite',\n              'db' => $cfg['path'].'\/'.$db\n            ];\n            try {\n              $this->connections[$parent['code']][$cfg['code']] = new bbn\\Db($db_cfg);\n            }\n            catch (\\Exception $e) {\n              throw new \\Exception($e->getMessage());\n            }\n            break;\n\n          default:\n            throw new \\Exception(X::_('Impossible to find the engine').' '.$cfg['engine']);\n        }\n      }\n\n      if (isset($this->connections[$parent['code']][$cfg['code']])) {\n        return $this->connections[$parent['code']][$cfg['code']];\n      }\n    }\n\n    throw new \\Exception(X::_(\"Impossible to get a connection for\").' '.$cfg['code']);\n  }",
            "startLine": 83,
            "endLine": 166,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bbn\\Db"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "host",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The database name"
                },
                {
                    "name": "engine",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hostId": {
            "name": "hostId",
            "summary": "Returns the ID of a connection.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $host = NULL, string $engine = 'mysql')\n  {\n    if (empty($host)) {\n      $host = $this->db->getConnectionCode();\n    }\n\n    $r = self::getOptionId($host, $engine === 'sqlite' ? 'paths' : 'connections', $engine);\n    return $r ?: null;\n  }",
            "startLine": 175,
            "endLine": 183,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "host",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ]
        },
        "countHosts": {
            "name": "countHosts",
            "summary": "Returns the number of connections in the options.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $engine = 'mysql')\n  {\n    if (($id_parent = self::getOptionId($engine === 'sqlite' ? 'paths' : 'connections', $engine))\n        && ($num = $this->o->count($id_parent))\n    ) {\n      return $num;\n    }\n\n    return 0;\n  }",
            "startLine": 191,
            "endLine": 200,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "engine",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ]
        },
        "hosts": {
            "name": "hosts",
            "summary": "Returns a list of the connections available.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $engine = 'mysql')\n  {\n    if (($id_parent = self::getOptionId($engine === 'sqlite' ? 'paths' : 'connections', $engine))\n        && ($co = array_values($this->o->codeOptions($id_parent)))\n    ) {\n      return $co;\n    }\n\n    return [];\n  }",
            "startLine": 208,
            "endLine": 217,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "engine",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ]
        },
        "fullHosts": {
            "name": "fullHosts",
            "summary": "Returns the list of the connections",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $engine = 'mysql')\n  {\n    if (($id_parent = self::getOptionId($engine === 'sqlite' ? 'paths' : 'connections', $engine))\n        && ($opt = $this->o->fullOptions($id_parent))\n    ) {\n      return $opt;\n    }\n\n    return null;\n  }",
            "startLine": 225,
            "endLine": 234,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "engine",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ]
        },
        "dbId": {
            "name": "dbId",
            "summary": "Returns the option's ID of a database.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $db = '', string $host = '', string $engine = 'mysql')\n  {\n    if (!\\bbn\\Str::isUid($host)) {\n      $host = $this->hostId($host, $engine);\n    }\n    if (($id_parent = self::getOptionId('dbs', $engine))\n        && ($res = $this->o->fromCode($db ?: $this->db->getCurrent(), $id_parent))\n    ) {\n      return $res;\n    }\n\n    return null;\n  }",
            "startLine": 243,
            "endLine": 255,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ]
        },
        "countDbs": {
            "name": "countDbs",
            "summary": "Returns the number of DBs available for the given connection.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $host = '', string $engine = 'mysql')\n  {\n    if (!$host) {\n      $num = $this->o->count(self::getOptionId('dbs', $engine));\n      return $num;\n    }\n    elseif (!bbn\\Str::isUid($host)) {\n      $host = $this->hostId($host, $engine);\n    }\n\n    $all = $this->o->getAliases($host);\n    $num = $all ? count($all) : 0;\n    return $num;\n  }",
            "startLine": 264,
            "endLine": 277,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "host",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ]
        },
        "dbs": {
            "name": "dbs",
            "summary": "Returns the list of DBs available for the given connection.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $host = '', string $engine = 'mysql')\n  {\n    if (!$host) {\n      $arr = $this->o->fullOptions(self::getOptionId('dbs', $engine));\n    }\n    elseif (!bbn\\Str::isUid($host)) {\n      $host = $this->hostId($host, $engine);\n    }\n\n    if ($host) {\n      $o   = &$this->o;\n      $arr = array_map(\n        function ($a) use ($o) {\n          return $o->parent($a['id_parent']);\n        },\n        $this->o->getAliases($host)\n      );\n    }\n\n    if (!empty($arr)) {\n      $res = array_map(\n        function ($a) {\n          return [\n            'id' => $a['id'],\n            'text' => $a['text'],\n            'name' => $a['code']\n          ];\n        },\n        $arr\n      );\n      return $res;\n    }\n\n    return [];\n  }",
            "startLine": 286,
            "endLine": 320,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "host",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ]
        },
        "fullDbs": {
            "name": "fullDbs",
            "summary": "Returns the list of DBs available for the given connection with statistics.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $host = '', string $engine = 'mysql')\n  {\n    $o =& $this->o;\n    if ($dbs = $this->dbs($host, $engine)) {\n      $res = array_map(\n        function ($a) use ($o, $engine) {\n          $r = [\n            'id' => $a['id'],\n            'text' => $a['text'],\n            'name' => $a['name'],\n            'num_tables' => 0,\n            'num_connections' => 0,\n            'num_procedures' => 0,\n            'num_functions' => 0\n          ];\n          \/\/die(var_dump( $o->fromCode('tables', $a['id'])));\n          if ($id_tables = $o->fromCode('tables', $a['id'])) {\n            $r['num_tables'] = $o->count($id_tables);\n          }\n\n          if ($id_connections = $o->fromCode($engine === 'sqlite' ? 'paths' : 'connections', $a['id'])) {\n            $r['num_connection'] = $o->count($id_connections);\n          }\n\n          if ($id_procedures = $o->fromCode('procedures', $a['id'])) {\n            $r['num_procedures'] = $o->count($id_procedures);\n          }\n\n          if ($id_functions = $o->fromCode('functions', $a['id'])) {\n            $r['num_functions'] = $o->count($id_functions);\n          }\n\n          return $r;\n        },\n        $dbs\n      );\n      return $res ?: [];\n    }\n\n    return [];\n  }",
            "startLine": 329,
            "endLine": 369,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "host",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ]
        },
        "tableId": {
            "name": "tableId",
            "summary": "Returns the ID of a table from the options table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $db = '', string $host = '', string $engine = 'mysql')\n  {\n    if (!bbn\\Str::isUid($db)) {\n      if (Str::isUid($host)) {\n        if (!($parent = $this->o->parent($this->o->getIdParent($host)))) {\n          throw new \\Exception(X::_(\"Impossible to find the host engine\"));\n        }\n\n        $engine = $parent['code'];\n        $db     = $this->dbId($db, $host, $engine);\n      }\n      else {\n        $db = $this->dbId($db, $host, $engine);\n      }\n    }\n\n    if (bbn\\Str::isUid($db)\n        && ($id_parent = $this->o->fromCode('tables', $db))\n        && ($id = $this->o->fromCode($table, $id_parent))\n    ) {\n      return $id;\n    }\n\n    return null;\n  }",
            "startLine": 380,
            "endLine": 404,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the DB"
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's code"
                },
                {
                    "name": "host",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ]
        },
        "countTables": {
            "name": "countTables",
            "summary": "Returnms the number of tables in the given database.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $db, string $host = '', string $engine = 'mysql')\n  {\n    if (!bbn\\Str::isUid($db)) {\n      if (Str::isUid($host)) {\n        $db = $this->dbId($db, $host);\n      }\n      else {\n        $db = $this->dbId($db, $host, $engine);\n      }\n    }\n\n    if (bbn\\Str::isUid($db) && ($id_parent = $this->o->fromCode('tables', $db))) {\n      $num = $this->o->count($id_parent);\n      return $num ?: 0;\n    }\n\n    return null;\n  }",
            "startLine": 414,
            "endLine": 431,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's code"
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ]
        },
        "tables": {
            "name": "tables",
            "summary": "Returns a list of tables in the given database.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $db = '', string $host = '', string $engine = 'mysql')\n  {\n    if (!bbn\\Str::isUid($db)) {\n      if (Str::isUid($host)) {\n        $db = $this->dbId($db, $host);\n      }\n      else {\n        $db = $this->dbId($db, $host, $engine);\n      }\n    }\n\n    if (bbn\\Str::isUid($db)\n        && ($id_parent = $this->o->fromCode('tables', $db))\n        && ($fo = array_values($this->o->codeOptions($id_parent)))\n    ) {\n      $res = array_map(\n        function ($a) {\n          return [\n            'id' => $a['id'],\n            'text' => $a['text'],\n            'name' => $a['code']\n          ];\n        },\n        $fo\n      );\n      return $res ?: [];\n    }\n\n    return null;\n  }",
            "startLine": 441,
            "endLine": 470,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's code"
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ]
        },
        "fullTables": {
            "name": "fullTables",
            "summary": "Returns a list of tables in the given database with its statistics.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $db = '', string $host = '', string $engine = 'mysql')\n  {\n    if (!bbn\\Str::isUid($db)) {\n      if (Str::isUid($host)) {\n        $db = $this->dbId($db, $host);\n      }\n      else {\n        $db = $this->dbId($db, $host, $engine);\n      }\n    }\n\n    if (bbn\\Str::isUid($db) && ($id_parent = $this->o->fromCode('tables', $db))) {\n      $o =& $this->o;\n      if ($fo = $this->o->fullOptions($id_parent)) {\n        $res = array_map(\n          function ($a) use ($o) {\n            $r = array_merge(\n              $a,\n              [\n                'name' => $a['code'],\n                'num_columns' => 0,\n                'num_keys' => 0\n              ]\n            );\n            if ($id_columns = $o->fromCode('columns', $a['id'])) {\n              $r['num_columns'] = $o->count($id_columns);\n            }\n\n            if ($id_keys = $o->fromCode('keys', $a['id'])) {\n              $r['num_keys'] = $o->count($id_keys);\n            }\n\n            return $r;\n          },\n          $fo\n        );\n        return $res ?: [];\n      }\n    }\n\n    return null;\n  }",
            "startLine": 480,
            "endLine": 521,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's code"
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ]
        },
        "tableFromItem": {
            "name": "tableFromItem",
            "summary": "Gets the name of a table from an item's ID (key or column).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_keycol)\n  {\n    if (($table = $this->tableIdFromItem($id_keycol))\n        && ($r = $this->o->code($table))\n    ) {\n      return $r;\n    }\n\n    return null;\n  }",
            "startLine": 530,
            "endLine": 539,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_keycol",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "tableIdFromItem": {
            "name": "tableIdFromItem",
            "summary": "Retrieves the ID of a table from an item's ID (key or column).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_keycol)\n  {\n    if (bbn\\Str::isUid($id_keycol)\n        && ($id_cols = $this->o->getIdParent($id_keycol))\n        && ($id_table = $this->o->getIdParent($id_cols))\n    ) {\n      return $id_table;\n    }\n\n    return null;\n  }",
            "startLine": 548,
            "endLine": 558,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_keycol",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbFromTable": {
            "name": "dbFromTable",
            "summary": "Retrieves a database name from the ID of a table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_table)\n  {\n    if (($id_db = $this->dbIdFromTable($id_table))\n        && ($r = $this->o->code($id_db))\n    ) {\n      return $r;\n    }\n\n    return null;\n  }",
            "startLine": 567,
            "endLine": 576,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbIdFromTable": {
            "name": "dbIdFromTable",
            "summary": "Returns the ID of a DB through the given table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_table)\n  {\n    if (bbn\\Str::isUid($id_table)\n        && ($id_tables = $this->o->getIdParent($id_table))\n        && ($id_db = $this->o->getIdParent($id_tables))\n    ) {\n      return $id_db;\n    }\n\n    return null;\n  }",
            "startLine": 585,
            "endLine": 595,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbFromItem": {
            "name": "dbFromItem",
            "summary": "Returns the name of a DB through the ID of an item (key or column).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_keycol)\n  {\n    if ($id_db = $this->dbIdFromItem($id_keycol)\n        && ($r = $this->o->code($id_db))\n    ) {\n      return $r;\n    }\n\n    return null;\n  }",
            "startLine": 604,
            "endLine": 613,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_keycol",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbIdFromItem": {
            "name": "dbIdFromItem",
            "summary": "Returns the ID of a DB through the ID of an item (key or column).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_keycol)\n  {\n    if (($id_table = $this->tableIdFromItem($id_keycol))\n        && ($id_db = $this->dbIdFromTable($id_table))\n    ) {\n      return $id_db;\n    }\n\n    return null;\n  }",
            "startLine": 622,
            "endLine": 631,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_keycol",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "columnId": {
            "name": "columnId",
            "summary": "Returns the given column's ID.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $column, string $table, string $db = '')\n  {\n    $res = null;\n    if (Str::isUid($table)) {\n      $res = $this->o->fromCode($this->db->csn($column), 'columns', $table);\n      return $res;\n    }\n\n    $c = $this->db->csn($column);\n    $t = $this->db->tsn($table);\n    if (Str::isUid($db)\n        && ($tmp = $this->o->fromCode($c, 'columns', $t, 'tables', $db))\n    ) {\n      $res = $tmp;\n    }\n\n    return $res;\n  }",
            "startLine": 642,
            "endLine": 659,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The DB's name"
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "countColumns": {
            "name": "countColumns",
            "summary": "Returns the number of columns for the given DB.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $db = '')\n  {\n    $num = 0;\n    if (!Str::isUid($table) && Str::isUid($db)) {\n      $table = $this->tableId($table, $db);\n    }\n\n    if (Str::isUid($table)\n        && ($id_parent = $this->o->fromCode('columns', $table))\n    ) {\n      $num = $this->o->count($id_parent);\n    }\n\n    return $num;\n  }",
            "startLine": 669,
            "endLine": 683,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database's UID"
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "columns": {
            "name": "columns",
            "summary": "Returns a list of the columns for the given table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $db = '')\n  {\n    if (!bbn\\Str::isUid($table) && Str::isUid($db)) {\n      $table = $this->tableId($this->db->tsn($table), $db);\n    }\n\n    if (bbn\\Str::isUid($table)\n        && ($id_parent = $this->o->fromCode('columns', $table))\n        && ($res = $this->o->options($id_parent))\n    ) {\n      return $res;\n    }\n\n    return null;\n  }",
            "startLine": 693,
            "endLine": 707,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database's UID"
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fullColumns": {
            "name": "fullColumns",
            "summary": "Returns a list of the columns for the given table with all their characteristics.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $db = '')\n  {\n    if (!bbn\\Str::isUid($table) && Str::isUid($db)) {\n      $table = $this->tableId($table, $db);\n    }\n\n    if (bbn\\Str::isUid($table)\n        && ($id_parent = $this->o->fromCode('columns', $table))\n        && ($res = $this->o->fullOptions($id_parent))\n    ) {\n      return $res;\n    }\n\n    return [];\n  }",
            "startLine": 717,
            "endLine": 731,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database UID"
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "keyId": {
            "name": "keyId",
            "summary": "Returns the ID of a key in the given table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $key, string $table, string $db = '')\n  {\n    $res = null;\n    if (bbn\\Str::isUid($key)) {\n      $res = $this->o->fromCode($key, $table);\n    }\n    elseif (Str::isUid($table) && ($tmp = $this->o->fromCode($key, 'keys', $table))) {\n      $res = $tmp;\n    }\n    elseif (Str::isUid($db) && ($tmp = $this->o->fromCode($key, 'keys', $table, 'tables', $db))) {\n      $res = $tmp;\n    }\n\n    return $res;\n  }",
            "startLine": 742,
            "endLine": 756,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "key",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "countKeys": {
            "name": "countKeys",
            "summary": "Returns the number of keys in the given table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $db = '')\n  {\n    $num = 0;\n    if (!bbn\\Str::isUid($table) && Str::isUid($db)) {\n      $table = $this->tableId($table, $db);\n    }\n\n    if (bbn\\Str::isUid($table)\n        && ($id_parent = $this->o->fromCode('keys', $table))\n    ) {\n      $num = $this->o->count($id_parent);\n    }\n\n    return $num;\n  }",
            "startLine": 766,
            "endLine": 780,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "keys": {
            "name": "keys",
            "summary": "Returns a list of keys for the giuven table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $db = '')\n  {\n    $res = [];\n    if (!bbn\\Str::isUid($table) && bbn\\Str::isUid($db)) {\n      $table = $this->tableId($table, $db);\n    }\n\n    if (bbn\\Str::isUid($table)\n        && ($id_parent = $this->o->fromCode('keys', $table))\n        && ($tree = $this->o->fullTree($id_parent))\n        && $tree['items']\n    ) {\n      $t   =& $this;\n      $res = array_map(\n        function ($a) use ($t) {\n          $key = [\n            'name' => $a['code'],\n            'unique' => $a['unique'],\n            'columns' => [],\n            'ref_column' => $a['id_alias'] ? $a['alias']['code'] : null,\n            'ref_table' => $a['id_alias'] &&\n                          ($id_table = $t->o->getIdParent($a['alias']['id_parent'])) ? $t->o->code($id_table) : null,\n            'ref_db' => !empty($id_table) &&\n                        ($id_db = $t->o->getIdParent($t->o->getIdParent($id_table))) ? $t->o->code($id_db) : null\n          ];\n          foreach ($a['items'] as $col){\n            $key['columns'][] = $col['code'];\n          }\n\n          return $key;\n        },\n        $tree['items']\n      );\n    }\n\n    return $res;\n  }",
            "startLine": 790,
            "endLine": 826,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fullKeys": {
            "name": "fullKeys",
            "summary": "For the moment an alias of get_keys.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $db = '')\n  {\n    return $this->keys($table, $db);\n  }",
            "startLine": 836,
            "endLine": 839,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "remove": {
            "name": "remove",
            "summary": "Deletes a table and all its descendants from the options table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $db = '')\n  {\n    $id = $this->tableId($table, $db);\n    return $this->o->removeFull($id);\n  }",
            "startLine": 849,
            "endLine": 853,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "removeAll": {
            "name": "removeAll",
            "summary": "Deletes a database and all its descendants from the options table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $db = '')\n  {\n    $id = $this->dbId($db);\n    return $this->o->removeFull($id);\n  }",
            "startLine": 862,
            "endLine": 866,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "removeHost": {
            "name": "removeHost",
            "summary": "Deletes a connection from the options table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $connection)\n  {\n    $id = $this->hostId($connection);\n    return $this->o->removeFull($id);\n  }",
            "startLine": 875,
            "endLine": 879,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "connection",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "modelize": {
            "name": "modelize",
            "summary": "Returns a database model as bbn\\Db::modelize but with options IDs.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table = '', string $db = '', string $host = '', string $engine = 'mysql')\n  {\n    $model = null;\n    if (!$host) {\n      $conn = $this->db;\n      $host = $this->db->getConnectionCode();\n      $old_db = $conn->getCurrent();\n      if (Str::isUid($db)) {\n        $db = $this->o->getCode($db);\n      }\n\n      if ($db && ($old_db !== $db)) {\n        try {\n          $conn->change($db);\n        }\n        catch (\\Exception $e) {\n          throw new \\Exception(X::_(\"Impossible to use the database\").\" $db\");\n        }\n      }\n      elseif (!$db) {\n        $db = $this->db->getCurrent();\n      }\n    }\n    elseif ($db) {\n      try {\n        $conn = $this->connection($host, $engine, $db);\n      }\n      catch (\\Exception $e) {\n        throw new \\Exception($e->getMessage());\n      }\n    }\n\n    if (!$conn || !$conn->check()) {\n      throw new \\Exception(X::_(\"Impossible to connect\"));\n    }\n\n    $table_id = null;\n    $table    = $conn->tsn($table);\n    $ftable   = $conn->tfn($db.'.'.$table);\n    $keys     = function (&$a) use (&$table_id, $table, &$conn) {\n      if (\\is_array($a['keys'])) {\n        array_walk(\n          $a['keys'],\n          function (&$w, $k) use ($table_id, $table) {\n            $w['id_option'] = $this->keyId($k, $table_id);\n          }\n        );\n      }\n    };\n    $fields   = function (&$a) use (&$table_id, $table, &$conn) {\n      if (\\is_array($a['fields'])) {\n        array_walk(\n          $a['fields'],\n          function (&$w, $k) use ($table_id, $table) {\n            if (!$table_id) {\n              throw new \\Exception(X::_(\"Table undefined\").\" $table\");\n            }\n\n            $w['id_option'] = $this->columnId($k, $table_id);\n            $w['option']    = $w['id_option'] ? $this->o->option($w['id_option']) : [];\n          }\n        );\n      }\n    };\n\n    if ($model = $conn->modelize($ftable)) {\n      if ($table\n          && ($table_id = $this->tableId($table, $db, $host, $engine))\n      ) {\n        $keys($model);\n        $fields($model);\n        $model['id_option'] = $table_id;\n        $model['option']    = $this->o->option($table_id);\n}\n      elseif (empty($table)) {\n        array_walk(\n          $model,\n          function (&$w, $k) use (&$table_id, &$keys, &$fields, $host, $engine, $db) {\n            $table = $this->db->tsn($k);\n            if ($table_id = $this->tableId($table, $db, $host, $engine)) {\n              $w['id_option'] = $table_id;\n              $w['option']    = $this->o->option($w['id_option']);\n              $keys($w);\n              $fields($w);\n            }\n          }\n        );\n      }\n    }\n\n    if (!empty($old_db) && ($old_db !== $db)) {\n      $conn->change($old_db);\n    }\n\n    return $model;\n  }",
            "startLine": 889,
            "endLine": 984,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "host",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ]
        },
        "importHost": {
            "name": "importHost",
            "summary": "Imports a database's structure into the options table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $host, string $engine, array $cfg, bool $full = false)\n  {\n    if (($id_parent = self::getOptionId('connections', $engine))\n        && !($id_host = $this->o->fromCode($host, $id_parent))\n    ) {\n      $id_host = $this->o->add(\n        [\n          'id_parent' => $id_parent,\n          'text' => $cfg['name'] ?? $host,\n          'code' => $host\n        ]\n      );\n    }\n\n    if ($id_host) {\n      if (!empty($cfg['password'])) {\n        if (!$this->pw) {\n          $this->pw = new Passwords($this->db);\n        }\n\n        $this->pw->store($cfg['password'], $id_host);\n      }\n      \/** @todo but might be heavy *\/\n      \/* if ($full) {\n\n      }*\/\n    }\n\n    return $id_host ?: null;\n  }",
            "startLine": 996,
            "endLine": 1025,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "host",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's engine"
                },
                {
                    "name": "engine",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's config"
                },
                {
                    "name": "cfg",
                    "position": 2,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "If true will connect to the database and get its structure"
                },
                {
                    "name": "full",
                    "position": 3,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "importDb": {
            "name": "importDb",
            "summary": "Imports a database's structure into the options table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $db, string $host = '', $full = false)\n  {\n    $id_db = null;\n    if (Str::isUid($host)\n        && ($engine = $this->o->parent($this->o->getIdParent($host)))\n        && ($id_dbs = $this->o->fromCode('dbs', $engine['id']))\n    ) {\n      if (!($id_db = $this->o->fromCode($db, $id_dbs))) {\n        if ($id_db = $this->o->add(\n          [\n            'id_parent' => $id_dbs,\n            'text' => $db,\n            'code' => $db,\n          ]\n        )\n        ) {\n          $this->o->setCfg($id_db, ['allow_children' => 1, 'show_code' => 1]);\n        }\n      }\n\n      if ($id_db) {\n        if (!($id_procedures = $this->o->fromCode('procedures', $id_db))\n            && ($id_procedures = $this->o->add(\n              [\n                'id_parent' => $id_db,\n                'text' => X::_('Procedures'),\n                'code' => 'procedures',\n              ]\n            ))\n        ) {\n          $this->o->setCfg(\n            $id_procedures,\n            [\n              'show_code' => 1,\n              'show_value' => 1,\n              'allow_children' => 1\n            ]\n          );\n        }\n\n        if (!($id_connections = $this->o->fromCode('connections', $id_db))\n            && ($id_connections = $this->o->add(\n              [\n                'id_parent' => $id_db,\n                'text' => X::_('Connections'),\n                'code' => 'connections',\n              ]\n            ))\n        ) {\n          $this->o->setCfg(\n            $id_connections,\n            [\n              'show_alias' => 1,\n              'notext' => 1,\n              'id_root_alias' => self::getOptionId('connections'),\n              'root_alias' => 'Connections'\n            ]\n          );\n        }\n\n        if (!($id_functions = $this->o->fromCode('functions', $id_db))\n            && ($id_functions = $this->o->add(\n              [\n                'id_parent' => $id_db,\n                'text' => X::_('Function'),\n                'code' => 'functions',\n              ]\n            ))\n        ) {\n          $this->o->setCfg(\n            $id_functions,\n            [\n              'show_code' => 1,\n              'show_value' => 1,\n              'allow_children' => 1\n            ]\n          );\n        }\n\n        if (!($id_tables = $this->o->fromCode('tables', $id_db))\n            && ($id_tables = $this->o->add(\n              [\n                'id_parent' => $id_db,\n                'text' => X::_('Tables'),\n                'code' => 'tables',\n              ]\n            ))\n        ) {\n          $this->o->setCfg(\n            $id_tables,\n            [\n              'show_code' => 1,\n              'show_value' => 1,\n              'allow_children' => 1\n            ]\n          );\n        }\n\n        if ($id_connections && $id_functions && $id_procedures && $id_tables) {\n          if (!$this->db->count(\n            'bbn_options', [\n              'id_parent' => $id_connections,\n              'id_alias' => $host\n            ]\n          )) {\n            $this->o->add([\n              'id_parent' => $id_connections,\n              'id_alias' => $host\n            ]);\n          }\n          if ($full) {\n            if (!empty($host)) {\n              try {\n                $conn = $this->connection($host, $engine['code'], $db);\n              }\n              catch (\\Exception $e) {\n                throw new \\Exception(X::_(\"Impossible to connect\"));\n              }\n              $tables = $conn->getTables($db);\n              if (!empty($tables)) {\n                foreach ($tables as $t) {\n                  $this->importTable($t, $id_db, $host);\n                }\n              }\n            }\n          }\n        }\n        else{\n          throw new \\Exception(X::_(\"Impossible to find an host ID for DB\").\" \".$this->o->code($id_db));\n        }\n      }\n    }\n\n    return $id_db;\n  }",
            "startLine": 1036,
            "endLine": 1170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's UID"
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "If true will connect to the database and get its structure"
                },
                {
                    "name": "full",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "retrieveHost": {
            "name": "retrieveHost",
            "summary": "Returns the ID of the current host for the given DB.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_db)\n  {\n    if ($this->check()\n        && defined('BBN_DB_USER')\n        && defined('BBN_DB_HOST')\n        && ($connections = $this->o->fullOptions('connections', $id_db))\n    ) {\n      foreach ($connections as $c) {\n        if ($c['alias']['code'] === BBN_DB_USER.'@'.BBN_DB_HOST) {\n          return $c['alias']['id'];\n        }\n      }\n    }\n\n    return null;\n  }",
            "startLine": 1179,
            "endLine": 1194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_db",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "importTable": {
            "name": "importTable",
            "summary": "Imports a table's structure into the options table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $id_db, string $host = '')\n  {\n    if (empty($host)) {\n      $host_id = $this->retrieveHost($id_db);\n    }\n    else{\n      $host_id = bbn\\Str::isUid($host) ? $host : $this->hostId($host);\n    }\n\n    if ($host_id && ($id_tables = $this->o->fromCode('tables', $id_db))) {\n      $engine = $this->o->parent($this->o->getIdParent($host_id));\n      if (!($id_table = $this->o->fromCode($table, $id_tables))\n          && ($id_table = $this->o->add(\n            [\n              'id_parent' => $id_tables,\n              'text' => $table,\n              'code' => $table,\n            ]\n          ))\n      ) {\n        $this->o->setCfg($id_table, ['allow_children' => 1]);\n        if ($id_columns = $this->o->add(\n          [\n            'id_parent' => $id_table,\n            'text' => X::_(\"Columns\"),\n            'code' => 'columns'\n          ]\n        )\n        ) {\n          $this->o->setCfg(\n            $id_columns,\n            [\n              'show_code' => 1,\n              'show_value' => 1,\n              'sortable' => 1\n            ]\n          );\n        }\n\n        if ($id_keys = $this->o->add(\n          [\n            'id_parent' => $id_table,\n            'text' => X::_(\"Keys\"),\n            'code' => 'keys',\n          ]\n        )\n        ) {\n          $this->o->setCfg(\n            $id_keys,\n            [\n              'show_code' => 1,\n              'show_value' => 1,\n              'show_alias' => 1,\n              'allow_children' => 1\n            ]\n          );\n        }\n      }\n      else{\n        $id_columns = $this->o->fromCode('columns', $id_table);\n        $id_keys    = $this->o->fromCode('keys', $id_table);\n      }\n\n      $db = $this->o->code($id_db);\n      if ($id_table\n          && $id_columns\n          && $id_keys\n          && $db\n          && ($conn = $this->connection($host_id, $engine['code'], $db))\n          && ($m = $conn->modelize($db.'.'.$table))\n          && !empty($m['fields'])\n      ) {\n        $num_cols     = 0;\n        $num_cols_rem = 0;\n        $fields       = [];\n        $ocols        = array_flip($this->o->options($id_columns));\n        foreach ($m['fields'] as $col => $cfg) {\n          if ($opt_col = $this->o->option($col, $id_columns)) {\n            $num_cols += (int)$this->o->set($opt_col['id'], bbn\\X::mergeArrays($opt_col, $cfg));\n          }\n          elseif ($id = $this->o->add(\n            bbn\\X::mergeArrays(\n              $cfg,\n              [\n                'id_parent' => $id_columns,\n                'text' => $col,\n                'code' => $col,\n                'num' => $cfg['position']\n              ]\n            )\n          )\n          ) {\n            $num_cols++;\n            $opt_col       = $cfg;\n            $opt_col['id'] = $id;\n          }\n\n          if ($opt_col) {\n            $fields[$col] = $opt_col['id'];\n          }\n\n          if (isset($ocols[$col])) {\n            unset($ocols[$col]);\n          }\n        }\n\n        if (!empty($ocols)) {\n          foreach ($ocols as $col => $id) {\n            if (bbn\\Str::isUid($id)) {\n              $num_cols_rem += (int)$this->o->remove($id);\n            }\n          }\n        }\n\n        $num_keys     = 0;\n        $num_keys_rem = 0;\n        $okeys        = array_flip($this->o->options($id_keys));\n        foreach ($m['keys'] as $key => $cfg) {\n          $cols = $cfg['columns'] ?? [];\n          unset($cfg['columns']);\n          if (isset($cfg['ref_db'], $cfg['ref_table'], $cfg['ref_column'])\n              && ($id_alias = $this->columnId($cfg['ref_column'], $cfg['ref_table'], $cfg['ref_db']))\n          ) {\n            $cfg['id_alias'] = $id_alias;\n            unset($cfg['ref_db'], $cfg['ref_table'], $cfg['ref_column']);\n          }\n\n          if ($opt_key = $this->o->option($key, $id_keys)) {\n            $num_keys += (int)$this->o->set($opt_key['id'], bbn\\X::mergeArrays($opt_key, $cfg));\n          }\n          elseif ($id = $this->o->add(\n            bbn\\X::mergeArrays(\n              $cfg, [\n              'id_parent' => $id_keys,\n              'text' => $key,\n              'code' => $key\n              ]\n            )\n          )\n          ) {\n            $this->o->setCfg(\n              $id, [\n              'show_code' => 1,\n              'show_alias' => 1\n              ]\n            );\n            $num_keys++;\n            $opt_key       = $cfg;\n            $opt_key['id'] = $id;\n          }\n\n          if (isset($okeys[$key])) {\n            unset($okeys[$key]);\n          }\n\n          if ($opt_key && $cols) {\n            foreach ($cols as $col){\n              if (isset($fields[$col])) {\n                if ($opt = $this->o->option($col, $opt_key['id'])) {\n                  $this->o->set(\n                    $opt['id'], bbn\\X::mergeArrays(\n                      $opt, [\n                      'id_alias' => $fields[$col]\n                      ]\n                    )\n                  );\n                }\n                else{\n                  $tmp = [\n                    'id_parent' => $opt_key['id'],\n                    'id_alias' => $fields[$col],\n                    'code' => $col,\n                    'text' => $col\n                  ];\n                  if ($this->o->add($tmp)) {\n                    $opt = $tmp;\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        if (!empty($okeys)) {\n          foreach (array_values($okeys) as $id) {\n            if (bbn\\Str::isUid($id)) {\n              $children = $this->o->items($id);\n              foreach ($children as $cid) {\n                $num_keys_rem += (int)$this->o->removeFull($cid);\n              }\n\n              $num_keys_rem += (int)$this->o->remove($id);\n            }\n          }\n        }\n\n        return [\n          'columns' => $num_cols,\n          'keys' => $num_keys,\n          'columns_removed' => $num_cols_rem,\n          'keys_removed' => $num_keys_rem\n        ];\n      }\n    }\n\n    return null;\n  }",
            "startLine": 1205,
            "endLine": 1411,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "db The database to which import the table (its id_parent)"
                },
                {
                    "name": "id_db",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's code"
                },
                {
                    "name": "host",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "import": {
            "name": "import",
            "summary": "Import a table structure in the options table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n    $res = null;\n    if ($m = $this->db->modelize($table)) {\n      $tf    = explode('.', $this->db->tfn($table));\n      $db    = $tf[0];\n      $table = $tf[1];\n\n      if (($id_host = $this->importHost($this->db->host))\n          && ($id_db = $this->importDb($db, $id_host))\n      ) {\n        $res = $this->importTable($table, $id_db);\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1420,
            "endLine": 1436,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "importAll": {
            "name": "importAll",
            "summary": "Imports a whole database structure in the options table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $db = '')\n  {\n    $res = null;\n    if ($tables = $this->db->getTables($db)) {\n      $res = [\n        'tables' => 0,\n        'columns' => 0,\n        'keys' => 0\n      ];\n      foreach ($tables as $t){\n        if ($tmp = $this->import(($db ?: $this->db->getCurrent()).'.'.$t)) {\n          $res['tables']++;\n          $res['columns'] += $tmp['columns'];\n          $res['keys']    += $tmp['keys'];\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1445,
            "endLine": 1464,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getGridConfig": {
            "name": "getGridConfig",
            "summary": "Generates a grid configuration based on the table structure and columns options.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $db = '', string $host = '', string $engine = 'mysql')\n  {\n    if ($model = $this->modelize($table, $db, $host, $engine)) {\n      \/** @var array The empty config, js for bbn-table, php for bbn\\appui\\grid *\/\n      $res = [\n        'js' => [\n          'columns' => []\n        ],\n        'php' => [\n          'tables' => [$table],\n          'fields' => [],\n          'join' => [],\n          'order' => []\n        ]\n      ];\n      if (!$db) {\n        $db = $this->db->getCurrent();\n      }\n\n      \/** @var string An alias which will be use as prefix for all aliases *\/\n      $alias = Str::genpwd(5);\n      \/** @var int An incremental index for the tables alias *\/\n      $tIdx  = 0;\n      \/** @var int An incremental index for the columns alias *\/\n      $cIdx  = 0;\n      foreach ($model['fields'] as $col => $f) {\n        \/** @var array The javascript column configuration *\/\n        $js = [\n          'text' => $col,\n          'field' => $col\n        ];\n        $field = $table.'.'.$col;\n        \/\/ Text should be defined before the option is changed in case of a single foreign key\n        if (!empty($f['option'])) {\n          \/\/ Taking the text from the option (which will be the col name if not defined)\n          $js['text'] = $f['option']['text'];\n        }\n\n        \/** @var bool|string The simple name of the unique column to display for the key  *\/\n        $displayColumn = false;\n        \/\/ Case where the column is part of a key\n        if (!empty($model['cols'][$col])) {\n          foreach ($model['cols'][$col] as $c) {\n            if ($c === 'PRIMARY') {\n              if (empty($f['option'])) {\n                $f['editable'] = false;\n              }\n              else {\n                $f['option']['editable'] = false;\n              }\n              $js['component'] = 'appui-database-data-binary';\n              $js['cls'] = 'bbn-c';\n              $js['width'] = 'bbn-c';\n            }\n            \/\/ Case where it is a foreign key\n            elseif (!empty($model['keys'][$c]['ref_table'])) {\n              \/\/ Incrementing the alias indexes as we'll use them\n              $tIdx++;\n              \/\/ Getting the model from the foreign table\n              $tmodel = $this->modelize($model['keys'][$c]['ref_table']);\n              \/\/ Looking for displayed columns configured\n              if (isset($tmodel['option']) && !empty($tmodel['option']['dcolumns'])) {\n                $dcols = [];\n                foreach ($tmodel['option']['dcolumns'] as $dcol) {\n                  $dcols[] = $this->db->cfn($dcol, $alias.'_t'.$tIdx, true);\n                  if (!$displayColumn) {\n                    $displayColumn = $dcol;\n                  }\n                }\n\n                \/\/ Adding a single display column to the query\n                if (count($dcols) === 1) {\n                  $field = $displayColumn;\n                }\n                \/\/ Adding more display column as concat in the query\n                else {\n                  $field = \"CONCAT(\".X::join($dcols, ', ').\")\";\n                }\n              }\n              else {\n                \/\/ Otherwise looking for the first varchar\n                foreach ($tmodel['fields'] as $tcol => $tf) {\n                  if ($tf['type'] === 'varchar') {\n                    $cIdx++;\n                    \/\/ Adding the column to the query\n                    $field = $alias.'_t'.$tIdx.'.'.$tcol;\n                    $displayColumn = $tcol;\n                    break;\n                  }\n                }\n              }\n\n              if ($displayColumn && (strpos($field, 'CONCAT(') !== 0)) {\n                $f['option'] = $tf['option'];\n                $f['option']['editor'] = 'appui-database-table-browser';\n                $f['option']['options'] = [\n                  'table' => $model['keys'][$c]['ref_table'],\n                  'column' => $model['keys'][$c]['ref_column']\n                ];\n              }\n\n              \/\/ Adding the JOIN part to the query\n              $res['php']['join'][] = [\n                'type' => $f['null'] ? 'left' : '',\n                'table' => $model['keys'][$c]['ref_db'].'.'.$model['keys'][$c]['ref_table'],\n                'alias' => $alias.'_t'.$tIdx,\n                'on' => [\n                  [\n                    'field' => $alias.'_t'.$tIdx.'.'.$model['keys'][$c]['ref_column'],\n                    'exp' => $table.'.'.$col\n                  ]\n                ]\n              ];\n              break;\n            }\n          }\n        }\n\n        $res['php']['fields'][$col] = $field;\n        if (!empty($f['option'])) {\n          $f = $f['option'];\n        }\n\n        \/\/ Taking all possible properties defined\n        \/\/ Width\n        if (empty($f['width'])) {\n          if ($f['type'] === 'date') {\n            $js['width'] = 100;\n          }\n          elseif ($f['type'] === 'datetime') {\n            $js['width'] = 140;\n          }\n          elseif ($f['type'] === 'binary') {\n            $js['width'] = 60;\n          }\n          elseif (!empty($f['maxlength']) && ($f['maxlength'] < 40)) {\n            $js['width'] = $this->length2Width($f['maxlength']);\n          }\n          else {\n            $js['minWidth'] = '40em';\n          }\n        }\n        else {\n          $js['width'] = $f['width'];\n        }\n\n        \/\/ For the cell view\n        if (!empty($f['component'])) {\n          $js['component'] = $f['component'];\n        }\n\n        \/\/ The editor\/filter component\n        if (!empty($f['editor'])) {\n          $js['editor'] = $f['editor'];\n        }\n        elseif (empty($js['editor']) && (!isset($f['editable']) || $f['editable'])) {\n          switch ($f['type']) {\n            case 'int':\n            case 'smallint':\n            case 'tinyint':\n            case 'bigint':\n            case 'mediumint':\n            case 'real':\n            case 'double':\n            case 'decimal':\n            case 'float':\n              $js['editor'] = 'bbn-numeric';\n              $max = pow(10, $f['maxlength']) - 1;\n              $js['options'] = [\n                'max' => $max,\n                'min' => $f['signed'] ? -$max : 0\n              ];\n              break;\n            case 'date':\n              $js['editor'] = 'bbn-datepicker';\n              break;\n            case 'datetime':\n              $js['editor'] = 'bbn-datetimepicker';\n              break;\n            case 'json':\n              $js['editor'] = 'bbn-json-editor';\n              break;\n            case 'enum':\n            case 'set':\n              $js['editor'] = 'bbn-dropdown';\n              $src = [];\n              if (!empty($f['extra'])) {\n                $src = X::split(substr($f['extra'], 1, -1), \"','\");\n              }\n\n              \/\/ Calculating the length based on the longest enum value\n              if (empty($js['width'])) {\n                $maxlength = 1;\n                foreach ($src as $s) {\n                  $len = strlen($s);\n                  if ($len > $maxlength) {\n                    $maxlength = $len;\n                  }\n                }\n              }\n\n              $js['options'] = [\n                'source' => $src\n              ];\n              break;\n            case 'binary':\n            case 'varbinary':\n              $js['component'] = 'appui-database-data-binary';\n              $js['cls'] = 'bbn-c';\n              $js['editor'] = 'bbn-upload';\n              break;\n            case 'text':\n            case 'bigtext':\n            case 'smalltext':\n            case 'tinytext':\n            case 'mediumtext':\n              $js['editor'] = 'bbn-textarea';\n              break;\n          }\n        }\n\n\n        $res['js']['columns'][] = $js;\n        \n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "startLine": 1477,
            "endLine": 1707,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "host",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ]
        },
        "length2Width": {
            "name": "length2Width",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(int $length, $max = '30em')\n  {\n    if ($length > 32) {\n      return $max;\n    }\n    elseif ($length > 25) {\n      return '25em';\n    }\n    elseif ($length > 20) {\n      return '20em';\n    }\n    elseif ($length > 15) {\n      return '17em';\n    }\n    elseif ($length > 10) {\n      return '13em';\n    }\n    elseif ($length > 5) {\n      return '9em';\n    }\n    elseif ($length > 3) {\n      return '5em';\n    }\n\n    return '3em';\n\n  }",
            "startLine": 1710,
            "endLine": 1736,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "length",
                    "position": 0,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "max",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "30em",
                    "default_name": ""
                }
            ]
        },
        "cacheDeleteAll": {
            "name": "cacheDeleteAll",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\t\treturn $this;\n  }",
            "startLine": 50,
            "endLine": 53,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "cacheDeleteAll",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Cache",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\t\treturn $this;\n  }",
                "startLine": 50,
                "endLine": 53,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "cacheDelete": {
            "name": "cacheDelete",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($uid)\n  {\n\t\treturn $this;\n  }",
            "startLine": 55,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "cacheDelete",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Cache",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($uid)\n  {\n\t\treturn $this;\n  }",
                "startLine": 55,
                "endLine": 58,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "cacheGet": {
            "name": "cacheGet",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($uid, $method = '', $ttl = 0)\n  {\n  }",
            "startLine": 60,
            "endLine": 62,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "cacheGet",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Cache",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($uid, $method = '', $ttl = 0)\n  {\n  }",
                "startLine": 60,
                "endLine": 62,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 2,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheSet": {
            "name": "cacheSet",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($uid, $method = '', $data = NULL, $ttl = 0)\n  {\n\t\treturn $this;\n  }",
            "startLine": 64,
            "endLine": 67,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "cacheSet",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Cache",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($uid, $method = '', $data = NULL, $ttl = 0)\n  {\n\t\treturn $this;\n  }",
                "startLine": 64,
                "endLine": 67,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "data",
                        "position": 2,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheGetSet": {
            "name": "cacheGetSet",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(callable $fn, $uid, $method = '', $ttl = 0)\n  {\n\t\treturn $this->cacher->getSet($fn, $cn, $ttl);\n  }",
            "startLine": 69,
            "endLine": 72,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "cacheGetSet",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Cache",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(callable $fn, $uid, $method = '', $ttl = 0)\n  {\n\t\treturn $this->cacher->getSet($fn, $cn, $ttl);\n  }",
                "startLine": 69,
                "endLine": 72,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "fn",
                        "position": 0,
                        "type": "callable",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "uid",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheHas": {
            "name": "cacheHas",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($uid, $method = '', $ttl = 0)\n  {\n    return $this->cacheGet($uid, $method, $ttl) ? true : false;\n  }",
            "startLine": 74,
            "endLine": 77,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "cacheHas",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Cache",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($uid, $method = '', $ttl = 0)\n  {\n    return $this->cacheGet($uid, $method, $ttl) ? true : false;\n  }",
                "startLine": 74,
                "endLine": 77,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 2,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 51,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 51,
                "endLine": 58,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 65,
            "endLine": 72,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 65,
                "endLine": 72,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->error;\n  }",
            "startLine": 86,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 86,
                "endLine": 89,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 92,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 92,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 98,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 98,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 115,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 115,
                "endLine": 126,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 132,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 132,
                "endLine": 135,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 142,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 142,
                "endLine": 145,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "startLine": 150,
            "endLine": 154,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppuiRoot": {
            "name": "getAppuiRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_appui_id;\n  }",
            "startLine": 157,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "startLine": 164,
            "endLine": 172,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "parent": false,
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 181,
            "endLine": 184,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...self::_treat_args(func_get_args())), function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 187,
            "endLine": 196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "startLine": 199,
            "endLine": 202,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 205,
            "endLine": 208,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 211,
            "endLine": 214,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 217,
            "endLine": 220,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionId": {
            "name": "getAppuiOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 229,
            "endLine": 232,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsIds": {
            "name": "getAppuiOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(\n          ...self::_treat_args(func_get_args(), true)\n        ),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 235,
            "endLine": 247,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTree": {
            "name": "getAppuiOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args(), true)) ) ? $tree['items'] : [];\n  }",
            "startLine": 250,
            "endLine": 253,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptions": {
            "name": "getAppuiOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 256,
            "endLine": 259,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOption": {
            "name": "getAppuiOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 262,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTextValue": {
            "name": "getAppuiOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Database",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getAppuiOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 268,
            "endLine": 271,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        }
    },
    "properties": null,
    "staticProperties": {
        "optional_is_init": false,
        "option_root_id": null,
        "option_appui_id": null
    },
    "constants": null,
    "numMethods": 69,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 3,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\Optional"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Cache",
    "isSubclassOf": false,
    "defaultProperties": {
        "optional_is_init": false,
        "option_root_id": null,
        "option_appui_id": null,
        "o": null,
        "pw": null,
        "connections": {
            "mysql": [],
            "postgre": [],
            "sqlite": []
        },
        "db": null,
        "_cache_prefix": null,
        "cacher": null,
        "errors": [],
        "error": false,
        "debug": false,
        "log": [],
        "options": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Database",
    "summary": ""
}