{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Database",
    "namespace": true,
    "realName": "Database",
    "realNamespace": "bbn\\Appui",
    "traits": [
        "bbn\\Models\\Tts\\Optional"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Database.php",
    "startLine": 18,
    "endLine": 2021,
    "numMethods": 92,
    "numProperties": 19,
    "numConstants": 0,
    "numStaticProperties": 4,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Cache",
    "isSubclassOf": false,
    "defaultProperties": {
        "dbProps": {
            "id": null,
            "name": null,
            "text": null,
            "engine": null,
            "id_engine": null,
            "id_host": null,
            "num_tables": 0,
            "num_connections": 0,
            "num_procedures": 0,
            "num_functions": 0,
            "pcolumns": []
        },
        "tableProps": {
            "id": null,
            "name": null,
            "text": null,
            "engine": null,
            "id_engine": null,
            "id_host": null,
            "database": null,
            "id_database": null,
            "num_columns": 0,
            "num_keys": 0,
            "num_constraints": 0
        },
        "optional_is_init": false,
        "option_root_id": null,
        "o": null,
        "pw": null,
        "currentConn": null,
        "connections": {
            "mysql": [],
            "pgsql": [],
            "sqlite": []
        },
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": [],
        "options": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Database",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "getPassword": {
            "name": "getPassword",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function getPassword($id_option)\n  {\n    if (!$this->pw) {\n      $this->pw = new Passwords($this->db);\n    }\n\n    return $this->pw->get($id_option);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 91,
            "endLine": 98,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPassword",
            "returns": [],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "__construct": {
            "name": "__construct",
            "summary": "Constructor",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(Db $db)\n  {\n    parent::__construct($db);\n    self::optionalInit();\n    $this->o = bbn\\Appui\\Option::getInstance();\n    $this->currentConn = $db;\n  }",
            "parent": {
                "name": "__construct",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function __construct(protected bbn\\Db $db)\n  {\n    $this->cacher = bbn\\Cache::getEngine();\n    $this->_cache_prefix = str_replace('\\\\', '\/', \\get_class($this)).'\/';\n  }",
                "parent": false,
                "trait": false,
                "startLine": 29,
                "endLine": 33,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "__construct",
                "returns": [],
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "type_arr": [
                            "bbn\\Db"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "promoted": "protected"
                    }
                ]
            },
            "trait": false,
            "startLine": 106,
            "endLine": 112,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "promoted": "protected",
                    "description": "The main database connection (where options are)"
                }
            ],
            "doc": {
                "description": "Constructor\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Db",
                        "name": "$db",
                        "description": "The main database connection (where options are)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Constructor\n   *\n   * @param Db $db The main database connection (where options are)\n   *\/"
        },
        "connection": {
            "name": "connection",
            "summary": "Returns a connection with the given user@host selecting the given database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function connection(string|null $host = null, string $engine = 'mysql', string $db = ''): Db\n  {\n    if (bbn\\Str::isUid($host)) {\n      $id_host = $host;\n    }\n    elseif (!($id_host = $this->hostId($host, $engine))) {\n      throw new \\Exception(X::_(\"Impossible to find the host\").' '.\"$host ($engine)\");\n    }\n\n    if (!($cfg = $this->o->option($id_host))) {\n      throw new \\Exception(X::_(\"Impossible to find the option corresponding to host\").' '.\"$host ($engine)\");\n    }\n\n    if ($id_host && ($parent = $this->o->parent($this->o->getIdParent($id_host)))) {\n      if (!isset($this->connections[$parent['code']])) {\n        throw new \\Exception(X::_(\"Unknown engine\").\" \".$parent['code']);\n      }\n\n      if (!isset($this->connections[$parent['code']][$cfg['code'] . $db])) {\n        switch ($parent['code']) {\n          case 'mysql':\n          case 'pgsql':\n            if (strpos($cfg['code'], '@')) {\n              $bits = bbn\\X::split($cfg['code'], '@');\n              if (count($bits) === 2) {\n                if (!($password = $this->getPassword($id_host))) {\n                  throw new \\Exception(X::_(\"No password for %s\", $cfg['code']));\n                }\n                $db_cfg = [\n                  'engine' => $parent['code'],\n                  'host' => $bits[1],\n                  'port' => !empty($cfg['port']) ? $cfg['port'] : null,\n                  'db' => $db,\n                  'user' => $bits[0],\n                  'pass' => $password\n                ];\n              }\n              else {\n                $db_cfg = [\n                  'engine' => $parent['code'],\n                  'host' => $cfg['code'],\n                  'port' => !empty($cfg['port']) ? $cfg['port'] : null,\n                  'db' => $db\n                ];\n              }\n\n              try {\n                $this->connections[$parent['code']][$cfg['code'] . $db] = new Db($db_cfg);\n              }\n              catch (\\Exception $e) {\n                throw new \\Exception($e->getMessage());\n              }\n            }\n            break;\n\n          case 'sqlite':\n            $pbits = X::split($cfg['code'], '\/');\n            foreach ($pbits as &$bit) {\n              if (str_starts_with($bit, 'BBN_') && defined($bit)) {\n                $bit = constant($bit);\n                if (str_ends_with($bit, '\/')) {\n                  $bit = rtrim($bit, '\/');\n                }\n              }\n            }\n\n            $cfg['path'] = X::join($pbits, '\/');\n            if (empty($db) || empty($cfg['path']) || !file_exists($cfg['path'].'\/'.$db)) {\n              throw new \\Exception(X::_('db or path empty'));\n            }\n\n            $db_cfg = [\n              'engine' => 'sqlite',\n              'db' => $cfg['path'].'\/'.$db\n            ];\n            try {\n              $this->connections[$parent['code']][$cfg['code'] . $db] = new Db($db_cfg);\n            }\n            catch (\\Exception $e) {\n              throw new \\Exception($e->getMessage());\n            }\n            break;\n\n          default:\n            throw new \\Exception(X::_('Impossible to find the engine').' '.$cfg['engines']);\n        }\n      }\n\n      if (isset($this->connections[$parent['code']][$cfg['code'] . $db])) {\n        $this->currentConn = $this->connections[$parent['code']][$cfg['code'] . $db];\n        return $this->currentConn;\n      }\n    }\n\n    throw new \\Exception(X::_(\"Impossible to get a connection for\").' '.$cfg['code']);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 122,
            "endLine": 217,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "connection",
            "returns": [
                "bbn\\Db"
            ],
            "arguments": [
                {
                    "name": "host",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "A string user@host"
                },
                {
                    "name": "engine",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": "",
                    "description": "The database name"
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a connection with the given user@host selecting the given database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$host",
                        "description": "A string user@host"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a connection with the given user@host selecting the given database.\n   *\n   * @param string $host A string user@host\n   * @param string $db   The database name\n   * @return Db|null\n   *\/"
        },
        "engineId": {
            "name": "engineId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function engineId(string $engine): ?string\n  {\n    return self::getOptionId($engine, 'engines');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 220,
            "endLine": 223,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "engineId",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "engine",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "engineCode": {
            "name": "engineCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function engineCode(string $engineId): ?string\n  {\n    if (bbn\\Str::isUid($engineId)) {\n      return $this->o->code($engineId) ?: null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 226,
            "endLine": 233,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "engineCode",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "engineId",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "engineIdFromHost": {
            "name": "engineIdFromHost",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function engineIdFromHost(string $hostId): ?string\n  {\n    if (($idEngineTemplate = $this->o->getTemplateId('engine'))\n      && bbn\\Str::isUid($hostId)\n      && ($idParent = $this->o->getIdParent($hostId))\n      && ($idEngines = self::getOptionId('engines'))\n    ) {\n      while (!empty($idParent) && ($idParent !== $idEngines)) {\n        $idParent = $this->o->getIdParent($idParent);\n        if (!($o = $this->o->option($idParent))) {\n          return null;\n        }\n\n        if ($o['id_alias'] === $idEngineTemplate) {\n          return $o['id'];\n        }\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 236,
            "endLine": 256,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "engineIdFromHost",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "hostId",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "enginePcolumns": {
            "name": "enginePcolumns",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function enginePcolumns(string $engineId): array\n  {\n    if (!Str::isUid($engineId)) {\n      $engineId = $this->engineId($engineId);\n    }\n\n    if (!empty($engineId)\n      && ($idPcolumns = $this->o->fromCode('pcolumns', $engineId))\n    ) {\n      return array_map(function($item) {\n        unset($item['id_parent'], $item['id_alias'], $item['num'], $item['num_children']);\n        return $item;\n      }, $this->o->fullOptions($idPcolumns));\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 259,
            "endLine": 275,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "enginePcolumns",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "engineId",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "engineDataTypes": {
            "name": "engineDataTypes",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function engineDataTypes(string $engineCode): array\n  {\n    return bbn\\Db\\Languages\\Sql::$types;\n    \/* if (Str::isUid($engineCode)) {\n      $engineCode = $this->engineCode($engineCode);\n    }\n\n    if (!empty($engineCode)) {\n      $c = \"bbn\\\\Db\\\\Languages\\\\\". ucfirst($engineCode);\n      if (class_exists($c)) {\n        return $c::$types;\n      }\n    }\n\n    return []; *\/\n  }",
            "parent": false,
            "trait": false,
            "startLine": 278,
            "endLine": 293,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "engineDataTypes",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "engineCode",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "engines": {
            "name": "engines",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function engines(): array\n  {\n    if (($engines = self::getOptionId('engines'))\n      && ($codes = $this->o->getCodes($engines))\n    ) {\n      return array_values($codes);\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 296,
            "endLine": 305,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "engines",
            "returns": [
                "array"
            ],
            "arguments": []
        },
        "hostId": {
            "name": "hostId",
            "summary": "Returns the ID of a connection.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hostId(string|null $host, string $engine = 'mysql'): ?string\n  {\n    if (bbn\\Str::isUid($host)) {\n      return $host;\n    }\n\n    if (empty($host)) {\n      $host = $this->db->getConnectionCode();\n    }\n\n    $r = self::getOptionId($host, 'connections', $engine, 'engines');\n    return $r ?: null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 314,
            "endLine": 326,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "hostId",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "host",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The connection code (user@host or host)"
                },
                {
                    "name": "engine",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the ID of a connection.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$host",
                        "description": "The connection code (user@host or host)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of a connection.\n   *\n   * @param string $host The connection code (user@host or host)\n   * @return null|string\n   *\/"
        },
        "hostCode": {
            "name": "hostCode",
            "summary": "Returns the code of a connection.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hostCode(string $hostId): ?string\n  {\n    return $this->o->code($hostId) ?: null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 335,
            "endLine": 338,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "hostCode",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "hostId",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "d The connection ID"
                }
            ],
            "doc": {
                "description": "Returns the code of a connection.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$host",
                        "description": "d The connection ID"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the code of a connection.\n   *\n   * @param string $hostId The connection ID\n   * @return null|string\n   *\/"
        },
        "countHosts": {
            "name": "countHosts",
            "summary": "Returns the number of connections in the options.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function countHosts(string $engine = 'mysql'): ?int\n  {\n    if (($id_parent = self::getOptionId('connections', $engine, 'engines'))\n        && ($num = $this->o->count($id_parent))\n    ) {\n      return $num;\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 346,
            "endLine": 355,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "countHosts",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "engine",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the number of connections in the options.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the number of connections in the options.\n   *\n   * @return int|null\n   *\/"
        },
        "hosts": {
            "name": "hosts",
            "summary": "Returns a list of the connections available.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hosts(string $engine = 'mysql'): array\n  {\n    if (($id_parent = self::getOptionId('connections', $engine, 'engines'))\n        && ($co = array_values($this->o->codeOptions($id_parent)))\n    ) {\n      return $co;\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 363,
            "endLine": 372,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "hosts",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "engine",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a list of the connections available.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a list of the connections available.\n   *\n   * @return array\n   *\/"
        },
        "fullHosts": {
            "name": "fullHosts",
            "summary": "Returns the list of the connections",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullHosts(string $engine = 'mysql'): ?array\n  {\n    if (($id_parent = self::getOptionId('connections', $engine, 'engines'))\n        && ($opt = $this->o->fullOptions($id_parent))\n    ) {\n      return $opt;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 380,
            "endLine": 389,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "fullHosts",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "engine",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the list of the connections\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the list of the connections\n   *\n   * @return array|null\n   *\/"
        },
        "dbId": {
            "name": "dbId",
            "summary": "Returns the option's ID of a database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dbId(string $db = '', string $host = '', string $engine = 'mysql'): ?string\n  {\n    if (!\\bbn\\Str::isUid($host)) {\n      $host = $this->hostId($host, $engine);\n    }\n\n    if (($id_parent = self::getOptionId('dbs', $engine, 'engines'))\n        && ($res = $this->o->fromCode($db ?: $this->db->getCurrent(), $id_parent))\n    ) {\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 398,
            "endLine": 411,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbId",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the option's ID of a database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the option's ID of a database.\n   *\n   * @param string $db The database's name\n   * @return null|string\n   *\/"
        },
        "countDbs": {
            "name": "countDbs",
            "summary": "Returns the number of DBs available for the given connection.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function countDbs(string $host = '', string $engine = 'mysql'): int\n  {\n    if (!$host) {\n      $num = $this->o->count(self::getOptionId('dbs', $engine, 'engines'));\n      return $num;\n    }\n    elseif (!bbn\\Str::isUid($host)) {\n      $host = $this->hostId($host, $engine);\n    }\n\n    $all = $this->o->getAliases($host);\n    $num = $all ? count($all) : 0;\n    return $num;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 420,
            "endLine": 433,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "countDbs",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "host",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's code"
                },
                {
                    "name": "engine",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the number of DBs available for the given connection.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$host",
                        "description": "The connection's code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the number of DBs available for the given connection.\n   *\n   * @param string $host The connection's code\n   * @return int\n   *\/"
        },
        "dbs": {
            "name": "dbs",
            "summary": "Returns the list of DBs available for the given connection.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dbs(string $host = '', string $engine = 'mysql'): array\n  {\n    if (!$host) {\n      $arr = $this->o->fullOptions(self::getOptionId('dbs', $engine, 'engines'));\n    }\n    elseif (!bbn\\Str::isUid($host)) {\n      $host = $this->hostId($host, $engine);\n    }\n\n    if ($host) {\n      $arr = array_map(\n        fn($a) => $this->o->parent($a['id_parent']),\n        $this->o->getAliases($host)\n      );\n    }\n    if (!empty($arr)) {\n      return array_map(\n        fn($a) => [\n          'id' => $a['id'],\n          'text' => $a['text'],\n          'name' => $a['code']\n        ],\n        $arr\n      );\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 442,
            "endLine": 469,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "dbs",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "host",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's code, all DBs are returned if empty."
                },
                {
                    "name": "engine",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the list of DBs available for the given connection.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$host",
                        "description": "The connection's code, all DBs are returned if empty."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the list of DBs available for the given connection.\n   *\n   * @param string $host The connection's code, all DBs are returned if empty.\n   * @return array|null\n   *\/"
        },
        "fullDbs": {
            "name": "fullDbs",
            "summary": "Returns the list of DBs available for the given connection with statistics.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullDbs(string $host = '', string $engine = 'mysql'): array\n  {\n    if (!bbn\\Str::isUid($engine)) {\n      $engineId = $this->engineId($engine);\n    }\n    else {\n      $engineId = $engine;\n      $engine = $this->engineCode($engineId);\n    }\n\n    if ($dbs = $this->dbs($host, $engine)) {\n      $hostId = $this->hostId($host, $engine);\n      foreach ($dbs as &$db) {\n        $db = $this->fullDb($db, $hostId, $engineId);\n      }\n\n      return $dbs;\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 478,
            "endLine": 498,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "fullDbs",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "host",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's code, all DBs are returned if empty."
                },
                {
                    "name": "engine",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the list of DBs available for the given connection with statistics.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$host",
                        "description": "The connection's code, all DBs are returned if empty."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the list of DBs available for the given connection with statistics.\n   *\n   * @param string $host The connection's code, all DBs are returned if empty.\n   * @return array\n   *\/"
        },
        "fullDb": {
            "name": "fullDb",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullDb(string|array $db, ?string $host = null, ?string $engine = null): ?array\n  {\n\n    if (empty($engine)) {\n      $engine = $this->db->getEngine();\n    }\n\n    if (bbn\\Str::isUid($engine)) {\n      $engineId = $engine;\n      $engine = $this->engineCode($engineId);\n    }\n    else {\n      $engineId = $this->engineId($engine);\n    }\n\n    if (empty($host)) {\n      $host = $this->db->getConnectionCode();\n    }\n\n    $hostId = $this->hostId($host, $engine);\n    if (is_array($db)) {\n      $dbData = $db;\n    }\n    else {\n      if (!Str::isUid($db)) {\n        $db = $this->dbId($db, $hostId, $engine);\n      }\n\n      $dbData = $this->o->option($db);\n    }\n\n    if (empty($dbData)) {\n      $dbData = static::$dbProps;\n    }\n\n    if (!empty($dbData)) {\n      $r =  X::mergeArrays(static::$dbProps, [\n        'id' => $dbData['id'],\n        'text' => $dbData['text'],\n        'name' => $dbData['code'] ?? $dbData['name'],\n        'engine' => $engine,\n        'id_engine' => $engineId,\n        'id_host' => $hostId\n      ]);\n      if ($idTables = $this->o->fromCode('tables', $r['id'])) {\n        $r['num_tables'] = $this->o->count($idTables);\n      }\n\n      if ($idConnections = $this->o->fromCode('connections', $r['id'])) {\n        $r['num_connections'] = $this->o->count($idConnections);\n      }\n\n      if ($idProcedures = $this->o->fromCode('procedures', $r['id'])) {\n        $r['num_procedures'] = $this->o->count($idProcedures);\n      }\n\n      if ($idFunctions = $this->o->fromCode('functions', $r['id'])) {\n        $r['num_functions'] = $this->o->count($idFunctions);\n      }\n\n      return $r;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 501,
            "endLine": 565,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "fullDb",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "tableId": {
            "name": "tableId",
            "summary": "Returns the ID of a table from the options table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tableId(string $table, string $db = '', string $host = '', string $engine = 'mysql'): ?string\n  {\n    if (!bbn\\Str::isUid($db)) {\n      if (Str::isUid($host)) {\n        if (!($parent = $this->o->parent($this->o->getIdParent($host)))) {\n          throw new \\Exception(X::_(\"Impossible to find the host engine\"));\n        }\n\n        $engine = $parent['code'];\n        $db     = $this->dbId($db, $host, $engine);\n      }\n      else {\n        $db = $this->dbId($db, $host, $engine);\n      }\n    }\n\n    if (bbn\\Str::isUid($db)\n        && ($id_parent = $this->o->fromCode('tables', $db))\n        && ($id = $this->o->fromCode($table, $id_parent))\n    ) {\n      return $id;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 576,
            "endLine": 600,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "tableId",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the table"
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the DB"
                },
                {
                    "name": "host",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's code"
                },
                {
                    "name": "engine",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the ID of a table from the options table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The name of the table"
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$db",
                        "description": "The name of the DB"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$host",
                        "description": "The connection's code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of a table from the options table.\n   *\n   * @param string $table The name of the table\n   * @param mixed  $db    The name of the DB\n   * @param string $host  The connection's code\n   * @return string|null\n   *\/"
        },
        "countTables": {
            "name": "countTables",
            "summary": "Returnms the number of tables in the given database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function countTables(string $db, string $host = '', string $engine = 'mysql'): ?int\n  {\n    if (!bbn\\Str::isUid($db)) {\n      if (Str::isUid($host)) {\n        $db = $this->dbId($db, $host);\n      }\n      else {\n        $db = $this->dbId($db, $host, $engine);\n      }\n    }\n\n    if (bbn\\Str::isUid($db) && ($id_parent = $this->o->fromCode('tables', $db))) {\n      $num = $this->o->count($id_parent);\n      return $num ?: 0;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 610,
            "endLine": 627,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "countTables",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database name"
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's code"
                },
                {
                    "name": "engine",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returnms the number of tables in the given database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$host",
                        "description": "The connection's code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returnms the number of tables in the given database.\n   *\n   * @param string $db   The database name\n   * @param string $host The connection's code\n   * @return int|null\n   *\/"
        },
        "tables": {
            "name": "tables",
            "summary": "Returns a list of tables in the given database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tables(string $db = '', string $host = '', string $engine = 'mysql'): ?array\n  {\n    if (!bbn\\Str::isUid($db)) {\n      if (Str::isUid($host)) {\n        $db = $this->dbId($db, $host);\n      }\n      else {\n        $db = $this->dbId($db, $host, $engine);\n      }\n    }\n\n    if (bbn\\Str::isUid($db)\n        && ($id_parent = $this->o->fromCode('tables', $db))\n        && ($fo = array_values($this->o->codeOptions($id_parent)))\n    ) {\n      $res = array_map(\n        function ($a) {\n          return [\n            'id' => $a['id'],\n            'text' => $a['text'],\n            'name' => $a['code']\n          ];\n        },\n        $fo\n      );\n      return $res ?: [];\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 637,
            "endLine": 666,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "tables",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The database name"
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's code"
                },
                {
                    "name": "engine",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a list of tables in the given database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$db",
                        "description": "The database name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$host",
                        "description": "The connection's code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a list of tables in the given database.\n   *\n   * @param mixed  $db   The database name\n   * @param string $host The connection's code\n   * @return array|null\n   *\/"
        },
        "fullTables": {
            "name": "fullTables",
            "summary": "Returns a list of tables in the given database with its statistics.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullTables(string $db = '', string $host = '', string $engine = 'mysql'): array\n  {\n    if (!bbn\\Str::isUid($engine)) {\n      $engineId = $this->engineId($engine);\n    }\n    else {\n      $engineId = $engine;\n      $engine = $this->engineCode($engineId);\n    }\n\n    $hostId = $this->hostId($host, $engine);\n    if ($tables = $this->tables($db, $host, $engine)) {\n      foreach ($tables as &$table) {\n        $table = $this->fullTable($table, $db, $hostId, $engineId);\n      }\n\n      return $tables;\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 676,
            "endLine": 696,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "fullTables",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The database name"
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's code"
                },
                {
                    "name": "engine",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a list of tables in the given database with its statistics.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$db",
                        "description": "The database name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$host",
                        "description": "The connection's code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a list of tables in the given database with its statistics.\n   *\n   * @param mixed  $db   The database name\n   * @param string $host The connection's code\n   * @return array|null\n   *\/"
        },
        "fullTable": {
            "name": "fullTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullTable(\n    string|array $table,\n    ?string $db = null,\n    ?string $host = null,\n    ?string $engine = null\n  ): ?array\n  {\n    if (empty($engine)) {\n      $engine = $this->db->getEngine();\n    }\n\n    if (bbn\\Str::isUid($engine)) {\n      $engineId = $engine;\n      $engine = $this->engineCode($engineId);\n    }\n    else {\n      $engineId = $this->engineId($engine);\n    }\n\n    if (empty($host)) {\n      $host = $this->db->getConnectionCode();\n    }\n\n    $hostId = $this->hostId($host, $engine);\n    if (empty($db)) {\n      $db = $this->db->getCurrent();\n    }\n\n    $dbId = $this->dbId($db, $hostId, $engine);\n    if (is_array($table)) {\n      $tableData = $table;\n    }\n    else if ($tableId = Str::isUid($table) ? $table : $this->tableId($table, $dbId, $hostId, $engine)) {\n      $tableData = $this->o->option($tableId);\n    }\n\n    if (empty($tableData)) {\n      $tableData = static::$tableProps;\n    }\n\n    if (!empty($tableData)) {\n      $r =  X::mergeArrays(static::$tableProps, [\n        'id' => $tableData['id'],\n        'text' => $tableData['text'] ?? (!Str::isUid($table) ? $table : null),\n        'name' => $tableData['code'] ?? $tableData['name'] ?? (!Str::isUid($table) ? $table : null),\n        'engine' => $engine,\n        'id_engine' => $engineId,\n        'id_host' => $hostId,\n        'database' => $db,\n        'id_database' => $dbId\n      ]);\n      if ($idColumns = $this->o->fromCode('columns', $r['id'])) {\n        $r['num_columns'] = $this->o->count($idColumns);\n      }\n\n      if ($idKeys = $this->o->fromCode('keys', $r['id'])) {\n        $r['num_keys'] = $this->o->count($idKeys);\n      }\n\n      return $r;\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 699,
            "endLine": 761,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "fullTable",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "host",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 3,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "tableFromItem": {
            "name": "tableFromItem",
            "summary": "Gets the name of a table from an item's ID (key or column).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tableFromItem(string $id_keycol): ?string\n  {\n    if (($table = $this->tableIdFromItem($id_keycol))\n        && ($r = $this->o->code($table))\n    ) {\n      return $r;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 770,
            "endLine": 779,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "tableFromItem",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_keycol",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "keycol The ID of the item"
                }
            ],
            "doc": {
                "description": "Gets the name of a table from an item's ID (key or column).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "keycol The ID of the item"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the name of a table from an item's ID (key or column).\n   *\n   * @param string $id_keycol The ID of the item\n   * @return string|null\n   *\/"
        },
        "tableIdFromItem": {
            "name": "tableIdFromItem",
            "summary": "Retrieves the ID of a table from an item's ID (key or column).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tableIdFromItem(string $id_keycol): ?string\n  {\n    if (bbn\\Str::isUid($id_keycol)\n        && ($id_cols = $this->o->getIdParent($id_keycol))\n        && ($id_table = $this->o->getIdParent($id_cols))\n    ) {\n      return $id_table;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 788,
            "endLine": 798,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "tableIdFromItem",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_keycol",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "keycol The ID of the item"
                }
            ],
            "doc": {
                "description": "Retrieves the ID of a table from an item's ID (key or column).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "keycol The ID of the item"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves the ID of a table from an item's ID (key or column).\n   *\n   * @param string $id_keycol The ID of the item\n   * @return string|null\n   *\/"
        },
        "dbFromTable": {
            "name": "dbFromTable",
            "summary": "Retrieves a database name from the ID of a table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dbFromTable(string $id_table): ?string\n  {\n    if (($id_db = $this->dbIdFromTable($id_table))\n        && ($r = $this->o->code($id_db))\n    ) {\n      return $r;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 807,
            "endLine": 816,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbFromTable",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "table The table's ID."
                }
            ],
            "doc": {
                "description": "Retrieves a database name from the ID of a table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "table The table's ID."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a database name from the ID of a table.\n   *\n   * @param string $id_table The table's ID.\n   * @return string|null\n   *\/"
        },
        "dbIdFromTable": {
            "name": "dbIdFromTable",
            "summary": "Returns the ID of a DB through the given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dbIdFromTable(string $id_table): ?string\n  {\n    if (bbn\\Str::isUid($id_table)\n        && ($id_tables = $this->o->getIdParent($id_table))\n        && ($id_db = $this->o->getIdParent($id_tables))\n    ) {\n      return $id_db;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 825,
            "endLine": 835,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbIdFromTable",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "table The table's ID."
                }
            ],
            "doc": {
                "description": "Returns the ID of a DB through the given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "table The table's ID."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of a DB through the given table.\n   *\n   * @param string $id_table The table's ID.\n   * @return string|null\n   *\/"
        },
        "dbFromItem": {
            "name": "dbFromItem",
            "summary": "Returns the name of a DB through the ID of an item (key or column).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dbFromItem(string $id_keycol): ?string\n  {\n    if (($id_db = $this->dbIdFromItem($id_keycol))\n        && ($r = $this->o->code($id_db))\n    ) {\n      return $r;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 844,
            "endLine": 853,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbFromItem",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_keycol",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "keycol The ID of the item"
                }
            ],
            "doc": {
                "description": "Returns the name of a DB through the ID of an item (key or column).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "keycol The ID of the item"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the name of a DB through the ID of an item (key or column).\n   *\n   * @param string $id_keycol The ID of the item\n   * @return string|null\n   *\/"
        },
        "dbIdFromItem": {
            "name": "dbIdFromItem",
            "summary": "Returns the ID of a DB through the ID of an item (key or column).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dbIdFromItem(string $id_keycol): ?string\n  {\n    if (($id_table = $this->tableIdFromItem($id_keycol))\n        && ($id_db = $this->dbIdFromTable($id_table))\n    ) {\n      return $id_db;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 862,
            "endLine": 871,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbIdFromItem",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_keycol",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "keycol The ID of the item"
                }
            ],
            "doc": {
                "description": "Returns the ID of a DB through the ID of an item (key or column).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "keycol The ID of the item"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of a DB through the ID of an item (key or column).\n   *\n   * @param string $id_keycol The ID of the item\n   * @return string|null\n   *\/"
        },
        "columnId": {
            "name": "columnId",
            "summary": "Returns the given column's ID.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function columnId(string $column, string $table, string $db = ''): ?string\n  {\n    $res = null;\n    if (Str::isUid($table)) {\n      $res = $this->o->fromCode($this->db->csn($column), 'columns', $table);\n      return $res;\n    }\n\n    $c = $this->db->csn($column);\n    $t = $this->db->tsn($table);\n    if (!Str::isUid($db)) {\n      $db = $this->dbId($db);\n    }\n\n    if (Str::isUid($db) && ($tmp = $this->o->fromCode($c, 'columns', $t, 'tables', $db))) {\n      $res = $tmp;\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 882,
            "endLine": 901,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "columnId",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The DB's name"
                }
            ],
            "doc": {
                "description": "Returns the given column's ID.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$column",
                        "description": "The column's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The DB's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the given column's ID.\n   *\n   * @param string $column The column's name\n   * @param string $table  The table's name\n   * @param string $db     The DB's name\n   * @return string|null\n   *\/"
        },
        "countColumns": {
            "name": "countColumns",
            "summary": "Returns the number of columns for the given DB.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function countColumns(string $table, string $db = ''): int\n  {\n    $num = 0;\n    if (!Str::isUid($table) && Str::isUid($db)) {\n      $table = $this->tableId($table, $db);\n    }\n\n    if (Str::isUid($table)\n        && ($id_parent = $this->o->fromCode('columns', $table))\n    ) {\n      $num = $this->o->count($id_parent);\n    }\n\n    return $num;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 911,
            "endLine": 925,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "countColumns",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or UID"
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The database's UID"
                }
            ],
            "doc": {
                "description": "Returns the number of columns for the given DB.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name or UID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database's UID"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the number of columns for the given DB.\n   *\n   * @param string $table The table's name or UID\n   * @param string $db    The database's UID\n   * @return int\n   *\/"
        },
        "columns": {
            "name": "columns",
            "summary": "Returns a list of the columns for the given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function columns(string $table, string $db = ''): ?array\n  {\n    if (!bbn\\Str::isUid($table) && Str::isUid($db)) {\n      $table = $this->tableId($this->db->tsn($table), $db);\n    }\n\n    if (bbn\\Str::isUid($table)\n        && ($id_parent = $this->o->fromCode('columns', $table))\n        && ($res = $this->o->options($id_parent))\n    ) {\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 935,
            "endLine": 949,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "columns",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or UID"
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The database's UID"
                }
            ],
            "doc": {
                "description": "Returns a list of the columns for the given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name or UID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database's UID"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a list of the columns for the given table.\n   *\n   * @param string $table The table's name or UID\n   * @param string $db    The database's UID\n   * @return array|false\n   *\/"
        },
        "fullColumns": {
            "name": "fullColumns",
            "summary": "Returns a list of the columns for the given table with all their characteristics.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullColumns(string $table, string $db = ''): array\n  {\n    if (!bbn\\Str::isUid($table) && Str::isUid($db)) {\n      $table = $this->tableId($table, $db);\n    }\n\n    if (bbn\\Str::isUid($table)\n        && ($id_parent = $this->o->fromCode('columns', $table))\n        && ($res = $this->o->fullOptions($id_parent))\n    ) {\n      return $res;\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 959,
            "endLine": 973,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "fullColumns",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or UID"
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The database UID"
                }
            ],
            "doc": {
                "description": "Returns a list of the columns for the given table with all their characteristics.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name or UID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database UID"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a list of the columns for the given table with all their characteristics.\n   *\n   * @param string $table The table's name or UID\n   * @param string $db    The database UID\n   * @return array|false\n   *\/"
        },
        "keyId": {
            "name": "keyId",
            "summary": "Returns the ID of a key in the given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function keyId(string $key, string $table, string $db = ''): ?string\n  {\n    $res = null;\n    if (Str::isUid($table)) {\n      $res = $this->o->fromCode($key, 'keys', $table);\n      return $res;\n    }\n\n    $t = $this->db->tsn($table);\n    if (!Str::isUid($db)) {\n      $db = $this->dbId($db);\n    }\n\n    if (Str::isUid($db) && ($tmp = $this->o->fromCode($key, 'keys', $t, 'tables', $db))) {\n      $res = $tmp;\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 984,
            "endLine": 1002,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "keyId",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "key",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The key;s name."
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                }
            ],
            "doc": {
                "description": "Returns the ID of a key in the given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$key",
                        "description": "The key;s name."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of a key in the given table.\n   *\n   * @param string $key   The key;s name.\n   * @param string $table The table's name\n   * @param string $db    The database's name\n   * @return null|string\n   *\/"
        },
        "countKeys": {
            "name": "countKeys",
            "summary": "Returns the number of keys in the given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function countKeys(string $table, string $db = ''): int\n  {\n    $num = 0;\n    if (!bbn\\Str::isUid($table) && Str::isUid($db)) {\n      $table = $this->tableId($table, $db);\n    }\n\n    if (bbn\\Str::isUid($table)\n        && ($id_parent = $this->o->fromCode('keys', $table))\n    ) {\n      $num = $this->o->count($id_parent);\n    }\n\n    return $num;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1012,
            "endLine": 1026,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "countKeys",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                }
            ],
            "doc": {
                "description": "Returns the number of keys in the given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the number of keys in the given table.\n   *\n   * @param string $table The table's name\n   * @param string $db    The database's name\n   * @return int\n   *\/"
        },
        "keys": {
            "name": "keys",
            "summary": "Returns a list of keys for the giuven table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function keys(string $table, string $db = ''): array\n  {\n    $res = [];\n    if (!bbn\\Str::isUid($table) && bbn\\Str::isUid($db)) {\n      $table = $this->tableId($table, $db);\n    }\n\n    if (bbn\\Str::isUid($table)\n        && ($id_parent = $this->o->fromCode('keys', $table))\n        && ($tree = $this->o->fullTree($id_parent))\n        && $tree['items']\n    ) {\n      $t   =& $this;\n      $res = array_map(\n        function ($a) use ($t) {\n          $key = [\n            'name' => $a['code'],\n            'unique' => $a['unique'],\n            'columns' => [],\n            'ref_column' => $a['id_alias'] ? $a['alias']['code'] : null,\n            'ref_table' => $a['id_alias'] &&\n                          ($id_table = $t->o->getIdParent($a['alias']['id_parent'])) ? $t->o->code($id_table) : null,\n            'ref_db' => !empty($id_table) &&\n                        ($id_db = $t->o->getIdParent($t->o->getIdParent($id_table))) ? $t->o->code($id_db) : null\n          ];\n          foreach ($a['items'] as $col){\n            $key['columns'][] = $col['code'];\n          }\n\n          return $key;\n        },\n        $tree['items']\n      );\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1036,
            "endLine": 1072,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "keys",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                }
            ],
            "doc": {
                "description": "Returns a list of keys for the giuven table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a list of keys for the giuven table.\n   *\n   * @param string $table The table's name\n   * @param string $db    The database's name\n   * @return array\n   *\/"
        },
        "fullKeys": {
            "name": "fullKeys",
            "summary": "For the moment an alias of get_keys.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullKeys(string $table, string $db = ''): array\n  {\n    return $this->keys($table, $db);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1082,
            "endLine": 1085,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "fullKeys",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                }
            ],
            "doc": {
                "description": "For the moment an alias of get_keys.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * For the moment an alias of get_keys.\n   *\n   * @param string $table The table's name\n   * @param string $db    The database's name\n   * @return array\n   *\/"
        },
        "remove": {
            "name": "remove",
            "summary": "Deletes a table and all its descendants from the options table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function remove(string $table, string $db = ''): int\n  {\n    $id = $this->tableId($table, $db);\n    return $this->o->removeFull($id);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1095,
            "endLine": 1099,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "remove",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                }
            ],
            "doc": {
                "description": "Deletes a table and all its descendants from the options table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a table and all its descendants from the options table.\n   *\n   * @param string $table The table's name\n   * @param string $db    The database's name\n   * @return int\n   *\/"
        },
        "removeAll": {
            "name": "removeAll",
            "summary": "Deletes a database and all its descendants from the options table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeAll(string $db = ''): int\n  {\n    $id = $this->dbId($db);\n    return $this->o->removeFull($id);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1108,
            "endLine": 1112,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "removeAll",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                }
            ],
            "doc": {
                "description": "Deletes a database and all its descendants from the options table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a database and all its descendants from the options table.\n   *\n   * @param string $db The database's name\n   * @return int\n   *\/"
        },
        "removeHost": {
            "name": "removeHost",
            "summary": "Deletes a connection from the options table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeHost(string $connection): int\n  {\n    $id = $this->hostId($connection);\n    return $this->o->removeFull($id);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1121,
            "endLine": 1125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeHost",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "connection",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's code"
                }
            ],
            "doc": {
                "description": "Deletes a connection from the options table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$connection",
                        "description": "The connection's code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a connection from the options table.\n   *\n   * @param string $connection The connection's code\n   * @return int\n   *\/"
        },
        "modelize": {
            "name": "modelize",
            "summary": "Returns a database model as bbn\\Db::modelize but with options IDs.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function modelize(string $table = '', string $db = '', string $host = '', string $engine = 'mysql'): ?array\n  {\n    $model = null;\n    if (!$host) {\n      $conn = $this->db;\n      $host = $this->db->getConnectionCode();\n      $old_db = $conn->getCurrent();\n      if (Str::isUid($db)) {\n        $db = $this->o->code($db);\n      }\n\n      if ($db && ($old_db !== $db)) {\n        try {\n          $conn->change($db);\n        }\n        catch (\\Exception $e) {\n          throw new \\Exception(X::_(\"Impossible to use the database\").\" $db\");\n        }\n      }\n      elseif (!$db) {\n        $db = $this->db->getCurrent();\n      }\n    }\n    elseif ($db) {\n      try {\n        $conn = $this->connection($host, $engine, $db);\n      }\n      catch (\\Exception $e) {\n        throw new \\Exception($e->getMessage());\n      }\n    }\n\n    if (!$conn || !$conn->check()) {\n      throw new \\Exception(X::_(\"Impossible to connect\"));\n    }\n\n    $table_id = '';\n    $table    = $conn->tsn($table);\n    $ftable   = $conn->tfn($db.'.'.$table);\n    $keys     = function (&$a) use (&$table_id, $table, &$conn) {\n      if (\\is_array($a['keys'])) {\n        array_walk(\n          $a['keys'],\n          function (&$w, $k) use ($table_id, $table) {\n            $w['id_option'] = $this->keyId($k, $table_id);\n          }\n        );\n      }\n    };\n    $fields   = function (&$a) use (&$table_id, $table, &$conn) {\n      if (\\is_array($a['fields'])) {\n        array_walk(\n          $a['fields'],\n          function (&$w, $k) use ($table_id, $table) {\n            if (!$table_id) {\n              throw new \\Exception(X::_(\"Table undefined\").\" $table\");\n            }\n\n            $w['id_option'] = $this->columnId($k, $table_id);\n            $w['option']    = $w['id_option'] ? $this->o->option($w['id_option']) : [];\n          }\n        );\n      }\n    };\n\n    if ($model = $conn->modelize($ftable)) {\n      if ($table\n          && ($table_id = $this->tableId($table, $db, $host, $engine))\n      ) {\n        $keys($model);\n        $fields($model);\n        $model['id_option'] = $table_id;\n        $model['option']    = $this->o->option($table_id);\n}\n      elseif (empty($table)) {\n        array_walk(\n          $model,\n          function (&$w, $k) use (&$table_id, &$keys, &$fields, $host, $engine, $db) {\n            $table = $this->db->tsn($k);\n            if ($table_id = $this->tableId($table, $db, $host, $engine)) {\n              $w['id_option'] = $table_id;\n              $w['option']    = $this->o->option($w['id_option']);\n              $keys($w);\n              $fields($w);\n            }\n          }\n        );\n      }\n    }\n\n    if (!empty($old_db) && ($old_db !== $db)) {\n      $conn->change($old_db);\n    }\n\n    return $model;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1135,
            "endLine": 1230,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "shortName": "modelize",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                },
                {
                    "name": "host",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a database model as bbn\\Db::modelize but with options IDs.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a database model as bbn\\Db::modelize but with options IDs.\n   *\n   * @param string $table The table's name\n   * @param string $db    The database's name\n   * @return array|null\n   *\/"
        },
        "importHost": {
            "name": "importHost",
            "summary": "Imports a database's structure into the options table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function importHost(string $host, string $engine, array $cfg, bool $full = false): ?string\n  {\n    if (($id_parent = self::getOptionId('connections', $engine, 'engines'))\n        && !($id_host = $this->o->fromCode($host, $id_parent))\n    ) {\n      $id_host = $this->o->add(\n        [\n          'id_parent' => $id_parent,\n          'text' => $cfg['name'] ?? $host,\n          'code' => $host\n        ]\n      );\n    }\n\n    if ($id_host) {\n      if (!empty($cfg['password'])) {\n        if (!$this->pw) {\n          $this->pw = new Passwords($this->db);\n        }\n\n        $this->pw->store($cfg['password'], $id_host);\n      }\n      \/** @todo but might be heavy *\/\n      \/* if ($full) {\n\n      }*\/\n    }\n\n    return $id_host ?: null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1242,
            "endLine": 1271,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "importHost",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "host",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's code"
                },
                {
                    "name": "engine",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's engine"
                },
                {
                    "name": "cfg",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's config"
                },
                {
                    "name": "full",
                    "position": 3,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If true will connect to the database and get its structure"
                }
            ],
            "doc": {
                "description": "Imports a database's structure into the options table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$host",
                        "description": "The connection's code"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$engine",
                        "description": "The connection's engine"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The connection's config"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$full",
                        "description": "If true will connect to the database and get its structure"
                    }
                ],
                "return": "The ID of the generated (or existing) database entry"
            },
            "comments": "  \/**\n   * Imports a database's structure into the options table.\n   *\n   * @param string $host   The connection's code\n   * @param string $engine The connection's engine\n   * @param array  $cfg    The connection's config\n   * @param bool   $full   If true will connect to the database and get its structure\n   * @return string|null The ID of the generated (or existing) database entry\n   *\/"
        },
        "importDb": {
            "name": "importDb",
            "summary": "Imports a database's structure into the options table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function importDb(string $db, string $host = '', $full = false): ?string\n  {\n    $id_db = null;\n    if (!bbn\\Str::isUid($host)) {\n      throw new \\Exception(_(\"Invalid host ID\"));\n    }\n    else if (!$this->o->exists($host)) {\n      throw new \\Exception(X::_(\"Impossible to find the host with ID \\\"%s\\\"\", $host));\n    }\n\n    if (!($engineId = $this->engineIdFromHost($host))) {\n      throw new \\Exception(X::_(\"Impossible to find the engine ID for the host \\\"%s\\\"\", $host));\n    }\n\n    if (!($engine = $this->engineCode($engineId))) {\n      throw new \\Exception(X::_(\"Impossible to find the engine code for the host \\\"%s\\\"\", $host));\n    }\n\n    if (!($idTemplate = $this->o->getTemplateId('database'))) {\n      throw new \\Exception(X::_(\"Impossible to find the template \\\"%s\\\"\", 'database'));\n    }\n\n    if (Str::isUid($host)\n      && ($id_dbs = $this->o->fromCode('dbs', $engineId))\n    ) {\n      if (!($id_db = $this->o->fromCode($db, $id_dbs))) {\n        $id_db = $this->addDatabase($db, $host);\n      }\n      else if (($this->o->getIdAlias($id_db) !== $idTemplate)\n        && $this->o->setAlias($id_db, $idTemplate)\n      ) {\n        $this->o->applyTemplate($id_db);\n      }\n\n      if ($id_db) {\n        if (($id_connections = $this->o->fromCode('connections', $id_db))\n          && $this->o->fromCode('procedures', $id_db)\n          && $this->o->fromCode('functions', $id_db)\n          && $this->o->fromCode('tables', $id_db)\n        ) {\n          $optCfg = $this->o->getClassCfg();\n          $optFields = $optCfg['arch']['options'];\n          if (!$this->db->count($optCfg['table'], [\n            $optFields['id_parent'] => $id_connections,\n            $optFields['id_alias'] => $host\n          ])) {\n            $this->o->add([\n              $optFields['id_parent'] => $id_connections,\n              $optFields['id_alias'] => $host\n            ]);\n          }\n          if ($full) {\n            if (!empty($host)) {\n              try {\n                $conn = $this->connection($host, $engine, $db);\n              }\n              catch (\\Exception $e) {\n                throw new \\Exception(X::_(\"Impossible to connect\"));\n              }\n              $tables = $conn->getTables($db);\n              if (!empty($tables)) {\n                foreach ($tables as $t) {\n                  $this->importTable($t, $id_db, $host);\n                }\n              }\n            }\n          }\n        }\n        else{\n          throw new \\Exception(X::_(\"Impossible to find an host ID for DB\").\" \".$this->o->code($id_db));\n        }\n      }\n    }\n\n    return $id_db;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1282,
            "endLine": 1357,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "importDb",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's UID"
                },
                {
                    "name": "full",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If true will connect to the database and get its structure"
                }
            ],
            "doc": {
                "description": "Imports a database's structure into the options table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$host",
                        "description": "The connection's UID"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$full",
                        "description": "If true will connect to the database and get its structure"
                    }
                ],
                "return": "The ID of the generated (or existing) database entry"
            },
            "comments": "  \/**\n   * Imports a database's structure into the options table.\n   *\n   * @param string $db   The database's name\n   * @param string $host The connection's UID\n   * @param bool   $full If true will connect to the database and get its structure\n   * @return string|null The ID of the generated (or existing) database entry\n   *\/"
        },
        "retrieveHost": {
            "name": "retrieveHost",
            "summary": "Returns the ID of the current host for the given DB.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function retrieveHost(string $id_db): ?string\n  {\n    if ($this->check()\n        && defined('BBN_DB_USER')\n        && defined('BBN_DB_HOST')\n        && ($connections = $this->o->fullOptions('connections', $id_db))\n    ) {\n      foreach ($connections as $c) {\n        if ($c['alias']['code'] === constant('BBN_DB_USER') . '@' . constant('BBN_DB_HOST')) {\n          return $c['alias']['id'];\n        }\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1366,
            "endLine": 1381,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "retrieveHost",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_db",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "db"
                }
            ],
            "doc": {
                "description": "Returns the ID of the current host for the given DB.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "db"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of the current host for the given DB.\n   *\n   * @param string $id_db\n   * @return string|null\n   *\/"
        },
        "importTable": {
            "name": "importTable",
            "summary": "Imports a table's structure into the options table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function importTable(string $table, string $id_db, string $host = ''): ?array\n  {\n    if (empty($host)) {\n      $host_id = $this->retrieveHost($id_db);\n    }\n    else{\n      $host_id = bbn\\Str::isUid($host) ? $host : $this->hostId($host);\n    }\n\n    if (!bbn\\Str::isUid($host_id)) {\n      throw new \\Exception(_(\"Invalid host ID\"));\n    }\n    else if (!$this->o->exists($host_id)) {\n      throw new \\Exception(X::_(\"Impossible to find the host with ID \\\"%s\\\"\", $host_id));\n    }\n\n    if (!($engineId = $this->engineIdFromHost($host_id))) {\n      throw new \\Exception(X::_(\"Impossible to find the engine ID for the host \\\"%s\\\"\", $host_id));\n    }\n\n    if (!($engine = $this->engineCode($engineId))) {\n      throw new \\Exception(X::_(\"Impossible to find the engine code for the host \\\"%s\\\"\", $host_id));\n    }\n\n    if (!($idTemplate = $this->o->getTemplateId('table'))) {\n      throw new \\Exception(X::_(\"Impossible to find the template \\\"%s\\\"\", 'table'));\n    }\n\n    if (!empty($host_id)\n      && ($id_tables = $this->o->fromCode('tables', $id_db))\n    ) {\n      if (!($id_table = $this->o->fromCode($table, $id_tables))) {\n        $id_table = $this->addTable($table, $id_db, $host_id);\n      }\n      else {\n        if (($this->o->getIdAlias($id_table) !== $idTemplate)\n          && $this->o->setAlias($id_table, $idTemplate)\n        ) {\n          $this->o->applyTemplate($id_table);\n        }\n      }\n\n      if ($id_table\n        && ($id_columns = $this->o->fromCode('columns', $id_table))\n        && ($id_keys = $this->o->fromCode('keys', $id_table))\n        && ($db = $this->o->code($id_db))\n        && ($conn = $this->connection($host_id, $engine, $db))\n        && ($m = $conn->modelize($db.'.'.$table))\n        && !empty($m['fields'])\n      ) {\n        $num_cols     = 0;\n        $num_cols_rem = 0;\n        $fields       = [];\n        $ocols = $this->o->codeIds($id_columns);\n        if (!is_array($ocols)) {\n          X::ddump(\n            $ocols,\n            $this->o->option($id_columns),\n            $this->o->option($id_keys),\n            $db\n          );\n        }\n        foreach ($m['fields'] as $col => $cfg) {\n          if ($opt_col = $this->o->option($col, $id_columns)) {\n            $num_cols += (int)$this->o->set($opt_col['id'], bbn\\X::mergeArrays($opt_col, $cfg, [\n              'text' => $opt_col['text'] === $opt_col['code'] ? $col : $opt_col['text'],\n              'code' => $col,\n              'num' => $cfg['position']\n            ]));\n          }\n          elseif ($id = $this->o->add(\n            bbn\\X::mergeArrays(\n              $cfg,\n              [\n                'id_parent' => $id_columns,\n                'text' => $col,\n                'code' => $col,\n                'num' => $cfg['position']\n              ]\n            )\n          )\n          ) {\n            $num_cols++;\n            $opt_col       = $cfg;\n            $opt_col['id'] = $id;\n          }\n\n          if ($opt_col) {\n            $fields[$col] = $opt_col['id'];\n          }\n\n          if (isset($ocols[$col])) {\n            unset($ocols[$col]);\n          }\n        }\n\n        if (!empty($ocols)) {\n          foreach ($ocols as $col => $id) {\n            if (bbn\\Str::isUid($id)) {\n              $num_cols_rem += (int)$this->o->remove($id);\n            }\n          }\n        }\n\n        $num_keys     = 0;\n        $num_keys_rem = 0;\n        $okeys        = array_flip($this->o->options($id_keys));\n        foreach ($m['keys'] as $key => $cfg) {\n          $cols = $cfg['columns'] ?? [];\n          unset($cfg['columns']);\n          if (isset($cfg['ref_db'], $cfg['ref_table'], $cfg['ref_column'])\n              && ($id_alias = $this->columnId($cfg['ref_column'], $cfg['ref_table'], $cfg['ref_db']))\n          ) {\n            $cfg['id_alias'] = $id_alias;\n            unset($cfg['ref_db'], $cfg['ref_table'], $cfg['ref_column']);\n          }\n\n          if ($opt_key = $this->o->option($key, $id_keys)) {\n            $num_keys += (int)$this->o->set($opt_key['id'], bbn\\X::mergeArrays($opt_key, $cfg));\n          }\n          elseif ($id = $this->o->add(\n            bbn\\X::mergeArrays(\n              $cfg, [\n              'id_parent' => $id_keys,\n              'text' => $key,\n              'code' => $key\n              ]\n            )\n          )\n          ) {\n            $this->o->setCfg(\n              $id, [\n              'show_code' => 1,\n              'relations' => 'alias'\n              ]\n            );\n            $num_keys++;\n            $opt_key       = $cfg;\n            $opt_key['id'] = $id;\n          }\n\n          if (isset($okeys[$key])) {\n            unset($okeys[$key]);\n          }\n\n          if ($opt_key && $cols) {\n            foreach ($cols as $col){\n              if (isset($fields[$col])) {\n                if ($opt = $this->o->option($col, $opt_key['id'])) {\n                  $this->o->set(\n                    $opt['id'], bbn\\X::mergeArrays(\n                      $opt, [\n                      'id_alias' => $fields[$col]\n                      ]\n                    )\n                  );\n                }\n                else{\n                  $tmp = [\n                    'id_parent' => $opt_key['id'],\n                    'id_alias' => $fields[$col],\n                    'code' => $col,\n                    'text' => $col\n                  ];\n                  if ($this->o->add($tmp)) {\n                    $opt = $tmp;\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        if (!empty($okeys)) {\n          foreach (array_values($okeys) as $id) {\n            if (bbn\\Str::isUid($id)) {\n              $children = $this->o->items($id);\n              foreach ($children as $cid) {\n                $num_keys_rem += (int)$this->o->removeFull($cid);\n              }\n\n              $num_keys_rem += (int)$this->o->removeFull($id);\n            }\n          }\n        }\n\n        return [\n          'columns' => $num_cols,\n          'keys' => $num_keys,\n          'columns_removed' => $num_cols_rem,\n          'keys_removed' => $num_keys_rem\n        ];\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1392,
            "endLine": 1588,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "importTable",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "id_db",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "db The database to which import the table (its id_parent)"
                },
                {
                    "name": "host",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The connection's code"
                }
            ],
            "doc": {
                "description": "Imports a table's structure into the options table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$id",
                        "description": "db The database to which import the table (its id_parent)"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$host",
                        "description": "The connection's code"
                    }
                ],
                "return": "The ID of the generated table entry"
            },
            "comments": "  \/**\n   * Imports a table's structure into the options table.\n   *\n   * @param string $table The table's name\n   * @param bool   $id_db The database to which import the table (its id_parent)\n   * @param string $host  The connection's code\n   * @return string|null The ID of the generated table entry\n   *\/"
        },
        "import": {
            "name": "import",
            "summary": "Import a table structure in the options table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function import(string $table): ?array\n  {\n    $res = null;\n    if ($m = $this->db->modelize($table)) {\n      $tf    = explode('.', $this->db->tfn($table));\n      $db    = $tf[0];\n      $table = $tf[1];\n\n      if (($id_host = $this->importHost($this->db->getHost(), $this->db->getEngine(), $this->db->getCfg()))\n          && ($id_db = $this->importDb($db, $id_host))\n      ) {\n        $res = $this->importTable($table, $id_db);\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1597,
            "endLine": 1613,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "import",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ],
            "doc": {
                "description": "Import a table structure in the options table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Import a table structure in the options table.\n   *\n   * @param string $table The table's name\n   * @return string|null\n   *\/"
        },
        "importAll": {
            "name": "importAll",
            "summary": "Imports a whole database structure in the options table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function importAll(string $db = ''): ?array\n  {\n    $res = null;\n    if ($tables = $this->db->getTables($db)) {\n      $res = [\n        'tables' => 0,\n        'columns' => 0,\n        'keys' => 0\n      ];\n      foreach ($tables as $t){\n        if ($tmp = $this->import(($db ?: $this->db->getCurrent()).'.'.$t)) {\n          $res['tables']++;\n          $res['columns'] += $tmp['columns'];\n          $res['keys']    += $tmp['keys'];\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1622,
            "endLine": 1641,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "importAll",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The database's name"
                }
            ],
            "doc": {
                "description": "Imports a whole database structure in the options table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database's name"
                    }
                ],
                "return": "The database's model"
            },
            "comments": "  \/**\n   * Imports a whole database structure in the options table.\n   *\n   * @param string $db The database's name\n   * @return array|null The database's model\n   *\/"
        },
        "generateNewAlias": {
            "name": "generateNewAlias",
            "summary": "Generate a new alias in the alias property",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function generateNewAlias()\n  {\n    $this->alias = Str::genpwd(5);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1648,
            "endLine": 1651,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "generateNewAlias",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Generate a new alias in the alias property",
                "tags": []
            },
            "comments": "  \/**\n   * Generate a new alias in the alias property\n   *\/"
        },
        "getGridConfig": {
            "name": "getGridConfig",
            "summary": "Generates a grid configuration based on the table structure and columns options.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getGridConfig(string $table, string $db = '', string $host = '', string $engine = 'mysql'): ?array\n  {\n    if ($model = $this->modelize($table, $db, $host, $engine)) {\n      \/** @var array The empty config, js for bbn-table, php for bbn\\appui\\grid *\/\n      $res = [\n        'js' => [\n          'columns' => []\n        ],\n        'php' => [\n          'tables' => [$table],\n          'fields' => [],\n          'join' => [],\n          'order' => []\n        ]\n      ];\n      if (!$db) {\n        $db = $this->db->getCurrent();\n      }\n\n      \/** @var string An alias which will be use as prefix for all aliases *\/\n      $alias = Str::genpwd(5);\n      \/** @var int An incremental index for the tables alias *\/\n      $tIdx  = 0;\n      \/** @var int An incremental index for the columns alias *\/\n      $cIdx  = 0;\n      foreach ($model['fields'] as $col => $f) {\n        $field = $table.'.'.$col;\n\n        \/** @var bool|string The simple name of the unique column to display for the key  *\/\n        $displayColumn = false;\n        \/\/ Case where the column is part of a key\n        if (!empty($model['cols'][$col])) {\n          foreach ($model['cols'][$col] as $c) {\n            if ($c === 'PRIMARY') {\n              if (empty($f['option'])) {\n                $f['editable'] = false;\n              }\n              else {\n                $f['option']['editable'] = false;\n              }\n            }\n            \/\/ Case where it is a foreign key\n            elseif (!empty($model['keys'][$c]['ref_table'])) {\n              \/\/ Incrementing the alias indexes as we'll use them\n              $tIdx++;\n              \/\/ Getting the model from the foreign table\n              $tmodel = $this->modelize($model['keys'][$c]['ref_table'], $model['keys'][$c]['ref_db'], $host, $engine);\n              \/\/ Looking for displayed columns configured\n              if (isset($tmodel['option']) && !empty($tmodel['option']['dcolumns'])) {\n                $dcols = [];\n                foreach ($tmodel['option']['dcolumns'] as $dcol) {\n                  $dcols[] = $this->db->cfn($dcol, $alias.'_t'.$tIdx, true);\n                  if (!$displayColumn) {\n                    $displayColumn = $dcol;\n                  }\n                }\n\n                \/\/ Adding a single display column to the query\n                if (count($dcols) === 1) {\n                  $field = $displayColumn;\n                }\n                \/\/ Adding more display column as concat in the query\n                else {\n                  $field = \"CONCAT(\".X::join($dcols, ', ').\")\";\n                }\n              }\n              else {\n                \/\/ Otherwise looking for the first varchar\n                foreach ($tmodel['fields'] as $tcol => $tf) {\n                  if ($tf['type'] === 'varchar') {\n                    $cIdx++;\n                    \/\/ Adding the column to the query\n                    $field = $alias.'_t'.$tIdx.'.'.$tcol;\n                    $displayColumn = $tcol;\n                    break;\n                  }\n                }\n              }\n\n              if ($displayColumn && (strpos($field, 'CONCAT(') !== 0)) {\n                if (!isset($f['option']['editor'])) {\n                  $f['option']['editor'] = 'appui-database-table-browser';\n                  $f['option']['options'] = [\n                    'table' => $model['keys'][$c]['ref_table'],\n                    'column' => $model['keys'][$c]['ref_column']\n                  ];\n                }\n              }\n\n              \/\/ Adding the JOIN part to the query\n              $res['php']['join'][] = [\n                'type' => $f['null'] ? 'left' : '',\n                'table' => $model['keys'][$c]['ref_db'].'.'.$model['keys'][$c]['ref_table'],\n                'alias' => $alias.'_t'.$tIdx,\n                'on' => [\n                  [\n                    'field' => $alias.'_t'.$tIdx.'.'.$model['keys'][$c]['ref_column'],\n                    'exp' => $table.'.'.$col\n                  ]\n                ]\n              ];\n              break;\n            }\n          }\n        }\n\n        $res['php']['fields'][$col] = $field;\n        if (!empty($f['option'])) {\n          $f = $f['option'];\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1663,
            "endLine": 1779,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getGridConfig",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "host",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "mysql",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Generates a grid configuration based on the table structure and columns options.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$host"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$engine"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Generates a grid configuration based on the table structure and columns options.\n   *\n   * @param string $table\n   * @param string $db\n   * @param string $host\n   * @param string $engine\n   *\n   * @return array|null\n   *\/"
        },
        "addDatabase": {
            "name": "addDatabase",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addDatabase(string $name, string $hostId): ?string\n  {\n    if (!bbn\\Str::isUid($hostId)) {\n      throw new \\Exception(_(\"Invalid host ID\"));\n    }\n    else if (!$this->o->exists($hostId)) {\n      throw new \\Exception(X::_(\"Impossible to find the host with ID \\\"%s\\\"\", $hostId));\n    }\n\n    if (!($idTemplate = $this->o->getTemplateId('database'))) {\n      throw new \\Exception(X::_(\"Impossible to find the template \\\"%s\\\"\", 'database'));\n    }\n\n    if (!($engineId = $this->engineIdFromHost($hostId))) {\n      throw new \\Exception(X::_(\"Impossible to find the engine ID for the host \\\"%s\\\"\", $hostId));\n    }\n\n    if ($idDbs = $this->o->fromCode('dbs', $engineId)) {\n      if ($this->o->fromCode($name, $idDbs)) {\n        throw new \\Exception(X::_(\"The database \\\"%s\\\" already exists in the options\", $name));\n      }\n\n      $optCfg = $this->o->getClassCfg();\n      $optFields = $optCfg['arch']['options'];\n      if ($idDb = $this->o->add([\n        $optFields['id_parent'] => $idDbs,\n        $optFields['id_alias'] => $idTemplate,\n        $optFields['text'] => $name,\n        $optFields['code'] => $name\n      ])) {\n        $this->o->applyTemplate($idDb);\n        if ($idConnections = $this->o->fromCode('connections', $idDb)) {\n          if (!$this->db->count($optCfg['table'], [\n              $optFields['id_parent'] => $idConnections,\n              $optFields['id_alias'] => $hostId\n            ])\n            && ($idConn = $this->o->add([\n              $optFields['id_parent'] => $idConnections,\n              $optFields['id_alias'] => $hostId,\n            ]))\n            && ($pass = new Passwords($this->db))\n            && ($p = $pass->get($hostId))\n          ) {\n            $pass->store($p, $idConn);\n          }\n\n          return $idDb;\n        }\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1782,
            "endLine": 1834,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "addDatabase",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hostId",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "removeDatabase": {
            "name": "removeDatabase",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeDatabase(string $id): int\n  {\n    if (!bbn\\Str::isUid($id)) {\n      throw new \\Exception(_(\"Invalid database ID\"));\n    }\n    else if (!$this->o->exists($id)) {\n      throw new \\Exception(X::_(\"Impossible to find the database with ID \\\"%s\\\"\", $id));\n    }\n\n    return $this->o->removeFull($id);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1837,
            "endLine": 1847,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeDatabase",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "renameDatabase": {
            "name": "renameDatabase",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function renameDatabase(string $id, string $name): bool\n  {\n    if (!bbn\\Str::isUid($id)) {\n      throw new \\Exception(_(\"Invalid database ID\"));\n    }\n    else if (!$this->o->exists($id)) {\n      throw new \\Exception(X::_(\"Impossible to find the database with ID \\\"%s\\\"\", $id));\n    }\n\n    if (empty($name)) {\n      throw new \\Exception(_(\"The database name cannot be empty\"));\n    }\n\n    $r1 = $this->o->setText($id, $name);\n    $r2 = $this->o->setCode($id, $name);\n    return $r1 && $r2;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1850,
            "endLine": 1866,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "renameDatabase",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "duplicateDatabase": {
            "name": "duplicateDatabase",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function duplicateDatabase(string $id, string $name): bool\n  {\n    if (!bbn\\Str::isUid($id)) {\n      throw new \\Exception(_(\"Invalid database ID\"));\n    }\n    else if (!$this->o->exists($id)) {\n      throw new \\Exception(X::_(\"Impossible to find the database with ID \\\"%s\\\"\", $id));\n    }\n\n    if (empty($name)) {\n      throw new \\Exception(_(\"The database name cannot be empty\"));\n    }\n\n    if (($idParent = $this->o->getIdParent($id))\n      && ($idNew = $this->o->duplicate($id, $idParent, true, false, true))\n    ) {\n      $r1 = $this->o->setText($idNew, $name);\n      $r2 = $this->o->setCode($idNew, $name);\n      return $r1 && $r2;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1869,
            "endLine": 1891,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "duplicateDatabase",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addTable": {
            "name": "addTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addTable(string $name, string $dbId, string $hostId): ?string\n  {\n    if (!bbn\\Str::isUid($hostId)) {\n      throw new \\Exception(_(\"Invalid host ID\"));\n    }\n    else if (!$this->o->exists($hostId)) {\n      throw new \\Exception(X::_(\"Impossible to find the host with ID \\\"%s\\\"\", $hostId));\n    }\n\n    if (!($idTemplate = $this->o->getTemplateId('table'))) {\n      throw new \\Exception(X::_(\"Impossible to find the template \\\"%s\\\"\", 'table'));\n    }\n\n    if ($idTables = $this->o->fromCode('tables', $dbId)) {\n      if ($this->o->fromCode($name, $idTables)) {\n        throw new \\Exception(X::_(\"The table \\\"%s\\\" already exists in the options\", $name));\n      }\n\n      $optCfg = $this->o->getClassCfg();\n      $optFields = $optCfg['arch']['options'];\n      if ($idTable = $this->o->add([\n        $optFields['id_parent'] => $idTables,\n        $optFields['id_alias'] => $idTemplate,\n        $optFields['text'] => $name,\n        $optFields['code'] => $name\n      ])) {\n        $this->o->applyTemplate($idTable);\n        return $idTable;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1894,
            "endLine": 1926,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "addTable",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dbId",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hostId",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "infoDb": {
            "name": "infoDb",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function infoDb(string $dbName, string $hostId, string $engine): ?array\n  {\n    if (!Str::isUid($hostId)) {\n      $hostId = $this->hostId($hostId, $engine);\n    }\n\n    if (!empty($hostId)\n      && ($engine = Str::isUid($engine) ? $this->engineCode($engine) : $engine)\n      && ($engineId = $this->engineId($engine))\n    ) {\n      $dbId = $this->dbId($dbName, $hostId, $engine);\n      try {\n        $conn = $this->connection($hostId, $engine, $dbName);\n      }\n      catch (\\Exception $e) {}\n\n      $r = X::mergeArrays(\n        !empty($dbId) ? ($this->fullDb($dbId, $hostId, $engineId) ?: []) : static::$dbProps,\n        [\n          'id' => $dbId,\n          'name' => $dbName,\n          'text' => $dbName,\n          'engine' => $engine,\n          'id_engine' => $engineId,\n          'host' => $this->hostCode($hostId),\n          'id_host' => $hostId,\n          'is_real' => !empty($conn),\n          'is_virtual' => !empty($dbId),\n          'num_real_tables' => $conn ? count($conn->getTables($dbName)) : 0,\n          'num_real_procedures' => 0,\n          'num_real_functions' => 0,\n          'size' => $conn ? $conn->dbSize($dbName) : 0,\n          'charset' => $conn ? $conn->getDatabaseCharset($dbName) : '',\n          'collation' => $conn ? $conn->getDatabaseCollation($dbName) : '',\n          'last_check' => date('Y-m-d H:i:s')\n        ]\n      );\n\n      return $r;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1929,
            "endLine": 1971,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "infoDb",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "dbName",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hostId",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "infoTable": {
            "name": "infoTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Database.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function infoTable(string $tableName, string $dbName, string $hostId, string $engine): ?array\n  {\n    if (!Str::isUid($hostId)) {\n      $hostId = $this->hostId($hostId, $engine);\n    }\n\n    if (!empty($hostId)\n      && ($engine = Str::isUid($engine) ? $this->engineCode($engine) : $engine)\n      && ($engineId = $this->engineId($engine))\n    ) {\n      $dbId = $this->dbId($dbName, $hostId, $engine);\n      $tableId = $this->tableId($tableName, $dbId ?: $dbName, $hostId, $engine);\n      $isReal = false;\n      try {\n        if ($conn = $this->connection($hostId, $engine, $dbName)) {\n          $isReal = $conn->tableExists($tableName);\n        }\n      }\n      catch (\\Exception $e) {}\n\n      $r = X::mergeArrays(\n        !empty($tableId) ? ($this->fullTable($tableId, $dbId ?: $dbName, $hostId, $engineId) ?: []) : static::$tableProps,\n        [\n          'id' => $tableId,\n          'name' => $tableName,\n          'text' => $tableName,\n          'engine' => $engine,\n          'id_engine' => $engineId,\n          'host' => $this->hostCode($hostId),\n          'id_host' => $hostId,\n          'database' => $dbName,\n          'id_database' => $dbId,\n          'is_real' => $isReal,\n          'is_virtual' => !empty($tableId),\n          'num_real_columns' => $isReal ? count($conn->getColumns($tableName)) : 0,\n          'num_real_keys' => $isReal ? count($conn->getKeys($tableName)) : 0,\n          'size' => $isReal ? $conn->tableSize($tableName) : 0,\n          'charset' => $isReal ? $conn->getTableCharset($tableName) : '',\n          'collation' => $isReal ? $conn->getTableCollation($tableName) : '',\n          'last_check' => date('Y-m-d H:i:s')\n        ]\n      );\n      return $r;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1974,
            "endLine": 2020,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "shortName": "infoTable",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "tableName",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dbName",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hostId",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_cache_name": {
            "name": "_cache_name",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "\tprotected function _cache_name($uid, $method = '', string $locale = ''){\n    if ( is_array($uid) ){\n      $uid = md5(serialize($uid));\n    }\n    else if ( is_object($uid) ){\n      $uid = md5(json_encode($uid));\n    }\n\t\treturn $this->_cache_prefix.(string)$uid.\n\t\t\t(empty($method) ? '' : '-'.(string)$method).\n\t\t\t(empty($locale) ? '' : '-'.(string)$locale);\n\t}",
            "parent": {
                "name": "_cache_name",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "\tprotected function _cache_name($uid, $method = '', string $locale = ''){\n    if ( is_array($uid) ){\n      $uid = md5(serialize($uid));\n    }\n    else if ( is_object($uid) ){\n      $uid = md5(json_encode($uid));\n    }\n\t\treturn $this->_cache_prefix.(string)$uid.\n\t\t\t(empty($method) ? '' : '-'.(string)$method).\n\t\t\t(empty($locale) ? '' : '-'.(string)$locale);\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 35,
                "endLine": 45,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "_cache_name",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 2,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 35,
            "endLine": 45,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "_cache_name",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "cacheDeleteAll": {
            "name": "cacheDeleteAll",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheDeleteAll(){\n\t\t$this->cacher->deleteAll($this->_cache_prefix);\n\t\treturn $this;\n\t}",
            "parent": {
                "name": "cacheDeleteAll",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheDeleteAll(){\n\t\t$this->cacher->deleteAll($this->_cache_prefix);\n\t\treturn $this;\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 47,
                "endLine": 50,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "cacheDeleteAll",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 47,
            "endLine": 50,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheDeleteAll",
            "returns": [],
            "arguments": []
        },
        "cacheDelete": {
            "name": "cacheDelete",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheDelete($uid){\n\t\t$this->cacher->deleteAll($this->_cache_name($uid));\n\t\treturn $this;\n\t}",
            "parent": {
                "name": "cacheDelete",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheDelete($uid){\n\t\t$this->cacher->deleteAll($this->_cache_name($uid));\n\t\treturn $this;\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 52,
                "endLine": 55,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheDelete",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 52,
            "endLine": 55,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheDelete",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "cacheGet": {
            "name": "cacheGet",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheGet($uid, $method = '', $ttl = 0){\n\t\treturn $this->cacher->get($this->_cache_name($uid, $method), $ttl);\n\t}",
            "parent": {
                "name": "cacheGet",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheGet($uid, $method = '', $ttl = 0){\n\t\treturn $this->cacher->get($this->_cache_name($uid, $method), $ttl);\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 59,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheGet",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 57,
            "endLine": 59,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheGet",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheGetLocale": {
            "name": "cacheGetLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheGetLocale($uid, string $locale, $method = '', $ttl = 0){\n\t\treturn $this->cacher->get($this->_cache_name($uid, $method, $locale), $ttl);\n\t}",
            "parent": {
                "name": "cacheGetLocale",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheGetLocale($uid, string $locale, $method = '', $ttl = 0){\n\t\treturn $this->cacher->get($this->_cache_name($uid, $method, $locale), $ttl);\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 61,
                "endLine": 63,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheGetLocale",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 61,
            "endLine": 63,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetLocale",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheSet": {
            "name": "cacheSet",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheSet($uid, $method = '', $data = null, $ttl = 0){\n\t\t$this->cacher->set($this->_cache_name($uid, $method), $data, $ttl);\n\t\treturn $this;\n\t}",
            "parent": {
                "name": "cacheSet",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheSet($uid, $method = '', $data = null, $ttl = 0){\n\t\t$this->cacher->set($this->_cache_name($uid, $method), $data, $ttl);\n\t\treturn $this;\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 65,
                "endLine": 68,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheSet",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "data",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 65,
            "endLine": 68,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheSet",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheSetLocale": {
            "name": "cacheSetLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheSetLocale($uid, string $locale, $method = '', $data = null, $ttl = 0){\n\t\t$this->cacher->set($this->_cache_name($uid, $method, $locale), $data, $ttl);\n\t\treturn $this;\n\t}",
            "parent": {
                "name": "cacheSetLocale",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheSetLocale($uid, string $locale, $method = '', $data = null, $ttl = 0){\n\t\t$this->cacher->set($this->_cache_name($uid, $method, $locale), $data, $ttl);\n\t\treturn $this;\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 70,
                "endLine": 73,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 5,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheSetLocale",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "data",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 4,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 70,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheSetLocale",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheGetSet": {
            "name": "cacheGetSet",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheGetSet(callable $fn, $uid, $method = '', $ttl = 0){\n\t\t$cn = $this->_cache_name($uid, $method);\n\t\treturn $this->cacher->getSet($fn, $cn, $ttl);\n\t}",
            "parent": {
                "name": "cacheGetSet",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheGetSet(callable $fn, $uid, $method = '', $ttl = 0){\n\t\t$cn = $this->_cache_name($uid, $method);\n\t\treturn $this->cacher->getSet($fn, $cn, $ttl);\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 75,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheGetSet",
                "returns": [],
                "arguments": [
                    {
                        "name": "fn",
                        "position": 0,
                        "type": "callable",
                        "type_arr": [
                            "callable"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "uid",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 75,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetSet",
            "returns": [],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheGetSetLocale": {
            "name": "cacheGetSetLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheGetSetLocale(callable $fn, $uid, string $locale, $method = '', $ttl = 0){\n\t\t$cn = $this->_cache_name($uid, $method, $locale);\n\t\treturn $this->cacher->getSet($fn, $cn, $ttl);\n\t}",
            "parent": {
                "name": "cacheGetSetLocale",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheGetSetLocale(callable $fn, $uid, string $locale, $method = '', $ttl = 0){\n\t\t$cn = $this->_cache_name($uid, $method, $locale);\n\t\treturn $this->cacher->getSet($fn, $cn, $ttl);\n\t}",
                "parent": false,
                "trait": false,
                "startLine": 80,
                "endLine": 83,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 5,
                "numberOfRequiredParameters": 3,
                "shortName": "cacheGetSetLocale",
                "returns": [],
                "arguments": [
                    {
                        "name": "fn",
                        "position": 0,
                        "type": "callable",
                        "type_arr": [
                            "callable"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "uid",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 2,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 4,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 80,
            "endLine": 83,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 3,
            "shortName": "cacheGetSetLocale",
            "returns": [],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheHas": {
            "name": "cacheHas",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheHas($uid, $method = '', $ttl = 0){\n\n    return $this->cacheGet($uid, $method, $ttl) ? true : false;\n  }",
            "parent": {
                "name": "cacheHas",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheHas($uid, $method = '', $ttl = 0){\n\n    return $this->cacheGet($uid, $method, $ttl) ? true : false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 85,
                "endLine": 88,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheHas",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 85,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheHas",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "cacheHasLocale": {
            "name": "cacheHasLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Cache",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function cacheHasLocale($uid, string $locale, $method = '', $ttl = 0){\n\n    return $this->cacheGetLocale($uid, $locale, $method, $ttl) ? true : false;\n  }",
            "parent": {
                "name": "cacheHasLocale",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Cache",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Cache.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\tpublic function cacheHasLocale($uid, string $locale, $method = '', $ttl = 0){\n\n    return $this->cacheGetLocale($uid, $locale, $method, $ttl) ? true : false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 90,
                "endLine": 93,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheHasLocale",
                "returns": [],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 90,
            "endLine": 93,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheHasLocale",
            "returns": [],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 71,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        },
        "optionalInit": {
            "name": "optionalInit",
            "summary": "Returns the option's root ID for the current class based on {@link $option_root_code}",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function optionalInit(array|null $path = null)\n  {\n    if (!self::$optional_is_init) {\n      $opt = Option::getInstance();\n      $cls = false;\n      if (!$opt) {\n        throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n      }\n\n      if (!$path) {\n        $tmp = explode('\\\\', __CLASS__);\n        $cls = strtolower(end($tmp));\n        $path = [$cls, 'appui', 'plugins'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      \/\/X::ddump($path, self::$option_root_id);\n      if (!self::$option_root_id) {\n        if (empty($cls)) {\n          throw new Exception(\"Impossible to find the option \".json_encode($path).\" !!! for \".__CLASS__);\n        }\n\n        throw new Exception(\"Impossible to find the option $cls for \".__CLASS__);\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 41,
            "endLine": 68,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "optionalInit",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the option's root ID for the current class based on {@link $option_root_code}\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the option's root ID for the current class based on {@link $option_root_code}\n   *\n   * @return false|int\n   *\/"
        },
        "initOptionalGlobal": {
            "name": "initOptionalGlobal",
            "summary": "Sets only once all the constants used by the class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function initOptionalGlobal(Option $opt, array|null $path = null)\n  {\n    if (!self::$optional_is_init) {\n      if (!$path) {\n        $tmp                   = explode('\\\\', __CLASS__);\n        $cls                   = end($tmp);\n        $path                  = [$cls, 'appui'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      if (!self::$option_root_id) {\n        X::log(\"Impossible to find the option $cls for \".__CLASS__, 'errors');\n        return;\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 78,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "initOptionalGlobal",
            "returns": [],
            "arguments": [
                {
                    "name": "opt",
                    "position": 0,
                    "type": "bbn\\Appui\\Option",
                    "type_arr": [
                        "bbn\\Appui\\Option"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets only once all the constants used by the class.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Option",
                        "name": "$opt"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets only once all the constants used by the class.\n   *\n   * @param Option $opt\n   * @param array             $path\n   * @return void\n   *\/"
        },
        "initOptional": {
            "name": "initOptional",
            "summary": "Defines the options prop and launches the static init method.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initOptional(array|null $path = null)\n  {\n    $this->options = Option::getInstance();\n    if (!$this->options) {\n      throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n    }\n\n    self::initOptionalGlobal($this->options, $path);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 104,
            "endLine": 112,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initOptional",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Defines the options prop and launches the static init method.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Defines the options prop and launches the static init method.\n   *\n   * @param array $path\n   * @return void\n   *\/"
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionRoot()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 115,
            "endLine": 119,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionRoot",
            "returns": [],
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsObject(): Option\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 122,
            "endLine": 130,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsObject",
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionId(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fromCode(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 139,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionId",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns The option's ID of a category, i.e. direct children of option's root\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns The option's ID of a category, i.e. direct children of option's root\n   *\n   * @param string $code\n   * @return int|false\n   *\/"
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsIds(...$codes): array\n  {\n    $codes[] = self::getOptionRoot();\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...$codes),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 152,
            "endLine": 163,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsIds",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Undocumented function\n",
                "params": [],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Check it, it doesn't seem ok"
                }
            },
            "comments": "  \/**\n   * Undocumented function\n   *\n   * @todo Check it, it doesn't seem ok\n   * @return array\n   *\/"
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTree(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return ($tree = self::getOptionsObject()->fullTree(...$codes)) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 166,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTree",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTreeRef": {
            "name": "getOptionsTreeRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTreeRef(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return ($tree = self::getOptionsObject()->fullTreeRef(...$codes)) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 173,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTreeRef",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptions(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fullOptions(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 180,
            "endLine": 184,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptions",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getSimpleOptions": {
            "name": "getSimpleOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getSimpleOptions(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->options(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 187,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getSimpleOptions",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsRef": {
            "name": "getOptionsRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsRef(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fullOptionsRef(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 194,
            "endLine": 198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsRef",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOption(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->option(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 201,
            "endLine": 205,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOption",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValue(string|array $id, string $text = 'text', string $value = 'value', ...$additionalFields): array\n  {\n    if (is_string($id) && !Str::isUid($id)) {\n      $id = [$id];\n    }\n\n    if (is_array($id)) {\n      $id[] = self::getOptionRoot();\n    }\n\n    return $id ? self::getOptionsObject()->textValueOptions($id, $text, $value, ...$additionalFields) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 208,
            "endLine": 219,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTextValue",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": ""
                },
                {
                    "name": "additionalFields",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTextValueRef": {
            "name": "getOptionsTextValueRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Database",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValueRef(string|array $id, string $text = 'text', string $value = 'value', ...$additionalFields): array\n  {\n    if (is_string($id) && !Str::isUid($id)) {\n      $id = self::getOptionId($id);\n    }\n\n    return $id ? self::getOptionsObject()->textValueOptionsRef($id, $text, $value, ...$additionalFields) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 222,
            "endLine": 229,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTextValueRef",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": ""
                },
                {
                    "name": "additionalFields",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "o": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Database"
            },
            "declaring_trait": "bbn\\Appui\\Database",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The option object.\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "option"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "pw": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Database"
            },
            "declaring_trait": "bbn\\Appui\\Database",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The passwords object.\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "passwords"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "currentConn": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Database"
            },
            "declaring_trait": "bbn\\Appui\\Database",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "The current db connection object\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Db"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "connections": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Database"
            },
            "declaring_trait": "bbn\\Appui\\Database",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The last alternative connection made with the connection function.\nThis is a longer description.\n<code>\nI can put code in it\n<\/code>\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Db"
                    }
                ]
            },
            "parent": false,
            "value": {
                "mysql": [],
                "pgsql": [],
                "sqlite": []
            }
        },
        "dbProps": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Database"
            },
            "declaring_trait": "bbn\\Appui\\Database",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": false,
            "value": {
                "id": null,
                "name": null,
                "text": null,
                "engine": null,
                "id_engine": null,
                "id_host": null,
                "num_tables": 0,
                "num_connections": 0,
                "num_procedures": 0,
                "num_functions": 0,
                "pcolumns": []
            }
        },
        "tableProps": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Database"
            },
            "declaring_trait": "bbn\\Appui\\Database",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": false,
            "value": {
                "id": null,
                "name": null,
                "text": null,
                "engine": null,
                "id_engine": null,
                "id_host": null,
                "database": null,
                "id_database": null,
                "num_columns": 0,
                "num_keys": 0,
                "num_constraints": 0
            }
        },
        "alias": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "string",
            "declaring": {
                "name": "bbn\\Appui\\Database"
            },
            "declaring_trait": "bbn\\Appui\\Database",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "_cache_prefix": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "string",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Cache"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Cache",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": {
                "name": "_cache_prefix",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "string",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Cache"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Cache",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "@var string",
                    "tags": []
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "cacher": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "bbn\\Cache",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Cache"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Cache",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var $cacher cache",
                "tags": []
            },
            "parent": {
                "name": "cacher",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "bbn\\Cache",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Cache"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Cache",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "@var $cacher cache",
                    "tags": []
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "bbn\\Db",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Cache"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Cache",
            "promoted": true,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "db",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "bbn\\Db",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Cache"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Cache",
                "promoted": true,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": null
            },
            "value": null
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "optional_is_init": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Database"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Set as true from the moment a first instance has been initiated and has defined the constants."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "option_root_id": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Database"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The ID of the root option"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "options": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Database"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Option",
                        "description": "The Option object"
                    }
                ]
            },
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "dbProps": {
            "id": null,
            "name": null,
            "text": null,
            "engine": null,
            "id_engine": null,
            "id_host": null,
            "num_tables": 0,
            "num_connections": 0,
            "num_procedures": 0,
            "num_functions": 0,
            "pcolumns": []
        },
        "tableProps": {
            "id": null,
            "name": null,
            "text": null,
            "engine": null,
            "id_engine": null,
            "id_host": null,
            "database": null,
            "id_database": null,
            "num_columns": 0,
            "num_keys": 0,
            "num_constraints": 0
        },
        "optional_is_init": false,
        "option_root_id": null
    },
    "constants": null,
    "uses": {
        "bbn": "bbn",
        "bbn\\Str": "Str",
        "bbn\\X": "X",
        "bbn\\Db": "Db",
        "bbn\\Appui\\Passwords": "Passwords",
        "ValueError": "ValueError"
    },
    "dummyComments": [
        "\/**\n * Created by PhpStorm.\n * User: BBN\n * Date: 20\/02\/2017\n * Time: 01:39\n *\/"
    ],
    "summary": "",
    "description": "",
    "description_parts": []
}