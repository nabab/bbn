{
    "doc": {
        "description": "A RSS reader, writer and manager.\n\nParser based on https:\/\/github.com\/dg\/rss-php\nRSS for PHP - small and easy-to-use library for consuming an RSS Feed.\n",
        "tags": {
            "copyright": "Copyright (c) 2008 David Grudl",
            "license": "MIT",
            "version": "1.5"
        }
    },
    "name": "bbn\\Appui\\Feed",
    "namespace": true,
    "realName": "Feed",
    "realNamespace": "bbn\\Appui",
    "traits": [
        "bbn\\Models\\Tts\\Optional"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Feed.php",
    "startLine": 19,
    "endLine": 271,
    "numMethods": 26,
    "numProperties": 7,
    "numConstants": 0,
    "numStaticProperties": 5,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "cacheExpire": "1 day",
        "cacheDir": null,
        "userAgent": "FeedFetcher-Google",
        "optional_is_init": false,
        "option_root_id": null,
        "xml": null,
        "options": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Feed",
    "contentConstructor": null,
    "methods": {
        "load": {
            "name": "load",
            "summary": "Loads RSS or Atom feed.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Feed.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "\tpublic static function load($url, $user = null, $pass = null)\n\t{\n\t\t$xml = self::loadXml($url, $user, $pass);\n\t\tif ($xml->channel) {\n\t\t\treturn self::fromRss($xml);\n\t\t} else {\n\t\t\treturn self::fromAtom($xml);\n\t\t}\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 44,
            "endLine": 52,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "load",
            "returns": [],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string"
                },
                {
                    "name": "user",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "string"
                },
                {
                    "name": "pass",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "string"
                }
            ],
            "doc": {
                "description": "Loads RSS or Atom feed.\n",
                "params": [
                    {
                        "tag": "param",
                        "description": "string"
                    },
                    {
                        "tag": "param",
                        "description": "string"
                    },
                    {
                        "tag": "param",
                        "description": "string"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n\t * Loads RSS or Atom feed.\n\t * @param  string\n\t * @param  string\n\t * @param  string\n\t * @return Feed\n\t * @throws Exception\n\t *\/"
        },
        "loadRss": {
            "name": "loadRss",
            "summary": "Loads RSS feed.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Feed.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "\tpublic static function loadRss($url, $user = null, $pass = null)\n\t{\n\t\treturn self::fromRss(self::loadXml($url, $user, $pass));\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 63,
            "endLine": 66,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "loadRss",
            "returns": [],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string  RSS feed URL"
                },
                {
                    "name": "user",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "string  optional user name"
                },
                {
                    "name": "pass",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "string  optional password"
                }
            ],
            "doc": {
                "description": "Loads RSS feed.\n",
                "params": [
                    {
                        "tag": "param",
                        "description": "string  RSS feed URL"
                    },
                    {
                        "tag": "param",
                        "description": "string  optional user name"
                    },
                    {
                        "tag": "param",
                        "description": "string  optional password"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n\t * Loads RSS feed.\n\t * @param  string  RSS feed URL\n\t * @param  string  optional user name\n\t * @param  string  optional password\n\t * @return Feed\n\t * @throws Exception\n\t *\/"
        },
        "loadAtom": {
            "name": "loadAtom",
            "summary": "Loads Atom feed.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Feed.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "\tpublic static function loadAtom($url, $user = null, $pass = null)\n\t{\n\t\treturn self::fromAtom(self::loadXml($url, $user, $pass));\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 77,
            "endLine": 80,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "loadAtom",
            "returns": [],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string  Atom feed URL"
                },
                {
                    "name": "user",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "string  optional user name"
                },
                {
                    "name": "pass",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "string  optional password"
                }
            ],
            "doc": {
                "description": "Loads Atom feed.\n",
                "params": [
                    {
                        "tag": "param",
                        "description": "string  Atom feed URL"
                    },
                    {
                        "tag": "param",
                        "description": "string  optional user name"
                    },
                    {
                        "tag": "param",
                        "description": "string  optional password"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n\t * Loads Atom feed.\n\t * @param  string  Atom feed URL\n\t * @param  string  optional user name\n\t * @param  string  optional password\n\t * @return Feed\n\t * @throws Exception\n\t *\/"
        },
        "fromRss": {
            "name": "fromRss",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Feed.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "\tprivate static function fromRss(SimpleXMLElement $xml)\n\t{\n\t\tif (!$xml->channel) {\n\t\t\tthrow new Exception('Invalid feed.');\n\t\t}\n\n\t\tself::adjustNamespaces($xml);\n\n\t\tforeach ($xml->channel->item as $item) {\n\t\t\t\/\/ converts namespaces to dotted tags\n\t\t\tself::adjustNamespaces($item);\n\n\t\t\t\/\/ generate 'url' & 'timestamp' tags\n\t\t\t$item->url = (string) $item->link;\n\t\t\tif (isset($item->{'dc:date'})) {\n\t\t\t\t$item->timestamp = strtotime($item->{'dc:date'});\n\t\t\t} elseif (isset($item->pubDate)) {\n\t\t\t\t$item->timestamp = strtotime($item->pubDate);\n\t\t\t}\n\t\t}\n\t\t$feed = new self;\n\t\t$feed->xml = $xml->channel;\n\t\treturn $feed;\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 83,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "fromRss",
            "returns": [],
            "arguments": [
                {
                    "name": "xml",
                    "position": 0,
                    "type": "SimpleXMLElement",
                    "type_arr": [
                        "SimpleXMLElement"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fromAtom": {
            "name": "fromAtom",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Feed.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "\tprivate static function fromAtom(SimpleXMLElement $xml)\n\t{\n\t\tif (!in_array('http:\/\/www.w3.org\/2005\/Atom', $xml->getDocNamespaces(), true)\n\t\t\t&& !in_array('http:\/\/purl.org\/atom\/ns#', $xml->getDocNamespaces(), true)\n\t\t) {\n\t\t\tthrow new Exception('Invalid feed.');\n\t\t}\n\n\t\t\/\/ generate 'url' & 'timestamp' tags\n\t\tforeach ($xml->entry as $entry) {\n\t\t\t$entry->url = (string) $entry->link['href'];\n\t\t\t$entry->timestamp = strtotime($entry->updated);\n\t\t}\n\t\t$feed = new self;\n\t\t$feed->xml = $xml;\n\t\treturn $feed;\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 109,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "fromAtom",
            "returns": [],
            "arguments": [
                {
                    "name": "xml",
                    "position": 0,
                    "type": "SimpleXMLElement",
                    "type_arr": [
                        "SimpleXMLElement"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "__get": {
            "name": "__get",
            "summary": "Returns property value. Do not call directly.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Feed.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function __get($name)\n\t{\n\t\treturn $this->xml->{$name};\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 133,
            "endLine": 136,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "__get",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string  tag name"
                }
            ],
            "doc": {
                "description": "Returns property value. Do not call directly.\n",
                "params": [
                    {
                        "tag": "param",
                        "description": "string  tag name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n\t * Returns property value. Do not call directly.\n\t * @param  string  tag name\n\t * @return SimpleXMLElement\n\t *\/"
        },
        "__set": {
            "name": "__set",
            "summary": "Sets value of a property. Do not call directly.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Feed.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function __set($name, $value)\n\t{\n\t\tthrow new Exception(\"Cannot assign to a read-only property '$name'.\");\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 145,
            "endLine": 148,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "__set",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string  property name"
                },
                {
                    "name": "value",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "mixed   property value"
                }
            ],
            "doc": {
                "description": "Sets value of a property. Do not call directly.\n",
                "params": [
                    {
                        "tag": "param",
                        "description": "string  property name"
                    },
                    {
                        "tag": "param",
                        "description": "mixed   property value"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n\t * Sets value of a property. Do not call directly.\n\t * @param  string  property name\n\t * @param  mixed   property value\n\t * @return void\n\t *\/"
        },
        "toArray": {
            "name": "toArray",
            "summary": "Converts a SimpleXMLElement into an array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Feed.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function toArray(SimpleXMLElement $xml = null)\n\t{\n\t\tif ($xml === null) {\n\t\t\t$xml = $this->xml;\n\t\t}\n\n\t\tif (!$xml->children()) {\n\t\t\treturn (string) $xml;\n\t\t}\n\n\t\t$arr = [];\n\t\tforeach ($xml->children() as $tag => $child) {\n\t\t\tif (count($xml->$tag) === 1) {\n\t\t\t\t$arr[$tag] = $this->toArray($child);\n\t\t\t} else {\n\t\t\t\t$arr[$tag][] = $this->toArray($child);\n\t\t\t}\n\t\t}\n\n\t\treturn $arr;\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 156,
            "endLine": 176,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "toArray",
            "returns": [],
            "arguments": [
                {
                    "name": "xml",
                    "position": 0,
                    "type": "null|SimpleXMLElement",
                    "type_arr": [
                        "null",
                        "SimpleXMLElement"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "SimpleXMLElement"
                }
            ],
            "doc": {
                "description": "Converts a SimpleXMLElement into an array.\n",
                "params": [
                    {
                        "tag": "param",
                        "description": "SimpleXMLElement"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n\t * Converts a SimpleXMLElement into an array.\n\t * @param  SimpleXMLElement\n\t * @return array\n\t *\/"
        },
        "loadXml": {
            "name": "loadXml",
            "summary": "Load XML from cache or HTTP.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Feed.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "\tprivate static function loadXml($url, $user, $pass)\n\t{\n\t\t$e = self::$cacheExpire;\n\t\t$cacheFile = self::$cacheDir . '\/feed.' . md5(serialize(func_get_args())) . '.xml';\n\n\t\tif (self::$cacheDir\n\t\t\t&& (time() - @filemtime($cacheFile) <= (is_string($e) ? strtotime($e) - time() : $e))\n\t\t\t&& $data = @file_get_contents($cacheFile)\n\t\t) {\n\t\t\t\/\/ ok\n\t\t} elseif ($data = trim(self::httpRequest($url, $user, $pass))) {\n\t\t\tif (self::$cacheDir) {\n\t\t\t\tfile_put_contents($cacheFile, $data);\n\t\t\t}\n\t\t} elseif (self::$cacheDir && $data = @file_get_contents($cacheFile)) {\n\t\t\t\/\/ ok\n\t\t} else {\n\t\t\tthrow new Exception('Cannot load feed.');\n\t\t}\n\n\t\treturn new SimpleXMLElement($data, LIBXML_NOWARNING | LIBXML_NOERROR | LIBXML_NOCDATA);\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 187,
            "endLine": 208,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "loadXml",
            "returns": [],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string"
                },
                {
                    "name": "user",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string"
                },
                {
                    "name": "pass",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string"
                }
            ],
            "doc": {
                "description": "Load XML from cache or HTTP.\n",
                "params": [
                    {
                        "tag": "param",
                        "description": "string"
                    },
                    {
                        "tag": "param",
                        "description": "string"
                    },
                    {
                        "tag": "param",
                        "description": "string"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n\t * Load XML from cache or HTTP.\n\t * @param  string\n\t * @param  string\n\t * @param  string\n\t * @return SimpleXMLElement\n\t * @throws Exception\n\t *\/"
        },
        "httpRequest": {
            "name": "httpRequest",
            "summary": "Process HTTP request.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Feed.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "\tprivate static function httpRequest($url, $user, $pass)\n\t{\n\t\tif (extension_loaded('curl')) {\n\t\t\t$curl = curl_init();\n\t\t\tcurl_setopt($curl, CURLOPT_URL, $url);\n\t\t\tif ($user !== null || $pass !== null) {\n\t\t\t\tcurl_setopt($curl, CURLOPT_USERPWD, \"$user:$pass\");\n\t\t\t}\n\t\t\tcurl_setopt($curl, CURLOPT_USERAGENT, self::$userAgent); \/\/ some feeds require a user agent\n\t\t\tcurl_setopt($curl, CURLOPT_HEADER, false);\n\t\t\tcurl_setopt($curl, CURLOPT_TIMEOUT, 20);\n\t\t\tcurl_setopt($curl, CURLOPT_ENCODING, '');\n\t\t\tcurl_setopt($curl, CURLOPT_RETURNTRANSFER, true); \/\/ no echo, just return result\n\t\t\tif (!ini_get('open_basedir')) {\n\t\t\t\tcurl_setopt($curl, CURLOPT_FOLLOWLOCATION, true); \/\/ sometime is useful :)\n\t\t\t}\n\t\t\t$result = curl_exec($curl);\n\t\t\treturn curl_errno($curl) === 0 && curl_getinfo($curl, CURLINFO_HTTP_CODE) === 200\n\t\t\t\t? $result\n\t\t\t\t: false;\n\n\t\t} else {\n\t\t\t$context = null;\n\t\t\tif ($user !== null && $pass !== null) {\n\t\t\t\t$options = [\n\t\t\t\t\t'http' => [\n\t\t\t\t\t\t'method' => 'GET',\n\t\t\t\t\t\t'header' => 'Authorization: Basic ' . base64_encode($user . ':' . $pass) . \"\\r\\n\",\n\t\t\t\t\t],\n\t\t\t\t];\n\t\t\t\t$context = stream_context_create($options);\n\t\t\t}\n\n\t\t\treturn file_get_contents($url, false, $context);\n\t\t}\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 219,
            "endLine": 254,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "httpRequest",
            "returns": [],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string"
                },
                {
                    "name": "user",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string"
                },
                {
                    "name": "pass",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string"
                }
            ],
            "doc": {
                "description": "Process HTTP request.\n",
                "params": [
                    {
                        "tag": "param",
                        "description": "string"
                    },
                    {
                        "tag": "param",
                        "description": "string"
                    },
                    {
                        "tag": "param",
                        "description": "string"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n\t * Process HTTP request.\n\t * @param  string\n\t * @param  string\n\t * @param  string\n\t * @return string|false\n\t * @throws Exception\n\t *\/"
        },
        "adjustNamespaces": {
            "name": "adjustNamespaces",
            "summary": "Generates better accessible namespaced tags.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Feed.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "\tprivate static function adjustNamespaces($el)\n\t{\n\t\tforeach ($el->getNamespaces(true) as $prefix => $ns) {\n\t\t\t$children = $el->children($ns);\n\t\t\tforeach ($children as $tag => $content) {\n\t\t\t\t$el->{$prefix . ':' . $tag} = $content;\n\t\t\t}\n\t\t}\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 262,
            "endLine": 270,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "adjustNamespaces",
            "returns": [],
            "arguments": [
                {
                    "name": "el",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "SimpleXMLElement"
                }
            ],
            "doc": {
                "description": "Generates better accessible namespaced tags.\n",
                "params": [
                    {
                        "tag": "param",
                        "description": "SimpleXMLElement"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n\t * Generates better accessible namespaced tags.\n\t * @param  SimpleXMLElement\n\t * @return void\n\t *\/"
        },
        "optionalInit": {
            "name": "optionalInit",
            "summary": "Returns the option's root ID for the current class based on {@link $option_root_code}",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function optionalInit(array|null $path = null)\n  {\n    if (!self::$optional_is_init) {\n      $opt = Option::getInstance();\n      $cls = false;\n      if (!$opt) {\n        throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n      }\n\n      if (!$path) {\n        $tmp = explode('\\\\', __CLASS__);\n        $cls = strtolower(end($tmp));\n        $path = [$cls, 'appui', 'plugins'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      \/\/X::ddump($path, self::$option_root_id);\n      if (!self::$option_root_id) {\n        if (empty($cls)) {\n          throw new Exception(\"Impossible to find the option \".json_encode($path).\" !!! for \".__CLASS__);\n        }\n\n        throw new Exception(\"Impossible to find the option $cls for \".__CLASS__);\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 41,
            "endLine": 68,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "optionalInit",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the option's root ID for the current class based on {@link $option_root_code}\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the option's root ID for the current class based on {@link $option_root_code}\n   *\n   * @return false|int\n   *\/"
        },
        "initOptionalGlobal": {
            "name": "initOptionalGlobal",
            "summary": "Sets only once all the constants used by the class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function initOptionalGlobal(Option $opt, array|null $path = null)\n  {\n    if (!self::$optional_is_init) {\n      if (!$path) {\n        $tmp                   = explode('\\\\', __CLASS__);\n        $cls                   = end($tmp);\n        $path                  = [$cls, 'appui'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      if (!self::$option_root_id) {\n        X::log(\"Impossible to find the option $cls for \".__CLASS__, 'errors');\n        return;\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 78,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "initOptionalGlobal",
            "returns": [],
            "arguments": [
                {
                    "name": "opt",
                    "position": 0,
                    "type": "bbn\\Appui\\Option",
                    "type_arr": [
                        "bbn\\Appui\\Option"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets only once all the constants used by the class.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Option",
                        "name": "$opt"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets only once all the constants used by the class.\n   *\n   * @param Option $opt\n   * @param array             $path\n   * @return void\n   *\/"
        },
        "initOptional": {
            "name": "initOptional",
            "summary": "Defines the options prop and launches the static init method.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initOptional(array|null $path = null)\n  {\n    $this->options = Option::getInstance();\n    if (!$this->options) {\n      throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n    }\n\n    self::initOptionalGlobal($this->options, $path);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 104,
            "endLine": 112,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initOptional",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Defines the options prop and launches the static init method.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Defines the options prop and launches the static init method.\n   *\n   * @param array $path\n   * @return void\n   *\/"
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionRoot()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 115,
            "endLine": 119,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionRoot",
            "returns": [],
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsObject(): Option\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 122,
            "endLine": 130,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsObject",
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionId(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fromCode(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 139,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionId",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns The option's ID of a category, i.e. direct children of option's root\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns The option's ID of a category, i.e. direct children of option's root\n   *\n   * @param string $code\n   * @return int|false\n   *\/"
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsIds(...$codes): array\n  {\n    $codes[] = self::getOptionRoot();\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...$codes),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 152,
            "endLine": 163,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsIds",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Undocumented function\n",
                "params": [],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Check it, it doesn't seem ok"
                }
            },
            "comments": "  \/**\n   * Undocumented function\n   *\n   * @todo Check it, it doesn't seem ok\n   * @return array\n   *\/"
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTree(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return ($tree = self::getOptionsObject()->fullTree(...$codes)) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 166,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTree",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTreeRef": {
            "name": "getOptionsTreeRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTreeRef(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return ($tree = self::getOptionsObject()->fullTreeRef(...$codes)) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 173,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTreeRef",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptions(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fullOptions(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 180,
            "endLine": 184,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptions",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getSimpleOptions": {
            "name": "getSimpleOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getSimpleOptions(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->options(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 187,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getSimpleOptions",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsRef": {
            "name": "getOptionsRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsRef(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fullOptionsRef(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 194,
            "endLine": 198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsRef",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOption(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->option(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 201,
            "endLine": 205,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOption",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValue(string|array $id, string $text = 'text', string $value = 'value', ...$additionalFields): array\n  {\n    if (is_string($id) && !Str::isUid($id)) {\n      $id = [$id];\n    }\n\n    if (is_array($id)) {\n      $id[] = self::getOptionRoot();\n    }\n\n    return $id ? self::getOptionsObject()->textValueOptions($id, $text, $value, ...$additionalFields) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 208,
            "endLine": 219,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTextValue",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": ""
                },
                {
                    "name": "additionalFields",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTextValueRef": {
            "name": "getOptionsTextValueRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Feed",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValueRef(string|array $id, string $text = 'text', string $value = 'value', ...$additionalFields): array\n  {\n    if (is_string($id) && !Str::isUid($id)) {\n      $id = self::getOptionId($id);\n    }\n\n    return $id ? self::getOptionsObject()->textValueOptionsRef($id, $text, $value, ...$additionalFields) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 222,
            "endLine": 229,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTextValueRef",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": ""
                },
                {
                    "name": "additionalFields",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "cacheExpire": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Feed"
            },
            "declaring_trait": "bbn\\Appui\\Feed",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "@var int",
                "tags": []
            },
            "parent": false,
            "value": "1 day"
        },
        "cacheDir": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Feed"
            },
            "declaring_trait": "bbn\\Appui\\Feed",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "userAgent": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Feed"
            },
            "declaring_trait": "bbn\\Appui\\Feed",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": "FeedFetcher-Google"
        },
        "xml": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Feed"
            },
            "declaring_trait": "bbn\\Appui\\Feed",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var SimpleXMLElement",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "optional_is_init": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Feed"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Set as true from the moment a first instance has been initiated and has defined the constants."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "option_root_id": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Feed"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The ID of the root option"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "options": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Feed"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Option",
                        "description": "The Option object"
                    }
                ]
            },
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "cacheExpire": "1 day",
        "cacheDir": null,
        "userAgent": "FeedFetcher-Google",
        "optional_is_init": false,
        "option_root_id": null
    },
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "SimpleXMLElement": "SimpleXMLElement",
        "bbn\\Models\\Tts\\Optional": "Optional"
    },
    "dummyComments": [
        "\/**\n * A RSS reader, writer and manager.\n * \n * Parser based on https:\/\/github.com\/dg\/rss-php\n * RSS for PHP - small and easy-to-use library for consuming an RSS Feed.\n *\n * @copyright  Copyright (c) 2008 David Grudl\n * @license    MIT\n * @version    1.5\n *\/"
    ],
    "summary": "A RSS reader, writer and manager.",
    "description": "Parser based on https:\/\/github.com\/dg\/rss-php\nRSS for PHP - small and easy-to-use library for consuming an RSS Feed.",
    "description_parts": [
        {
            "type": "text",
            "content": "Parser based on https:\/\/github.com\/dg\/rss-php\nRSS for PHP - small and easy-to-use library for consuming an RSS Feed."
        }
    ]
}