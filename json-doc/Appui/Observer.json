{
    "doc": {
        "description": "Class observer\n",
        "tags": {
            "package": "bbn\\Appui"
        }
    },
    "name": "bbn\\Appui\\Observer",
    "namespace": true,
    "realName": "Observer",
    "realNamespace": "bbn\\Appui",
    "traits": [],
    "interfaces": [],
    "fileName": "\/Appui\/Observer.php",
    "startLine": 18,
    "endLine": 662,
    "numMethods": 30,
    "numProperties": 11,
    "numConstants": 0,
    "numStaticProperties": 3,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "path": null,
        "default_frequency": 60,
        "time_done": false,
        "id_user": null,
        "db": null,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Observer",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "setTimeLimit": {
            "name": "setTimeLimit",
            "summary": "Sets the time limit (to none) once and for all.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function setTimeLimit(): void\n  {\n    if ( !self::$time_done ){\n      set_time_limit(0);\n      self::$time_done = true;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 38,
            "endLine": 44,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "setTimeLimit",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Sets the time limit (to none) once and for all.",
                "tags": []
            },
            "comments": "  \/**\n   * Sets the time limit (to none) once and for all.\n   *\/"
        },
        "getFile": {
            "name": "getFile",
            "summary": "Returns the observer txt file's full path.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function getFile(): string\n  {\n    if ( null === self::$path ){\n      if ( \\defined('BBN_DATA_PATH') ){\n        self::$path = BBN_DATA_PATH;\n      }\n      else{\n        self::$path = __DIR__.'\/';\n      }\n    }\n    return self::$path.'plugins\/appui-cron\/appui-observer.txt';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 51,
            "endLine": 62,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getFile",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the observer txt file's full path.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the observer txt file's full path.\n   *\n   * @return string\n   *\/"
        },
        "_exec": {
            "name": "_exec",
            "summary": "Executes a request (kept in the observer) and returns its (single) result.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _exec($request, $params = null): ?string\n  {\n    if ( is_string($request) && bbn\\Str::isJson($request) ){\n      $request = json_decode($request, true);\n    }\n    if ( is_array($request) ){\n      return $this->_exec_array($request);\n    }\n    return $this->_exec_string($request, $params);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 71,
            "endLine": 80,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_exec",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "request",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The SQL Query to be executed."
                },
                {
                    "name": "params",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The base64 encoded of a JSON string of the parameters to send with the query."
                }
            ],
            "doc": {
                "description": "Executes a request (kept in the observer) and returns its (single) result.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$request",
                        "description": "The SQL Query to be executed."
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$params",
                        "description": "The base64 encoded of a JSON string of the parameters to send with the query."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Executes a request (kept in the observer) and returns its (single) result.\n   *\n   * @param string $request The SQL Query to be executed.\n   * @param string|null $params The base64 encoded of a JSON string of the parameters to send with the query.\n   * @return mixed\n   *\/"
        },
        "_exec_string": {
            "name": "_exec_string",
            "summary": "Executes a request (kept in the observer) and returns its (single) result.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _exec_string(string $request, $params = null): ?string\n  {\n    if ( $this->check() ){\n      $res = !empty($params) ? $this->db->getOne($request, array_map('base64_decode', Json_decode($params))) : $this->db->getOne($request);\n      return md5((string)$res);\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 89,
            "endLine": 96,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_exec_string",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "request",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The SQL Query to be executed."
                },
                {
                    "name": "params",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The base64 encoded of a JSON string of the parameters to send with the query."
                }
            ],
            "doc": {
                "description": "Executes a request (kept in the observer) and returns its (single) result.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$request",
                        "description": "The SQL Query to be executed."
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$params",
                        "description": "The base64 encoded of a JSON string of the parameters to send with the query."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Executes a request (kept in the observer) and returns its (single) result.\n   *\n   * @param string $request The SQL Query to be executed.\n   * @param string|null $params The base64 encoded of a JSON string of the parameters to send with the query.\n   * @return mixed\n   *\/"
        },
        "_exec_array": {
            "name": "_exec_array",
            "summary": "Executes a request (kept in the observer as an array) and returns its (single) result.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _exec_array(array $request): ?string\n  {\n    if ( $this->check() ){\n      return md5((string)$this->db->selectOne($request));\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 104,
            "endLine": 110,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_exec_array",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "request",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The config to be executed."
                }
            ],
            "doc": {
                "description": "Executes a request (kept in the observer as an array) and returns its (single) result.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$request",
                        "description": "The config to be executed."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Executes a request (kept in the observer as an array) and returns its (single) result.\n   *\n   * @param string $request The config to be executed.\n   * @return mixed\n   *\/"
        },
        "sanitizeParams": {
            "name": "sanitizeParams",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function sanitizeParams(array|null $params = null)\n  {\n    return $params ? json_encode(array_map('base64_encode', $params)) : '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 112,
            "endLine": 115,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "sanitizeParams",
            "returns": [],
            "arguments": [
                {
                    "name": "params",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "_get_id": {
            "name": "_get_id",
            "summary": "Returns the ID of an observer with public = 1 and with similar request and params.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_id(string $request, $params): ?string\n  {\n    if ( $this->check() ){\n      if ( $params ){\n        return $this->db->selectOne('bbn_observers', 'id', [\n          'id_string' => $this->_get_id_string($request, $params)\n        ]);\n      }\n      return $this->db->selectOne('bbn_observers', 'id', [\n        'request' => $request,\n        'params' => null\n      ]);\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 124,
            "endLine": 138,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_get_id",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "request",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "params",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the ID of an observer with public = 1 and with similar request and params.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$request"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$params"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of an observer with public = 1 and with similar request and params.\n   *\n   * @param string $request\n   * @param string $params\n   * @return null|string\n   *\/"
        },
        "_get_id_from_user": {
            "name": "_get_id_from_user",
            "summary": "Returns the ID of an observer for the current user and with similar request and params.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_id_from_user(string $request, string|null $params = null): ?string\n  {\n    $r = null;\n    if ($this->id_user && $this->check()) {\n      $cfg = [\n        'field' => 'o.id',\n        'tables' => [\n          'o' => 'bbn_observers'\n        ],\n        'join' => [\n          [\n            'table' => 'bbn_observers',\n            'type' => 'left',\n            'alias' => 'ro',\n            'on' => [\n              [\n                'field' => 'o.id_alias',\n                'operator' => 'eq',\n                'exp' => 'ro.id'\n              ]\n            ]\n          ]\n        ],\n        'where' => [\n          [\n            'field' => 'o.id_user',\n            'value' => $this->id_user\n          ], [\n            'logic' => 'OR',\n            'conditions' => [\n              [\n                'logic' => 'AND',\n                'conditions' => [\n                  [\n                    'field' => 'o.request',\n                    'value' => $request\n                  ], [\n                    'field' => 'o.params',\n                    'operator' => $params ? 'like' : 'isnull'\n                  ]\n                ]\n              ], [\n                'logic' => 'AND',\n                'conditions' => [\n                  [\n                    'field' => 'ro.request',\n                    'value' => $request\n                  ], [\n                    'field' => 'ro.params',\n                    'operator' => $params ? 'like' : 'isnull'\n                  ]\n                ]\n              ]\n            ]\n          ]\n        ]\n      ];\n      if ($params) {\n        $cfg['where'][1]['conditions'][0]['conditions'][1]['value'] = $params;\n        $cfg['where'][1]['conditions'][1]['conditions'][1]['value'] = $params;\n      }\n      $r = $this->db->selectOne($cfg);\n    }\n    return $r;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 147,
            "endLine": 211,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_get_id_from_user",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "request",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "params",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the ID of an observer for the current user and with similar request and params.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$request"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$params"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of an observer for the current user and with similar request and params.\n   *\n   * @param string $request\n   * @param string $params\n   * @return null|string\n   *\/"
        },
        "_get_id_string": {
            "name": "_get_id_string",
            "summary": "Returns the unique string representing the request + the parameters (md5 of concatenated strings).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_id_string(string $request, string|null $params = null): string\n  {\n    return md5($request.($params ?: ''));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 220,
            "endLine": 223,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_get_id_string",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "request",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "params",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the unique string representing the request + the parameters (md5 of concatenated strings).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$request"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$params"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the unique string representing the request + the parameters (md5 of concatenated strings).\n   *\n   * @param string $request\n   * @param array|null $params\n   * @return string\n   *\/"
        },
        "_update_next": {
            "name": "_update_next",
            "summary": "Sets the time of next execution in the observer's main row.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _update_next(string $id, int $frequency): bool\n  {\n    $next = date('Y-m-d H:i:s', Time() + $frequency);\n    $r = (bool)$this->db->update(\n      'bbn_observers', \n      ['next' => $next],\n      [\n        'id' => $id,\n        'id_alias' => null\n      ]\n    );\n    return $r;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 233,
            "endLine": 245,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_update_next",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "frequency",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the time of next execution in the observer's main row.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Add the possibility for expression in db update\/insert\n"
                }
            },
            "comments": "  \/**\n   * Sets the time of next execution in the observer's main row.\n   *\n   * @todo Add the possibility for expression in db update\/insert\n   * \n   * @param $id\n   * @return bbn\\Db\\Query|int\n   *\/"
        },
        "__construct": {
            "name": "__construct",
            "summary": "observer constructor.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(bbn\\Db $db)\n  {\n    $user = \\bbn\\User::getInstance();\n    $this->id_user = $user ? $user->getId() : null;\n    if (defined('BBN_EXTERNAL_USER_ID') && ($this->id_user === BBN_EXTERNAL_USER_ID)) {\n      $this->id_user = null;\n    }\n    parent::__construct($db);\n  }",
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Db",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Db.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function __construct(dbClass $db)\n  {\n    $this->db = $db;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "__construct",
                "returns": [],
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "type_arr": [
                            "bbn\\Db"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ],
                "doc": {
                    "description": "Constructor.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "dbClass",
                            "name": "$db",
                            "description": "A database connection"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Constructor.\n   *\n   * @param dbClass $db A database connection\n   *\/"
            },
            "trait": false,
            "startLine": 251,
            "endLine": 259,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "observer constructor.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "bbn\\Db",
                        "name": "$db"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * observer constructor.\n   * @param bbn\\Db $db\n   *\/"
        },
        "checkResult": {
            "name": "checkResult",
            "summary": "Confronts the current result with the one kept in database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function checkResult($id)\n  {\n    if ( $d = $this->get($id) ){\n      $t = new bbn\\Util\\Timer();\n      $t->start();\n      $res = $this->_exec($d['request'], $d['params']);\n      $duration = (int)ceil($t->stop() * 1000);\n      if ( $res !== $d['result'] ){\n        $this->db->update('bbn_observers', [\n          'result' => $res,\n          'duration' => $duration\n        ], [\n          'id' => $id\n        ]);\n        return false;\n      }\n      return true;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 267,
            "endLine": 285,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "checkResult",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Confronts the current result with the one kept in database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Confronts the current result with the one kept in database.\n   *\n   * @param $id\n   * @return bool\n   *\/"
        },
        "add": {
            "name": "add",
            "summary": "Adds a new observer and returns its id or the id of an existing one.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function add(array $cfg, $check_result = true): ?string\n  {\n    if (\n      $this->id_user &&\n      (null !== $cfg['request']) &&\n      $this->check()\n    ){\n      X::log($cfg, 'observers');\n      $t = new bbn\\Util\\Timer();\n      $t->start();\n      if ( is_string($cfg['request']) ){\n        $params = self::sanitizeParams($cfg['params'] ?? []);\n        $request = $cfg['request'];\n      }\n      else if ( is_array($cfg['request']) ){\n        $params = null;\n        $request = $cfg['request'];\n      }\n      else{\n        return null;\n      }\n      $res = $this->_exec($request, $params);\n      $duration = (int)ceil($t->stop() * 1000);\n      if ( is_array($request) ){\n        $request = json_encode($request);\n      }\n      $id_alias = $this->_get_id($request, $params);\n      X::log([$id_alias, $this->db->last(), $request, $params], 'observers');\n      \/\/die(var_dump($id_alias, $this->db->last(), $request, $params));\n      \/\/ If it is a public observer it will be the id_alias and the main observer\n      if (\n        !$id_alias &&\n        !empty($cfg['public']) &&\n        $this->db->insertIgnore('bbn_observers', [\n          'request' => $request,\n          'params' => $params ?: null,\n          'name' => $cfg['name'] ?? null,\n          'frequency' => empty($cfg['frequency']) ? self::$default_frequency : $cfg['frequency'],\n          'duration' => $duration,\n          'id_user' => null,\n          'public' => 1,\n          'result' => $res\n        ])\n      ){\n        $id_alias = $this->db->lastId();\n      }\n      \/\/ Getting the ID of the observer corresponding to current user\n      if ( $id_obs = $this->_get_id_from_user($request, $params) ){\n        if ($check_result) {\n          $this->checkResult($id_obs);\n        }\n        return $id_obs;\n      }\n      else if ( $id_alias ){\n        if ( $this->db->insertIgnore('bbn_observers', [\n          'id_user' => $this->id_user,\n          'public' => 0,\n          'id_alias' => $id_alias,\n          'next' => null,\n          'result' => $res\n        ]) ){\n          return $this->db->lastId();\n        }\n      }\n      else{\n        if ( $this->db->insertIgnore('bbn_observers', [\n          'request' => $request,\n          'params' => $params ?: null,\n          'name' => $cfg['name'] ?? null,\n          'duration' => $duration,\n          'id_user' => $this->id_user,\n          'public' => 0,\n          'result' => $res\n        ]) ){\n          return $this->db->lastId();\n        }\n      }\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 293,
            "endLine": 372,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "add",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "check_result",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds a new observer and returns its id or the id of an existing one.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Adds a new observer and returns its id or the id of an existing one.\n   *\n   * @param array $cfg\n   * @return null|string\n   *\/"
        },
        "get": {
            "name": "get",
            "summary": "Returns an observer with its alias properties if there is one (except id and result).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function get($id): ?array\n  {\n    if ($this->check() &&\n        ($d = $this->db->rselect('bbn_observers', [], [\n          'id' => $id\n        ]))\n    ) {\n      if ( !$d['id_alias'] ){\n        return $d;\n      }\n      if ($alias = $this->db->rselect('bbn_observers', [], [\n        'id' => $d['id_alias']\n      ])) {\n        $alias['id'] = $d['id'];\n        $alias['result'] = $d['result'];\n        $alias['id_alias'] = $d['id_alias'];\n        return $alias;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 380,
            "endLine": 401,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "get",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an observer with its alias properties if there is one (except id and result).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an observer with its alias properties if there is one (except id and result).\n   *\n   * @param $id\n   * @return array|null\n   *\/"
        },
        "getResult": {
            "name": "getResult",
            "summary": "Returns the result of an observer's request from its UID.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getResult($id, bool $now = false): ?string\n  {\n    $r = null;\n    if ($this->check()) {\n      if ($now && ($o = $this->get($id))) {\n        return $this->_exec($o['request'], $o['params']);\n      }\n      $r = $this->db->selectOne(\n        [\n          'tables' => ['o' => 'bbn_observers'],\n          'field' => 'IFNULL(ro.`result`, o.`result`)',\n          'join' => [\n            [\n              'table' => 'bbn_observers',\n              'alias' => 'ro',\n              'type' => 'LEFT',\n              'on' => [\n                [\n                  'field' => 'o.id_alias',\n                  'operator' => '=',\n                  'exp' => 'ro.id'\n                ]\n              ],\n              'where' => [\n                'o.id' => $id\n              ]\n            ]\n          ]\n        ]\n      );\n    }\n    return $r;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 409,
            "endLine": 441,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getResult",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "now",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the result of an observer's request from its UID.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the result of an observer's request from its UID.\n   *\n   * @param $id\n   * @return false|int|string\n   *\/"
        },
        "getList": {
            "name": "getList",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getList(string|null $id_user = null): array\n  {\n    $field = $id_user ? 'o.id_user' : 'public';\n    $now = date('Y-m-d H:i:s');\n    return $this->db->rselectAll([\n      'tables' => ['o' => 'bbn_observers'],\n      'fields' => [\n        'o.id', 'o.id_alias',\n        'request' => 'IFNULL(ro.request, o.request)',\n        'params' => 'IFNULL(ro.params, o.params)',\n        'frequency' => 'IFNULL(ro.frequency, o.frequency)',\n        'result' => 'IFNULL(ro.result, o.result)',\n        'next' => 'IFNULL(ro.next, o.next)'\n      ],\n      'join' => [\n        [\n          'table' => 'bbn_observers',\n          'type' => 'left',\n          'alias' => 'ro',\n          'on' => [\n            [\n              'field' => 'o.id_alias',\n              'exp' => 'ro.id'\n            ]\n          ]\n        ]\n      ],\n      'where' => [\n        [\n          'field' => $id_user ? 'o.id_user' : 'o.public',\n          'operator' => '=',\n          'value' => $id_user ?: 1\n        ], [\n          'logic' => 'OR',\n          'conditions' => [\n            [\n              'logic' => 'AND',\n              'conditions' => [\n                [\n                  'field' => 'o.next',\n                  'operator' => '<',\n                  'value' => $now\n                ], [\n                  'field' => 'o.next',\n                  'operator' => 'isnotnull'\n                ]\n              ]\n            ], [\n              'logic' => 'AND',\n              'conditions' => [\n                [\n                  'field' => 'ro.next',\n                  'operator' => '<',\n                  'value' => $now\n                ], [\n                  'field' => 'ro.next',\n                  'operator' => 'isnotnull'\n                ]\n              ]\n            ]\n          ]\n        ]\n      ]\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 449,
            "endLine": 513,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getList",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "user"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "user"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   *\n   *\n   * @param string|null $id_user\n   * @return array\n   *\/"
        },
        "userDelete": {
            "name": "userDelete",
            "summary": "Deletes the given observer for the current user",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function userDelete($id): int\n  {\n    if ( property_exists($this, 'user') && $this->check() ){\n      return $this->db->delete('bbn_observers', ['id' => $id, 'id_user' => $this->user]);\n    }\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 520,
            "endLine": 526,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "userDelete",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the given observer for the current user\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the given observer for the current user\n   * @param string $id\n   * @return int\n   *\/"
        },
        "isUserActive": {
            "name": "isUserActive",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isUserActive($id_user, $delay = 120): bool\n  {\n    $max = $this->db->selectOne('bbn_users_sessions', 'MAX(bbn_users_sessions.last_activity)', ['id_user' => $id_user]);\n    return $max && (strtotime($max) > (time() - $delay));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 528,
            "endLine": 532,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "isUserActive",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "delay",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 120,
                    "default_name": ""
                }
            ]
        },
        "checkObserver": {
            "name": "checkObserver",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function checkObserver($row): bool\n  {\n    if ($row['id_user'] && (!defined('BBN_USER_EXTERNAL_ID') || ($row['id_user'] !== BBN_EXTERNAL_USER_ID)) && !$this->isUserActive($row['id_user'])) {\n      $this->db->delete('bbn_observers', ['id' => $row['id']]);\n      return false;\n    }\n    else if ($tmp = $this->db->rselectAll('bbn_observers', ['id', 'id_user'], ['id_alias' => $row['id']])) {\n      $aliases = [];\n      foreach ($tmp as $t){\n        if (!$this->isUserActive($t['id_user'])) {\n          $this->db->delete('bbn_observers', ['id' => $t['id']]);\n        }\n        else{\n          $aliases[] = $t;\n        }\n      }\n      if (!count($aliases)) {\n        $this->db->delete('bbn_observers', ['id' => $row['id']]);\n        return false;\n      }\n    }\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 534,
            "endLine": 556,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "checkObserver",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "row",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "deleteOld": {
            "name": "deleteOld",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function deleteOld()\n  {\n    $sql = <<<SQL\nDELETE o1\nFROM bbn_observers AS o1\n  LEFT JOIN bbn_observers AS o2\n    ON o2.id_alias = o1.id\nWHERE o2.id IS NULL\nAND o1.id_user IS NULL\nSQL;\n    $r = $this->db->query($sql);\n    return $r;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 558,
            "endLine": 570,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "deleteOld",
            "returns": [],
            "arguments": []
        },
        "observe": {
            "name": "observe",
            "summary": "Checks the observers, execute their requests if interval is reached, it will stop when it finds differences in the",
            "description": "results, and returns the observers to be updated (meant to be executed from a cron task), indexed by id_user.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "results, and returns the observers to be updated (meant to be executed from a cron task), indexed by id_user."
                }
            ],
            "class": "bbn\\Appui\\Observer",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Observer.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function observe()\n  {\n    if ( $this->check() ){\n      $now = date('Y-m-d H:i:s');\n      $rows = $this->db->rselectAll([\n        'table' => 'bbn_observers',\n        'fields' => ['id', 'id_user', 'request', 'params', 'result', 'frequency'],\n        'where' => [\n          'conditions' => [\n            [\n              'field' => 'id_alias',\n              'operator' => 'isnull'\n            ], [\n              'field' => 'next',\n              'operator' => '<',\n              'value' => $now\n            ]\n          ]\n        ]\n      ]);\n      $diff = [];\n      $timer = new \\bbn\\Util\\Timer();\n      foreach ( $rows as $d ){\n        if ($this->checkObserver($d)) {\n          \/\/ Aliases are the IDs of the observers aliases of the current row\n          $timer->start('exec');\n          $aliases = $this->db->rselectAll('bbn_observers', ['id', 'id_user', 'request', 'params', 'result'], ['id_alias' => $d['id']]);\n          if ( \\bbn\\Str::isJson($d['request']) ){\n            $d['request'] = json_decode($d['request'], true);\n            $real_result = $this->_exec_array($d['request']);\n          }\n          else{\n            $real_result = $this->_exec($d['request'], $d['params']);\n          }\n          X::log([$timer->stop('exec'), $this->db->last()], 'obs_request');\n          \/\/ If the result is different we update the table\n          if ( $real_result !== $d['result'] ){\n            echo '+';\n            $this->db->update('bbn_observers', ['result' => $real_result], ['id' => $d['id']]);\n            \/\/ And if a user is attached to the observer we add it to the result\n            if ( $d['id_user'] ){\n              if ( !isset($diff[$d['id_user']]) ){\n                $diff[$d['id_user']] = [];\n              }\n              $diff[$d['id_user']][] = [\n                'id' => $d['id'],\n                'result' => $real_result\n              ];\n            }\n            \/\/ For each alias we add the entry for the corresponding user...\n            foreach ( $aliases as $a ){\n              \/\/ ...If the result differs\n              if ( $real_result !== $a['result'] ){\n                $this->db->update('bbn_observers', ['result' => $real_result], ['id' => $a['id']]);\n                if ( !isset($diff[$a['id_user']]) ){\n                  $diff[$a['id_user']] = [];\n                }\n                $diff[$a['id_user']][] = [\n                  'id' => $a['id'],\n                  'result' => $real_result\n                ];\n              }\n            }\n          }\n        }\n        \/\/ And we update the next time of execution\n        $this->_update_next($d['id'], $d['frequency']);\n      }\n      echo '.';\n      $this->deleteOld();\n      $this->db->flush();\n      if ( count($diff) ){\n        bbn\\X::dump('Returning diff!', $diff);\n        return $diff;\n      }\n      if ( ob_get_contents() ){\n        ob_end_flush();\n      }\n      return true;\n    }\n\n    \/\/bbn\\X::dump('Canceling observer: '.date('H:i:s Y-m-d'));\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 578,
            "endLine": 661,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "observe",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks the observers, execute their requests if interval is reached, it will stop when it finds differences in the\nresults, and returns the observers to be updated (meant to be executed from a cron task), indexed by id_user.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks the observers, execute their requests if interval is reached, it will stop when it finds differences in the\n   * results, and returns the observers to be updated (meant to be executed from a cron task), indexed by id_user.\n   *\n   * @return array\n   *\/"
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 71,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        }
    },
    "properties": {
        "path": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Observer"
            },
            "declaring_trait": "bbn\\Appui\\Observer",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The path where the observer txt file will be kept, and if deleted\nthe observe function will stop."
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "default_frequency": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Observer"
            },
            "declaring_trait": "bbn\\Appui\\Observer",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": 60
        },
        "time_done": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Observer"
            },
            "declaring_trait": "bbn\\Appui\\Observer",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Indicates if the funciton set_time_limit has been executed."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "id_user": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Observer"
            },
            "declaring_trait": "bbn\\Appui\\Observer",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Db"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Db",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "dbClass"
                    }
                ]
            },
            "parent": {
                "name": "db",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Db"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Db",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "dbClass"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        }
    },
    "staticProperties": {
        "path": null,
        "default_frequency": 60,
        "time_done": false
    },
    "constants": null,
    "uses": {
        "bbn": "bbn",
        "bbn\\X": "X"
    },
    "dummyComments": [
        "\/**\n * Created by PhpStorm.\n * User: BBN\n * Date: 05\/06\/2016\n * Time: 15:32\n *\/",
        "\/**\n * Class observer\n * @package bbn\\Appui\n *\/"
    ],
    "summary": "Class observer",
    "description": "",
    "description_parts": []
}