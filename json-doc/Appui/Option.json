{
    "doc": {
        "description": "An all-in-one hierarchical options management system\n\nThis class allows to manage a hierarchical table of options, including retrieving, editing, adding, and removing options.\nIt also provides functionality for grabbing a whole tree, applying functions on groups of options, and adding user-defined properties.\n",
        "tags": {
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "copyright": "BBN Solutions",
            "since": "Oct 28, 2015, 10:23:55 +0000",
            "category": "Appui x",
            "license": "http:\/\/opensource.org\/licenses\/MIT MIT",
            "version": "0.2"
        }
    },
    "name": "bbn\\Appui\\Option",
    "namespace": true,
    "realName": "Option",
    "realNamespace": "bbn\\Appui",
    "traits": [
        "bbn\\Models\\Tts\\Retriever",
        "bbn\\Models\\Tts\\Cache",
        "bbn\\Models\\Tts\\DbActions",
        "bbn\\Appui\\Option\\Alias",
        "bbn\\Appui\\Option\\Cache",
        "bbn\\Appui\\Option\\Cat",
        "bbn\\Appui\\Option\\Cfg",
        "bbn\\Appui\\Option\\Code",
        "bbn\\Appui\\Option\\I18n",
        "bbn\\Appui\\Option\\Indexed",
        "bbn\\Appui\\Option\\Manip",
        "bbn\\Appui\\Option\\Native",
        "bbn\\Appui\\Option\\Options",
        "bbn\\Appui\\Option\\Parents",
        "bbn\\Appui\\Option\\Path",
        "bbn\\Appui\\Option\\Permission",
        "bbn\\Appui\\Option\\Plugin",
        "bbn\\Appui\\Option\\Prop",
        "bbn\\Appui\\Option\\Ref",
        "bbn\\Appui\\Option\\Root",
        "bbn\\Appui\\Option\\Single",
        "bbn\\Appui\\Option\\Sub",
        "bbn\\Appui\\Option\\Template",
        "bbn\\Appui\\Option\\Tree",
        "bbn\\Appui\\Option\\Write"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Option.php",
    "startLine": 32,
    "endLine": 176,
    "numMethods": 207,
    "numProperties": 36,
    "numConstants": 0,
    "numStaticProperties": 3,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "errors": [],
            "table": "bbn_options",
            "tables": {
                "options": "bbn_options"
            },
            "arch": {
                "options": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "id_alias": "id_alias",
                    "num": "num",
                    "text": "text",
                    "code": "code",
                    "value": "value",
                    "cfg": "cfg"
                }
            }
        },
        "retriever_instance": null,
        "retriever_exists": false,
        "is_init": false,
        "non_selected": [
            "cfg"
        ],
        "class_cfg": null,
        "db": null,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": [],
        "_cache_prefix": null,
        "cache_engine": null,
        "_isInitClassCfg": false,
        "fields": null,
        "class_table": null,
        "class_table_index": null,
        "rootFilterCfg": [],
        "dbTraitRelations": [],
        "dbTraitStructure": [],
        "_local_cache": [],
        "root": null,
        "default": null,
        "templateIds": [],
        "magicTemplateId": null,
        "magicOptionsTemplateId": null,
        "magicPermissionsTemplateId": null,
        "magicPluginTemplateId": null,
        "magicSubpluginTemplateId": null,
        "magicSubOptionsTemplateId": null,
        "magicSubPermissionsTemplateId": null,
        "magicTemplateTemplateId": null,
        "magicAppuiTemplateId": null,
        "magicPluginsTemplateId": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Option",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "getOptions": {
            "name": "getOptions",
            "summary": "Returns the existing instance of the Option class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptions(): self\n  {\n    return self::getInstance();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 96,
            "endLine": 99,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptions",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the existing instance of the Option class.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the existing instance of the Option class.\n   *\n   * @return self\n   *\/"
        },
        "__construct": {
            "name": "__construct",
            "summary": "Constructor for the Option class.",
            "description": "Initializes the class with a database connection object and an optional configuration array.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Initializes the class with a database connection object and an optional configuration array."
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(Db $db, array $cfg = [])\n  {\n    \/\/ Initialize the parent class with the database connection object\n    parent::__construct($db);\n\n    \/\/ Initialize the class configuration\n    $this->initClassCfg($cfg);\n\n    \/\/ Initialize the retriever\n    self::retrieverInit($this);\n  }",
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Db",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Db.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function __construct(dbClass $db)\n  {\n    $this->db = $db;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "__construct",
                "returns": [],
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "type_arr": [
                            "bbn\\Db"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ],
                "doc": {
                    "description": "Constructor.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "dbClass",
                            "name": "$db",
                            "description": "A database connection"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Constructor.\n   *\n   * @param dbClass $db A database connection\n   *\/"
            },
            "trait": false,
            "startLine": 110,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "A database connection object"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "An optional configuration array"
                }
            ],
            "doc": {
                "description": "Constructor for the Option class.\n\nInitializes the class with a database connection object and an optional configuration array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Db",
                        "name": "$db",
                        "description": "A database connection object"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "An optional configuration array"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If there is an error initializing the class"
                }
            },
            "comments": "  \/**\n   * Constructor for the Option class.\n   *\n   * Initializes the class with a database connection object and an optional configuration array.\n   *\n   * @param Db $db A database connection object\n   * @param array $cfg An optional configuration array\n   * @throws Exception If there is an error initializing the class\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks if the class is initialized and the database connection is valid.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check(): bool\n  {\n    \/\/ Check if the class is initialized and the database connection is valid\n    return $this->init() && $this->db->check();\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 127,
            "endLine": 131,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks if the class is initialized and the database connection is valid.\n",
                "params": [],
                "return": "True if the class is initialized and the database connection is valid, false otherwise"
            },
            "comments": "  \/**\n   * Checks if the class is initialized and the database connection is valid.\n   *\n   * @return bool True if the class is initialized and the database connection is valid, false otherwise\n   *\/"
        },
        "exists": {
            "name": "exists",
            "summary": "Checks if an option exists in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function exists(...$codes): bool\n  {\n    \/\/ Check if the option exists using the dbTraitExists method\n    return $this->dbTraitExists(...$codes);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 139,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "exists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The codes of the options to check"
                }
            ],
            "doc": {
                "description": "Checks if an option exists in the database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$codes",
                        "description": "The codes of the options to check"
                    }
                ],
                "return": "True if the option exists, false otherwise"
            },
            "comments": "  \/**\n   * Checks if an option exists in the database.\n   *\n   * @param string ...$codes The codes of the options to check\n   * @return bool True if the option exists, false otherwise\n   *\/"
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the configuration array of the class with the table structure.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getClassCfg(): array\n  {\n    \/\/ Return the class configuration array\n    return $this->class_cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 150,
            "endLine": 154,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getClassCfg",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the configuration array of the class with the table structure.\n",
                "params": [],
                "return": "The configuration array"
            },
            "comments": "  \/**\n   * Returns the configuration array of the class with the table structure.\n   *\n   * @return array The configuration array\n   *\/"
        },
        "count": {
            "name": "count",
            "summary": "Returns the number of children for a given option.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function count(...$codes): ?int\n  {\n    \/\/ Get the ID of the option using the fromCode method\n    $id = $this->fromCode($codes);\n\n    \/\/ Check if the ID is a valid UID\n    if (Str::isUid($id)) {\n      \/\/ Return the number of children for the given option\n      return $this->db->count($this->class_cfg['table'], [$this->fields['id_parent'] => $id]);\n    }\n\n    \/\/ Return null if the option is not found\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 162,
            "endLine": 175,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "count",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Any options accepted by fromCode()"
                }
            ],
            "doc": {
                "description": "Returns the number of children for a given option.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$codes",
                        "description": "Any options accepted by fromCode()"
                    }
                ],
                "return": "The number of children or null if the option is not found"
            },
            "comments": "  \/**\n   * Returns the number of children for a given option.\n   *\n   * @param string ...$codes Any options accepted by fromCode()\n   * @return int|null The number of children or null if the option is not found\n   *\/"
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        },
        "retrieverInit": {
            "name": "retrieverInit",
            "summary": "Initialize the retriever by putting its own instance as static property.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Retriever.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function retrieverInit(self $instance): void\n  {\n    self::$retriever_exists = true;\n    if (!self::$retriever_instance) {\n      self::$retriever_instance = $instance;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Retriever",
            "startLine": 31,
            "endLine": 37,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "retrieverInit",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "instance",
                    "position": 0,
                    "type": "self",
                    "type_arr": [
                        "self"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The instance object."
                }
            ],
            "doc": {
                "description": "Initialize the retriever by putting its own instance as static property.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "self",
                        "name": "$instance",
                        "description": "The instance object."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Initialize the retriever by putting its own instance as static property.\n   *\n   * @param self $instance The instance object.\n   * @return void\n   *\/"
        },
        "getInstance": {
            "name": "getInstance",
            "summary": "Returns the instance of the singleton or null.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Retriever.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getInstance(): ?self\n  {\n    return self::$retriever_instance;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Retriever",
            "startLine": 44,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getInstance",
            "returns": [
                null,
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the instance of the singleton or null.\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the instance of the singleton or null.\n   * \n   * @return self\n   *\/"
        },
        "retrieverExists": {
            "name": "retrieverExists",
            "summary": "Returns true if an instance as been initiated.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Retriever.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function retrieverExists(): bool\n  {\n    return self::$retriever_exists;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Retriever",
            "startLine": 54,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "retrieverExists",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns true if an instance as been initiated.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if an instance as been initiated.\n   *\n   * @return bool\n   *\/"
        },
        "cacheInit": {
            "name": "cacheInit",
            "summary": "Initializes the cache object, must be called in __construct",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheInit(): void\n  {\n    if ( \\is_null($this->cache_engine) ){\n      $this->cache_engine = CacheCls::getEngine();\n      $this->_cache_prefix = Str::encodeFilename(str_replace('\\\\', '\/', \\get_class($this)), true).'\/';\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 27,
            "endLine": 33,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheInit",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Initializes the cache object, must be called in __construct\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Initializes the cache object, must be called in __construct\n   *\n   * @return void\n   *\/"
        },
        "cacheCheck": {
            "name": "cacheCheck",
            "summary": "Throws an exception if the cache has not been initialized",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheCheck(): void\n  {\n    if (!$this->cache_engine) {\n      throw new Exception(X::_(\"The cache object has not been initialized\"));\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 41,
            "endLine": 46,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheCheck",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Throws an exception if the cache has not been initialized\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Throws an exception if the cache has not been initialized\n   *\n   * @return void\n   *\/"
        },
        "_cache_name": {
            "name": "_cache_name",
            "summary": "Generates a name for the cache based on the class name and the method called - or a gievn string",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _cache_name($uid, $method = '', string $locale = ''): string\n  {\n    $uid  = (string)$uid;\n    $path = Str::isUid($uid) ? substr($uid, 0, 3).'\/'.substr($uid, 3, 3).'\/'.substr($uid, 6) : $uid;\n    return $this->_cache_prefix.$path.(empty($method) ? '' : '\/'.(string)$method).(empty($locale) ? '' : \"-$locale\");\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 57,
            "endLine": 62,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "_cache_name",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Generates a name for the cache based on the class name and the method called - or a gievn string\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "[type]",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Generates a name for the cache based on the class name and the method called - or a gievn string\n   *\n   * @param [type] $uid\n   * @param string $method\n   * @param string $locale\n   * @return string\n   *\/"
        },
        "cacheDeleteAll": {
            "name": "cacheDeleteAll",
            "summary": "Deletes all the cache related to the current class",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDeleteAll(): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_prefix);\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 70,
            "endLine": 75,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheDeleteAll",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Deletes all the cache related to the current class\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes all the cache related to the current class\n   *\n   * @return self\n   *\/"
        },
        "cacheDelete": {
            "name": "cacheDelete",
            "summary": "Deletes the given cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDelete(string $uid, string $method = ''): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_name($uid, $method));\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 85,
            "endLine": 90,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheDelete",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the given cache\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the given cache\n   *\n   * @param string $uid\n   * @param string $method\n   * @return self\n   *\/"
        },
        "cacheDeleteLocale": {
            "name": "cacheDeleteLocale",
            "summary": "Deletes the given cache for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDeleteLocale(string $uid, string $locale, string $method = ''): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_name($uid, $method, $locale));\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 101,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheDeleteLocale",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the given cache for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the given cache for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @return self\n   *\/"
        },
        "cacheGet": {
            "name": "cacheGet",
            "summary": "Gets the cached data",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGet(string $uid, string $method = ''): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->get($this->_cache_name($uid, $method));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 116,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheGet",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cached data\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cached data\n   *\n   * @param string $uid\n   * @param string $method\n   * @return mixed\n   *\/"
        },
        "cacheGetLocale": {
            "name": "cacheGetLocale",
            "summary": "Gets the cached data for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetLocale(string $uid, string $locale, string $method = ''): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->get($this->_cache_name($uid, $method, $locale));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 131,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetLocale",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cached data for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cached data for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @return mixed\n   *\/"
        },
        "cacheSet": {
            "name": "cacheSet",
            "summary": "Sets the cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheSet(string $uid, string $method = '', $data = null, int $ttl = 0): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->set($this->_cache_name($uid, $method), $data, $ttl);\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 147,
            "endLine": 152,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheSet",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the cache\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the cache\n   *\n   * @param string $uid\n   * @param string $method\n   * @param array|null $data\n   * @param integer $ttl\n   * @return self\n   *\/"
        },
        "cacheSetLocale": {
            "name": "cacheSetLocale",
            "summary": "Sets the cache for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheSetLocale(string $uid, string $locale, string $method = '', $data = null, int $ttl = 0): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->set($this->_cache_name($uid, $method, $locale), $data, $ttl);\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 165,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheSetLocale",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the cache for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the cache for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @param array|null $data\n   * @param integer $ttl\n   * @return self\n   *\/"
        },
        "cacheGetSet": {
            "name": "cacheGetSet",
            "summary": "Gets the cache or creates it if needs to",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetSet(callable $fn, string $uid, $method = '', int $ttl = 0): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->getSet($fn, $this->_cache_name($uid, $method), $ttl);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 182,
            "endLine": 186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetSet",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cache or creates it if needs to\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$fn"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cache or creates it if needs to\n   *\n   * @param callable $fn\n   * @param string $uid\n   * @param string $method\n   * @param integer $ttl\n   * @return mixed\n   *\/"
        },
        "cacheGetSetLocale": {
            "name": "cacheGetSetLocale",
            "summary": "Gets the cache for a specific locale or creates it if needs to",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetSetLocale(callable $fn, string $uid, string $locale, $method = '', int $ttl = 0): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->getSet($fn, $this->_cache_name($uid, $method, $locale), $ttl);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 199,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 3,
            "shortName": "cacheGetSetLocale",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cache for a specific locale or creates it if needs to\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$fn"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cache for a specific locale or creates it if needs to\n   *\n   * @param callable $fn\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @param integer $ttl\n   * @return mixed\n   *\/"
        },
        "cacheHas": {
            "name": "cacheHas",
            "summary": "Checks whether the cache exists and is valid",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheHas(string $uid, string $method = ''): bool\n  {\n    $this->cacheCheck();\n    return $this->cacheGet($uid, $method) ? true : false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 213,
            "endLine": 217,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheHas",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the cache exists and is valid\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the cache exists and is valid\n   *\n   * @param string $uid\n   * @param string $method\n   * @return boolean\n   *\/"
        },
        "cacheHasLocale": {
            "name": "cacheHasLocale",
            "summary": "Checks whether the cache exists and is valid",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheHasLocale(string $uid, string $locale, string $method = ''): bool\n  {\n    $this->cacheCheck();\n    return $this->cacheGetLocale($uid, $locale, $method) ? true : false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 227,
            "endLine": 231,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheHasLocale",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the cache exists and is valid\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the cache exists and is valid\n   *\n   * @param string $uid\n   * @param string $method\n   * @return boolean\n   *\/"
        },
        "serializeFunction": {
            "name": "serializeFunction",
            "summary": "Transforms a function in a cacheable string",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function serializeFunction(callable $function)\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->serializeFunction($function);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 241,
            "endLine": 245,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "serializeFunction",
            "returns": [],
            "arguments": [
                {
                    "name": "function",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Transforms a function in a cacheable string\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$function"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Transforms a function in a cacheable string\n   *\n   * @param callable $function\n   * @return void\n   *\/"
        },
        "dbTraitExists": {
            "name": "dbTraitExists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitExists($filter): bool\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (!empty($cfg) && $this->db->count(\n      $this->class_table,\n      $this->dbTraitGetFilterCfg($cfg)\n    )) {\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 25,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array|string $id\n   * @return bool\n   *\/"
        },
        "dbTraitInsert": {
            "name": "dbTraitInsert",
            "summary": "Inserts a new row in the table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitInsert(array $data, bool $ignore = false): ?string\n  {\n    if ($data = $this->dbTraitPrepare($data)) {\n      $ccfg = $this->getClassCfg();\n      if (!empty($ccfg['arch'][$this->class_table_index]['cfg'])) {\n        $col = $ccfg['arch'][$this->class_table_index]['cfg'];\n        if (isset($data[$col])) {\n          $data[$col] = json_encode($data[$col]);\n        }\n      }\n\n      if ($this->db->{$ignore ? 'insertIgnore' : 'insert'}($ccfg['table'], $data)) {\n        return $this->db->lastId();\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 56,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitInsert",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ignore",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Inserts a new row in the table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Inserts a new row in the table.\n   *\n   * @param array $data\n   *\n   * @return string|null\n   *\/"
        },
        "dbTraitDelete": {
            "name": "dbTraitDelete",
            "summary": "Deletes a single row from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitDelete(string|array $filter, bool $cascade = false): bool\n  {\n    if ($this->dbTraitExists($filter)) {\n      $cfg = $this->getClassCfg();\n      $f = $cfg['arch'][$this->class_table_index];\n\n      if (!is_array($filter) && !empty($f['id'])) {\n        $filter = [$f['id'] => $filter];\n      }\n\n      return (bool)$this->db->delete($cfg['table'], $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 83,
            "endLine": 97,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitDelete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cascade",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes a single row from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a single row from the table through its id.\n   *\n   * @param string $id\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitUpdate": {
            "name": "dbTraitUpdate",
            "summary": "Updates a single row in the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitUpdate(string|array $filter, array $data): int\n  {\n    $ccfg = $this->getClassCfg();\n    $f = $ccfg['arch'][$this->class_table_index];\n    if (!is_array($filter)) {\n      $filter = [$f['id'] => $filter];\n    }\n\n    if (!$this->dbTraitExists($filter)) {\n      throw new Exception(X::_(\"Impossible to find the given row\"));\n    }\n\n    if ($data = $this->dbTraitPrepare($data)) {\n      if (!empty($f['cfg'])) {\n        $col = $f['cfg'];\n        if (!empty($data[$col])) {\n          if (is_string($data[$col])) {\n            $data[$col] = json_decode($data[$col], true);\n          }\n\n          $jsonUpdate = 'JSON_SET(' . $this->db->csn($col, true);\n          foreach ($data[$col] as $k => $v) {\n            $jsonUpdate .= ', \"$.' . $k . '\", \"' . Str::escapeDquotes(is_iterable($v) ? json_encode($v) : $v) . '\"';\n          }\n\n          $jsonUpdate .= \")\";\n          $data[$col] = [null, $jsonUpdate];\n        }\n      }\n      \n      return $this->db->update($ccfg['table'], $data, $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 109,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitUpdate",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Updates a single row in the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$add",
                        "description": "fg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates a single row in the table through its id.\n   *\n   * @param array $data\n   * @param string|array $filter\n   * @param bool $addCfg\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitSelectOne": {
            "name": "dbTraitSelectOne",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectOne(string $field, string|array $filter = [], array $order = [])\n  {\n    if ($res = $this->dbTraitSingleSelection($filter, $order, 'array', [$field])) {\n      return $res[$field] ?? null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 154,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectOne",
            "returns": [],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return mixed\n   *\/"
        },
        "dbTraitSelect": {
            "name": "dbTraitSelect",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelect(string|array $filter = [], array $order = [], array $fields = []): ?stdClass\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'object', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 172,
            "endLine": 175,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelect",
            "returns": [
                null,
                "stdClass"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return stdClass|null\n   *\/"
        },
        "dbTraitRselect": {
            "name": "dbTraitRselect",
            "summary": "Retrieves a row as an array from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselect(string|array $filter = [], array $order = [], array $fields = []): ?array\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'array', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 186,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselect",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an array from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an array from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return array|null\n   *\/"
        },
        "dbTraitSelectValues": {
            "name": "dbTraitSelectValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectValues(string $field, array $filter = [], array $order = [], int $limit = 0, int $start = 0): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'value', [$field]);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 191,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectValues",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitCount": {
            "name": "dbTraitCount",
            "summary": "Returns the number of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitCount(array $filter = []): int\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $req = $this->dbTraitGetRequestCfg($filter, [], 1, 0, [$this->fields['id']]);\n    return $this->db->count($req);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 204,
            "endLine": 212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitCount",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the number of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the number of rows from the table for the given conditions.\n   *\n   * @param array $filter\n   *\n   * @return int\n   *\/"
        },
        "dbTraitSelectAll": {
            "name": "dbTraitSelectAll",
            "summary": "Returns an array of rows as objects from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'object', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 225,
            "endLine": 228,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as objects from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as objects from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitRselectAll": {
            "name": "dbTraitRselectAll",
            "summary": "Returns an array of rows as arrays from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'array', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 241,
            "endLine": 244,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as arrays from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as arrays from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitGetRelations": {
            "name": "dbTraitGetRelations",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetRelations(string $id, string $table = null): ?array\n  {\n    if ($this->dbTraitExists($id)) {\n      $db =& $this->db;\n      $res = [];\n      foreach ($this->dbTraitGetTableRelations($table) as $rel) {\n        if ($all = $db->getColumnValues($rel['table'], $rel['primary'], [$rel['col'] => $id])) {\n          $res[$rel['table']] = [\n            'col' => $rel['col'],\n            'primary' => $rel['primary'],\n            'values' => $all\n          ];\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 246,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetRelations",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "dbTraitGetSearchFilter": {
            "name": "dbTraitGetSearchFilter",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetSearchFilter(string|int $filter, array $cols = [], bool $strict = false): array\n  {\n    $cfg = $this->getClassCfg();\n    $isNumber = Str::isNumber($filter);\n    $finalFilter = [\n      'logic' => 'OR',\n      'conditions' => []\n    ];\n    if (empty($cols)) {\n      $tableCols = $this->db->modelize($cfg['table'])['fields'];\n      foreach ($tableCols as $col => $colCfg) {\n        if ((strpos($colCfg['type'], 'text') !== false) || (strpos($colCfg['type'], 'char') !== false)) {\n          $cols[] = $col;\n        }\n        elseif ($isNumber && (strpos($colCfg['type'], 'int') !== false)) {\n          $cols[] = $col;\n        }\n      }\n    }\n\n    foreach ($cols as $col) {\n      $finalFilter['conditions'][] = [\n        'field' => $this->db->cfn($col, $cfg['table']),\n        'operator' => $strict ? '=' : 'contains',\n        'value' => $filter\n      ];\n    }\n\n    return $finalFilter;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 267,
            "endLine": 296,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetSearchFilter",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "string|int",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSearch": {
            "name": "dbTraitSearch",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSearch(array|string $filter, array $cols = [], array $fields = [], array $order = [], bool $strict = false, int $limit = 0, int $start = 0): array\n  {\n    if (is_array($filter)) {\n      $finalFilter = $filter;\n      if (empty($fields) && !empty($cols)) {\n        $fields = $cols;\n      }\n    }\n    else {\n      $finalFilter = $this->dbTraitGetSearchFilter($filter, $cols);\n    }\n\n    return $this->dbTraitRselectAll($finalFilter, $order, $limit, $start, $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 298,
            "endLine": 311,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSearch",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 4,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 5,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 6,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSingleSelection": {
            "name": "dbTraitSingleSelection",
            "summary": "Gets a single row and returns it",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitSingleSelection(\n    string|array $filter,\n    array $order,\n    string $mode = 'array',\n    array $fields = []\n  ): mixed\n  {\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (isset($cfg)\n        && ($res = $this->dbTraitSelection($cfg, $order, 1, 0, $mode, $fields))\n    ) {\n      return $res[0];\n    }\n\n    return null;\n\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 321,
            "endLine": 344,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitSingleSelection",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "array",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets a single row and returns it\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets a single row and returns it\n   *\n   * @param string|array $filter\n   * @param array $order\n   * @param string $mode\n   * @return mixed\n   *\/"
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the fields of the main table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFields()\n  {\n    return $this->fields;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 48,
            "endLine": 51,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getFields",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the fields of the main table.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the fields of the main table.\n   *\n   * @return array\n   *\/"
        },
        "initClassCfg": {
            "name": "initClassCfg",
            "summary": "Sets the class configuration as defined in self::default_class_cfg",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initClassCfg(array $cfg = null)\n  {\n$arr = [];\n    if (isset(self::$default_class_cfg)) {\n      $arr[] = self::$default_class_cfg;\n    }\n\n    if (isset(static::$default_class_cfg)) {\n      $arr[] = static::$default_class_cfg;\n    }\n    \n    if ($cfg) {\n      $arr[] = $cfg;\n    }\n\n    if (!count($arr)) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $cfg = count($arr) > 1 ? X::mergeArrays(...$arr) : $arr[0];\n\n    $table_index = array_flip($cfg['tables'])[$cfg['table']];\n    if (!$table_index || !isset($cfg['tables'], $cfg['table'], $cfg['arch'], $cfg['arch'][$table_index])) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $this->class_table = $cfg['table'];\n    \/\/ We completely replace the table structure, no merge\n    $props = [];\n    foreach ($cfg['arch'] as $t => &$fields){\n      if (!$this->class_table_index && isset($cfg['tables'][$t]) && ($cfg['tables'][$t] === $cfg['table']))  {\n        $this->class_table_index = $t;\n      }\n    foreach ($fields as $f => $it) {\n        if (is_array($it)) {\n          $props[$t][$f] = $it;\n          $fields[$f] = $it['name'] ?? $f;\n        }\n      }\n    }\n    unset($fields);\n    if (!empty($props)) {\n      $cfg['props'] = $props;\n    }\n\n\n\n    \/\/ The selection comprises the defined fields of the users table\n    \/\/ Plus a bunch of user-defined additional fields in the same table\n    $this->fields = $cfg['arch'][$this->class_table_index];\n\n    $this->class_cfg = $cfg;\n    $this->_isInitClassCfg = true;\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 59,
            "endLine": 114,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initClassCfg",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the class configuration as defined in self::default_class_cfg\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the class configuration as defined in self::default_class_cfg\n   * @param array $cfg\n   * @return $this\n   *\/"
        },
        "isInitClassCfg": {
            "name": "isInitClassCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isInitClassCfg(): bool\n  {\n    return $this->_isInitClassCfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 117,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isInitClassCfg",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "dbTraitPrepare": {
            "name": "dbTraitPrepare",
            "summary": "Prepares data before inserting or updating in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitPrepare(array $data): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (!empty($ccfg['cfg'])) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $res[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        unset($data[$f['cfg']]);\n      }\n      elseif (isset($ccfg['cfg'])) {\n        $cfg = [];\n        foreach ($ccfg['cfg'] as $k => $v) {\n          if (array_key_exists($v['field'], $data)) {\n            $cfg[$v['field']] = $data[$v['field']];\n            unset($data[$v['field']]);\n          }\n        }\n        if (!empty($cfg)) {\n          $res[$f['cfg']] = $cfg;\n        }\n      }\n    }\n\n    $structure = $this->dbTraitGetStructure();\n    foreach ($data as $k => $v) {\n      if (in_array($k, $f)) {\n        \/\/ Set the value to null if it's empty and not 0 and the field allows null\n        if (empty($v)\n          && ($v !== 0)\n          && $structure['fields'][$k]['null']\n        ) {\n          $v = null;\n        }\n\n        $res[$k] = $v;\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 39,
            "endLine": 92,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitPrepare",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The data to be prepared."
                }
            ],
            "doc": {
                "description": "Prepares data before inserting or updating in the database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data",
                        "description": "The data to be prepared."
                    }
                ],
                "return": "The prepared data.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the class config has not been initialized or is incorrect."
                }
            },
            "comments": "  \/**\n   * Prepares data before inserting or updating in the database.\n   *\n   * @param array $data The data to be prepared.\n   *\n   * @return array The prepared data.\n   * @throws Exception If the class config has not been initialized or is incorrect.\n   *\/"
        },
        "dbTraitTreat": {
            "name": "dbTraitTreat",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitTreat(array ...$rows): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (empty($f['cfg'])) {\n      return [...$rows];\n    }\n    foreach ($rows as &$data) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $data[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        if (!empty($ccfg['cfg'])) {\n          foreach ($ccfg['cfg'] as $k => $v) {\n            if (isset($v['field']) \n                && array_key_exists($v['field'], $data[$f['cfg']])\n                && !array_key_exists($v['field'], $data)) {\n              $data[$v['field']] = $data[$f['cfg']][$v['field']];\n            }\n          }\n          unset($data[$f['cfg']]);\n        }\n      }\n\n      $res[] = $data;\n    }\n\n    unset($data);\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 94,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitTreat",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "rows",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbTraitSetFilterCfg": {
            "name": "dbTraitSetFilterCfg",
            "summary": "Sets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSetFilterCfg(array $cfg): void\n  {\n    $this->dbTraitFilterCfg = $cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 142,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The filter configuration."
                }
            ],
            "doc": {
                "description": "Sets the filter configuration for database queries.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The filter configuration."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the filter configuration for database queries.\n   *\n   * @param array $cfg The filter configuration.\n   *\/"
        },
        "dbTraitResetFilterCfg": {
            "name": "dbTraitResetFilterCfg",
            "summary": "Resets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitResetFilterCfg(): void\n  {\n    $this->dbTraitFilterCfg = [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 150,
            "endLine": 153,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitResetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Resets the filter configuration for database queries.",
                "tags": []
            },
            "comments": "  \/**\n   * Resets the filter configuration for database queries.\n   *\/"
        },
        "dbTraitGetFilterCfg": {
            "name": "dbTraitGetFilterCfg",
            "summary": "Combines multiple filter configurations into a single array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetFilterCfg(array $cfg): array\n  {\n    $conditions = [];\n    if (!empty($this->rootFilterCfg)) {\n      $conditions[] = $this->rootFilterCfg;\n    }\n\n    if (!empty($this->dbTraitFilterCfg)) {\n      $conditions[] = $this->dbTraitFilterCfg;\n    }\n\n    if (!empty($cfg)) {\n      $conditions[] = $cfg;\n    }\n\n    \/\/ Return empty array if no conditions exist\n    if (empty($conditions)) {\n      return [];\n    }\n\n    \/\/ Return single condition if only one exists\n    if (count($conditions) === 1) {\n      return $conditions[0];\n    }\n\n    \/\/ Combine all conditions with 'AND' logic\n    return array_map(function ($a) {\n      return [\n        'logic' => 'AND',\n        'conditions' => $a\n      ];\n    }, $conditions);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 162,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetFilterCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Additional filter configuration."
                }
            ],
            "doc": {
                "description": "Combines multiple filter configurations into a single array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "Additional filter configuration."
                    }
                ],
                "return": "The combined filter configuration."
            },
            "comments": "  \/**\n   * Combines multiple filter configurations into a single array.\n   *\n   * @param array $cfg Additional filter configuration.\n   *\n   * @return array The combined filter configuration.\n   *\/"
        },
        "dbTraitGetStructure": {
            "name": "dbTraitGetStructure",
            "summary": "Gets the structure of the specified table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetStructure(string $table = null): array\n  {\n    if (!$table) {\n      $cfg = $this->getClassCfg();\n      $table = $cfg['table'];\n    }\n\n    if (!isset($this->dbTraitStructure[$table])) {\n      $this->dbTraitStructure[$table] = $this->db->modelize($table);\n    }\n\n    return $this->dbTraitStructure[$table];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 203,
            "endLine": 215,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetStructure",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Gets the structure of the specified table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "The structure of the table."
            },
            "comments": "  \/**\n   * Gets the structure of the specified table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array The structure of the table.\n   *\/"
        },
        "dbTraitGetTableRelations": {
            "name": "dbTraitGetTableRelations",
            "summary": "Retrieves the relations for a given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetTableRelations(string $table = null): array\n  {\n    $cfg = $this->getClassCfg();\n    if (!$table) {\n      $table = $cfg['table'];\n    }\n    $idx = array_flip($cfg['tables'])[$table];\n    if ($idx && !isset($this->dbTraitRelations[$table])) {\n      $arc = &$cfg['arch'][$idx];\n      $this->dbTraitRelations[$table] = [];\n      if (!empty($arc['id'])) {\n        $refs = $this->db->findReferences($this->db->cfn($arc['id'], $table));\n        foreach ($refs as $ref) {\n          [$db, $tab, $col] = X::split($ref, '.');\n          $model = $this->db->modelize($tab);\n          $this->dbTraitRelations[$table][] = [\n            'db' => $db,\n            'table' => $tab,\n            'primary' => isset($model['keys']['PRIMARY']) && (count($model['keys']['PRIMARY']['columns']) === 1) ? $model['keys']['PRIMARY']['columns'][0] : null,\n            'col' => $col,\n            'model' => $model\n          ];\n        }\n      }\n    }\n\n    return $this->dbTraitRelations[$table];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 224,
            "endLine": 251,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetTableRelations",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Retrieves the relations for a given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "An array of relations."
            },
            "comments": "  \/**\n   * Retrieves the relations for a given table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array An array of relations.\n   *\/"
        },
        "dbTraitSelection": {
            "name": "dbTraitSelection",
            "summary": "Returns an array of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitSelection(\n    array $filter,\n    array $order,\n    int $limit,\n    int $start,\n    string $mode = 'array',\n    array $fields = []\n  ): array\n  {\n    $returnObject = $mode === 'object';\n    $req = $this->dbTraitGetRequestCfg($filter, $order, $limit, $start, $fields);\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    $method = $mode === 'object' ? 'selectAll' : ($mode === 'value' ? 'getColumnValues' : 'rselectAll');\n    $res = $this->db->$method($req);\n    if ($res) {\n      if (!empty($f['cfg'])) {\n        foreach ($res as &$r) {\n          if ($returnObject && !empty($r->{$f['cfg']})) {\n            $cfg = json_decode($r->{$f['cfg']});\n            $r = X::mergeObjects($cfg, $r);\n            unset($r->{$f['cfg']});\n          }\n          elseif (!$returnObject && !empty($r[$f['cfg']])) {\n            $cfg = json_decode($r[$f['cfg']], true);\n            $r = array_merge($cfg, $r);\n            unset($r[$f['cfg']]);\n          }\n        }\n\n        unset($r);\n      }\n\n      return $res;\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 265,
            "endLine": 301,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 4,
            "shortName": "dbTraitSelection",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Filter conditions."
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Order by conditions."
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Maximum number of rows to return."
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Offset of the first row to return."
                },
                {
                    "name": "mode",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "array",
                    "default_name": "",
                    "description": "The mode of result ('array', 'object', 'value')."
                },
                {
                    "name": "fields",
                    "position": 5,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Fields to select."
                }
            ],
            "doc": {
                "description": "Returns an array of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter",
                        "description": "Filter conditions."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "Order by conditions."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Maximum number of rows to return."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Offset of the first row to return."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode",
                        "description": "The mode of result ('array', 'object', 'value')."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "Fields to select."
                    }
                ],
                "return": "The result set."
            },
            "comments": "  \/**\n   * Returns an array of rows from the table for the given conditions.\n   *\n   * @param array $filter Filter conditions.\n   * @param array $order Order by conditions.\n   * @param int $limit Maximum number of rows to return.\n   * @param int $start Offset of the first row to return.\n   * @param string $mode The mode of result ('array', 'object', 'value').\n   * @param array $fields Fields to select.\n   *\n   * @return array The result set.\n   *\/"
        },
        "dbTraitGetRequestCfg": {
            "name": "dbTraitGetRequestCfg",
            "summary": "Prepares the request configuration for a database query.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitGetRequestCfg(\n    array $filter,\n    array $order,\n    int $limit,\n    int $start,\n    array $fields = []\n  ): array\n  {\n    \/\/ Ensure table index is defined\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    \/\/ Validate fields\n    if (!empty($fields)) {\n      foreach (array_values($fields) as $f) {\n        if (!in_array($f, $this->class_cfg['arch'][$this->class_table_index])) {\n          throw new Exception(X::_(\"The field %s does not exist\", $f));\n        }\n      }\n\n      $properFields = $fields;\n    }\n    else {\n      $fields = $this->class_cfg['arch'][$this->class_table_index];\n    }\n\n    $ccfg = $this->getClassCfg();\n    if (isset($fields['cfg']) && !empty($ccfg['cfg'])) {\n      $cfgCol = $fields['cfg'];\n      unset($fields['cfg']);\n      if (!isset($properFields)) {\n        $properFields = array_values($fields);\n      }\n\n      foreach ($ccfg['cfg'] as $v) {\n        if ($v['field'] && !in_array($v['field'], $properFields)) {\n          $properFields[$v['field']] = \"IF(JSON_EXTRACT(\"\n              . $this->db->csn($cfgCol, true) . \", '\\$.\" . $v['field']\n              . \"') = 'null', NULL, JSON_UNQUOTE(JSON_EXTRACT(\"\n              . $this->db->csn($cfgCol, true) . \", '\\$.\" . $v['field']\n              .\"')))\";\n        }\n      }\n    }\n    elseif (!isset($properFields)) {\n      $properFields = array_values($fields);\n    }\n\n    \/\/ Build the request configuration\n    $req = [\n      'table' => $this->class_table,\n      'fields' => $properFields,\n      'where' => $this->dbTraitGetFilterCfg($filter),\n      'order' => $order\n    ];\n\n    if ($limit) {\n      $req['limit'] = $limit;\n      $req['start'] = $start;\n    }\n\n    return $req;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 315,
            "endLine": 378,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 4,
            "shortName": "dbTraitGetRequestCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Filter conditions."
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Order by conditions."
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Maximum number of rows to return."
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Offset of the first row to return."
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Fields to select."
                }
            ],
            "doc": {
                "description": "Prepares the request configuration for a database query.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter",
                        "description": "Filter conditions."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "Order by conditions."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Maximum number of rows to return."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Offset of the first row to return."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "Fields to select."
                    }
                ],
                "return": "The request configuration.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the table index is not defined or a field does not exist."
                }
            },
            "comments": "  \/**\n   * Prepares the request configuration for a database query.\n   *\n   * @param array $filter Filter conditions.\n   * @param array $order Order by conditions.\n   * @param int $limit Maximum number of rows to return.\n   * @param int $start Offset of the first row to return.\n   * @param array $fields Fields to select.\n   *\n   * @return array The request configuration.\n   * @throws Exception If the table index is not defined or a field does not exist.\n   *\/"
        },
        "alias": {
            "name": "alias",
            "summary": "Returns the id_alias relative to the given id_option.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Alias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function alias(string $id): ?string\n  {\n    \/\/ Check if the class is initialized and the database connection is valid.\n    if ($this->check() && Str::isUid($id)) {\n      \/\/ Query the database to retrieve the id_alias.\n      return $this->db->selectOne(\n        $this->class_cfg['table'],\n        $this->fields['id_alias'],\n        [\n          $this->fields['id'] => $id\n        ]\n      );\n    }\n\n    \/\/ If checks fail, return null.\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Alias",
            "startLine": 18,
            "endLine": 34,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "alias",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The ID of the option."
                }
            ],
            "doc": {
                "description": "Returns the id_alias relative to the given id_option.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The ID of the option."
                    }
                ],
                "return": "The id_alias if it exists, otherwise null."
            },
            "comments": "  \/**\n   * Returns the id_alias relative to the given id_option.\n   *\n   * @param string $id The ID of the option.\n   * @return string|null The id_alias if it exists, otherwise null.\n   *\/"
        },
        "getIdAlias": {
            "name": "getIdAlias",
            "summary": "Returns the id_alias for a given code(s).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Alias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIdAlias(...$codes): ?string\n  {\n    \/\/ Get the ID from the provided codes.\n    if (Str::isUid($id = $this->fromCode($codes))) {\n      \/\/ Retrieve the class configuration and query the database to get the id_alias.\n      $cf = $this->getClassCfg();\n      return $this->db->selectOne(\n        $cf['table'],\n        $this->fields['id_alias'],\n        [\n          $this->fields['id'] => $id\n        ]\n      );\n    }\n\n    \/\/ If checks fail, return null.\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Alias",
            "startLine": 42,
            "endLine": 59,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getIdAlias",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The codes to retrieve the id_alias for."
                }
            ],
            "doc": {
                "description": "Returns the id_alias for a given code(s).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$codes",
                        "description": "The codes to retrieve the id_alias for."
                    }
                ],
                "return": "The id_alias if it exists, otherwise null."
            },
            "comments": "  \/**\n   * Returns the id_alias for a given code(s).\n   *\n   * @param string ...$codes The codes to retrieve the id_alias for.\n   * @return string|null The id_alias if it exists, otherwise null.\n   *\/"
        },
        "getAliases": {
            "name": "getAliases",
            "summary": "Retrieves all aliases for a given code(s).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Alias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAliases(...$codes): ?array\n  {\n    \/\/ Get the ID from the provided codes.\n    if (Str::isUid($id = $this->fromCode($codes))) {\n      \/\/ Initialize an empty array to store the results.\n      $r = [];\n\n      \/\/ Retrieve the class configuration and query the database to get all aliases.\n      $cf = $this->getClassCfg();\n      if ($results = $this->db->rselectAll(\n        $cf['table'],\n        [],\n        [\n          $this->fields['id_alias'] => $id\n        ]\n      )) {\n        \/\/ Iterate through each result and process the data.\n        foreach ($results as $d) {\n          \/\/ Convert code to integer if it's an integer string.\n          if (\n            !empty($d[$this->fields['code']])\n            && Str::isInteger($d[$this->fields['code']])\n          ) {\n            $d[$this->fields['code']] = (int)$d[$this->fields['code']];\n          }\n          \/\/ Set the value and retrieve the text for the alias.\n          $this->_set_value($d);\n          if (!empty($d[$this->fields['text']])) {\n            $d[$this->fields['text']] = $this->text($d[$this->fields['id']]);\n          }\n          \/\/ Add the processed data to the results array.\n          $r[] = $d;\n        }\n      }\n\n      \/\/ Return the array of aliases.\n      return $r;\n    }\n\n    \/\/ If checks fail, return null.\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Alias",
            "startLine": 67,
            "endLine": 108,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getAliases",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The codes to retrieve the aliases for."
                }
            ],
            "doc": {
                "description": "Retrieves all aliases for a given code(s).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$codes",
                        "description": "The codes to retrieve the aliases for."
                    }
                ],
                "return": "An array of aliases if they exist, otherwise null."
            },
            "comments": "  \/**\n   * Retrieves all aliases for a given code(s).\n   *\n   * @param string ...$codes The codes to retrieve the aliases for.\n   * @return array|null An array of aliases if they exist, otherwise null.\n   *\/"
        },
        "getAliasItems": {
            "name": "getAliasItems",
            "summary": "Retrieves all items for an alias based on a given code(s).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Alias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAliasItems(...$codes): ?array\n  {\n    \/\/ Get the ID from the provided codes.\n    if (Str::isUid($id = $this->fromCode($codes))) {\n      \/\/ Check if the result is cached.\n      if ($res = $this->cacheGet($id, __FUNCTION__)) {\n        return $res;\n      }\n\n      \/\/ Retrieve the class configuration and query the database to get all items for the alias.\n      $cf  = $this->getClassCfg();\n      $f   = $this->getFields();\n      $res = $this->db->getColumnValues(\n        $cf['table'],\n        $f['id'],\n        [\n          $f['id_alias'] => $id\n        ]\n      );\n\n      \/\/ Cache the result and return it.\n      $this->cacheSet($id, __FUNCTION__, $res);\n      return $res;\n    }\n\n    \/\/ If checks fail, return null.\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Alias",
            "startLine": 116,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getAliasItems",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The codes to retrieve the alias items for."
                }
            ],
            "doc": {
                "description": "Retrieves all items for an alias based on a given code(s).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$codes",
                        "description": "The codes to retrieve the alias items for."
                    }
                ],
                "return": "An array of item IDs if they exist, otherwise null."
            },
            "comments": "  \/**\n   * Retrieves all items for an alias based on a given code(s).\n   *\n   * @param string ...$codes The codes to retrieve the alias items for.\n   * @return array|null An array of item IDs if they exist, otherwise null.\n   *\/"
        },
        "getAliasOptions": {
            "name": "getAliasOptions",
            "summary": "Retrieves all options for an alias based on a given code(s).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Alias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAliasOptions(...$codes): ?array\n  {\n    \/\/ Get the ID from the provided codes.\n    if (Str::isUid($id = $this->fromCode($codes))) {\n      \/\/ Check if the result is cached.\n      if ($r = $this->getCache($id, __FUNCTION__)) {\n        return $r;\n      }\n\n      \/\/ Initialize an empty array to store the results.\n      $res = [];\n\n      \/\/ Retrieve all items for the alias and process them into options.\n      if ($items = $this->getAliasItems($id)) {\n        foreach ($items as $it) {\n          $res[$it] = $this->text($it);\n        }\n      }\n\n      \/\/ Cache the result and return it.\n      $this->setCache($id, __FUNCTION__, $res);\n      return $res;\n    }\n\n    \/\/ If checks fail, return null.\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Alias",
            "startLine": 151,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getAliasOptions",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The codes to retrieve the alias options for."
                }
            ],
            "doc": {
                "description": "Retrieves all options for an alias based on a given code(s).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$codes",
                        "description": "The codes to retrieve the alias options for."
                    }
                ],
                "return": "An array of option IDs and their corresponding text if they exist, otherwise null."
            },
            "comments": "  \/**\n   * Retrieves all options for an alias based on a given code(s).\n   *\n   * @param string ...$codes The codes to retrieve the alias options for.\n   * @return array|null An array of option IDs and their corresponding text if they exist, otherwise null.\n   *\/"
        },
        "getAliasFullOptions": {
            "name": "getAliasFullOptions",
            "summary": "Retrieves all full options for an alias based on a given code(s).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Alias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAliasFullOptions(...$codes): ?array\n  {\n    \/\/ Get the ID from the provided codes.\n    if (Str::isUid($id = $this->fromCode($codes))) {\n      \/\/ Check if the result is cached.\n      if ($r = $this->cacheGet($id, __FUNCTION__)) {\n        return $r;\n      }\n\n      \/\/ Initialize an empty array to store the results.\n      $res = [];\n\n      \/\/ Retrieve all items for the alias and process them into full options.\n      if ($items = $this->getAliasItems($id)) {\n        foreach ($items as $it) {\n          $res[] = $this->option($it);\n        }\n      }\n\n      \/\/ Cache the result and return it.\n      $this->cacheSet($id, __FUNCTION__, $res);\n      return $res;\n    }\n\n    \/\/ If checks fail, return null.\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Alias",
            "startLine": 185,
            "endLine": 211,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getAliasFullOptions",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The codes to retrieve the full alias options for."
                }
            ],
            "doc": {
                "description": "Retrieves all full options for an alias based on a given code(s).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$codes",
                        "description": "The codes to retrieve the full alias options for."
                    }
                ],
                "return": "An array of full options if they exist, otherwise null."
            },
            "comments": "  \/**\n   * Retrieves all full options for an alias based on a given code(s).\n   *\n   * @param string ...$codes The codes to retrieve the full alias options for.\n   * @return array|null An array of full options if they exist, otherwise null.\n   *\/"
        },
        "optionsByAlias": {
            "name": "optionsByAlias",
            "summary": "Retrieves all options based on their id_alias.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Alias.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function optionsByAlias(...$codes): ?array\n  {\n    \/\/ Get the ID from the provided codes.\n    $id_alias = $this->fromCode($codes);\n\n    \/\/ Check if the id_alias is a valid UID.\n    if (Str::isUid($id_alias)) {\n      \/\/ Create a where condition for the query.\n      $where = [\n        $this->fields['id_alias'] => $id_alias\n      ];\n\n      \/\/ Query the database to retrieve all options based on their id_alias.\n      $list  = $this->getRows($where);\n\n      \/\/ Check if the result is an array.\n      if (\\is_array($list)) {\n        \/\/ Initialize an empty array to store the processed results.\n        $res = [];\n\n        \/\/ Iterate through each option and process it.\n        foreach ($list as $i) {\n          $res[] = $this->option($i);\n        }\n\n        \/\/ Return the array of processed options.\n        return $res;\n      }\n    }\n\n    \/\/ If checks fail, return null.\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Alias",
            "startLine": 219,
            "endLine": 251,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "optionsByAlias",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The codes to retrieve the options for."
                }
            ],
            "doc": {
                "description": "Retrieves all options based on their id_alias.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$codes",
                        "description": "The codes to retrieve the options for."
                    }
                ],
                "return": "An array of options if they exist, otherwise null."
            },
            "comments": "  \/**\n   * Retrieves all options based on their id_alias.\n   *\n   * @param string ...$codes The codes to retrieve the options for.\n   * @return array|null An array of options if they exist, otherwise null.\n   *\/"
        },
        "setCache": {
            "name": "setCache",
            "summary": "Sets the cache value for a given method and ID, with optional locale support.",
            "description": "If no locale is provided, it will attempt to retrieve the translating locale for the given ID.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "If no locale is provided, it will attempt to retrieve the translating locale for the given ID."
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setCache(string $id, string $method, $data, ?string $locale = null): self\n  {\n    \/\/ If no locale is provided, attempt to retrieve the translating locale for the given ID.\n    if (empty($locale)) {\n      $locale = $this->getTranslatingLocale($id);\n    }\n\n    \/\/ If a locale exists, cache with locale support; otherwise, cache without locale.\n    if (!empty($locale)) {\n      return $this->cacheSetLocale($id, $locale, $method, $data);\n    } else {\n      return $this->cacheSet($id, $method, $data);\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Cache",
            "startLine": 32,
            "endLine": 45,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "setCache",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The option's ID"
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The method name to cache"
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The data to cache"
                },
                {
                    "name": "locale",
                    "position": 3,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Optional locale for caching (defaults to null)"
                }
            ],
            "doc": {
                "description": "Sets the cache value for a given method and ID, with optional locale support.\n\nIf no locale is provided, it will attempt to retrieve the translating locale for the given ID.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The option's ID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method",
                        "description": "The method name to cache"
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$data",
                        "description": "The data to cache"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$locale",
                        "description": "Optional locale for caching (defaults to null)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the cache value for a given method and ID, with optional locale support.\n   *\n   * If no locale is provided, it will attempt to retrieve the translating locale for the given ID.\n   *\n   * @param string $id The option's ID\n   * @param string $method The method name to cache\n   * @param mixed $data The data to cache\n   * @param string|null $locale Optional locale for caching (defaults to null)\n   *\n   * @return self\n   *\/"
        },
        "getCache": {
            "name": "getCache",
            "summary": "Retrieves the cached value for a given method and ID, with optional locale support.",
            "description": "If no locale is provided, it will attempt to retrieve the translating locale for the given ID.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "If no locale is provided, it will attempt to retrieve the translating locale for the given ID."
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCache(string $id, string $method, ?string $locale = null)\n  {\n    \/\/ If no locale is provided, attempt to retrieve the translating locale for the given ID.\n    if (empty($locale)) {\n      $locale = $this->getTranslatingLocale($id);\n    }\n\n    \/\/ If a locale exists, retrieve cache with locale support; otherwise, retrieve without locale.\n    if (!empty($locale)) {\n      return $this->cacheGetLocale($id, $locale, $method);\n    } else {\n      return $this->cacheGet($id, $method);\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Cache",
            "startLine": 58,
            "endLine": 71,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "getCache",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The option's ID"
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The method name to retrieve from cache"
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Optional locale for caching (defaults to null)"
                }
            ],
            "doc": {
                "description": "Retrieves the cached value for a given method and ID, with optional locale support.\n\nIf no locale is provided, it will attempt to retrieve the translating locale for the given ID.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The option's ID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method",
                        "description": "The method name to retrieve from cache"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$locale",
                        "description": "Optional locale for caching (defaults to null)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves the cached value for a given method and ID, with optional locale support.\n   *\n   * If no locale is provided, it will attempt to retrieve the translating locale for the given ID.\n   *\n   * @param string $id The option's ID\n   * @param string $method The method name to retrieve from cache\n   * @param string|null $locale Optional locale for caching (defaults to null)\n   *\n   * @return mixed\n   *\/"
        },
        "deleteCache": {
            "name": "deleteCache",
            "summary": "Deletes the options' cache for a given ID or globally, with optional deep deletion of children's caches.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Cache.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteCache(string $id = null, bool $deep = false, bool $subs = false): self\n  {\n    \/\/ Ensure the class is initialized and has a valid database connection before proceeding with cache deletion.\n    if ($this->check()) {\n      \/\/ If an ID is provided and it's a valid UID, proceed with cache deletion for that ID.\n      if (Str::isUid($id)) {\n        \/\/ Recursively delete caches of children if deep deletion is enabled or not deleting the parent's cache.\n        if (($deep || !$subs) && ($items = $this->items($id))) {\n          foreach ($items as $it) {\n            $this->deleteCache($it, $deep, true);\n          }\n        }\n\n        \/\/ Delete the alias's cache if it exists and not deleting the parent's cache.\n        if (!$subs && ($id_alias = $this->alias($id))) {\n          $this->deleteCache($id_alias, false, true);\n        }\n\n        \/\/ Delete the cache for the given ID.\n        $this->cacheDelete($id);\n\n        \/\/ If not deleting the parent's cache, also delete its cache.\n        if (!$subs) {\n          $this->cacheDelete($this->getIdParent($id));\n        }\n      } elseif (is_null($id)) {\n        \/\/ Delete all caches if no ID is provided.\n        $this->cacheDeleteAll();\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Cache",
            "startLine": 82,
            "endLine": 114,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "deleteCache",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The option's ID (or null for global deletion)"
                },
                {
                    "name": "deep",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If true, also deletes children's caches"
                },
                {
                    "name": "subs",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "Used internally for recursive cache deletion without deleting the parent's cache"
                }
            ],
            "doc": {
                "description": "Deletes the options' cache for a given ID or globally, with optional deep deletion of children's caches.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "The option's ID (or null for global deletion)"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$deep",
                        "description": "If true, also deletes children's caches"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$subs",
                        "description": "Used internally for recursive cache deletion without deleting the parent's cache"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the options' cache for a given ID or globally, with optional deep deletion of children's caches.\n   *\n   * @param string|null $id The option's ID (or null for global deletion)\n   * @param boolean $deep If true, also deletes children's caches\n   * @param boolean $subs Used internally for recursive cache deletion without deleting the parent's cache\n   *\n   * @return Option\n   *\/"
        },
        "_set_local_cache": {
            "name": "_set_local_cache",
            "summary": "Sets a value in the local cache.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Cache.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _set_local_cache(string $name, $val): void\n  {\n    $this->_local_cache[$name] = $val;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Cache",
            "startLine": 122,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_set_local_cache",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the cache entry"
                },
                {
                    "name": "val",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The value to cache"
                }
            ],
            "doc": {
                "description": "Sets a value in the local cache.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name",
                        "description": "The name of the cache entry"
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$val",
                        "description": "The value to cache"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets a value in the local cache.\n   *\n   * @param string $name The name of the cache entry\n   * @param mixed $val The value to cache\n   *\/"
        },
        "_get_local_cache": {
            "name": "_get_local_cache",
            "summary": "Retrieves a value from the local cache.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Cache.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_local_cache(string $name): ?string\n  {\n    return $this->_local_cache[$name] ?? null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Cache",
            "startLine": 134,
            "endLine": 137,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_get_local_cache",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the cache entry"
                }
            ],
            "doc": {
                "description": "Retrieves a value from the local cache.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name",
                        "description": "The name of the cache entry"
                    }
                ],
                "return": "The cached value or null if not found"
            },
            "comments": "  \/**\n   * Retrieves a value from the local cache.\n   *\n   * @param string $name The name of the cache entry\n   *\n   * @return string|null The cached value or null if not found\n   *\/"
        },
        "categories": {
            "name": "categories",
            "summary": "Returns a list of categories.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Cat.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function categories(): array\n  {\n    return $this->options(false);\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Cat",
            "startLine": 16,
            "endLine": 19,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "categories",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns a list of categories.\n",
                "params": [],
                "return": "The list of categories."
            },
            "comments": "  \/**\n   * Returns a list of categories.\n   *\n   * @return array The list of categories.\n   *\/"
        },
        "textValueCategories": {
            "name": "textValueCategories",
            "summary": "Returns the list of categories as a text\/value array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Cat.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function textValueCategories(): ?array\n  {\n    \/\/ Check if categories exist and retrieve them in the form of an indexed array on their 'id'.\n    if ($rs = $this->options(false)) {\n      \/\/ Initialize an empty array to store the list of categories as a text\/value array.\n      $res = [];\n\n      \/\/ Iterate over each category and create a corresponding text\/value entry.\n      foreach ($rs as $val => $text) {\n        $res[] = ['text' => $text, 'value' => $val];\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Cat",
            "startLine": 27,
            "endLine": 43,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "textValueCategories",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the list of categories as a text\/value array.\n",
                "params": [],
                "return": "The list of categories as a text\/value array, or null if no categories are found."
            },
            "comments": "  \/**\n   * Returns the list of categories as a text\/value array.\n   *\n   * @return null|array The list of categories as a text\/value array, or null if no categories are found.\n   *\/"
        },
        "fullCategories": {
            "name": "fullCategories",
            "summary": "Returns all characteristics of the options in a given category.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Cat.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullCategories(): array\n  {\n    \/\/ Retrieve the full options and iterate over them to modify their default values.\n    if ($opts = $this->fullOptions(false)) {\n      foreach ($opts as $k => $o) {\n        \/\/ If a default value exists, replace it with its corresponding text representation.\n        if (!empty($o['default'])) {\n          $opts[$k]['default'] = $this->text($o['default']);\n        }\n      }\n    }\n\n    return $opts ?? [];\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Cat",
            "startLine": 51,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "fullCategories",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns all characteristics of the options in a given category.\n",
                "params": [],
                "return": "An array of characteristics for each option in the category, indexed by their 'id'."
            },
            "comments": "  \/**\n   * Returns all characteristics of the options in a given category.\n   *\n   * @return array An array of characteristics for each option in the category, indexed by their 'id'.\n   *\/"
        },
        "jsCategories": {
            "name": "jsCategories",
            "summary": "Returns all characteristics of the options in a given category as an indexed array on their 'id'.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Cat.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function jsCategories($id = null)\n  {\n    \/\/ If no ID is provided, use the default code to determine it.\n    if (!$id) {\n      $id = $this->fromCode('options', $this->default);\n    }\n\n    \/\/ Check the cache for an existing result before calculating it.\n    if ($tmp = $this->getCache($id, __FUNCTION__)) {\n      return $tmp;\n    }\n\n    \/\/ Initialize a response array to store category information.\n    $res = [\n      'categories' => []\n    ];\n\n    \/\/ Retrieve the full options for the given ID (or all categories if no ID is provided).\n    if ($cats = $this->fullOptions($id ?: false)) {\n      foreach ($cats as $cat) {\n        \/\/ If a 'tekname' exists, retrieve additional information and create text\/value entries.\n        if (!empty($cat['tekname'])) {\n          $additional = [];\n          \/\/ Retrieve the schema for the current category's ID.\n          if ($schema = $this->getSchema($cat[$this->fields['id']])) {\n            \/\/ Add fields from the schema to the list of additional information.\n            array_push($additional, ...array_map(function ($a) {\n              return $a['field'];\n            }, $schema));\n          }\n          \/\/ Create text\/value entries for the current category and its options.\n          $res[$cat['tekname']] = $this->textValueOptions($cat[$this->fields['id']], 'text', 'value', ...$additional);\n          $res['categories'][$cat[$this->fields['id']]] = $cat['tekname'];\n        }\n      }\n    }\n\n    \/\/ Store the result in the cache and return it.\n    $this->setCache($id, __FUNCTION__, $res);\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Cat",
            "startLine": 72,
            "endLine": 112,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "jsCategories",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The ID of the category."
                }
            ],
            "doc": {
                "description": "Returns all characteristics of the options in a given category as an indexed array on their 'id'.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "The ID of the category."
                    }
                ],
                "return": "An array of characteristics for each option in the category, indexed by their 'id'."
            },
            "comments": "  \/**\n   * Returns all characteristics of the options in a given category as an indexed array on their 'id'.\n   *\n   * @param string|null $id The ID of the category.\n   * @return array An array of characteristics for each option in the category, indexed by their 'id'.\n   *\/"
        },
        "getCfg": {
            "name": "getCfg",
            "summary": "Returns a formatted content of the cfg column as an array.",
            "description": "Checks if the parent option has inheritance and sets array accordingly.\n\nThe following inheritance values are supported:\n- 'children': if the option is the direct parent\n- 'cascade': any level of parenthood",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Checks if the parent option has inheritance and sets array accordingly.\n\nThe following inheritance values are supported:\n- 'children': if the option is the direct parent\n- 'cascade': any level of parenthood"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Cfg.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCfg(...$codes): ?array\n  {\n    \/\/ Get the ID of the option from its code.\n    $id = $this->fromCode($codes);\n\n    \/\/ Check if the ID is valid and if the result is cached.\n    if (Str::isUid($id) && ($tmp = $this->cacheGet($id, __FUNCTION__))) {\n      return $tmp;\n    }\n\n    \/\/ Get references to class configuration and fields.\n    $c   = &$this->class_cfg;\n    $f   = &$this->fields;\n\n    \/\/ Retrieve the cfg value from the database.\n    $cfg = $this->db->selectOne($c['table'], $f['cfg'], [$f['id'] => $id]);\n\n    \/\/ Decode the JSON string to an array if possible, otherwise initialize as empty array.\n    $cfg = Str::isJson($cfg) ? json_decode($cfg, true) : [];\n\n    \/\/ Check for permissions and store them in the config array.\n    $perm = $cfg['permissions'] ?? false;\n\n    \/\/ Look for parent options with inheritance.\n    $parents = array_reverse($this->parents($id));\n    $last    = count($parents) - 1;\n\n    \/\/ Iterate through the parents to find one with inheritance.\n    foreach ($parents as $i => $p) {\n      \/\/ Retrieve the config of the parent option.\n      $parent_cfg = $this->db->selectOne($c['table'], $f['cfg'], [$f['id'] => $p]);\n\n      \/\/ Decode the JSON string to an array if possible, otherwise initialize as empty array.\n      $parent_cfg = Str::isJson($parent_cfg) ? json_decode($parent_cfg, true) : [];\n\n      \/\/ Check for inheritance in the parent's config or scfg.\n      if (!empty($parent_cfg['scfg']) && ($i === $last)) {\n        \/\/ Merge the current config with the parent's scfg and set inherit_from and frozen.\n        $cfg                 = array_merge((array)$cfg, $parent_cfg['scfg']);\n        $cfg['inherit_from'] = $p;\n        $cfg['frozen']       = 1;\n        break;\n      }\n\n      \/\/ Check for inheritance in the parent's config or scfg.\n      if (!empty($parent_cfg['inheritance']) || !empty($parent_cfg['scfg']['inheritance'])) {\n        \/\/ Check if the parent is a direct parent and its inheritance value is 'children' or 'cascade'.\n        if (\n          (($i === $last)\n            && (\n              (($parent_cfg['inheritance'] ?? null) === 'children')\n              || (!empty($parent_cfg['scfg']) && (($parent_cfg['scfg']['inheritance'] ?? null) === 'children'))\n            )\n          )\n          || (\n            (($parent_cfg['inheritance'] ?? null) === 'cascade')\n            || (!empty($parent_cfg['scfg']) && (($parent_cfg['scfg']['inheritance'] ?? null) === 'cascade'))\n          )\n        ) {\n          \/\/ Merge the current config with the parent's scfg or config, and set inherit_from and frozen.\n          $cfg                 = array_merge((array)$cfg, $parent_cfg['scfg'] ?? $parent_cfg);\n          $cfg['inherit_from'] = $p;\n          $cfg['frozen']       = 1;\n          break;\n        }\n        \/\/ If the current config is empty and the parent's inheritance value is 'default', use the parent's scfg or config.\n        elseif (\n          !count($cfg)\n          && ((($parent_cfg['inheritance'] ?? null) === 'default')\n            || (!empty($parent_cfg['scfg']) && (($parent_cfg['scfg']['inheritance'] ?? null) === 'default')))\n        ) {\n          $cfg                 = $parent_cfg['scfg'] ?? $parent_cfg;\n          $cfg['inherit_from'] = $p;\n        }\n      }\n    }\n\n    \/\/ Restore permissions if they were present initially.\n    if ($perm) {\n      $cfg['permissions'] = $perm;\n    }\n\n    \/\/ Set default values for mandatory fields.\n    $mandatories = ['show_code', 'show_alias', 'show_value', 'show_icon', 'sortable', 'allow_children', 'frozen'];\n    foreach ($mandatories as $m) {\n      $cfg[$m] = empty($cfg[$m]) ? 0 : 1;\n    }\n\n    \/\/ Set default values for fields that should be strings.\n    $mandatories = ['desc', 'inheritance', 'permissions', 'i18n', 'i18n_inheritance'];\n    foreach ($mandatories as $m) {\n      $cfg[$m] = empty($cfg[$m]) ? '' : $cfg[$m];\n    }\n\n    \/\/ Set default values for fields that should be null.\n    $mandatories = ['controller', 'schema', 'form', 'default_value'];\n    foreach ($mandatories as $m) {\n      $cfg[$m] = empty($cfg[$m]) ? null : $cfg[$m];\n    }\n\n    \/\/ Cache the result and return it.\n    $this->cacheSet($id, __FUNCTION__, $cfg);\n    return $cfg;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Cfg",
            "startLine": 23,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getCfg",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Any option(s) accepted by fromCode()"
                }
            ],
            "doc": {
                "description": "Returns a formatted content of the cfg column as an array.\nChecks if the parent option has inheritance and sets array accordingly.\n\nThe following inheritance values are supported:\n- 'children': if the option is the direct parent\n- 'cascade': any level of parenthood\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$codes",
                        "description": "Any option(s) accepted by fromCode()"
                    }
                ],
                "return": "The formatted array or null if the option cannot be found"
            },
            "comments": "  \/**\n   * Returns a formatted content of the cfg column as an array.\n   * Checks if the parent option has inheritance and sets array accordingly.\n   *\n   * The following inheritance values are supported:\n   * - 'children': if the option is the direct parent\n   * - 'cascade': any level of parenthood\n   *\n   * @param mixed ...$codes Any option(s) accepted by fromCode()\n   * @return array|null The formatted array or null if the option cannot be found\n   *\/"
        },
        "getRawCfg": {
            "name": "getRawCfg",
            "summary": "Returns the raw content of the cfg column for the given option.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Cfg.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRawCfg(...$codes): ?string\n  {\n    \/\/ Get the ID of the option from its code.\n    $id = $this->fromCode($codes);\n\n    \/\/ Check if the ID is valid and retrieve the raw cfg value from the database.\n    if (Str::isUid($id)) {\n      $c = &$this->class_cfg;\n      $f = &$this->fields;\n      return $this->db->selectOne($c['table'], $f['cfg'], [$f['id'] => $id]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Cfg",
            "startLine": 135,
            "endLine": 148,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getRawCfg",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Any option(s) accepted by fromCode()"
                }
            ],
            "doc": {
                "description": "Returns the raw content of the cfg column for the given option.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$codes",
                        "description": "Any option(s) accepted by fromCode()"
                    }
                ],
                "return": "The raw cfg value or null if the option cannot be found"
            },
            "comments": "  \/**\n   * Returns the raw content of the cfg column for the given option.\n   *\n   * @param mixed ...$codes Any option(s) accepted by fromCode()\n   * @return string|null The raw cfg value or null if the option cannot be found\n   *\/"
        },
        "getApplicableCfg": {
            "name": "getApplicableCfg",
            "summary": "Returns a formatted content of the cfg column as an array from the option's parent.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Cfg.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getApplicableCfg(...$codes): ?array\n  {\n    \/\/ Get the ID of the option from its code.\n    $id = $this->fromCode($codes);\n\n    \/\/ Check if the ID is valid and retrieve the parent's config.\n    if ($id && ($id_parent = $this->getIdParent($id))) {\n      return $this->getCfg($id_parent);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Cfg",
            "startLine": 157,
            "endLine": 168,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getApplicableCfg",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Any option(s) accepted by fromCode()"
                }
            ],
            "doc": {
                "description": "Returns a formatted content of the cfg column as an array from the option's parent.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$codes",
                        "description": "Any option(s) accepted by fromCode()"
                    }
                ],
                "return": "The formatted config or null if the option cannot be found"
            },
            "comments": "  \/**\n   * Returns a formatted content of the cfg column as an array from the option's parent.\n   *\n   * @param mixed ...$codes Any option(s) accepted by fromCode()\n   * @return array|null The formatted config or null if the option cannot be found\n   *\/"
        },
        "isSortable": {
            "name": "isSortable",
            "summary": "Tells if an option has its config set as sortable or no",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Cfg.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isSortable(...$codes): ?bool\n  {\n    \/\/ Get the ID of the option from its code.\n    $id = $this->fromCode($codes);\n\n    \/\/ Check if the ID is valid and retrieve the config to check for sortability.\n    if (Str::isUid($id)) {\n      $cfg = $this->getCfg($id);\n      return !empty($cfg['sortable']);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Cfg",
            "startLine": 177,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "isSortable",
            "returns": [
                null,
                "bool"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Any option(s) accepted by fromCode()"
                }
            ],
            "doc": {
                "description": "Tells if an option has its config set as sortable or no\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$codes",
                        "description": "Any option(s) accepted by fromCode()"
                    }
                ],
                "return": "Whether the option is sortable or null if the option cannot be found"
            },
            "comments": "  \/**\n   * Tells if an option has its config set as sortable or no\n   *\n   * @param mixed ...$codes Any option(s) accepted by fromCode()\n   * @return bool|null Whether the option is sortable or null if the option cannot be found\n   *\/"
        },
        "getSchema": {
            "name": "getSchema",
            "summary": "Retrieves the schema of an option.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Cfg.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSchema(string $id): ?array\n  {\n    \/\/ Retrieve the config to check for a schema.\n    if ($cfg = $this->getCfg($id)) {\n      \/\/ Check if a schema is defined and decode it from JSON.\n      if (!empty($cfg['schema']) && is_string($cfg['schema'])) {\n        return json_decode($cfg['schema'], true);\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Cfg",
            "startLine": 198,
            "endLine": 209,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getSchema",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The ID of the option"
                }
            ],
            "doc": {
                "description": "Retrieves the schema of an option.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The ID of the option"
                    }
                ],
                "return": "The schema or null if it cannot be found"
            },
            "comments": "  \/**\n   * Retrieves the schema of an option.\n   *\n   * @param string $id The ID of the option\n   * @return array|null The schema or null if it cannot be found\n   *\/"
        },
        "_fromCode": {
            "name": "_fromCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Code.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _fromCode(array $codes, $depth = 0): ?string\n  {\n    if ($this->check()) {\n      \/\/ Get the number of arguments provided.\n      $num = \\count($codes);\n\n      \/\/ If no arguments are provided, return null.\n      if (!$num) {\n        return null;\n      }\n\n      \/\/ Check for a special case where false is accepted as id_parent for root.\n      if (($num === 1) && ($codes[0] === false)) {\n        return $this->default;\n      }\n\n      \/\/ If the first argument is a valid UID, check if it's an existing option ID or proceed with further checks.\n      if (Str::isUid($codes[0])) {\n        if ($num === 1) {\n          return $codes[0];\n        }\n\n        \/\/ Perform an extra check to ensure the provided ID corresponds to its parent.\n        if ($this->getIdParent($codes[0]) === $this->_fromCode(\\array_slice($codes, 1), $depth + 1)) {\n          return $codes[0];\n        }\n      }\n\n      \/\/ Check if the first argument is a valid alphanumeric code.\n      if (empty($codes) || (!\\is_string($codes[0]) && !is_numeric($codes[0]))) {\n        return null;\n      }\n\n      \/\/ Handle special cases for certain codes, such as 'appui' or 'plugins'.\n      if (!$depth && (end($codes) === 'appui')) {\n        $codes[] = 'plugins';\n        $num++;\n      }\n\n      \/\/ Ensure that the last argument is a valid UID; otherwise, append the default value.\n      if (!Str::isUid(end($codes))) {\n        if (end($codes) === false) {\n          array_pop($codes);\n        }\n\n        $codes[] = $this->default;\n        $num++;\n      }\n\n      \/\/X::log($codes, 'codes');\n      \/\/ At this stage, we need at least one code and one ID to proceed with the query.\n      if ($num < 2) {\n        return null;\n      }\n\n      \/\/ Extract the parent ID and true code from the arguments.\n      $id_parent = array_pop($codes);\n      $true_code = array_pop($codes);\n      $enc_code  = $true_code ? base64_encode($true_code) : 'null';\n\n      \/\/ Define the cache name based on the encoded code.\n      $cache_name = 'get_code_' . $enc_code;\n\n      \/\/ Check if a cached result is available for the given parent ID and cache name.\n      if (($tmp = $this->cacheGet($id_parent, $cache_name))) {\n        \/\/ If no more arguments are provided, return the cached result directly.\n        if (!count($codes)) {\n          return $tmp;\n        }\n\n        \/\/ Otherwise, append the cached result to the remaining arguments and proceed recursively.\n        $codes[] = $tmp;\n        return $this->_fromCode($codes, $depth + 1);\n      }\n\n      \/\/ Perform a database query to find an option matching the provided code and parent ID.\n      $c = &$this->class_cfg;\n      $f = &$this->fields;\n\n      \/** @var int|false $tmp *\/\n      if ($tmp = $this->db->selectOne(\n        $c['table'],\n        $f['id'],\n        [\n          [$f['id_parent'], '=', $id_parent],\n          [$f['code'], '=', $true_code]\n        ]\n      )) {\n        \/\/ Cache the result for future queries.\n        $this->cacheSet($id_parent, $cache_name, $tmp);\n      }\n      \/\/ If still no match is found, attempt to follow an alias with a matching code.\n      elseif ($tmp = $this->db->selectOne([\n        'table' => $c['table'],\n        'fields' => [$c['table'] . '.' . $f['id']],\n        'join' => [[\n          'table' => $c['table'],\n          'alias' => 'o1',\n          'on' => [\n            [\n              'field' => 'o1.' . $f['id'],\n              'exp' => $c['table'] . '.' . $f['id_alias']\n            ]\n          ]\n        ]],\n        'where' => [\n          [$c['table'] . '.' . $f['id_parent'], '=', $id_parent],\n          ['o1.' . $f['code'], 'LIKE', $true_code]\n        ]\n      ])) {\n        \/\/ Cache the result for future queries.\n        $this->cacheSet($id_parent, $cache_name, $tmp);\n      }\n      \/\/ If no direct match is found, attempt to find a magic code option that bypasses the normal matching logic.\n      elseif (($tmp2 = $this->db->selectOne(\n          $c['table'],\n          $f['id'],\n          [\n            $f['id_parent'] => $id_parent,\n            $f['id_alias'] => [$this->getMagicOptionsTemplateId(), $this->getMagicSubOptionsTemplateId()]\n          ]\n        ))\n        && ($tmp = $this->db->selectOne(\n          $c['table'],\n          $f['id'],\n          [\n            [$f['id_parent'], '=', $tmp2],\n            [$f['code'], '=', $true_code]\n          ]\n        ))\n      ) {\n        \/\/ Cache the result for future queries.\n        $this->cacheSet($id_parent, $cache_name, $tmp);\n      }\n\n      \/\/ If a match is found, return the cached result or proceed recursively with the remaining arguments.\n      if ($tmp) {\n        if (\\count($codes)) {\n          $codes[] = $tmp;\n          return $this->_fromCode($codes, $depth + 1);\n        }\n\n        return $tmp;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Code",
            "startLine": 13,
            "endLine": 160,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_fromCode",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "depth",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "fromCode": {
            "name": "fromCode",
            "summary": "Retrieves an option's ID from its \"codes path\"",
            "description": "This method can handle diverse combinations of elements, such as:\n- A code or a series of codes from the most specific to a child of the root\n- A code or a series of codes and an id_parent where to find the last code\n- A code alone having $this->default as parent",
            "description_parts": [
                {
                    "type": "text",
                    "content": "This method can handle diverse combinations of elements, such as:\n- A code or a series of codes from the most specific to a child of the root\n- A code or a series of codes and an id_parent where to find the last code\n- A code alone having $this->default as parent"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Code.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fromCode(...$codes): ?string\n  {\n    \/\/ Check if the class is initialized and the database connection is valid.\n    \/\/ If the input is an array, extract its elements as separate arguments.\n    while (isset($codes[0]) && \\is_array($codes[0])) {\n      $codes = $codes[0];\n    }\n    \n    \/\/ Check if we have an option array as a parameter and return its ID directly.\n    if (isset($codes[$this->fields['id']])) {\n      return $codes[$this->fields['id']];\n    }\n\n    return $this->_fromCode($codes);\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Code",
            "startLine": 172,
            "endLine": 186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "fromCode",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The option's code(s)"
                }
            ],
            "doc": {
                "description": "Retrieves an option's ID from its \"codes path\"\n\nThis method can handle diverse combinations of elements, such as:\n- A code or a series of codes from the most specific to a child of the root\n- A code or a series of codes and an id_parent where to find the last code\n- A code alone having $this->default as parent\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$codes",
                        "description": "The option's code(s)"
                    }
                ],
                "return": "The ID of the option, null if not found, or false if the row cannot be found"
            },
            "comments": "  \/**\n   * Retrieves an option's ID from its \"codes path\"\n   *\n   * This method can handle diverse combinations of elements, such as:\n   * - A code or a series of codes from the most specific to a child of the root\n   * - A code or a series of codes and an id_parent where to find the last code\n   * - A code alone having $this->default as parent\n   *\n   * @param string ...$codes The option's code(s)\n   * @return string|null The ID of the option, null if not found, or false if the row cannot be found\n   *\/"
        },
        "fromRootCode": {
            "name": "fromRootCode",
            "summary": "Retrieves an option's ID from its code path, starting from the root.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Code.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fromRootCode(): ?string\n  {\n    \/\/ Save the default value and set it to the root for this query.\n    if ($this->check()) {\n      $def = $this->default;\n      $this->setDefault($this->root);\n      \/\/ Proceed with the query using the updated default value.\n      $res = $this->fromCode(...func_get_args());\n      \/\/ Restore the original default value after the query.\n      $this->setDefault($def);\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Code",
            "startLine": 194,
            "endLine": 208,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "fromRootCode",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Retrieves an option's ID from its code path, starting from the root.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves an option's ID from its code path, starting from the root.\n   *\n   * @return string|null\n   *\/"
        },
        "getCodes": {
            "name": "getCodes",
            "summary": "Returns an array of options in the form id => code.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Code.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCodes(...$codes): array\n  {\n    \/\/ Check if a valid ID is provided or can be resolved from the given codes.\n    if (Str::isUid($id = $this->fromCode(...$codes))) {\n      $c   = &$this->fields;\n      \/\/ Retrieve all options with their IDs and codes, sorted by either the 'num' or 'code' field depending on whether the parent option is sortable.\n      $opt = $this->db->rselectAll($this->class_cfg['table'], [$c['id'], $c['code']], [$c['id_parent'] => $id], [($this->isSortable($id) ? $c['num'] : $c['code']) => 'ASC']);\n      $res = [];\n      \/\/ Iterate over the retrieved options and populate the result array with their IDs and codes.\n      foreach ($opt as $r) {\n        if (!empty($r[$c['code']]) && Str::isInteger($r[$c['code']])) {\n          $r[$c['code']] = (int)$r[$c['code']];\n        }\n        $res[$r[$c['id']]] = $r[$c['code']];\n      }\n\n      return $res;\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Code",
            "startLine": 217,
            "endLine": 237,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getCodes",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns an array of options in the form id => code.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "Options' array"
            },
            "comments": "  \/**\n   * Returns an array of options in the form id => code.\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array Options' array\n   *\/"
        },
        "code": {
            "name": "code",
            "summary": "Returns an option's code.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Code.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function code(string $id): ?string\n  {\n    \/\/ Check if a valid ID is provided and the instance is properly initialized.\n    if ($this->check() && Str::isUid($id)) {\n      \/\/ Retrieve the code for the given ID from the database.\n      $code = $this->db->selectOne(\n        $this->class_cfg['table'],\n        $this->fields['code'],\n        [\n          $this->fields['id'] => $id\n        ]\n      );\n      \/\/ If the retrieved code is an integer, cast it to an integer for consistency.\n      if (!empty($code) && Str::isInteger($code)) {\n        $code = (int)$code;\n      }\n      return $code;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Code",
            "startLine": 246,
            "endLine": 266,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "code",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The options' ID"
                }
            ],
            "doc": {
                "description": "Returns an option's code.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The options' ID"
                    }
                ],
                "return": "The code value, null is none, false if option not found"
            },
            "comments": "  \/**\n   * Returns an option's code.\n   *\n   * @param string $id The options' ID\n   * @return string|null The code value, null is none, false if option not found\n   *\/"
        },
        "itext": {
            "name": "itext",
            "summary": "Returns translation of an option's text",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->itext(12));\n\/\/ Result of X::_(\"BBN's own IDE\") with fr as locale\n\/\/ (string) L'IDE de BBN\nX::dump($opt->itext('bbn_ide'));\n\/\/ (string) L'IDE de BBN"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function itext($code = null): ?string\n  {\n    return $this->getTranslation($this->fromCode(\\func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\I18n",
            "startLine": 25,
            "endLine": 28,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "itext",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns translation of an option's text\n\n```php\nX::dump($opt->itext(12));\n\/\/ Result of X::_(\"BBN's own IDE\") with fr as locale\n\/\/ (string) L'IDE de BBN\nX::dump($opt->itext('bbn_ide'));\n\/\/ (string) L'IDE de BBN\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "Text of the option"
            },
            "comments": "  \/**\n   * Returns translation of an option's text\n   *\n   * ```php\n   * X::dump($opt->itext(12));\n   * \/\/ Result of X::_(\"BBN's own IDE\") with fr as locale\n   * \/\/ (string) L'IDE de BBN\n   * X::dump($opt->itext('bbn_ide'));\n   * \/\/ (string) L'IDE de BBN\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return string|null Text of the option\n   *\/"
        },
        "findI18n": {
            "name": "findI18n",
            "summary": "Returns an array containing all options that have the property i18n set",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function findI18n(?string $startFromID = null, $items = false)\n  {\n    $res = [];\n    if ($this->check()) {\n      $where = [[\n        'field' => 'JSON_UNQUOTE(JSON_EXTRACT(' . $this->fields['cfg'] . ', \"$.i18n\"))',\n        'operator' => 'isnotnull'\n      ], [\n        'field' => 'JSON_UNQUOTE(JSON_EXTRACT(' . $this->fields['cfg'] . ', \"$.i18n\"))',\n        'operator' => '!=',\n        'value' => ''\n      ]];\n      if (Str::isUid($startFromID)) {\n        $where = [[\n          'field' => $this->fields['id'],\n          'value' => $startFromID\n        ]];\n      }\n      $opts = $this->db->rselectAll([\n        'table' => $this->class_cfg['table'],\n        'fields' => [\n          $this->fields['id'],\n          $this->fields['id_parent'],\n          $this->fields['code'],\n          $this->fields['text'],\n          'language' => 'JSON_UNQUOTE(JSON_EXTRACT(' . $this->fields['cfg'] . ', \"$.i18n\"))'\n        ],\n        'where' => $where\n      ]);\n\n      if ($opts) {\n        foreach ($opts as $opt){\n          if (!empty($opt[$this->fields['code']])\n            && Str::isInteger($opt[$this->fields['code']])\n          ) {\n            $opt[$this->fields['code']] = (int)$opt[$this->fields['code']];\n          }\n          if (\\is_null(X::find($res, [$this->fields['id'] => $opt[$this->fields['id']]]))) {\n            $cfg = $this->getCfg($opt[$this->fields['id']]);\n            if (!empty($cfg['i18n'])) {\n              $res[] = $opt;\n            }\n            if (!empty($cfg['i18n_inheritance'])) {\n              $this->findI18nChildren($opt, $res, $cfg['i18n_inheritance'] === 'cascade');\n            }\n          }\n        }\n      }\n      if (!empty($res) && !empty($items)) {\n        $res2 = [];\n        foreach ($res as $r) {\n          $res2[] = \\array_merge($r, [\n            'items' => array_values(array_filter($res, function($o) use($r) {\n              return $o[$this->fields['id_parent']] === $r[$this->fields['id']];\n            }))\n          ]);\n        }\n        return $res2;\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\I18n",
            "startLine": 37,
            "endLine": 99,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "findI18n",
            "returns": [],
            "arguments": [
                {
                    "name": "startFromID",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "romID"
                },
                {
                    "name": "items",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array containing all options that have the property i18n set\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$start",
                        "description": "romID"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$items"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array containing all options that have the property i18n set\n   * @param string|null $startFromID\n   * @param bool $items\n   * @return array\n   *\/"
        },
        "findI18nOption": {
            "name": "findI18nOption",
            "summary": "returns an array containing the option (having the property i18n set) corresponding to the given id",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function findI18nOption($id, $items = true)\n  {\n    $res = [];\n    if ($this->check()) {\n      if ($opt = $this->db->rselect(\n        $this->class_cfg['table'], [\n          $this->fields['id'],\n          $this->fields['id_parent'],\n          $this->fields['text'],\n          $this->fields['cfg']\n        ], [$this->fields['id'] => $id]\n      )\n      ) {\n        $cfg  = json_decode($opt[$this->fields['cfg']]);\n        if (!empty($cfg->i18n)) {\n          $opt['language'] = $cfg->i18n;\n        }\n\n        unset($opt[$this->fields['cfg']]);\n        if (!empty($items)) {\n          $res[] = array_merge($opt, ['items' => $this->fullOptions($id) ?? []]);\n        }\n        else {\n          $res[] = $opt;\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\I18n",
            "startLine": 109,
            "endLine": 138,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "findI18nOption",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "items",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "returns an array containing the option (having the property i18n set) corresponding to the given id\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$items"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * returns an array containing the option (having the property i18n set) corresponding to the given id\n   *\n   * @param $id\n   * @param bool $items\n   * @return array\n   *\/"
        },
        "findI18nLocales": {
            "name": "findI18nLocales",
            "summary": "Returns an array containing all languages set",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function findI18nLocales(?string $startFromID = null): ?array\n  {\n    if ($this->check()) {\n      if (empty($startFromID)) {\n        return \\array_unique($this->db->getFieldValues([\n          'table' => $this->class_cfg['table'],\n          'fields' => [\n            'JSON_UNQUOTE(JSON_EXTRACT('.$this->fields['cfg'].', \"$.i18n\"))'\n          ],\n          'where' => [[\n            'field' => 'JSON_UNQUOTE(JSON_EXTRACT('.$this->fields['cfg'].', \"$.i18n\"))',\n            'operator' => 'isnotnull'\n          ], [\n            'field' => 'JSON_UNQUOTE(JSON_EXTRACT('.$this->fields['cfg'].', \"$.i18n\"))',\n            'operator' => '!=',\n            'value' => ''\n          ]]\n        ]));\n      }\n      $res = [];\n      $cfg = $this->getCfg($startFromID);\n      if (!empty($cfg['i18n'])) {\n        $res[] = $cfg['i18n'];\n      }\n      if ($items = $this->items($startFromID)) {\n        foreach ($items as $item) {\n          $res = X::mergeArrays($res, $this->findI18n($item));\n        }\n      }\n      return \\array_unique($res);\n    }\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\I18n",
            "startLine": 146,
            "endLine": 178,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "findI18nLocales",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "startFromID",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array containing all languages set\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array containing all languages set\n   *\n   * @return null|array\n   *\/"
        },
        "findI18nByLocale": {
            "name": "findI18nByLocale",
            "summary": "Returns an array containing all options that have the property i18n set",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function findI18nByLocale(string $locale, $items = false): array\n  {\n    $res = [];\n    if ($this->check()) {\n      $opts = $this->db->rselectAll([\n        'table' => $this->class_cfg['table'],\n        'fields' => [\n          $this->fields['id'],\n          $this->fields['id_parent'],\n          $this->fields['code'],\n          $this->fields['text'],\n          'language' => 'JSON_UNQUOTE(JSON_EXTRACT('.$this->fields['cfg'].', \"$.i18n\"))'\n        ],\n        'where' => [\n          'JSON_UNQUOTE(JSON_EXTRACT('.$this->fields['cfg'].', \"$.i18n\"))' => $locale\n        ]\n      ]) ?: [];\n      if ($opts) {\n        foreach ($opts as $opt){\n          if (!empty($opt[$this->fields['code']])\n            && Str::isInteger($opt[$this->fields['code']])\n          ) {\n            $opt[$this->fields['code']] = (int)$opt[$this->fields['code']];\n          }\n          if (\\is_null(X::find($res, [$this->fields['id'] => $opt[$this->fields['id']]]))) {\n            $cfg = $this->getCfg($opt[$this->fields['id']]);\n            $res[] = $opt;\n            if (!empty($cfg['i18n_inheritance'])) {\n              $this->findI18nChildren($opt, $res, $cfg['i18n_inheritance'] === 'cascade');\n            }\n          }\n        }\n      }\n      if (!empty($res) && !empty($items)) {\n        $res2 = [];\n        foreach ($res as $r) {\n          $res2[] = \\array_merge($r, [\n            'items' => array_values(array_filter($res, function($o) use($r) {\n              return $o[$this->fields['id_parent']] === $r[$this->fields['id']];\n            }))\n          ]);\n        }\n        return $res2;\n      }\n    }\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\I18n",
            "startLine": 188,
            "endLine": 234,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "findI18nByLocale",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "locale",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "items",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array containing all options that have the property i18n set\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$items"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array containing all options that have the property i18n set\n   *\n   * @param string $locale\n   * @param bool $items\n   * @return array\n   *\/"
        },
        "findI18nById": {
            "name": "findI18nById",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function findI18nById(string $id): ?string\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      if ($c = $this->cacheGet($id, __FUNCTION__)) {\n        return $c['i18n'];\n      }\n\n      $i18n = null;\n      if ($cfg = $this->getCfg($id)) {\n        if (!empty($cfg['i18n'])) {\n          $i18n = $cfg['i18n'];\n        }\n      }\n\n      if (empty($i18n)\n        && ($parents = $this->parents($id))\n      ) {\n        foreach ($parents as $i => $parent) {\n          $pcfg = $this->getCfg($parent);\n          if (empty($pcfg)\n            || empty($pcfg['i18n'])\n          ) {\n            continue;\n          }\n\n          if (!empty($pcfg['i18n_inheritance'])\n            && (($pcfg['i18n_inheritance'] === 'cascade')\n              || (($pcfg['i18n_inheritance'] === 'children')\n                && ($i === 0)))\n          ) {\n            $i18n = $pcfg['i18n'];\n            break;\n          }\n\n          $i18n = null;\n          break;\n        }\n      }\n\n      $this->cacheSet($id, __FUNCTION__, ['i18n' => $i18n]);\n      return $i18n;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\I18n",
            "startLine": 237,
            "endLine": 281,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "findI18nById",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTranslation": {
            "name": "getTranslation",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/I18n.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTranslation(string $id, string $locale = ''): ?string\n  {\n    if (Str::isUid($id)\n      && ($originalLocale = $this->findI18nById($id))\n      && ($text = $this->text($id))\n    ) {\n      if (empty($locale)) {\n        $locale = $this->getTranslatingLocale($id);\n      }\n      if (!empty($locale)) {\n        $i18nCls = new I18nCls($this->db);\n        return  $i18nCls->getTranslation($text, $originalLocale, $locale);\n      }\n    }\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\I18n",
            "startLine": 284,
            "endLine": 299,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getTranslation",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "findI18nChildren": {
            "name": "findI18nChildren",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/I18n.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function findI18nChildren(array $opt, array &$res, bool $cascade = false, string $locale = null){\n    $fid = $this->fields['id'];\n    if ($children = $this->fullOptions($opt[$fid])) {\n      foreach ($children as $child) {\n        if (\\is_null(X::find($res, [$fid => $child[$fid]]))) {\n          $cfg = $this->getCfg($child[$fid]);\n          $child = [\n            $this->fields['id'] => $child[$this->fields['id']],\n            $this->fields['id_parent'] => $child[$this->fields['id_parent']],\n            $this->fields['code'] => $child[$this->fields['code']],\n            $this->fields['text'] => $child[$this->fields['text']],\n            'language' => !empty($cfg['i18n']) ? $cfg['i18n'] : $opt['language']\n          ];\n          if (empty($locale)\n            || ($child['language'] === $locale)\n          ) {\n            $res[] = $child;\n          }\n          if (!empty($cfg['i18n_inheritance'])\n            || (empty($cfg['i18n']) && $cascade)\n          ) {\n            $c = ($cfg['i18n_inheritance'] === 'cascade')\n              || (empty($cfg['i18n']) && $cascade);\n            $this->findI18nChildren($child, $res, $c);\n          }\n        }\n      }\n    }\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\I18n",
            "startLine": 302,
            "endLine": 331,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "findI18nChildren",
            "returns": [],
            "arguments": [
                {
                    "name": "opt",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "res",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": true,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cascade",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 3,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getTranslatingLocale": {
            "name": "getTranslatingLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/I18n.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function getTranslatingLocale(string $id): ?string\n  {\n    $originalLocale = $this->findI18nById($id);\n    $locale = null;\n    if (!empty($originalLocale)\n      && \\defined('BBN_LANG')\n      && (BBN_LANG !== $originalLocale)\n    ) {\n      $locale = BBN_LANG;\n    }\n\n    return $locale;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\I18n",
            "startLine": 334,
            "endLine": 346,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTranslatingLocale",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "codeOptions": {
            "name": "codeOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Indexed.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function codeOptions(...$codes): ?array\n  {\n    \/\/ Get the ID from the provided codes.\n    if (Str::isUid($id = $this->fromCode($codes))) {\n      \/\/ Retrieve the list of items for the given ID.\n      $list = $this->items($id);\n      \n      \/\/ If the list is an array, process it to create the result array.\n      if (\\is_array($list)) {\n        $res = [];\n        $cfg = $this->getCfg($id) ?: [];\n        \n        \/\/ Iterate over each item in the list and add its details to the result array.\n        foreach ($list as $i){\n          $o = $this->option($i);\n          $res[$o[$this->fields['code']]] = [\n            $this->fields['id'] => $o[$this->fields['id']],\n            $this->fields['code'] => $o[$this->fields['code']],\n            $this->fields['text'] => $o[$this->fields['text']]\n          ];\n\n          \/\/ If the configuration has a schema, add its fields to the result array.\n          if ( !empty($cfg['schema']) ){\n            if ( \\is_string($cfg['schema']) ){\n              $cfg['schema'] = json_decode($cfg['schema'], true);\n            }\n  \n            foreach ( $cfg['schema'] as $s ){\n              if (!empty($s['field']) && !in_array($s['field'], [$this->fields['id'], $this->fields['code'], $this->fields['text']])) {\n                $res[$o[$this->fields['code']]][$s['field']] = $o[$s['field']] ?? null;\n              }\n            }\n          }\n\n        }\n\n        return $res;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Indexed",
            "startLine": 9,
            "endLine": 50,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "codeOptions",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "codeIds": {
            "name": "codeIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Indexed.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function codeIds(...$codes): ?array\n  {\n    \/\/ Get the ID from the provided codes.\n    if (Str::isUid($id = $this->fromCode($codes))) {\n      \/\/ Retrieve the list of items for the given ID.\n      $list = $this->items($id);\n      \n      \/\/ If the list is an array, process it to create the result array.\n      if (\\is_array($list)) {\n        $res = [];\n        \n        \/\/ Iterate over each item in the list and add its ID to the result array.\n        foreach ($list as $i){\n          $o               = $this->option($i);\n          $res[$o[$this->fields['code']]] = $o[$this->fields['id']];\n        }\n\n        return $res;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Indexed",
            "startLine": 54,
            "endLine": 76,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "codeIds",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fullOptionsById": {
            "name": "fullOptionsById",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Indexed.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullOptionsById(...$codes): ?array\n  {\n    \/\/ Initialize the result array.\n    $res = [];\n    \n    \/\/ Get the full options for the provided codes.\n    if ($opt = $this->fullOptions($codes)) {\n      $cf = $this->getFields();\n      \n      \/\/ Iterate over each option and add its details to the result array.\n      foreach ($opt as $o){\n        $res[$o[$cf['id']]] = $o;\n      }\n    }\n\n    return $opt === null ? $opt : $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Indexed",
            "startLine": 81,
            "endLine": 97,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "fullOptionsById",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fullOptionsByCode": {
            "name": "fullOptionsByCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Indexed.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullOptionsByCode(...$codes): ?array\n  {\n    \/\/ Initialize the result array.\n    $res = [];\n    \n    \/\/ Get the full options for the provided codes.\n    if ($opt = $this->fullOptions($codes)) {\n      $cf = $this->getFields();\n      \n      \/\/ Iterate over each option and add its details to the result array.\n      foreach ($opt as $o){\n        $res[$o[$cf['code']]] = $o;\n      }\n    }\n\n    return $opt === null ? $opt : $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Indexed",
            "startLine": 101,
            "endLine": 117,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "fullOptionsByCode",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "optionsByCode": {
            "name": "optionsByCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Indexed.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function optionsByCode(...$codes): ?array\n  {\n    \/\/ Get the ID from the provided codes.\n    if (Str::isUid($id = $this->fromCode($codes))) {\n      \/\/ Check if the result is cached.\n      if ($r = $this->getCache($id, __FUNCTION__)) {\n        return $r;\n      }\n\n      \/\/ Retrieve the native options for the given ID.\n      $opts = $this->nativeOptions($id);\n      \n      \/\/ If there are options, create the result array.\n      if ($opts) {\n        $res = [];\n        \n        \/\/ Iterate over each option and add its code and text to the result array.\n        foreach ($opts as $o) {\n          $res[$o[$this->fields['code']]] = $o[$this->fields['text']];\n        }\n        \n        \/\/ Sort the result array by value.\n        \\asort($res);\n        $opts = $res;\n      }\n\n      \/\/ Cache the result and return it.\n      $this->setCache($id, __FUNCTION__, $opts);\n      return $opts;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Indexed",
            "startLine": 121,
            "endLine": 153,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "optionsByCode",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "textValueOptions": {
            "name": "textValueOptions",
            "summary": "Returns an option's children array of id and text in a user-defined indexed array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Indexed.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function textValueOptions(string $id, string $text = 'text', string $value = 'value', ...$additionalFields): ?array\n  {\n    \/\/ Initialize the result array.\n    $res = [];\n    \n    \/\/ Get the full options for the provided codes.\n    if ($opts = $this->fullOptions($id)) {\n      \/\/ Get the configuration for the given code.\n      $cfg = $this->getCfg($id) ?: [];\n      \n      \/\/ Initialize a counter.\n      $i   = 0;\n      \n      \/\/ Iterate over each option and add it to the result array.\n      foreach ($opts as $k => $o) {\n        if (!isset($is_array)) {\n          $is_array = \\is_array($o);\n        }\n        \n        $res[$i] = [\n          $text => $is_array ? $o[$this->fields['text']] : $o,\n          $value => $is_array ? $o[$this->fields['id']] : $k\n        ];\n        if (!empty($cfg['show_code'])) {\n          $res[$i][$this->fields['code']] = $o[$this->fields['code']];\n        }\n        foreach ($additionalFields as $f) {\n          if (!array_key_exists($f, $res[$i])) {\n            $res[$i][$f] = $o[$f] ?? null;\n          }\n        }\n        \n        $i++;\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Indexed",
            "startLine": 166,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "textValueOptions",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The option's ID or its code if it is children of {@link default}"
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": "",
                    "description": "The text field name for the text column"
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": "",
                    "description": "The value field name for the id column"
                },
                {
                    "name": "additionalFields",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ields Additional fields to include in the result"
                }
            ],
            "doc": {
                "description": "Returns an option's children array of id and text in a user-defined indexed array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int|string",
                        "name": "$id",
                        "description": "The option's ID or its code if it is children of {@link default}"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$text",
                        "description": "The text field name for the text column"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$value",
                        "description": "The value field name for the id column"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$additional",
                        "description": "ields Additional fields to include in the result"
                    }
                ],
                "return": "Options' list in a text\/value indexed array or null if not found"
            },
            "comments": "  \/**\n   * Returns an option's children array of id and text in a user-defined indexed array.\n   *\n   * @param int|string      $id    The option's ID or its code if it is children of {@link default}\n   * @param string          $text  The text field name for the text column\n   * @param string          $value The value field name for the id column\n   * @param string          ...$additionalFields Additional fields to include in the result\n   *\n   * @return array|null Options' list in a text\/value indexed array or null if not found\n   *\/"
        },
        "export": {
            "name": "export",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Manip.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function export(string $id, string $mode = 'single'): ?array\n  {\n    $default = $this->getDefault();\n    $this->setDefault($this->root);\n    $o = null;\n    $modes = ['children', 'full', 'sfull', 'schildren', 'simple', 'single'];\n    if (!in_array($mode, $modes)) {\n      throw new Exception(X::_(\"The given mode is forbidden\"));\n    }\n\n    $simple = false;\n    switch ($mode) {\n      case 'single':\n        $o = $this->rawOption($id);\n        break;\n      case 'simple':\n        $o = $this->option($id);\n        $simple = true;\n        break;\n      case 'schildren':\n        $o = $this->fullOptions($id);\n        $simple = true;\n        break;\n      case 'children':\n        $o = $this->exportDb($id, false, true);\n        break;\n      case 'full':\n        $o = $this->exportDb($id, true, true);\n        break;\n      case 'sfull':\n        $o = $this->fullTree($id);\n        $simple = true;\n        break;\n    }\n\n    if ($o) {\n      if ($simple) {\n        $opt =& $this;\n        $fn  = function ($o) use (&$opt) {\n\n          $o[$opt->fields['text']] = $opt->rawText($o[$opt->fields['id']]);\n\n          $cfg = $opt->getCfg($o[$this->fields['id']]);\n          if (!is_array($cfg) || !empty($cfg['inherit_from'])) {\n            $cfg = [];\n          }\n          elseif (!empty($cfg['schema']) && is_string($cfg['schema'])) {\n            $cfg['schema'] = json_decode($cfg['schema'], true);\n          }\n\n          \/\/if (isset($cfg['id'])) {\n            \/\/unset($cfg['id']);\n          \/\/}\n\n          if (isset($cfg['scfg'])\n              && !empty($cfg['scfg']['schema']) && is_string($cfg['scfg']['schema'])\n          ) {\n            $cfg['scfg']['schema'] = json_decode($cfg['scfg']['schema'], true);\n          }\n\n          if (!empty($cfg['id_root_alias'])) {\n            if ($codes = $opt->getCodePath($cfg['id_root_alias'])) {\n              $cfg['id_root_alias'] = $codes;\n            }\n            else {\n              unset($cfg['id_root_alias']);\n            }\n          }\n\n          foreach ($cfg as $n => $v) {\n            if (!$v) {\n              unset($cfg[$n]);\n            }\n          }\n\n          if (!empty($cfg)) {\n            $o[$this->fields['cfg']] = $cfg;\n          }\n\n          unset($o[$this->fields['id']]);\n          unset($o[$this->fields['id_parent']]);\n          if (isset($o['num_children'])) {\n            unset($o['num_children']);\n          }\n\n          if (isset($o['alias'])) {\n            unset($o['alias']);\n          }\n\n          foreach ($o as $n => $v) {\n            if (!$v) {\n              unset($o[$n]);\n            }\n          }\n\n          if (!empty($o[$this->fields['id_alias']])\n              && ($codes = $opt->getCodePath($o[$this->fields['id_alias']]))\n          ) {\n            $o[$this->fields['id_alias']] = $codes;\n          }\n          else {\n            unset($o[$this->fields['id_alias']]);\n          }\n\n          return $o;\n        };\n\n        switch ($mode) {\n          case 'simple':\n            $o = $fn($o);\n            break;\n          case 'schildren':\n            $o = X::map($fn, $o, 'items');\n            break;\n          case 'sfull':\n            $o = $fn($o);\n            $o['items'] = empty($o['items']) ? [] : X::map($fn, $o['items'], 'items');\n            break;\n        }\n      }\n\n    }\n    \n    $this->setDefault($default);\n    return $o;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Manip",
            "startLine": 18,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "export",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "single",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $id\n   * @param string $mode\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "exportDb": {
            "name": "exportDb",
            "summary": "Converts an option or a hierarchy to a multi-level array with JSON values",
            "description": "If $return is false the resulting array will be printed",
            "description_parts": [
                {
                    "type": "text",
                    "content": "If $return is false the resulting array will be printed"
                },
                {
                    "type": "code",
                    "content": ""
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Manip.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function exportDb($id, bool $deep = false, bool $return = false, bool $aliases = false)\n  {\n    if (($ret = $deep ? $this->rawTree($id) : $this->rawOptions($id))) {\n      $ret  = $this->analyzeOut($ret);\n      $res  = [];\n      $done = [];\n      $max  = 3;\n      foreach ($ret['options'] as $i => $o) {\n        if (!$i || in_array($o[$this->fields['id_parent']], $done, true)) {\n          if (empty($o[$this->fields['id_alias']])) {\n            $res[]  = $o;\n            $done[] = $o[$this->fields['id']];\n          }\n        }\n      }\n\n      while ($max && (count($res) < count($ret['options']))) {\n        foreach ($ret['options'] as $i => $o) {\n          if (!empty($o[$this->fields['id_alias']])\n              && !in_array($o[$this->fields['id']], $done, true)\n              && in_array($o[$this->fields['id_parent']], $done, true)\n              && in_array($o[$this->fields['id_alias']], $done, true)\n          ) {\n            $res[]  = $o;\n            $done[] = $o[$this->fields['id']];\n          }\n        }\n\n        $max--;\n      }\n\n      if (count($res) < count($ret['options'])) {\n        foreach ($ret['options'] as $i => $o) {\n          if (!in_array($o[$this->fields['id_parent']], $done, true)) {\n            $o[$this->fields['id_parent']] = $this->getCodePath($o[$this->fields['id_parent']]);\n          }\n\n          if (!empty($o[$this->fields['id_alias']])\n              && !in_array($o[$this->fields['id']], $done, true)\n          ) {\n            if (!in_array($o[$this->fields['id_alias']], $done, true)) {\n              $code_path     = $this->getCodePath($o[$this->fields['id_alias']]);\n              $o[$this->fields['id_alias']] = $code_path ?: $o[$this->fields['id_alias']];\n            }\n\n            $res[]  = $o;\n            $done[] = $o[$this->fields['id']];\n          }\n        }\n      }\n\n      return $return ? $res : var_export($res, 1);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Manip",
            "startLine": 159,
            "endLine": 214,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "exportDb",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The ID of the option to clone"
                },
                {
                    "name": "deep",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true children will be included"
                },
                {
                    "name": "return",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the resulting array will be returned"
                },
                {
                    "name": "aliases",
                    "position": 3,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Converts an option or a hierarchy to a multi-level array with JSON values\nIf $return is false the resulting array will be printed\n\n```php\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id",
                        "description": "The ID of the option to clone"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$deep",
                        "description": "If set to true children will be included"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$return",
                        "description": "If set to true the resulting array will be returned"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Example output"
                }
            },
            "comments": "  \/**\n   * Converts an option or a hierarchy to a multi-level array with JSON values\n   * If $return is false the resulting array will be printed\n   *\n   * ```php\n   * ```\n   *\n   * @todo Example output\n   * @param int     $id     The ID of the option to clone\n   * @param boolean $deep   If set to true children will be included\n   * @param boolean $return If set to true the resulting array will be returned\n   * @return array|string|null\n   *\/"
        },
        "importAll": {
            "name": "importAll",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Manip.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function importAll(array $options, $id_parent = null) {\n    $res = 0;\n    foreach ($this->import($options, $id_parent) as $num) {\n      $res += $num;\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Manip",
            "startLine": 217,
            "endLine": 224,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "importAll",
            "returns": [],
            "arguments": [
                {
                    "name": "options",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_parent",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "import": {
            "name": "import",
            "summary": "Insert into the option table an exported array of options",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": ""
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Manip.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function import(array $options, $id_parent = null, array &$todo = null)\n  {\n    if (is_array($id_parent)) {\n      array_push($id_parent, $this->getRoot());\n      $id_parent = $this->fromCode($id_parent);\n    }\n    elseif (null === $id_parent) {\n      $id_parent = $this->getDefault();\n    }\n\n    if (!empty($options) && $this->check() && $this->exists($id_parent)) {\n      $c       =& $this->fields;\n      $is_root = false;\n      if ($todo === null) {\n        $is_root = true;\n        $todo    = [];\n      }\n\n      if (!isset($options[0])) {\n        $options = [$options];\n      }\n\n      if (X::isAssoc($options)) {\n        $options = [$options];\n      }\n\n      foreach ($options as $o) {\n        $tmp   = [];\n        $items = [];\n        \/** @todo Temp solution *\/\n        if (!is_array($o)) {\n          continue;\n        }\n        if (isset($o[$c['id']])) {\n          if ($this->exists($o[$c['id']])) {\n            unset($o[$c['id']]);\n          }\n        }\n\n        $o[$c['id_parent']] = $id_parent ?: $this->default;\n        if (isset($o['items'])) {\n          $items = $o['items'] ?: null;\n          unset($o['items']);\n        }\n\n\n        $hasNoText = empty($o[$c['text']]);\n        if (isset($o[$c['id_alias']])) {\n          $tmp['id_alias'] = $o[$c['id_alias']];\n          if ($hasNoText) {\n            $o[$c['text']] = 'waiting for alias';\n          }\n          unset($o[$c['id_alias']]);\n        }\n\n        if (isset($o[$c['cfg']]) && !empty($o[$c['cfg']]['id_root_alias'])) {\n          $tmp['id_root_alias'] = $o[$c['cfg']]['id_root_alias'];\n          unset($o[$c['cfg']]['id_root_alias']);\n        }\n\n        if ($id = $this->add($o, true)) {\n          yield 1;\n          if (!empty($tmp)) {\n            $todo[$id] = $tmp;\n          }\n\n          if (!empty($items)) {\n            foreach ($this->import($items, $id, $todo) as $success) {\n              yield $success;\n            }\n          }\n        }\n        else {\n          X::log($o);\n          throw new Exception(X::_(\"Error while importing: impossible to add\"));\n        }\n      }\n\n      if ($is_root && !empty($todo)) {\n        foreach ($todo as $id => $td) {\n          if (!empty($td['id_alias'])) {\n            array_push($td['id_alias'], $this->getRoot());\n            if ($id_alias = $this->fromCode(...$td['id_alias'])) {\n              try {\n                $this->setAlias($id, $id_alias);\n                if ($hasNoText) {\n                  $this->setText($id, null);\n                }\n              }\n              catch (Exception $e) {\n                throw new Exception($e->getMessage());\n              }\n            }\n            else {\n              X::log($td['id_alias']);\n              throw new Exception(\n                X::_(\n                  \"Error while importing: impossible to set the alias %s\",\n                  json_encode($td, JSON_PRETTY_PRINT)\n                )\n              );\n            }\n          }\n\n          if (!empty($td['id_root_alias'])\n              && ($id_root_alias = $this->fromCode(...$td['id_root_alias']))\n          ) {\n            $this->setcfg($id, ['id_root_alias' => $id_root_alias], true);\n          }\n        }\n      }\n\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Manip",
            "startLine": 239,
            "endLine": 352,
            "isDeprecated": false,
            "isGenerator": true,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "import",
            "returns": [],
            "arguments": [
                {
                    "name": "options",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "An array of option(s) as export returns it"
                },
                {
                    "name": "id_parent",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "parent The option target, if not specified {@link default}"
                },
                {
                    "name": "todo",
                    "position": 2,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": true,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Insert into the option table an exported array of options\n\n```php\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$options",
                        "description": "An array of option(s) as export returns it"
                    },
                    {
                        "tag": "param",
                        "type": "array|string|int|null",
                        "name": "$id",
                        "description": "parent The option target, if not specified {@link default}"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$todo"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Usage example"
                }
            },
            "comments": "  \/**\n   * Insert into the option table an exported array of options\n   *\n   * ```php\n   * ```\n   *\n   * @todo Usage example\n   * @param array    $options   An array of option(s) as export returns it\n   * @param array|string|int|null $id_parent The option target, if not specified {@link default}\n   * @param array|null $todo\n   * @return iterable|null\n   *\/"
        },
        "duplicate": {
            "name": "duplicate",
            "summary": "Copies and insert an option into a target option",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": ""
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Manip.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function duplicate($id, $target, $deep = false, $force = false, $return_num = false)\n  {\n    $res    = null;\n    $target = $this->fromCode($target);\n    if (Str::isUid($target)) {\n      if ($opt = $this->export($id, $deep ? 'sfull' : 'simple')) {\n        foreach ($this->import($opt, $target) as $num) {\n          $res += $num;\n        }\n        $this->deleteCache($target);\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Manip",
            "startLine": 368,
            "endLine": 382,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 2,
            "shortName": "duplicate",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The source option's ID"
                },
                {
                    "name": "target",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The destination option's ID"
                },
                {
                    "name": "deep",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true, children will also be duplicated"
                },
                {
                    "name": "force",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true and option exists it will be merged"
                },
                {
                    "name": "return_num",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Copies and insert an option into a target option\n\n```php\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int|string",
                        "name": "$id",
                        "description": "The source option's ID"
                    },
                    {
                        "tag": "param",
                        "type": "int|string",
                        "name": "$target",
                        "description": "The destination option's ID"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$deep",
                        "description": "If set to true, children will also be duplicated"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$force",
                        "description": "If set to true and option exists it will be merged"
                    }
                ],
                "return": "The number of affected rows or null if option not found",
                "todo": {
                    "tag": "todo",
                    "text": "Usage example"
                }
            },
            "comments": "  \/**\n   * Copies and insert an option into a target option\n   *\n   * ```php\n   * ```\n   *\n   * @todo Usage example\n   * @param int|string  $id     The source option's ID\n   * @param int|string  $target The destination option's ID\n   * @param boolean     $deep   If set to true, children will also be duplicated\n   * @param boolean     $force  If set to true and option exists it will be merged\n   * @return int|null The number of affected rows or null if option not found\n   *\/"
        },
        "apply": {
            "name": "apply",
            "summary": "Applies a function to children of an option and updates the database",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": ""
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Manip.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function apply(callable $f, $id, $deep = false, bool $force = false)\n  {\n    if ($this->check()) {\n      $originals = \\is_array($id) ? $id : ( $deep ? $this->fullTree($id) : $this->fullOptions($id) );\n      if (isset($originals['items'])) {\n        $originals = $originals['items'];\n      }\n      $t = $this;\n      $originals = $this->map(function($o) use($t){\n        $o[$t->fields['text']] = $t->rawText($o[$this->fields['id']]);\n        return $o;\n      }, $originals, $deep);\n      $opts = $this->map($f, $originals, $deep);\n      if (\\is_array($opts)) {\n        $changes = 0;\n        foreach ($opts as $i => $o){\n          if ($force || $originals[$i] !== $o) {\n            $changes += (int)$this->set($o[$this->fields['id']], $o);\n          }\n\n          if ($deep && !empty($o['num_children']) && !empty($o['items'])) {\n            $changes += (int)$this->apply($f, $o, 1, true);\n          }\n        }\n\n        return $changes;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Manip",
            "startLine": 398,
            "endLine": 428,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "apply",
            "returns": [],
            "arguments": [
                {
                    "name": "f",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The function to apply (the unique argument will be the option as in {@link option()}"
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The options' ID on which children the function should be applied"
                },
                {
                    "name": "deep",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the function will be applied to all children's levels"
                },
                {
                    "name": "force",
                    "position": 3,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true it will update the row in db without checking with $originals"
                }
            ],
            "doc": {
                "description": "Applies a function to children of an option and updates the database\n\n```php\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$f",
                        "description": "The function to apply (the unique argument will be the option as in {@link option()}"
                    },
                    {
                        "tag": "param",
                        "type": "int|array",
                        "name": "$id",
                        "description": "The options' ID on which children the function should be applied"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$deep",
                        "description": "If set to true the function will be applied to all children's levels"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$force",
                        "description": "If set to true it will update the row in db without checking with $originals"
                    }
                ],
                "return": "The number of affected rows or null if option not found",
                "todo": {
                    "tag": "todo",
                    "text": "Usage example"
                }
            },
            "comments": "  \/**\n   * Applies a function to children of an option and updates the database\n   *\n   * ```php\n   * ```\n   *\n   * @todo Usage example\n   * @param callable  $f    The function to apply (the unique argument will be the option as in {@link option()}\n   * @param int|array $id   The options' ID on which children the function should be applied\n   * @param boolean   $deep If set to true the function will be applied to all children's levels\n   * @param boolean   $force If set to true it will update the row in db without checking with $originals\n   * @return int|null The number of affected rows or null if option not found\n   *\/"
        },
        "map": {
            "name": "map",
            "summary": "Applies a function to children of an option",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": ""
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Manip.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function map(callable $f, $id, $deep = false)\n  {\n    $opts = \\is_array($id) ? $id : ( $deep ? $this->fullTree($id) : $this->fullOptions($id) );\n    $res  = [];\n    if (\\is_array($opts)) {\n      if (isset($opts['items'])) {\n        $opts = $opts['items'];\n      }\n\n      foreach ($opts as $i => $o){\n        $opts[$i] = $f($o);\n        if ($deep && $opts[$i] && !empty($opts[$i]['items'])) {\n          $opts[$i]['items'] = $this->map($f, $opts[$i]['items'], 1);\n        }\n\n        if (\\is_array($opts[$i])) {\n          $res[] = $opts[$i];\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Manip",
            "startLine": 443,
            "endLine": 465,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "map",
            "returns": [],
            "arguments": [
                {
                    "name": "f",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The function to apply (the unique argument will be the option as in {@link option()}"
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The options' ID on which children the function should be applied"
                },
                {
                    "name": "deep",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the function will be applied to all children's levels"
                }
            ],
            "doc": {
                "description": "Applies a function to children of an option\n\n```php\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$f",
                        "description": "The function to apply (the unique argument will be the option as in {@link option()}"
                    },
                    {
                        "tag": "param",
                        "type": "int|array",
                        "name": "$id",
                        "description": "The options' ID on which children the function should be applied"
                    },
                    {
                        "tag": "param",
                        "type": "boolean|int",
                        "name": "$deep",
                        "description": "If set to true the function will be applied to all children's levels"
                    }
                ],
                "return": "The new array with the function applied",
                "todo": {
                    "tag": "todo",
                    "text": "Usage example"
                }
            },
            "comments": "  \/**\n   * Applies a function to children of an option\n   *\n   * ```php\n   * ```\n   *\n   * @todo Usage example\n   * @param callable  $f    The function to apply (the unique argument will be the option as in {@link option()}\n   * @param int|array $id   The options' ID on which children the function should be applied\n   * @param boolean|int   $deep If set to true the function will be applied to all children's levels\n   * @return array The new array with the function applied\n   *\/"
        },
        "mapCfg": {
            "name": "mapCfg",
            "summary": "Applies a function to children of an option, with the cfg array included",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": ""
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Manip.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function mapCfg(callable $f, $id, $deep = false)\n  {\n    $opts = \\is_array($id) ? $id : ( $deep ? $this->fullTree($id) : $this->fullOptions($id) );\n    if (isset($opts['items'])) {\n      $opts = $opts['items'];\n    }\n\n    $res = [];\n    if (\\is_array($opts)) {\n      foreach ($opts as $i => $o){\n        $o[$this->fields['cfg']] = $this->getCfg($o[$this->fields['id']]);\n        $opts[$i] = $f($o);\n        if ($deep && $opts[$i] && !empty($opts[$i]['items'])) {\n          $opts[$i]['items'] = $this->mapCfg($f, $opts[$i]['items'], 1);\n        }\n\n        if (\\is_array($opts[$i])) {\n          $res[] = $opts[$i];\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Manip",
            "startLine": 480,
            "endLine": 503,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "mapCfg",
            "returns": [],
            "arguments": [
                {
                    "name": "f",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The function to apply (the unique argument will be the option as in {@link option()}"
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The options'ID on which children the function should be applied"
                },
                {
                    "name": "deep",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the function will be applied to all children's levels"
                }
            ],
            "doc": {
                "description": "Applies a function to children of an option, with the cfg array included\n\n```php\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$f",
                        "description": "The function to apply (the unique argument will be the option as in {@link option()}"
                    },
                    {
                        "tag": "param",
                        "type": "int|array",
                        "name": "$id",
                        "description": "The options'ID on which children the function should be applied"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$deep",
                        "description": "If set to true the function will be applied to all children's levels"
                    }
                ],
                "return": "The new array with the function applied",
                "todo": {
                    "tag": "todo",
                    "text": "Usage example"
                }
            },
            "comments": "  \/**\n   * Applies a function to children of an option, with the cfg array included\n   *\n   * ```php\n   * ```\n   *\n   * @todo Usage example\n   * @param callable  $f    The function to apply (the unique argument will be the option as in {@link option()}\n   * @param int|array $id   The options'ID on which children the function should be applied\n   * @param boolean   $deep If set to true the function will be applied to all children's levels\n   * @return array The new array with the function applied\n   *\/"
        },
        "analyzeOut": {
            "name": "analyzeOut",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Manip.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function analyzeOut(array $options, array &$results = [])\n  {\n    if ($this->check()) {\n\n      if (isset($options[0]) && is_array($options[0])) {\n        foreach ($options as $option) {\n          $this->analyzeOut($option, $results);\n        }\n        return $results;\n      }\n\n      if (empty($results)) {\n        $results['options'] = [];\n        $results['ids']     = [];\n        $results['aliases'] = [];\n      }\n\n      if (!empty($options[$this->fields['id']])) {\n        $results['ids'][$options[$this->fields['id']]] = null;\n      }\n\n      if (!empty($options[$this->fields['id_alias']])) {\n        $results['aliases'][$options[$this->fields['id_alias']]] = [\n          'id' => null,\n          'codes' => $this->getCodePath($options[$this->fields['id_alias']])\n        ];\n      }\n\n      $items = false;\n      if (!empty($options['items'])) {\n        $items = $options['items'];\n        unset($options['items']);\n      }\n\n      $results['options'][] = $options;\n      if ($items) {\n        foreach ($items as $it) {\n          $this->analyzeOut($it, $results);\n        }\n      }\n\n      return $results;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Manip",
            "startLine": 511,
            "endLine": 556,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "analyzeOut",
            "returns": [],
            "arguments": [
                {
                    "name": "options",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "results",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": true,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$options"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$results"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array $options\n   * @param array $results\n   * @return array|null\n   *\/"
        },
        "nativeOption": {
            "name": "nativeOption",
            "summary": "Returns an option's row as stored in its original form in the database",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->nativeOption(25));\n\/*\narray [\n  'id' => 25,\n  'code' => \"bbn_ide\",\n  'text' => \"BBN's own IDE\",\n  'id_alias' => null,\n  'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\"\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Native.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function nativeOption($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      $originalLocale = $this->findI18nById($id);\n      $locale = $this->getTranslatingLocale($id);\n      if (\n        !empty($locale)\n        && ($opt = $this->cacheGetLocale($id, $locale, __FUNCTION__))\n      ) {\n        return $opt;\n      } else if (\n        empty($locale)\n        && ($opt = $this->cacheGet($id, __FUNCTION__))\n      ) {\n        return $opt;\n      }\n      $tab = $this->db->tsn($this->class_cfg['table']);\n      $cfn = $this->db->cfn($this->fields['id'], $tab);\n      $opt = $this->getRow([$cfn => $id]);\n      if (!empty($opt['code']) && Str::isInteger($opt['code'])) {\n        $opt['code'] = (int)$opt['code'];\n      }\n      if ($opt) {\n        if (\n          !empty($locale)\n          && \\class_exists('\\bbn\\Appui\\I18n')\n          && !empty($opt[$this->fields['text']])\n        ) {\n          $i18nCls = new I18n($this->db);\n          if ($trans = $i18nCls->getTranslation($opt[$this->fields['text']], $originalLocale, $locale)) {\n            $opt[$this->fields['text']] = $trans;\n          }\n        }\n        if (empty($locale)) {\n          $this->cacheSet($id, __FUNCTION__, $opt);\n        } else {\n          $this->cacheSetLocale($id, $locale, __FUNCTION__, $opt);\n        }\n        return $opt;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Native",
            "startLine": 28,
            "endLine": 71,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "nativeOption",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns an option's row as stored in its original form in the database\n\n```php\nX::dump($opt->nativeOption(25));\n\/*\narray [\n  'id' => 25,\n  'code' => \"bbn_ide\",\n  'text' => \"BBN's own IDE\",\n  'id_alias' => null,\n  'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\"\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "Row or null if the option cannot be found"
            },
            "comments": "  \/**\n   * Returns an option's row as stored in its original form in the database\n   *\n   * ```php\n   * X::dump($opt->nativeOption(25));\n   * \/*\n   * array [\n   *   'id' => 25,\n   *   'code' => \"bbn_ide\",\n   *   'text' => \"BBN's own IDE\",\n   *   'id_alias' => null,\n   *   'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\"\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null Row or null if the option cannot be found\n   *\/"
        },
        "nativeOptions": {
            "name": "nativeOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Native.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function nativeOptions($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      $res = [];\n      if ($its = $this->items($id)) {\n        foreach ($its as $it) {\n          $res[] = $this->nativeOption($it);\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Native",
            "startLine": 78,
            "endLine": 92,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "nativeOptions",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string|null $code\n   * @return array|null\n   *\/"
        },
        "rawOption": {
            "name": "rawOption",
            "summary": "Returns an option's row as stored in its original form in the database, including cfg",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->rawOption('database', 'appui'));\n\/*\narray [\n  'id' => \"77cea323f0ce11e897fd525400007196\",\n  'code' => \"bbn_ide\",\n  'text' => \"BBN's own IDE\",\n  'cfg' => null,\n  'id_alias' => null,\n  'value' => \"{\\\"num\\\":1}\"\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Native.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function rawOption($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      return $this->db->rselect($this->class_cfg['table'], [], [$this->fields['id'] => $id]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Native",
            "startLine": 114,
            "endLine": 121,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "rawOption",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns an option's row as stored in its original form in the database, including cfg\n\n```php\nX::dump($opt->rawOption('database', 'appui'));\n\/*\narray [\n  'id' => \"77cea323f0ce11e897fd525400007196\",\n  'code' => \"bbn_ide\",\n  'text' => \"BBN's own IDE\",\n  'cfg' => null,\n  'id_alias' => null,\n  'value' => \"{\\\"num\\\":1}\"\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "Row or false if the option cannot be found"
            },
            "comments": "  \/**\n   * Returns an option's row as stored in its original form in the database, including cfg\n   *\n   * ```php\n   * X::dump($opt->rawOption('database', 'appui'));\n   * \/*\n   * array [\n   *   'id' => \"77cea323f0ce11e897fd525400007196\",\n   *   'code' => \"bbn_ide\",\n   *   'text' => \"BBN's own IDE\",\n   *   'cfg' => null,\n   *   'id_alias' => null,\n   *   'value' => \"{\\\"num\\\":1}\"\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null Row or false if the option cannot be found\n   *\/"
        },
        "rawOptions": {
            "name": "rawOptions",
            "summary": "Returns an option's items as stored in its original form in the database, including cfg",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->rawOptions('database', 'appui'));\n\/*\n[\n  [\n     'id' => \"77cea323f0ce11e897fd525400007196\",\n     'code' => \"bbn_ide\",\n     'text' => \"BBN's own IDE\",\n     'cfg' => null,\n     'id_alias' => null,\n     'value' => \"{\\\"num\\\":1}\"\n   ], [\n     'id' => \"77cea323f0ce11e897fd525400007196\",\n     'code' => \"bbn_ide\",\n     'text' => \"BBN's own IDE\",\n     'cfg' => null,\n     'id_alias' => null,\n     'value' => \"{\\\"num\\\":1}\"\n   ]\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Native.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function rawOptions($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      $res = [];\n      if ($its = $this->items($id)) {\n        foreach ($its as $it) {\n          $res[] = $this->db->rselect($this->class_cfg['table'], [], [$this->fields['id'] => $it]);\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Native",
            "startLine": 151,
            "endLine": 165,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "rawOptions",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns an option's items as stored in its original form in the database, including cfg\n\n```php\nX::dump($opt->rawOptions('database', 'appui'));\n\/*\n[\n  [\n     'id' => \"77cea323f0ce11e897fd525400007196\",\n     'code' => \"bbn_ide\",\n     'text' => \"BBN's own IDE\",\n     'cfg' => null,\n     'id_alias' => null,\n     'value' => \"{\\\"num\\\":1}\"\n   ], [\n     'id' => \"77cea323f0ce11e897fd525400007196\",\n     'code' => \"bbn_ide\",\n     'text' => \"BBN's own IDE\",\n     'cfg' => null,\n     'id_alias' => null,\n     'value' => \"{\\\"num\\\":1}\"\n   ]\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "Row or false if the option cannot be found"
            },
            "comments": "  \/**\n   * Returns an option's items as stored in its original form in the database, including cfg\n   *\n   * ```php\n   * X::dump($opt->rawOptions('database', 'appui'));\n   * \/*\n   * [\n   *   [\n   *      'id' => \"77cea323f0ce11e897fd525400007196\",\n   *      'code' => \"bbn_ide\",\n   *      'text' => \"BBN's own IDE\",\n   *      'cfg' => null,\n   *      'id_alias' => null,\n   *      'value' => \"{\\\"num\\\":1}\"\n   *    ], [\n   *      'id' => \"77cea323f0ce11e897fd525400007196\",\n   *      'code' => \"bbn_ide\",\n   *      'text' => \"BBN's own IDE\",\n   *      'cfg' => null,\n   *      'id_alias' => null,\n   *      'value' => \"{\\\"num\\\":1}\"\n   *    ]\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null Row or false if the option cannot be found\n   *\/"
        },
        "rawTree": {
            "name": "rawTree",
            "summary": "Returns a hierarchical structure as stored in its original form in the database",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->rawTree('77cea323f0ce11e897fd525400007196'));\n\/*\narray [\n  'id' => 12,\n  'code' => \"bbn_ide\",\n  'text' => \"BBN's own IDE\",\n  'id_alias' => null,\n  'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n  'items' => [\n    [\n      'id' => 25,\n      'code' => \"test\",\n      'text' => \"Test\",\n      'id_alias' => null,\n      'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n    ],\n    [\n      'id' => 26,\n      'code' => \"test2\",\n      'text' => \"Test 2\",\n      'id_alias' => null,\n      'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n      'items' => [\n        [\n          'id' => 42,\n          'code' => \"test8\",\n          'text' => \"Test 8\",\n          'id_alias' => null,\n          'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n        ]\n      ]\n    ],\n  ]\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Native.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function rawTree($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      if ($res = $this->rawOption($id)) {\n        if ($its = $this->items($id)) {\n          $res['items'] = [];\n          foreach ($its as $it){\n            $res['items'][] = $this->rawTree($it);\n          }\n        }\n\n        return $res;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Native",
            "startLine": 211,
            "endLine": 227,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "rawTree",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns a hierarchical structure as stored in its original form in the database\n\n```php\nX::dump($opt->rawTree('77cea323f0ce11e897fd525400007196'));\n\/*\narray [\n  'id' => 12,\n  'code' => \"bbn_ide\",\n  'text' => \"BBN's own IDE\",\n  'id_alias' => null,\n  'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n  'items' => [\n    [\n      'id' => 25,\n      'code' => \"test\",\n      'text' => \"Test\",\n      'id_alias' => null,\n      'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n    ],\n    [\n      'id' => 26,\n      'code' => \"test2\",\n      'text' => \"Test 2\",\n      'id_alias' => null,\n      'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n      'items' => [\n        [\n          'id' => 42,\n          'code' => \"test8\",\n          'text' => \"Test 8\",\n          'id_alias' => null,\n          'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n        ]\n      ]\n    ],\n  ]\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "Tree's array or false if the option cannot be found"
            },
            "comments": "  \/**\n   * Returns a hierarchical structure as stored in its original form in the database\n   *\n   * ```php\n   * X::dump($opt->rawTree('77cea323f0ce11e897fd525400007196'));\n   * \/*\n   * array [\n   *   'id' => 12,\n   *   'code' => \"bbn_ide\",\n   *   'text' => \"BBN's own IDE\",\n   *   'id_alias' => null,\n   *   'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n   *   'items' => [\n   *     [\n   *       'id' => 25,\n   *       'code' => \"test\",\n   *       'text' => \"Test\",\n   *       'id_alias' => null,\n   *       'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n   *     ],\n   *     [\n   *       'id' => 26,\n   *       'code' => \"test2\",\n   *       'text' => \"Test 2\",\n   *       'id_alias' => null,\n   *       'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n   *       'items' => [\n   *         [\n   *           'id' => 42,\n   *           'code' => \"test8\",\n   *           'text' => \"Test 8\",\n   *           'id_alias' => null,\n   *           'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n   *         ]\n   *       ]\n   *     ],\n   *   ]\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null Tree's array or false if the option cannot be found\n   *\/"
        },
        "nativeTree": {
            "name": "nativeTree",
            "summary": "Returns a hierarchical structure as stored in its original form in the database",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->nativeTree(12));\n\/*\narray [\n  'id' => 12,\n  'code' => \"bbn_ide\",\n  'text' => \"BBN's own IDE\",\n  'id_alias' => null,\n  'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n  'items' => [\n    [\n      'id' => 25,\n      'code' => \"test\",\n      'text' => \"Test\",\n      'id_alias' => null,\n      'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n    ],\n    [\n      'id' => 26,\n      'code' => \"test2\",\n      'text' => \"Test 2\",\n      'id_alias' => null,\n      'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n      'items' => [\n        [\n          'id' => 42,\n          'code' => \"test8\",\n          'text' => \"Test 8\",\n          'id_alias' => null,\n          'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n        ]\n      ]\n    ],\n  ]\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Native.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function nativeTree($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      if ($res = $this->nativeOption($id)) {\n        $its = $this->items($id);\n        if (!empty($its)) {\n          $res['items'] = [];\n          foreach ($its as $it){\n            $res['items'][] = $this->nativeTree($it);\n          }\n        }\n\n        return $res;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Native",
            "startLine": 273,
            "endLine": 290,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "nativeTree",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns a hierarchical structure as stored in its original form in the database\n\n```php\nX::dump($opt->nativeTree(12));\n\/*\narray [\n  'id' => 12,\n  'code' => \"bbn_ide\",\n  'text' => \"BBN's own IDE\",\n  'id_alias' => null,\n  'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n  'items' => [\n    [\n      'id' => 25,\n      'code' => \"test\",\n      'text' => \"Test\",\n      'id_alias' => null,\n      'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n    ],\n    [\n      'id' => 26,\n      'code' => \"test2\",\n      'text' => \"Test 2\",\n      'id_alias' => null,\n      'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n      'items' => [\n        [\n          'id' => 42,\n          'code' => \"test8\",\n          'text' => \"Test 8\",\n          'id_alias' => null,\n          'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n        ]\n      ]\n    ],\n  ]\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "Tree's array or false if the option cannot be found"
            },
            "comments": "  \/**\n   * Returns a hierarchical structure as stored in its original form in the database\n   *\n   * ```php\n   * X::dump($opt->nativeTree(12));\n   * \/*\n   * array [\n   *   'id' => 12,\n   *   'code' => \"bbn_ide\",\n   *   'text' => \"BBN's own IDE\",\n   *   'id_alias' => null,\n   *   'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n   *   'items' => [\n   *     [\n   *       'id' => 25,\n   *       'code' => \"test\",\n   *       'text' => \"Test\",\n   *       'id_alias' => null,\n   *       'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n   *     ],\n   *     [\n   *       'id' => 26,\n   *       'code' => \"test2\",\n   *       'text' => \"Test 2\",\n   *       'id_alias' => null,\n   *       'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n   *       'items' => [\n   *         [\n   *           'id' => 42,\n   *           'code' => \"test8\",\n   *           'text' => \"Test 8\",\n   *           'id_alias' => null,\n   *           'value' => \"{\\\"myProperty\\\":\\\"My property's value\\\"}\",\n   *         ]\n   *       ]\n   *     ],\n   *   ]\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null Tree's array or false if the option cannot be found\n   *\/"
        },
        "getRow": {
            "name": "getRow",
            "summary": "Gets the first row from a result",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Native.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function getRow(array $where): ?array\n  {\n    if ($res = $this->getRows($where, 1)) {\n      return $res[0];\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Native",
            "startLine": 299,
            "endLine": 306,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getRow",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the first row from a result\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the first row from a result\n   *\n   * @param array $where\n   * @return array|null\n   *\/"
        },
        "getRows": {
            "name": "getRows",
            "summary": "Performs the actual query with a where parameter.",
            "description": "Always returns the whole result without limit",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Always returns the whole result without limit"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Native.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function getRows(array $where = [], int $limit = 0, int $start = 0): ?array\n  {\n    $db  =& $this->db;\n    $tab = $this->class_cfg['table'];\n    $c   =& $this->fields;\n    \/** @todo Checkout *\/\n    $cols = [];\n    foreach ($c AS $k => $col){\n      \/\/ All the columns except cfg\n      if (!\\in_array($k, $this->non_selected, true)) {\n        $cols[] = $db->cfn($col, $tab);\n      }\n    }\n\n    $cols['num_children'] = 'COUNT('.$db->escape($db->cfn($c['id'], $tab.'2', true)).')';\n    $res = $this->db->rselectAll(\n      [\n      'tables' => [$tab],\n      'fields' => $cols,\n      'join' => [\n        [\n          'type' => 'left',\n          'table' => $tab,\n          'alias' => $tab.'2',\n          'on' => [\n            'conditions' => [\n              [\n                'field' => $db->cfn($c['id_parent'], $tab.'2'),\n                'operator' => 'eq',\n                'exp' => $db->cfn($c['id'], $tab, true)\n              ]\n            ],\n            'logic' => 'AND'\n          ]\n        ]\n      ],\n      'where' => $where,\n      'group_by' => [$this->db->cfn($c['id'], $tab)],\n      'order' => [\n        $this->db->cfn($c['id'], $tab)\n      ],\n      'limit' => $limit,\n      'start' => $start\n      ]\n    );\n\n    if (!empty($res)) {\n      foreach ($res as $i => $r) {\n        if (!empty($r[$this->fields['code']])\n          && Str::isInteger($r[$this->fields['code']])\n        ) {\n          $res[$i][$this->fields['code']] = (int)$r[$this->fields['code']];\n        }\n      }\n    }\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Native",
            "startLine": 317,
            "endLine": 373,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "getRows",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The where config for the database query"
                },
                {
                    "name": "limit",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "Max number of rows"
                },
                {
                    "name": "start",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "Where to start the query (only if limit is > 1)"
                }
            ],
            "doc": {
                "description": "Performs the actual query with a where parameter.\nAlways returns the whole result without limit\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The where config for the database query"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Max number of rows"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Where to start the query (only if limit is > 1)"
                    }
                ],
                "return": "An array of rows, empty if not found, null if there is an error in the where config"
            },
            "comments": "  \/**\n   * Performs the actual query with a where parameter.\n   * Always returns the whole result without limit\n   * @param array $where The where config for the database query\n   * @param int   $limit Max number of rows\n   * @param int   $start Where to start the query (only if limit is > 1)\n   * @return array|null An array of rows, empty if not found, null if there is an error in the where config\n   *\/"
        },
        "fullOptions": {
            "name": "fullOptions",
            "summary": "Returns an array of full options arrays for a given parent",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->fullOptions(12));\n\/*\narray [\n  ['id' => 21, 'id_parent' => 12, 'title' => \"My option 21\", 'myProperty' =>  \"78%\"],\n  ['id' => 22, 'id_parent' => 12, 'title' => \"My option 22\", 'myProperty' =>  \"26%\"],\n  ['id' => 25, 'id_parent' => 12, 'title' => \"My option 25\", 'myProperty' =>  \"50%\"],\n  ['id' => 27, 'id_parent' => 12, 'title' => \"My option 27\", 'myProperty' =>  \"40%\"]\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Options.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullOptions($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      $list = $this->items($id);\n      if (\\is_array($list)) {\n        $res = [];\n        foreach ($list as $i){\n          if ($tmp = $this->option($i)) {\n            $res[] = $tmp;\n          }\n          else {\n            throw new Exception(X::_(\"Impossible to find the ID\").' '.$i);\n          }\n        }\n\n        return $res;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Options",
            "startLine": 28,
            "endLine": 48,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "fullOptions",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns an array of full options arrays for a given parent\n\n```php\nX::dump($opt->fullOptions(12));\n\/*\narray [\n  ['id' => 21, 'id_parent' => 12, 'title' => \"My option 21\", 'myProperty' =>  \"78%\"],\n  ['id' => 22, 'id_parent' => 12, 'title' => \"My option 22\", 'myProperty' =>  \"26%\"],\n  ['id' => 25, 'id_parent' => 12, 'title' => \"My option 25\", 'myProperty' =>  \"50%\"],\n  ['id' => 27, 'id_parent' => 12, 'title' => \"My option 27\", 'myProperty' =>  \"40%\"]\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "A list of parent if option not found"
            },
            "comments": "  \/**\n   * Returns an array of full options arrays for a given parent\n   *\n   * ```php\n   * X::dump($opt->fullOptions(12));\n   * \/*\n   * array [\n   *   ['id' => 21, 'id_parent' => 12, 'title' => \"My option 21\", 'myProperty' =>  \"78%\"],\n   *   ['id' => 22, 'id_parent' => 12, 'title' => \"My option 22\", 'myProperty' =>  \"26%\"],\n   *   ['id' => 25, 'id_parent' => 12, 'title' => \"My option 25\", 'myProperty' =>  \"50%\"],\n   *   ['id' => 27, 'id_parent' => 12, 'title' => \"My option 27\", 'myProperty' =>  \"40%\"]\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null A list of parent if option not found\n   *\/"
        },
        "fullOptionsCfg": {
            "name": "fullOptionsCfg",
            "summary": "Returns an array of full options with the config in arrays for a given parent",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->fullOptionsCfg(12));\n\/*\narray [\n  ['id' => 21, 'id_parent' => 12, 'num' => 1, 'title' => \"My option 21\", 'myProperty' =>  \"78%\", 'cfg' => ['sortable' => true, 'desc' => \"I am a description\"]],\n  ['id' => 22, 'id_parent' => 12, 'num' => 2, 'title' => \"My option 22\", 'myProperty' =>  \"26%\", 'cfg' => ['desc' => \"I am a description\"]],\n  ['id' => 25, 'id_parent' => 12, 'num' => 3, 'title' => \"My option 25\", 'myProperty' =>  \"50%\", 'cfg' => ['desc' => \"I am a description\"]],\n  ['id' => 27, 'id_parent' => 12, 'num' => 4, 'title' => \"My option 27\", 'myProperty' =>  \"40%\", 'cfg' => ['desc' => \"I am a description\"]]\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Options.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullOptionsCfg($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      $o =& $this;\n      return $this->map(\n        function ($a) use ($o) {\n          $a[$this->fields['cfg']] = $o->getCfg($a[$this->fields['id']]);\n          return $a;\n        }, $id\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Options",
            "startLine": 67,
            "endLine": 80,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "fullOptionsCfg",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns an array of full options with the config in arrays for a given parent\n\n```php\nX::dump($opt->fullOptionsCfg(12));\n\/*\narray [\n  ['id' => 21, 'id_parent' => 12, 'num' => 1, 'title' => \"My option 21\", 'myProperty' =>  \"78%\", 'cfg' => ['sortable' => true, 'desc' => \"I am a description\"]],\n  ['id' => 22, 'id_parent' => 12, 'num' => 2, 'title' => \"My option 22\", 'myProperty' =>  \"26%\", 'cfg' => ['desc' => \"I am a description\"]],\n  ['id' => 25, 'id_parent' => 12, 'num' => 3, 'title' => \"My option 25\", 'myProperty' =>  \"50%\", 'cfg' => ['desc' => \"I am a description\"]],\n  ['id' => 27, 'id_parent' => 12, 'num' => 4, 'title' => \"My option 27\", 'myProperty' =>  \"40%\", 'cfg' => ['desc' => \"I am a description\"]]\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "A list of parent if option not found"
            },
            "comments": "  \/**\n   * Returns an array of full options with the config in arrays for a given parent\n   *\n   * ```php\n   * X::dump($opt->fullOptionsCfg(12));\n   * \/*\n   * array [\n   *   ['id' => 21, 'id_parent' => 12, 'num' => 1, 'title' => \"My option 21\", 'myProperty' =>  \"78%\", 'cfg' => ['sortable' => true, 'desc' => \"I am a description\"]],\n   *   ['id' => 22, 'id_parent' => 12, 'num' => 2, 'title' => \"My option 22\", 'myProperty' =>  \"26%\", 'cfg' => ['desc' => \"I am a description\"]],\n   *   ['id' => 25, 'id_parent' => 12, 'num' => 3, 'title' => \"My option 25\", 'myProperty' =>  \"50%\", 'cfg' => ['desc' => \"I am a description\"]],\n   *   ['id' => 27, 'id_parent' => 12, 'num' => 4, 'title' => \"My option 27\", 'myProperty' =>  \"40%\", 'cfg' => ['desc' => \"I am a description\"]]\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null A list of parent if option not found\n   *\/"
        },
        "options": {
            "name": "options",
            "summary": "Returns an array of options in the form id => text",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->options(12));\n\/*\n[\n  21 => \"My option 21\",\n  22 => \"My option 22\",\n  25 => \"My option 25\",\n  27 => \"My option 27\"\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Options.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function options($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      $locale = $this->getTranslatingLocale($id);\n      if ($r = $this->getCache($id, __FUNCTION__, $locale)) {\n        return $r;\n      }\n\n      $cf  =& $this->fields;\n      $opts = $this->db->rselectAll([\n        'tables' => [$this->class_cfg['table']],\n        'fields' => [\n          $this->db->cfn($cf['id'], $this->class_cfg['table']),\n          $this->db->cfn($cf['text'], $this->class_cfg['table']),\n          $this->db->cfn($cf['id_alias'], $this->class_cfg['table'])\n        ],\n        'join' => [\n          [\n            'table' => $this->class_cfg['table'],\n            'alias' => 'alias',\n            'type'  => 'LEFT',\n            'on'    => [\n              [\n                'field' => $this->db->cfn($cf['id_alias'], $this->class_cfg['table']),\n                'exp'   => 'alias.'.$cf['id']\n              ]\n            ]\n          ]\n        ],\n        'where' => [$this->db->cfn($cf['id_parent'], $this->class_cfg['table']) => $id],\n        'order' => ['text' => 'ASC']\n      ]);\n      $res = [];\n      foreach ($opts as $o) {\n        if (\\is_null($o[$cf['text']]) && !empty($o[$cf['id_alias']])) {\n          $o[$cf['text']] = $this->text($o[$cf['id_alias']]);\n        }\n        if (!empty($o[$cf['text']])\n          && !empty($locale)\n          && ($t = $this->getTranslation($o[$cf['id']], $locale))\n        ) {\n          $o[$cf['text']] = $t;\n        }\n        $res[$o[$cf['id']]] = $o[$cf['text']];\n      }\n\n      \\asort($res);\n      $this->setCache($id, __FUNCTION__, $res, $locale);\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Options",
            "startLine": 100,
            "endLine": 152,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "options",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns an array of options in the form id => text\n\n```php\nX::dump($opt->options(12));\n\/*\n[\n  21 => \"My option 21\",\n  22 => \"My option 22\",\n  25 => \"My option 25\",\n  27 => \"My option 27\"\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "An indexed array of id\/text options or false if option not found"
            },
            "comments": "  \/**\n   * Returns an array of options in the form id => text\n   *\n   * ```php\n   * X::dump($opt->options(12));\n   * \/*\n   * [\n   *   21 => \"My option 21\",\n   *   22 => \"My option 22\",\n   *   25 => \"My option 25\",\n   *   27 => \"My option 27\"\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null An indexed array of id\/text options or false if option not found\n   *\/"
        },
        "items": {
            "name": "items",
            "summary": "Returns an array of the children's IDs of the given option sorted by order or text",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->items(12));\n\/\/ array [40, 41, 42, 44, 45, 43, 46, 47]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Options.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function items($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      if (($res = $this->cacheGet($id, __FUNCTION__)) !== false) {\n        return $res;\n      }\n\n      $cfg = $this->getCfg($id) ?: [];\n      if ($cfg || $this->dbTraitExists($id)) {\n        \/\/ If not sortable returning an array ordered by text\n        $order = empty($cfg['sortable']) ? [\n            $this->fields['text'] => 'ASC',\n            $this->fields['code'] => 'ASC',\n            $this->fields['id'] => 'ASC',\n          ] : [\n            $this->fields['num'] => 'ASC',\n            $this->fields['text'] => 'ASC',\n            $this->fields['code'] => 'ASC',\n            $this->fields['id'] => 'ASC',\n          ];\n        $res   = $this->db->getColumnValues(\n          $this->class_cfg['table'],\n          $this->fields['id'], [\n          $this->fields['id_parent'] => $id,\n          ], $order\n        );\n        $this->cacheSet($id, __FUNCTION__, $res);\n        return $res;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Options",
            "startLine": 166,
            "endLine": 198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "items",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns an array of the children's IDs of the given option sorted by order or text\n\n```php\nX::dump($opt->items(12));\n\/\/ array [40, 41, 42, 44, 45, 43, 46, 47]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "array of IDs, sorted or false if option not found"
            },
            "comments": "  \/**\n   * Returns an array of the children's IDs of the given option sorted by order or text\n   *\n   * ```php\n   * X::dump($opt->items(12));\n   * \/\/ array [40, 41, 42, 44, 45, 43, 46, 47]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null array of IDs, sorted or false if option not found\n   *\/"
        },
        "flatOptions": {
            "name": "flatOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Options.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function flatOptions($code = null): array\n  {\n    if (!Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      throw new Exception(X::_(\"Impossible to find the option requested in flatOptions\"));\n    }\n\n    $res = [];\n    if ($ids = $this->treeIds($id)) {\n      foreach ($ids as $id) {\n        if ($o = $this->nativeOption($id)) {\n          $res[] = [\n            $this->fields['id'] => $o[$this->fields['id']],\n            $this->fields['text'] => $o[$this->fields['text']]\n          ];\n        }\n      }\n    }\n    X::sortBy($res, $this->class_cfg['arch']['options']['text'], 'asc');\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Options",
            "startLine": 201,
            "endLine": 220,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "flatOptions",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "siblings": {
            "name": "siblings",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Parents.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function siblings(): ?array\n  {\n    if ($id = $this->fromCode(...func_get_args())) {\n      if (($id_parent = $this->getIdParent($id)) && ($full_options = $this->fullOptions($id_parent))) {\n        return array_filter(\n          $full_options, function ($a) use ($id) {\n            return $a[$this->fields['id']] !== $id;\n          }\n        );\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Parents",
            "startLine": 15,
            "endLine": 28,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "siblings",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "parents": {
            "name": "parents",
            "summary": "Returns an array of id_parents from the option selected to root",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->parents(48));\n\/\/ array [25, 12, 0]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Parents.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function parents($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      $res = [];\n      while (Str::isUid($id_parent = $this->getIdParent($id))){\n        if (\\in_array($id_parent, $res, true)) {\n          break;\n        }\n        else{\n          if ($id === $id_parent) {\n            break;\n          }\n          else{\n            $res[] = $id_parent;\n            $id    = $id_parent;\n          }\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Parents",
            "startLine": 42,
            "endLine": 65,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "parents",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns an array of id_parents from the option selected to root\n\n```php\nX::dump($opt->parents(48));\n\/\/ array [25, 12, 0]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "The array of parents' ids, an empty array if no parent (root case), and null if it can't find the option"
            },
            "comments": "  \/**\n   * Returns an array of id_parents from the option selected to root\n   *\n   * ```php\n   * X::dump($opt->parents(48));\n   * \/\/ array [25, 12, 0]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null The array of parents' ids, an empty array if no parent (root case), and null if it can't find the option\n   *\/"
        },
        "sequence": {
            "name": "sequence",
            "summary": "Returns an array of id_parents from the selected root to the given id_option",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->parents(48));\n\/\/ array [0, 12, 25, 48]\nX::dump($opt->parents(48, 12));\n\/\/ array [12, 25, 48]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Parents.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function sequence(string $id_option, string $id_root = null): ?array\n  {\n    if ($this->check()) {\n      if (null === $id_root) {\n        $id_root = $this->getRoot();\n      }\n\n      if ($this->exists($id_root) && ($parents = $this->parents($id_option))) {\n        $res = [$id_option];\n        foreach ($parents as $p){\n          array_unshift($res, $p);\n          if ($p === $id_root) {\n            return $res;\n          }\n        }\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Parents",
            "startLine": 82,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "sequence",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "id_root",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "root"
                }
            ],
            "doc": {
                "description": "Returns an array of id_parents from the selected root to the given id_option\n\n```php\nX::dump($opt->parents(48));\n\/\/ array [0, 12, 25, 48]\nX::dump($opt->parents(48, 12));\n\/\/ array [12, 25, 48]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "root"
                    }
                ],
                "return": "The array of parents' ids, an empty array if no parent (root case), and null if it can't find the option"
            },
            "comments": "  \/**\n   * Returns an array of id_parents from the selected root to the given id_option\n   *\n   * ```php\n   * X::dump($opt->parents(48));\n   * \/\/ array [0, 12, 25, 48]\n   * X::dump($opt->parents(48, 12));\n   * \/\/ array [12, 25, 48]\n   * ```\n   *\n   * @param string      $id_option\n   * @param string|null $id_root\n   * @return array|null The array of parents' ids, an empty array if no parent (root case), and null if it can't find the option\n   *\/"
        },
        "getIdParent": {
            "name": "getIdParent",
            "summary": "Returns the parent option's ID",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->getIdParent(48));\n\/\/ (int)25"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Parents.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIdParent($code = null): ?string\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      if ($opt = $this->cacheGet($id, 'nativeOption')) {\n        return $opt[$this->fields['id_parent']];\n      }\n      else {\n        return $this->db->selectOne($this->class_table, $this->fields['id_parent'], [$this->fields['id'] => $id]);\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Parents",
            "startLine": 115,
            "endLine": 127,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getIdParent",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns the parent option's ID\n\n```php\nX::dump($opt->getIdParent(48));\n\/\/ (int)25\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "The parent's ID, null if no parent or if option cannot be found."
            },
            "comments": "  \/**\n   * Returns the parent option's ID\n   *\n   * ```php\n   * X::dump($opt->getIdParent(48));\n   * \/\/ (int)25\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return string|null The parent's ID, null if no parent or if option cannot be found.\n   *\/"
        },
        "parent": {
            "name": "parent",
            "summary": "Returns the parent's option as {@link option()}",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump($opt->parent(42));\n\/*\narray [\n  'id' => 25,\n  'code' => \"bbn_ide\",\n  'text' => \"This is BBN's IDE\",\n  'myIntProperty' => 56854,\n  'myTextProperty' => \"<h1>Hello\\nWorld<\/h1>\",\n  'myArrayProperty' => ['value1' => 1, 'value2' => 2]\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Parents.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function parent($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))\n        && ($id_parent = $this->getIdParent($id))\n    ) {\n      return $this->option($id_parent);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Parents",
            "startLine": 149,
            "endLine": 158,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "parent",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns the parent's option as {@link option()}\n\n```php\nX::hdump($opt->parent(42));\n\/*\narray [\n  'id' => 25,\n  'code' => \"bbn_ide\",\n  'text' => \"This is BBN's IDE\",\n  'myIntProperty' => 56854,\n  'myTextProperty' => \"<h1>Hello\\nWorld<\/h1>\",\n  'myArrayProperty' => ['value1' => 1, 'value2' => 2]\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the parent's option as {@link option()}\n   *\n   * ```php\n   * X::hdump($opt->parent(42));\n   * \/*\n   * array [\n   *   'id' => 25,\n   *   'code' => \"bbn_ide\",\n   *   'text' => \"This is BBN's IDE\",\n   *   'myIntProperty' => 56854,\n   *   'myTextProperty' => \"<h1>Hello\\nWorld<\/h1>\",\n   *   'myArrayProperty' => ['value1' => 1, 'value2' => 2]\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|false\n   *\/"
        },
        "isParent": {
            "name": "isParent",
            "summary": "Return true if row with ID $id_parent is parent at any level of row with ID $id",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->isParent(42, 12));\n\/\/ (bool) true\nX::dump($opt->isParent(42, 13));\n\/\/ (bool) false"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Parents.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isParent($id, $id_parent): bool\n  {\n    \/\/ Preventing infinite loop\n    $done = [$id];\n    if (Str::isUid($id) && Str::isUid($id_parent)) {\n      while ($id = $this->getIdParent($id)){\n        if ($id === $id_parent) {\n          return true;\n        }\n\n        if (\\in_array($id, $done, true)) {\n          break;\n        }\n\n        $done[] = $id;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Parents",
            "startLine": 175,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "isParent",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_parent",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Return true if row with ID $id_parent is parent at any level of row with ID $id\n\n```php\nX::dump($opt->isParent(42, 12));\n\/\/ (bool) true\nX::dump($opt->isParent(42, 13));\n\/\/ (bool) false\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "$id_parent"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return true if row with ID $id_parent is parent at any level of row with ID $id\n   *\n   * ```php\n   * X::dump($opt->isParent(42, 12));\n   * \/\/ (bool) true\n   * X::dump($opt->isParent(42, 13));\n   * \/\/ (bool) false\n   * ```\n   *\n   * @param $id\n   * @param $id_parent\n   * @return bool\n   *\/"
        },
        "closest": {
            "name": "closest",
            "summary": "Gets the closest parent which has either the given id_alias or",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Parents.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function closest(string $id, string|array $target): ?string\n  {\n    $ids = $this->parents($id);\n    if (!\\is_array($target)) {\n      $target = [Str::isUid($target) ? 'id_alias' : 'code' => $target];\n    }\n\n    foreach ($ids as $i) {\n      $opt = $this->option($i);\n      if (X::getRow([$opt], $target)) {\n        return $i;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Parents",
            "startLine": 203,
            "endLine": 218,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "closest",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "target",
                    "position": 1,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the closest parent which has either the given id_alias or\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$target"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the closest parent which has either the given id_alias or \n   * @param mixed $id\n   * @param mixed $target\n   * @return mixed\n   *\/"
        },
        "getPathArray": {
            "name": "getPathArray",
            "summary": "Returns an array of codes for each option between $id and $root without $root's code",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->getPathArray(48, 12));\n\/\/ array [\"path\", \"to\", \"my\", \"option\"]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Path.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPathArray(string $id, $root = null): ?array\n  {\n    if (!isset($root)) {\n      $root = $this->getDefault();\n    }\n\n    if ($code = $this->code($id)) {\n      $parts = [];\n      while ($id && ($id !== $root)){\n        array_unshift($parts, $code);\n        if (!($id = $this->getIdParent($id))) {\n          return null;\n        }\n\n        $code = $this->code($id);\n      }\n\n      return $parts;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Path",
            "startLine": 19,
            "endLine": 40,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getPathArray",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The end\/target of the path"
                },
                {
                    "name": "root",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The start\/origin of the path, {@link getDefault()} if is null"
                }
            ],
            "doc": {
                "description": "Returns an array of codes for each option between $id and $root without $root's code\n\n```php\nX::dump($opt->getPathArray(48, 12));\n\/\/ array [\"path\", \"to\", \"my\", \"option\"]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The end\/target of the path"
                    },
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$root",
                        "description": "The start\/origin of the path, {@link getDefault()} if is null"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of codes for each option between $id and $root without $root's code\n   *\n   * ```php\n   * X::dump($opt->getPathArray(48, 12));\n   * \/\/ array [\"path\", \"to\", \"my\", \"option\"]\n   * ```\n   *\n   * @param string $id The end\/target of the path\n   * @param null|string $root The start\/origin of the path, {@link getDefault()} if is null\n   * @return array|null\n   *\/"
        },
        "fromPath": {
            "name": "fromPath",
            "summary": "Returns the closest ID option from a _path_ of codes, with separator and optional id_parent",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\"bbn_ide|test1|test8\"));\n\/\/ (int) 36"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Path.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fromPath(string $path, string $sep = '|', $parent = null): ?string\n  {\n    if ($this->check()) {\n      if (!empty($sep)) {\n        $parts = explode($sep, $path);\n      }\n      else{\n        $parts = [$path];\n      }\n\n      if (null === $parent) {\n        $parent = $this->default;\n      }\n\n      foreach ($parts as $p){\n        if (!($parent = $this->fromCode($p, $parent))) {\n          break;\n        }\n      }\n\n      return $parent ?: null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Path",
            "startLine": 56,
            "endLine": 80,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "fromPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path made of a concatenation of path and $sep until the target"
                },
                {
                    "name": "sep",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "|",
                    "default_name": "",
                    "description": "The separator"
                },
                {
                    "name": "parent",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "An optional id_parent, {@link fromCode()} otherwise"
                }
            ],
            "doc": {
                "description": "Returns the closest ID option from a _path_ of codes, with separator and optional id_parent\n\n```php\nX::dump(\"bbn_ide|test1|test8\"));\n\/\/ (int) 36\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "The path made of a concatenation of path and $sep until the target"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$sep",
                        "description": "The separator"
                    },
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$parent",
                        "description": "An optional id_parent, {@link fromCode()} otherwise"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the closest ID option from a _path_ of codes, with separator and optional id_parent\n   *\n   * ```php\n   * X::dump(\"bbn_ide|test1|test8\"));\n   * \/\/ (int) 36\n   * ```\n   *\n   * @param string      $path   The path made of a concatenation of path and $sep until the target\n   * @param string      $sep    The separator\n   * @param null|string $parent An optional id_parent, {@link fromCode()} otherwise\n   * @return null|string\n   *\/"
        },
        "toPath": {
            "name": "toPath",
            "summary": "Concatenates the codes and separator $sep of a line of options",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->toPath(48, '|', 12)\n\/\/ (string) path|to|my|option"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Path.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function toPath(string $id, string $sep = '|', string $parent = null): ?string\n  {\n    if ($this->check() && ($parts = $this->getPathArray($id, $parent))) {\n      return implode($sep, $parts);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Path",
            "startLine": 96,
            "endLine": 103,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "toPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The end\/target of the path"
                },
                {
                    "name": "sep",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "|",
                    "default_name": "",
                    "description": "The separator"
                },
                {
                    "name": "parent",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The start\/origin of the path"
                }
            ],
            "doc": {
                "description": "Concatenates the codes and separator $sep of a line of options\n\n```php\nX::dump($opt->toPath(48, '|', 12)\n\/\/ (string) path|to|my|option\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The end\/target of the path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$sep",
                        "description": "The separator"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$parent",
                        "description": "The start\/origin of the path"
                    }
                ],
                "return": "The path concatenated with the separator or null if no path"
            },
            "comments": "  \/**\n   * Concatenates the codes and separator $sep of a line of options\n   *\n   * ```php\n   * X::dump($opt->toPath(48, '|', 12)\n   * \/\/ (string) path|to|my|option\n   * ```\n   *\n   * @param string $id The end\/target of the path\n   * @param string $sep The separator\n   * @param string|null $parent The start\/origin of the path\n   * @return string|null The path concatenated with the separator or null if no path\n   *\/"
        },
        "getCodePath": {
            "name": "getCodePath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Path.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCodePath($id, $fromRoot = false)\n  {\n    $res  = [];\n    while ($o = $this->nativeOption($id)) {\n      if ($o[$this->fields['code']]) {\n        $res[] = $o[$this->fields['code']];\n        if ($o[$this->fields['id_parent']] === ($fromRoot ? $this->root : $this->default)) {\n          break;\n        }\n\n        $id = $o[$this->fields['id_parent']];\n      }\n      elseif ($o[$this->fields['id_alias']] && ($code = $this->code($o[$this->fields['id_alias']]))) {\n        $res[] = $code;\n        if ($o[$this->fields['id_parent']] === ($fromRoot ? $this->root : $this->default)) {\n          break;\n        }\n\n        $id = $o[$this->fields['id_parent']];\n      }\n      else {\n        return null;\n      }\n    }\n\n    if (end($res) === 'root') {\n      array_pop($res);\n    }\n\n    return count($res) ? $res : null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Path",
            "startLine": 110,
            "endLine": 140,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getCodePath",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fromRoot",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $id\n   * @return array|null\n   *\/"
        },
        "hasPermission": {
            "name": "hasPermission",
            "summary": "Checks whether an option has _permissions_ in its parent cfg",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->hasPermission('bbn_ide'));\n\/\/ (bool) true"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Permission.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasPermission($code = null)\n  {\n    if (Str::isUid($p = $this->getIdParent(\\func_get_args()))) {\n      $cfg = $this->getCfg($p);\n      return !empty($cfg['permissions']);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Permission",
            "startLine": 20,
            "endLine": 28,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "hasPermission",
            "returns": [],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Checks whether an option has _permissions_ in its parent cfg\n\n```php\nX::dump($opt->hasPermission('bbn_ide'));\n\/\/ (bool) true\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether an option has _permissions_ in its parent cfg\n   *\n   * ```php\n   * X::dump($opt->hasPermission('bbn_ide'));\n   * \/\/ (bool) true\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return bool\n   *\/"
        },
        "findPermissions": {
            "name": "findPermissions",
            "summary": "Returns an array of _permissions_ from origin $id",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->findPermissions());\n\/* Returns a full tree of permissions for all options\narray []"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Permission.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function findPermissions($id = null, $deep = false)\n  {\n    if ($this->check()) {\n      if (\\is_null($id)) {\n        $id = $this->default;\n      }\n\n      $cfg = $this->getCfg($id);\n      if (!empty($cfg['permissions'])) {\n        $perms = [];\n        if ($opts  = $this->fullOptionsCfg($id)) {\n          foreach ($opts as $opt){\n            $o = [\n              'icon' => $opt[$this->fields['cfg']]['icon'] ?? 'nf nf-fa-cog',\n              'text' => $this->getTranslation($opt[$this->fields['id']]) ?: $opt[$this->fields['text']],\n              'id' => $opt[$this->fields['id']]\n            ];\n            if ($deep && !empty($opt[$this->fields['cfg']]['permissions'])) {\n              $o['items'] = $this->findPermissions($opt[$this->fields['id']], true);\n            }\n\n            $perms[] = $o;\n          }\n        }\n\n        return $perms;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Permission",
            "startLine": 45,
            "endLine": 75,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "findPermissions",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The origin's ID"
                },
                {
                    "name": "deep",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the children will also be searched"
                }
            ],
            "doc": {
                "description": "Returns an array of _permissions_ from origin $id\n\n```php\nX::dump($opt->findPermissions());\n\/* Returns a full tree of permissions for all options\narray []\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int|null",
                        "name": "$id",
                        "description": "The origin's ID"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$deep",
                        "description": "If set to true the children will also be searched"
                    }
                ],
                "return": "An array of permissions if there are, null otherwise",
                "todo": {
                    "tag": "todo",
                    "text": "Returned comments to add"
                }
            },
            "comments": "  \/**\n   * Returns an array of _permissions_ from origin $id\n   *\n   * ```php\n   * X::dump($opt->findPermissions());\n   * \/* Returns a full tree of permissions for all options\n   * array []\n   * ```\n   *\n   * @todo Returned comments to add\n   * @param int|null $id   The origin's ID\n   * @param boolean  $deep If set to true the children will also be searched\n   * @return array|null An array of permissions if there are, null otherwise\n   *\/"
        },
        "updatePlugins": {
            "name": "updatePlugins",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Plugin.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updatePlugins(): ?int\n  {\n    if (($pluginAlias = $this->getMagicPluginTemplateId())\n      && ($export = $this->export($pluginAlias, 'sfull'))\n    ) {\n      $res = 0;\n      \/*\n      $codePath = $this->getCodePath($pluginAlias);\n      $items = X::map(function($a) use ($pluginAlias) {\n        $a['id_alias'] = $pluginAlias;\n        return $a;\n      }, $export['items'], 'items');\n      $idPlugins = $this->getAliasItems($pluginAlias);\n      foreach ($idPlugins as $idPlugin) {\n        foreach ($this->import($items, $idPlugin) as $num) {\n          $res += $num;\n        }\n      }\n      *\/\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Plugin",
            "startLine": 13,
            "endLine": 37,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "updatePlugins",
            "returns": [
                null,
                "int"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return int|null\n   *\/"
        },
        "getParentSubplugin": {
            "name": "getParentSubplugin",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Plugin.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getParentSubplugin(...$codes): ?string\n  {\n    if ($id = $this->fromCode(...$codes)) {\n      return ($r = $this->getClosest($id, 'subplugin')) ? $r['id'] : null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Plugin",
            "startLine": 43,
            "endLine": 50,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getParentSubplugin",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return string|null\n   *\/"
        },
        "getParentPlugin": {
            "name": "getParentPlugin",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Plugin.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getParentPlugin(...$codes): ?string\n  {\n    if ($id = $this->fromCode(...$codes)) {\n      return ($r = $this->getClosest($id, 'plugin')) ? $r['id'] : null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Plugin",
            "startLine": 56,
            "endLine": 63,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getParentPlugin",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return string|null\n   *\/"
        },
        "getParentApp": {
            "name": "getParentApp",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Plugin.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getParentApp(...$codes): ?string\n  {\n    if ($id = $this->fromCode(...$codes)) {\n      return ($r = $this->getClosest($id, 'app')) ? $r['id'] : null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Plugin",
            "startLine": 69,
            "endLine": 76,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getParentApp",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return string|null\n   *\/"
        },
        "getClosest": {
            "name": "getClosest",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Plugin.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getClosest($id, $type): ?array\n  {\n    $subpluginAlias = $this->getMagicSubpluginTemplateId();\n    $pluginAlias = $this->getMagicPluginTemplateId();\n\n    if ($subpluginAlias && $pluginAlias) {\n      $ids = $this->parents($id);\n      $num = count($ids);\n      foreach ($ids as $i => $id) {\n        if ($this->getIdAlias($id) === $subpluginAlias) {\n          if (!$type || ($type === 'subplugin')) {\n            return ['type' => 'subplugin', 'id' => $id];\n          }\n        }\n        elseif ($this->getIdAlias($id) === $pluginAlias) {\n          if ($num < 3) {\n            if (!$type || ($type === 'app')) {\n              return ['type' => 'app', 'id' => $id];\n            }\n\n            break;\n          }\n          else {\n            if (!$type || ($type === 'plugin')) {\n              return ['type' => 'plugin', 'id' => $id];\n            }\n          }\n        }\n\n        $num--;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Plugin",
            "startLine": 79,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getClosest",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPluginName": {
            "name": "getPluginName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Plugin.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPluginName($id): ?string\n  {\n    $pluginAlias = $this->getMagicPluginTemplateId();\n    $pluginsAlias = $this->getMagicPluginsTemplateId();\n    $o = $this->option($id);\n    if ($pluginAlias && ($o['id_alias'] === $pluginAlias)) {\n      $st = '';\n      while ($o && ($o['id_alias'] !== $pluginsAlias)) {\n        $st = $o['code'] . ($st ? '-' . $st : '');\n        $o = $this->option($o['id_parent']);\n      }\n\n      return $st;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Plugin",
            "startLine": 116,
            "endLine": 132,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPluginName",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getSubpluginName": {
            "name": "getSubpluginName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Plugin.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSubpluginName($id): ?string\n  {\n    $subpluginAlias = $this->getMagicSubpluginTemplateId();\n    $pluginsAlias = $this->getMagicPluginsTemplateId();\n    $o = $this->option($id);\n    if ($subpluginAlias && ($o['id_alias'] === $subpluginAlias)) {\n      $st = '';\n      while ($o && ($o['id_alias'] !== $pluginsAlias)) {\n        $st = $o['code'] . ($st ? '-' . $st : '');\n        $o = $this->option($o['id_parent']);\n      }\n\n      return $st;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Plugin",
            "startLine": 134,
            "endLine": 150,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getSubpluginName",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isPlugin": {
            "name": "isPlugin",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Plugin.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isPlugin($id): bool\n  {\n    if ($this->alias($id) === $this->getMagicPluginTemplateId()) {\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Plugin",
            "startLine": 152,
            "endLine": 159,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isPlugin",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPlugins": {
            "name": "getPlugins",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Plugin.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPlugins($root = null, bool $full = false, bool $withSubs = false): ?array\n  {\n    $pluginAlias = $this->getMagicPluginTemplateId();\n    $pluginsAlias = $this->getMagicPluginsTemplateId();\n    $plugins = $this->fromCode('plugins', $root ?: $this->getDefault());\n    $res = [];\n    if ($pluginAlias && $pluginsAlias && $plugins) {\n      foreach ($this->fullOptions($plugins) as $p) {\n        if (empty($p['code'])) {\n          throw new Exception(X::_(\"The plugin option must have a code\"));\n        }\n\n        $code = $p['code'];\n        if ($p['id_alias'] === $pluginAlias) {\n          $item = [\n            'id' => $p['id'],\n            'code' => $code,\n            'text' => $p['text'],\n            'icon' => $p['icon'] ?? '',\n          ];\n          if ($full) {\n            $item = array_merge($item, [\n              'rootPlugins' => $this->fromCode('plugins', $p['id']),\n              'rootOptions' => $this->fromCode('options', $p['id']),\n              'rootTemplates' => $this->fromCode('templates', $p['id']),\n              'rootPermissions' => $this->fromCode('permissions', $p['id'])\n            ]);\n          }\n\n          if ($withSubs) {\n            $item['subplugins'] = $this->getSubplugins($p['id']);\n          }\n\n          $res[] = $item;\n        }\n        else {\n          foreach ($this->fullOptions($p['id']) as $p2) {\n            if (empty($p2['code'])) {\n              throw new Exception(X::_(\"The plugin option must have a code\"));\n            }\n\n            if ($p2['id_alias'] === $pluginAlias) {\n              $item = [\n                'id' => $p2['id'],\n                'code' => $code . '-' . $p2['code'],\n                'text' => $p2['text'],\n                'icon' => $p2['icon'] ?? '',\n              ];\n              if ($full) {\n                $item = array_merge($item, [\n                  'rootPlugins' => $this->fromCode('plugins', $p2['id']),\n                  'rootOptions' => $this->fromCode('options', $p2['id']),\n                  'rootTemplates' => $this->fromCode('templates', $p2['id']),\n                  'rootPermissions' => $this->fromCode('permissions', $p2['id'])\n                ]);\n              }\n\n              if ($withSubs) {\n                $item['subplugins'] = $this->getSubplugins($p2['id']);\n              }\n\n              $res[] = $item;\n            }\n          }\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Plugin",
            "startLine": 162,
            "endLine": 233,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "getPlugins",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "root",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "withSubs",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getSubplugins": {
            "name": "getSubplugins",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Plugin.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSubplugins(string $id_plugin): ?array\n  {\n    $subpluginAlias = $this->getMagicSubpluginTemplateId();\n    $pluginAlias = $this->getMagicPluginTemplateId();\n    $pluginsAlias = $this->getMagicPluginsTemplateId();\n    $plugins = $this->fromCode('plugins', $id_plugin);\n    $res = [];\n    if ($pluginAlias && $pluginsAlias && $plugins) {\n      foreach ($this->fullOptions($plugins) as $p) {\n        $code = $p['code'] ?: $p['alias']['code'];\n        if (empty($code)) {\n          throw new Exception(X::_(\"The plugin option must have a code\"));\n        }\n\n        if ($p['id_alias'] === $subpluginAlias) {\n          $res[] = [\n            'id' => $p['id'],\n            'code' => $code,\n            'text' => $p['text'],\n            'icon' => $p['icon'] ?? '',\n            'rootOptions' => $this->fromCode('options', $p['id']),\n            'rootPermissions' => $this->fromCode('permissions', $p['id'])\n          ];\n        } else {\n          foreach ($this->fullOptions($p['id']) as $p2) {\n            if (empty($p2['code'])) {\n              throw new Exception(X::_(\"The plugin option must have a code\"));\n            }\n\n            if ($p2['id_alias'] === $subpluginAlias) {\n              $res[] = [\n                'id' => $p2['id'],\n                'code' => $code . '-' . $p2['code'],\n                'text' => $p2['text'],\n                'icon' => $p2['icon'] ?? '',\n                'rootOptions' => $this->fromCode('options', $p2['id']),\n                'rootPermissions' => $this->fromCode('permissions', $p2['id'])\n              ];\n            }\n          }\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Plugin",
            "startLine": 236,
            "endLine": 283,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getSubplugins",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_plugin",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getProp": {
            "name": "getProp",
            "summary": "Get an option's single property",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->getProp(12, 'myProperty'));\n\/\/ (int) 78\nX::dump($opt->setProp(12, ['myProperty' => \"78%\"]));\n\/\/ (int) 1\nX::dump($opt->getProp(12, 'myProperty'));\n\/\/ (string) \"78%\""
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Prop.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getProp($id, string $prop)\n  {\n    if (!empty($id) && !empty($prop) && ($o = $this->option($id)) && isset($o[$prop])) {\n      return $o[$prop];\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Prop",
            "startLine": 26,
            "endLine": 33,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getProp",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The option from which getting the property"
                },
                {
                    "name": "prop",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The property's name"
                }
            ],
            "doc": {
                "description": "Get an option's single property\n\n```php\nX::dump($opt->getProp(12, 'myProperty'));\n\/\/ (int) 78\nX::dump($opt->setProp(12, ['myProperty' => \"78%\"]));\n\/\/ (int) 1\nX::dump($opt->getProp(12, 'myProperty'));\n\/\/ (string) \"78%\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|int",
                        "name": "$id",
                        "description": "The option from which getting the property"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$prop",
                        "description": "The property's name"
                    }
                ],
                "return": "The property's value, false if not found"
            },
            "comments": "  \/**\n   * Get an option's single property\n   *\n   * ```php\n   * X::dump($opt->getProp(12, 'myProperty'));\n   * \/\/ (int) 78\n   * X::dump($opt->setProp(12, ['myProperty' => \"78%\"]));\n   * \/\/ (int) 1\n   * X::dump($opt->getProp(12, 'myProperty'));\n   * \/\/ (string) \"78%\"\n   * ```\n   *\n   * @param string|int    $id   The option from which getting the property\n   * @param string $prop The property's name\n   * @return mixed|false The property's value, false if not found\n   *\/"
        },
        "text": {
            "name": "text",
            "summary": "Returns an option's text",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->text(12));\n\/\/ (string) BBN's own IDE\nX::dump($opt->text('bbn_ide'));\n\/\/ (string) BBN's own IDE"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Prop.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function text($code = null): ?string\n  {\n    if ($opt = $this->nativeOption(\\func_get_args())) {\n      return $opt[$this->fields['text']];\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Prop",
            "startLine": 48,
            "endLine": 55,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "text",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns an option's text\n\n```php\nX::dump($opt->text(12));\n\/\/ (string) BBN's own IDE\nX::dump($opt->text('bbn_ide'));\n\/\/ (string) BBN's own IDE\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "Text of the option"
            },
            "comments": "  \/**\n   * Returns an option's text\n   *\n   * ```php\n   * X::dump($opt->text(12));\n   * \/\/ (string) BBN's own IDE\n   * X::dump($opt->text('bbn_ide'));\n   * \/\/ (string) BBN's own IDE\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return string|null Text of the option\n   *\/"
        },
        "rawText": {
            "name": "rawText",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Prop.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function rawText($code = null): ?string\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      if ($this->cacheHas($id, __FUNCTION__)) {\n        return $this->getCache($id, __FUNCTION__);\n      }\n\n      $text = $this->db->selectOne(\n        $this->class_cfg['table'],\n        $this->fields['text'],\n        [\n          $this->fields['id'] => $id\n        ]\n      );\n      $this->setCache($id, __FUNCTION__, $text);\n      return $text;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Prop",
            "startLine": 58,
            "endLine": 77,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "rawText",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "order": {
            "name": "order",
            "summary": "Returns the order of an option. Updates it if a position is given, and cascades",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->items(20));\n\/\/ [21, 22, 25, 27]\nX::dump($opt->order(25));\n\/\/ (int) 3\nX::dump($opt->order(25, 2));\n\/\/ (int) 2\nX::dump($opt->items(20));\n\/\/ [21, 25, 22, 27]\nX::dump($opt->order(25));\n\/\/ (int) 2"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Prop.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function order($id, int $pos = null)\n  {\n    if ($this->check()\n        && ($parent = $this->getIdParent($id))\n        && $this->isSortable($parent)\n    ) {\n      $cf  = $this->class_cfg;\n      $old = $this->db->selectOne(\n        $cf['table'], $this->fields['num'], [\n        $this->fields['id'] => $id\n        ]\n      );\n      if ($pos && ($old != $pos)) {\n        $its      = $this->items($parent);\n        $past_new = false;\n        $past_old = false;\n        $p        = 1;\n        foreach ($its as $id_option){\n          $upd = false;\n          \/\/ Fixing order problem\n          if ($past_old && !$past_new) {\n            $upd = [$this->fields['num'] => $p - 1];\n          }\n          elseif (!$past_old && $past_new) {\n            $upd = [$this->fields['num'] => $p + 1];\n          }\n\n          if ($id === $id_option) {\n            $upd      = [$this->fields['num'] => $pos];\n            $past_old = 1;\n          }\n          elseif ($p === $pos) {\n            $upd      = [$this->fields['num'] => $p + ($pos > $old ? -1 : 1)];\n            $past_new = 1;\n          }\n\n          if ($upd) {\n            $this->db->update(\n              $cf['table'], $upd, [\n              $this->fields['id'] => $id_option\n              ]\n            );\n          }\n\n          if ($past_new && $past_old) {\n            break;\n          }\n\n          $p++;\n        }\n\n        $this->deleteCache($parent, true);\n        $this->deleteCache($id);\n        return $pos;\n      }\n\n      return $old;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Prop",
            "startLine": 100,
            "endLine": 160,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "order",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The ID of the option to update"
                },
                {
                    "name": "pos",
                    "position": 1,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The new position"
                }
            ],
            "doc": {
                "description": "Returns the order of an option. Updates it if a position is given, and cascades\n\n```php\nX::dump($opt->items(20));\n\/\/ [21, 22, 25, 27]\nX::dump($opt->order(25));\n\/\/ (int) 3\nX::dump($opt->order(25, 2));\n\/\/ (int) 2\nX::dump($opt->items(20));\n\/\/ [21, 25, 22, 27]\nX::dump($opt->order(25));\n\/\/ (int) 2\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id",
                        "description": "The ID of the option to update"
                    },
                    {
                        "tag": "param",
                        "type": "int|null",
                        "name": "$pos",
                        "description": "The new position"
                    }
                ],
                "return": "The new or existing order of the option or null if not found or not sortable"
            },
            "comments": "  \/**\n   * Returns the order of an option. Updates it if a position is given, and cascades\n   *\n   * ```php\n   * X::dump($opt->items(20));\n   * \/\/ [21, 22, 25, 27]\n   * X::dump($opt->order(25));\n   * \/\/ (int) 3\n   * X::dump($opt->order(25, 2));\n   * \/\/ (int) 2\n   * X::dump($opt->items(20));\n   * \/\/ [21, 25, 22, 27]\n   * X::dump($opt->order(25));\n   * \/\/ (int) 2\n   * ```\n   *\n   * @param int $id  The ID of the option to update\n   * @param int|null $pos The new position\n   * @return int|null The new or existing order of the option or null if not found or not sortable\n   *\/"
        },
        "fullOptionsRef": {
            "name": "fullOptionsRef",
            "summary": "Returns each individual full option plus the children of options having this as alias.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->fullOptionsRef('type', 'media', 'note', 'appui'));\n\/*\narray [\n  ['id' => 21, 'id_parent' => 12, 'title' => \"My option 21\", 'myProperty' =>  \"78%\"],\n  ['id' => 22, 'id_parent' => 12, 'title' => \"My option 22\", 'myProperty' =>  \"26%\"],\n  ['id' => 25, 'id_parent' => 12, 'title' => \"My option 25\", 'myProperty' =>  \"50%\"],\n  ['id' => 27, 'id_parent' => 12, 'title' => \"My option 27\", 'myProperty' =>  \"40%\"]\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Ref.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullOptionsRef($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      $all = $this->fullOptions($id) ?? [];\n      if ($aliases = $this->getAliases($id)) {\n        foreach ($aliases as $a) {\n          if ($tmp = $this->fullOptions($a[$this->fields['id']])) {\n            array_push($all, ...$tmp);\n          }\n        }\n      }\n\n      return $all;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Ref",
            "startLine": 26,
            "endLine": 42,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "fullOptionsRef",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns each individual full option plus the children of options having this as alias.\n\n```php\nX::dump($opt->fullOptionsRef('type', 'media', 'note', 'appui'));\n\/*\narray [\n  ['id' => 21, 'id_parent' => 12, 'title' => \"My option 21\", 'myProperty' =>  \"78%\"],\n  ['id' => 22, 'id_parent' => 12, 'title' => \"My option 22\", 'myProperty' =>  \"26%\"],\n  ['id' => 25, 'id_parent' => 12, 'title' => \"My option 25\", 'myProperty' =>  \"50%\"],\n  ['id' => 27, 'id_parent' => 12, 'title' => \"My option 27\", 'myProperty' =>  \"40%\"]\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "A list of parent if option not found"
            },
            "comments": "  \/**\n   * Returns each individual full option plus the children of options having this as alias.\n   *\n   * ```php\n   * X::dump($opt->fullOptionsRef('type', 'media', 'note', 'appui'));\n   * \/*\n   * array [\n   *   ['id' => 21, 'id_parent' => 12, 'title' => \"My option 21\", 'myProperty' =>  \"78%\"],\n   *   ['id' => 22, 'id_parent' => 12, 'title' => \"My option 22\", 'myProperty' =>  \"26%\"],\n   *   ['id' => 25, 'id_parent' => 12, 'title' => \"My option 25\", 'myProperty' =>  \"50%\"],\n   *   ['id' => 27, 'id_parent' => 12, 'title' => \"My option 27\", 'myProperty' =>  \"40%\"]\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null A list of parent if option not found\n   *\/"
        },
        "optionsRef": {
            "name": "optionsRef",
            "summary": "Returns each individual option plus the children of options having this as alias.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->optionsRef(12));\n\/*\narray [\n  [21 => \"My option 21\"],\n  [22 => \"My option 22\"],\n  [25 => \"My option 25\"],\n  [27 => \"My option 27\"]\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Ref.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function optionsRef($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      $all = $this->options($id) ?? [];\n      if ($aliases = $this->getAliases($id)) {\n        foreach ($aliases as $a) {\n          if ($tmp = $this->options($a[$this->fields['id']])) {\n            $all = array_merge($all, $tmp);\n          }\n        }\n      }\n\n      return $all;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Ref",
            "startLine": 62,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "optionsRef",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns each individual option plus the children of options having this as alias.\n\n```php\nX::dump($opt->optionsRef(12));\n\/*\narray [\n  [21 => \"My option 21\"],\n  [22 => \"My option 22\"],\n  [25 => \"My option 25\"],\n  [27 => \"My option 27\"]\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "A list of parent if option not found"
            },
            "comments": "  \/**\n   * Returns each individual option plus the children of options having this as alias.\n   *\n   * ```php\n   * X::dump($opt->optionsRef(12));\n   * \/*\n   * array [\n   *   [21 => \"My option 21\"],\n   *   [22 => \"My option 22\"],\n   *   [25 => \"My option 25\"],\n   *   [27 => \"My option 27\"]\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null A list of parent if option not found\n   *\/"
        },
        "itemsRef": {
            "name": "itemsRef",
            "summary": "Returns each individual item plus the children of items having this as alias.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->itemsRef(12));\n\/*\narray [\n  [21],\n  [22],\n  [25],\n  [26]\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Ref.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function itemsRef($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      $all = $this->items($id) ?? [];\n      if ($aliases = $this->getAliases($id)) {\n        foreach ($aliases as $a) {\n          if ($items = $this->items($a)) {\n            array_push($all, ...$items);\n          }\n        }\n      }\n\n      return $all;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Ref",
            "startLine": 98,
            "endLine": 114,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "itemsRef",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns each individual item plus the children of items having this as alias.\n\n```php\nX::dump($opt->itemsRef(12));\n\/*\narray [\n  [21],\n  [22],\n  [25],\n  [26]\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "A list of parent if option not found"
            },
            "comments": "  \/**\n   * Returns each individual item plus the children of items having this as alias.\n   *\n   * ```php\n   * X::dump($opt->itemsRef(12));\n   * \/*\n   * array [\n   *   [21],\n   *   [22],\n   *   [25],\n   *   [26]\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null A list of parent if option not found\n   *\/"
        },
        "textValueOptionsRef": {
            "name": "textValueOptionsRef",
            "summary": "Returns an option's children array of id and text in a user-defined indexed array",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->textValueOptions(12, 'title'));\n\/* value comes from the default argument\narray [\n  ['title' => \"My option 21\", 'value' =>  21],\n  ['title' => \"My option 22\", 'value' =>  22],\n  ['title' => \"My option 25\", 'value' =>  25],\n  ['title' => \"My option 27\", 'value' =>  27]\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Ref.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function textValueOptionsRef($id, string $text = 'text', string $value = 'value'): ?array\n  {\n    $res = [];\n    if ($opts = $this->fullOptionsRef($id)) {\n      $cfg = $this->getCfg($id) ?: [];\n      $i   = 0;\n      foreach ($opts as $k => $o) {\n        if (!isset($is_array)) {\n          $is_array = \\is_array($o);\n        }\n\n        $res[$i] = [\n          $text => $is_array ? $o[$this->fields['text']] : $o,\n          $value => $is_array ? $o[$this->fields['id']] : $k\n        ];\n        if (!empty($cfg['show_code'])) {\n          $res[$i][$this->fields['code']] = $o[$this->fields['code']];\n        }\n\n        $i++;\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Ref",
            "startLine": 137,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "textValueOptionsRef",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The option's ID or its code if it is children of {@link default}"
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": "",
                    "description": "The text field name for text column"
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": "",
                    "description": "The value field name for id column"
                }
            ],
            "doc": {
                "description": "Returns an option's children array of id and text in a user-defined indexed array\n\n```php\nX::dump($opt->textValueOptions(12, 'title'));\n\/* value comes from the default argument\narray [\n  ['title' => \"My option 21\", 'value' =>  21],\n  ['title' => \"My option 22\", 'value' =>  22],\n  ['title' => \"My option 25\", 'value' =>  25],\n  ['title' => \"My option 27\", 'value' =>  27]\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int|string",
                        "name": "$id",
                        "description": "The option's ID or its code if it is children of {@link default}"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$text",
                        "description": "The text field name for text column"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$value",
                        "description": "The value field name for id column"
                    }
                ],
                "return": "Options' list in a text\/value indexed array"
            },
            "comments": "  \/**\n   * Returns an option's children array of id and text in a user-defined indexed array\n   *\n   * ```php\n   * X::dump($opt->textValueOptions(12, 'title'));\n   * \/* value comes from the default argument\n   * array [\n   *   ['title' => \"My option 21\", 'value' =>  21],\n   *   ['title' => \"My option 22\", 'value' =>  22],\n   *   ['title' => \"My option 25\", 'value' =>  25],\n   *   ['title' => \"My option 27\", 'value' =>  27]\n   * ]\n   * ```\n   *\n   * @param int|string $id    The option's ID or its code if it is children of {@link default}\n   * @param string     $text  The text field name for text column\n   * @param string     $value The value field name for id column\n   * @return array Options' list in a text\/value indexed array\n   *\/"
        },
        "fullTreeRef": {
            "name": "fullTreeRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Ref.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullTreeRef($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))\n        && ($res = $this->option($id))\n    ) {\n      if ($opts = $this->fullOptionsRef($id)) {\n        $res['items'] = [];\n        foreach ($opts as $o){\n          if ($t = $this->fullTreeRef($o)) {\n            $res['items'][] = $t;\n          }\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Ref",
            "startLine": 168,
            "endLine": 186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "fullTreeRef",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "",
                "returns": {
                    "tag": "returns",
                    "type": "array|null"
                }
            },
            "comments": "  \/**\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @returns array|null\n   *\/"
        },
        "getRoot": {
            "name": "getRoot",
            "summary": "Returns the ID of the root option - mother of all",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->getRoot());\n\/\/ (int)0"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Root.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRoot(): ?string\n  {\n    if ($this->check()) {\n      return $this->root;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Root",
            "startLine": 26,
            "endLine": 33,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRoot",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the ID of the root option - mother of all\n\n```php\nX::dump($opt->getRoot());\n\/\/ (int)0\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of the root option - mother of all\n   *\n   * ```php\n   * X::dump($opt->getRoot());\n   * \/\/ (int)0\n   * ```\n   *\n   * @return string|null\n   *\/"
        },
        "getDefault": {
            "name": "getDefault",
            "summary": "Returns the ID of the default option ($id_parent used when not provided)",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->getDefault());\n\/\/ (int) 0\n$opt->setDefault(5);\nX::dump($opt->getDefault());\n\/\/ (int) 5\n$opt->setDefault();\nX::dump($opt->getDefault());\n\/\/ (int) 0"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Root.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDefault(): ?string\n  {\n    if ($this->check()) {\n      return $this->default;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Root",
            "startLine": 52,
            "endLine": 59,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDefault",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the ID of the default option ($id_parent used when not provided)\n\n```php\nX::dump($opt->getDefault());\n\/\/ (int) 0\n$opt->setDefault(5);\nX::dump($opt->getDefault());\n\/\/ (int) 5\n$opt->setDefault();\nX::dump($opt->getDefault());\n\/\/ (int) 0\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of the default option ($id_parent used when not provided)\n   *\n   * ```php\n   * X::dump($opt->getDefault());\n   * \/\/ (int) 0\n   * $opt->setDefault(5);\n   * X::dump($opt->getDefault());\n   * \/\/ (int) 5\n   * $opt->setDefault();\n   * X::dump($opt->getDefault());\n   * \/\/ (int) 0\n   * ```\n   *\n   * @return string|null\n   *\/"
        },
        "setDefault": {
            "name": "setDefault",
            "summary": "Makes an option act as if it was the root option",
            "description": "It will be the default $id_parent for options requested by code",
            "description_parts": [
                {
                    "type": "text",
                    "content": "It will be the default $id_parent for options requested by code"
                },
                {
                    "type": "code",
                    "content": "X::dump($opt->getDefault());\n\/\/ (int) 0\n\/\/ Default root option\n$new = $opt->fromCode('test');\n\/\/ false\n\/\/ Option not found\n$opt->setDefault($new);\n\/\/ Default is now 5\nX::dump($opt->getDefault());\n\/\/ (int) 5\nX::dump($opt->fromCode('test));\n\/\/ (int) 24\n\/\/ Returns the ID (24) of a child of option 5 with code 'test'\n$opt->setDefault();\n\/\/ Default is back to root\nX::dump($opt->getDefault());\n\/\/ (int) 0"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Root.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDefault($uid): self\n  {\n    if ($this->check() && $this->exists($uid)) {\n      $this->default = $uid;\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Root",
            "startLine": 90,
            "endLine": 97,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDefault",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Makes an option act as if it was the root option\nIt will be the default $id_parent for options requested by code\n\n```php\nX::dump($opt->getDefault());\n\/\/ (int) 0\n\/\/ Default root option\n$new = $opt->fromCode('test');\n\/\/ false\n\/\/ Option not found\n$opt->setDefault($new);\n\/\/ Default is now 5\nX::dump($opt->getDefault());\n\/\/ (int) 5\nX::dump($opt->fromCode('test));\n\/\/ (int) 24\n\/\/ Returns the ID (24) of a child of option 5 with code 'test'\n$opt->setDefault();\n\/\/ Default is back to root\nX::dump($opt->getDefault());\n\/\/ (int) 0\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Makes an option act as if it was the root option\n   * It will be the default $id_parent for options requested by code\n   *\n   * ```php\n   * X::dump($opt->getDefault());\n   * \/\/ (int) 0\n   * \/\/ Default root option\n   * $new = $opt->fromCode('test');\n   * \/\/ false\n   * \/\/ Option not found\n   * $opt->setDefault($new);\n   * \/\/ Default is now 5\n   * X::dump($opt->getDefault());\n   * \/\/ (int) 5\n   * X::dump($opt->fromCode('test));\n   * \/\/ (int) 24\n   * \/\/ Returns the ID (24) of a child of option 5 with code 'test'\n   * $opt->setDefault();\n   * \/\/ Default is back to root\n   * X::dump($opt->getDefault());\n   * \/\/ (int) 0\n   * ```\n   *\n   * @param string $uid\n   * @return Option\n   * @throws Exception\n   *\/"
        },
        "getDefaults": {
            "name": "getDefaults",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Root.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDefaults(): array\n  {\n    if ($this->check()) {\n      return array_filter($this->fullOptions($this->root), function($a) {\n        return $a['code'] !== 'templates';\n      });\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Root",
            "startLine": 100,
            "endLine": 109,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDefaults",
            "returns": [
                "array"
            ],
            "arguments": []
        },
        "init": {
            "name": "init",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Root.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function init(): bool\n  {\n    if (!$this->is_init) {\n      $this->cacheInit();\n      $t          =& $this;\n      $this->root = $this->cacheGetSet(\n        function () use (&$t) {\n          return $t->db->selectOne($t->class_cfg['table'], $t->fields['id'], [\n            $t->fields['id_parent'] => null, $t->fields['code'] => 'root']);\n        },\n        'root',\n        'root',\n        60\n      );\n      if (!$this->root) {\n        return false;\n      }\n\n      if (\\defined('BBN_APP_NAME')) {\n        $this->default = $this->cacheGetSet(\n          function () use (&$t) {\n            $res = $t->db->selectOne(\n              $t->class_cfg['table'],\n              $t->fields['id'],\n              [\n                $t->fields['id_parent'] => $this->root,\n                $t->fields['code'] => BBN_APP_NAME\n              ]\n            );\n            if (!$res) {\n              $res = $t->root;\n            }\n\n            return $res;\n          },\n          BBN_APP_NAME,\n          BBN_APP_NAME,\n          60\n        );\n      }\n      else {\n        $this->default = $this->root;\n      }\n\n      $this->is_init = true;\n    }\n\n    return true;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Root",
            "startLine": 112,
            "endLine": 160,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "init",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "optionNoAlias": {
            "name": "optionNoAlias",
            "summary": "Returns an option's full content as an array without its values changed by id_alias",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->optionNoAlias(25));\nX::dump($opt->optionNoAlias('bbn_ide'));\nX::dump($opt->optionNoAlias('TEST', 58));\nX::dump($opt->optionNoAlias('test3', 'users', 'bbn_ide'));\n\/* Each would return an array of this form\narray [\n  'id' => 31,\n  'code' => \"bbn_ide\",\n  'text' => \"This is BBN's IDE\",\n  'id_alias' => 16,\n  'myIntProperty' => 56854,\n  'myTextProperty' => \"<h1>Hello\\nWorld<\/h1>\",\n  'myArrayProperty' => ['value1' => 1, 'value2' => 2]\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Single.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function optionNoAlias($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))\n        && ($opt = $this->nativeOption($id))\n    ) {\n      $this->_set_value($opt);\n      return $opt;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Single",
            "startLine": 34,
            "endLine": 44,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "optionNoAlias",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns an option's full content as an array without its values changed by id_alias\n\n```php\nX::dump($opt->optionNoAlias(25));\nX::dump($opt->optionNoAlias('bbn_ide'));\nX::dump($opt->optionNoAlias('TEST', 58));\nX::dump($opt->optionNoAlias('test3', 'users', 'bbn_ide'));\n\/* Each would return an array of this form\narray [\n  'id' => 31,\n  'code' => \"bbn_ide\",\n  'text' => \"This is BBN's IDE\",\n  'id_alias' => 16,\n  'myIntProperty' => 56854,\n  'myTextProperty' => \"<h1>Hello\\nWorld<\/h1>\",\n  'myArrayProperty' => ['value1' => 1, 'value2' => 2]\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "The option array or false if the option cannot be found"
            },
            "comments": "  \/**\n   * Returns an option's full content as an array without its values changed by id_alias\n   *\n   * ```php\n   * X::dump($opt->optionNoAlias(25));\n   * X::dump($opt->optionNoAlias('bbn_ide'));\n   * X::dump($opt->optionNoAlias('TEST', 58));\n   * X::dump($opt->optionNoAlias('test3', 'users', 'bbn_ide'));\n   * \/* Each would return an array of this form\n   * array [\n   *   'id' => 31,\n   *   'code' => \"bbn_ide\",\n   *   'text' => \"This is BBN's IDE\",\n   *   'id_alias' => 16,\n   *   'myIntProperty' => 56854,\n   *   'myTextProperty' => \"<h1>Hello\\nWorld<\/h1>\",\n   *   'myArrayProperty' => ['value1' => 1, 'value2' => 2]\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null The option array or false if the option cannot be found\n   *\/"
        },
        "getValue": {
            "name": "getValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Single.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getValue($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))\n        && ($opt = $this->nativeOption($id))\n        && !empty($opt[$this->fields['value']])\n        && Str::isJson($opt[$this->fields['value']])\n    ) {\n      return json_decode($opt[$this->fields['value']], true);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Single",
            "startLine": 51,
            "endLine": 62,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getValue",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string|null $code\n   * @return array|null\n   *\/"
        },
        "option": {
            "name": "option",
            "summary": "Returns an option's full content as an array.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->option(25));\nX::dump($opt->option('bbn_ide'));\nX::dump($opt->option('TEST', 58));\nX::dump($opt->option('test', 'users', 'bbn_ide'));\n\/* Each would return an array of this form\narray [\n  'id' => 25,\n  'code' => \"bbn_ide\",\n  'text' => \"This is BBN's IDE\",\n  'myIntProperty' => 56854,\n  'myTextProperty' => \"<h1>Hello\\nWorld<\/h1>\",\n  'myArrayProperty' => ['value1' => 1, 'value2' => 2]\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Single.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function option($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))\n        && ($opt = $this->nativeOption($id))\n    ) {\n      $this->_set_value($opt);\n      $c =& $this->fields;\n      if (Str::isUid($opt[$c['id_alias']]) && ($alias = $this->nativeOption($opt[$c['id_alias']]))) {\n        $opt['alias'] = $alias;\n        if ($opt[$c['id_alias']] === $id) {\n          throw new Exception(X::_(\"Impossible to have the same ID as ALIAS, check out ID\").' '.$id);\n        }\n        else {\n          $this->_set_value($opt['alias']);\n        }\n      }\n\n      if ($schema = $this->getSchema($id)) {\n        foreach ($schema as $s) {\n          if (isset($s['field']) && !isset($opt[$s['field']])) {\n            $opt[$s['field']] = $s['default'] ?? null;\n          }\n        }\n      }\n\n      return $opt;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Single",
            "startLine": 87,
            "endLine": 116,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "option",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns an option's full content as an array.\n\n```php\nX::dump($opt->option(25));\nX::dump($opt->option('bbn_ide'));\nX::dump($opt->option('TEST', 58));\nX::dump($opt->option('test', 'users', 'bbn_ide'));\n\/* Each would return an array of this form\narray [\n  'id' => 25,\n  'code' => \"bbn_ide\",\n  'text' => \"This is BBN's IDE\",\n  'myIntProperty' => 56854,\n  'myTextProperty' => \"<h1>Hello\\nWorld<\/h1>\",\n  'myArrayProperty' => ['value1' => 1, 'value2' => 2]\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "The option array or false if the option cannot be found"
            },
            "comments": "  \/**\n   * Returns an option's full content as an array.\n   *\n   * ```php\n   * X::dump($opt->option(25));\n   * X::dump($opt->option('bbn_ide'));\n   * X::dump($opt->option('TEST', 58));\n   * X::dump($opt->option('test', 'users', 'bbn_ide'));\n   * \/* Each would return an array of this form\n   * array [\n   *   'id' => 25,\n   *   'code' => \"bbn_ide\",\n   *   'text' => \"This is BBN's IDE\",\n   *   'myIntProperty' => 56854,\n   *   'myTextProperty' => \"<h1>Hello\\nWorld<\/h1>\",\n   *   'myArrayProperty' => ['value1' => 1, 'value2' => 2]\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null The option array or false if the option cannot be found\n   *\/"
        },
        "opAlias": {
            "name": "opAlias",
            "summary": "Returns the merge between an option and its alias as an array.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->option(25));\nX::dump($opt->option('bbn_ide'));\nX::dump($opt->option('TEST', 58));\nX::dump($opt->option('test', 'users', 'bbn_ide'));\n\/* Each would return an array of this form\narray [\n  'id' => 25,\n  'code' => \"bbn_ide\",\n  'text' => \"This is BBN's IDE\",\n  'myIntProperty' => 56854,\n  'myTextProperty' => \"<h1>Hello\\nWorld<\/h1>\",\n  'myArrayProperty' => ['value1' => 1, 'value2' => 2]\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Single.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function opAlias($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))\n        && ($opt = $this->nativeOption($id))\n    ) {\n      $this->_set_value($opt);\n      $c =& $this->fields;\n      if (Str::isUid($opt[$c['id_alias']]) && ($alias = $this->nativeOption($opt[$c['id_alias']]))) {\n        if ($opt[$c['id_alias']] === $id) {\n          throw new Exception(X::_(\"Impossible to have the same ID as ALIAS, check out ID\").' '.$id);\n        }\n        else {\n          $this->_set_value($alias);\n          foreach ($alias as $n => $a) {\n            if (!empty($a)) {\n              $opt[$n] = $a;\n            }\n          }\n\n        }\n      }\n\n      return $opt;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Single",
            "startLine": 143,
            "endLine": 169,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "opAlias",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns the merge between an option and its alias as an array.\n\n```php\nX::dump($opt->option(25));\nX::dump($opt->option('bbn_ide'));\nX::dump($opt->option('TEST', 58));\nX::dump($opt->option('test', 'users', 'bbn_ide'));\n\/* Each would return an array of this form\narray [\n  'id' => 25,\n  'code' => \"bbn_ide\",\n  'text' => \"This is BBN's IDE\",\n  'myIntProperty' => 56854,\n  'myTextProperty' => \"<h1>Hello\\nWorld<\/h1>\",\n  'myArrayProperty' => ['value1' => 1, 'value2' => 2]\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "The option array or false if the option cannot be found"
            },
            "comments": "  \/**\n   * Returns the merge between an option and its alias as an array.\n   *\n   * ```php\n   * X::dump($opt->option(25));\n   * X::dump($opt->option('bbn_ide'));\n   * X::dump($opt->option('TEST', 58));\n   * X::dump($opt->option('test', 'users', 'bbn_ide'));\n   * \/* Each would return an array of this form\n   * array [\n   *   'id' => 25,\n   *   'code' => \"bbn_ide\",\n   *   'text' => \"This is BBN's IDE\",\n   *   'myIntProperty' => 56854,\n   *   'myTextProperty' => \"<h1>Hello\\nWorld<\/h1>\",\n   *   'myArrayProperty' => ['value1' => 1, 'value2' => 2]\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null The option array or false if the option cannot be found\n   *\/"
        },
        "soptions": {
            "name": "soptions",
            "summary": "Returns an id-indexed array of options in the form id => text for a given grandparent",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->soptions(12));\n\/*\n[\n  21 => \"My option 21\",\n  22 => \"My option 22\",\n  25 => \"My option 25\",\n  27 => \"My option 27\",\n  31 => \"My option 31\",\n  32 => \"My option 32\",\n  35 => \"My option 35\",\n  37 => \"My option 37\"\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Sub.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function soptions($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      $r = [];\n      if ($list = $this->items($id)) {\n        foreach ($list as $i){\n          $o = $this->options($i);\n          if (\\is_array($o)) {\n            $r = X::mergeArrays($r, $o);\n          }\n        }\n      }\n\n      return $r;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Sub",
            "startLine": 31,
            "endLine": 48,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "soptions",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns an id-indexed array of options in the form id => text for a given grandparent\n\n```php\nX::dump($opt->soptions(12));\n\/*\n[\n  21 => \"My option 21\",\n  22 => \"My option 22\",\n  25 => \"My option 25\",\n  27 => \"My option 27\",\n  31 => \"My option 31\",\n  32 => \"My option 32\",\n  35 => \"My option 35\",\n  37 => \"My option 37\"\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "indexed on id\/text options or false if parent not found"
            },
            "comments": "  \/**\n   * Returns an id-indexed array of options in the form id => text for a given grandparent\n   *\n   * ```php\n   * X::dump($opt->soptions(12));\n   * \/*\n   * [\n   *   21 => \"My option 21\",\n   *   22 => \"My option 22\",\n   *   25 => \"My option 25\",\n   *   27 => \"My option 27\",\n   *   31 => \"My option 31\",\n   *   32 => \"My option 32\",\n   *   35 => \"My option 35\",\n   *   37 => \"My option 37\"\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null indexed on id\/text options or false if parent not found\n   *\/"
        },
        "fullSoptions": {
            "name": "fullSoptions",
            "summary": "Returns an array of full options arrays for a given grandparent",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->fullSoptions(12));\n\/*\narray [\n  ['id' => 21, 'id_parent' => 20, 'title' => \"My option 21\", 'myProperty' =>  \"78%\"],\n  ['id' => 22, 'id_parent' => 20, 'title' => \"My option 22\", 'myProperty' =>  \"26%\"],\n  ['id' => 25, 'id_parent' => 20, 'title' => \"My option 25\", 'myProperty' =>  \"50%\"],\n  ['id' => 27, 'id_parent' => 20, 'title' => \"My option 27\", 'myProperty' =>  \"40%\"],\n  ['id' => 31, 'id_parent' => 30, 'title' => \"My option 31\", 'myProperty' =>  \"88%\"],\n  ['id' => 32, 'id_parent' => 30, 'title' => \"My option 32\", 'myProperty' =>  \"97%\"],\n  ['id' => 35, 'id_parent' => 30, 'title' => \"My option 35\", 'myProperty' =>  \"12%\"],\n  ['id' => 37, 'id_parent' => 30, 'title' => \"My option 37\", 'myProperty' =>  \"4%\"]\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Sub.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullSoptions($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))) {\n      $r = [];\n      if ($ids = $this->items($id)) {\n        foreach ($ids as $id){\n          $o = $this->fullOptions($id);\n          if (\\is_array($o)) {\n            $r = X::mergeArrays($r, $o);\n          }\n        }\n      }\n\n      return $r;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Sub",
            "startLine": 72,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "fullSoptions",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns an array of full options arrays for a given grandparent\n\n```php\nX::dump($opt->fullSoptions(12));\n\/*\narray [\n  ['id' => 21, 'id_parent' => 20, 'title' => \"My option 21\", 'myProperty' =>  \"78%\"],\n  ['id' => 22, 'id_parent' => 20, 'title' => \"My option 22\", 'myProperty' =>  \"26%\"],\n  ['id' => 25, 'id_parent' => 20, 'title' => \"My option 25\", 'myProperty' =>  \"50%\"],\n  ['id' => 27, 'id_parent' => 20, 'title' => \"My option 27\", 'myProperty' =>  \"40%\"],\n  ['id' => 31, 'id_parent' => 30, 'title' => \"My option 31\", 'myProperty' =>  \"88%\"],\n  ['id' => 32, 'id_parent' => 30, 'title' => \"My option 32\", 'myProperty' =>  \"97%\"],\n  ['id' => 35, 'id_parent' => 30, 'title' => \"My option 35\", 'myProperty' =>  \"12%\"],\n  ['id' => 37, 'id_parent' => 30, 'title' => \"My option 37\", 'myProperty' =>  \"4%\"]\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "A list of options or false if parent not found"
            },
            "comments": "  \/**\n   * Returns an array of full options arrays for a given grandparent\n   *\n   * ```php\n   * X::dump($opt->fullSoptions(12));\n   * \/*\n   * array [\n   *   ['id' => 21, 'id_parent' => 20, 'title' => \"My option 21\", 'myProperty' =>  \"78%\"],\n   *   ['id' => 22, 'id_parent' => 20, 'title' => \"My option 22\", 'myProperty' =>  \"26%\"],\n   *   ['id' => 25, 'id_parent' => 20, 'title' => \"My option 25\", 'myProperty' =>  \"50%\"],\n   *   ['id' => 27, 'id_parent' => 20, 'title' => \"My option 27\", 'myProperty' =>  \"40%\"],\n   *   ['id' => 31, 'id_parent' => 30, 'title' => \"My option 31\", 'myProperty' =>  \"88%\"],\n   *   ['id' => 32, 'id_parent' => 30, 'title' => \"My option 32\", 'myProperty' =>  \"97%\"],\n   *   ['id' => 35, 'id_parent' => 30, 'title' => \"My option 35\", 'myProperty' =>  \"12%\"],\n   *   ['id' => 37, 'id_parent' => 30, 'title' => \"My option 37\", 'myProperty' =>  \"4%\"]\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null A list of options or false if parent not found\n   *\/"
        },
        "getTemplateId": {
            "name": "getTemplateId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTemplateId($code): ?string\n  {\n    if ($this->check()) {\n      if (!isset($this->templateIds[$code])) {\n        $this->templateIds[$code] = $this->fromCode($code, $this->getMagicTemplateId());\n      }\n\n      if (!isset($this->templateIds[$code])) {\n        foreach ($this->getAliasItems($this->getMagicTemplateTemplateId()) as $it) {\n          if ($this->templateIds[$code] = $this->fromCode($code, $it['id'])) {\n            break;\n          }\n        }\n      }\n\n      return $this->templateIds[$code] ?? null;\n    }\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 33,
            "endLine": 51,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTemplateId",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getMagicTemplateId": {
            "name": "getMagicTemplateId",
            "summary": "Returns the ID of the root templates",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMagicTemplateId(): string\n  {\n    if (!$this->magicTemplateId && $this->check()) {\n      $this->magicTemplateId = $this->fromCode('templates', $this->getRoot());\n    }\n\n    return $this->magicTemplateId;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 58,
            "endLine": 65,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getMagicTemplateId",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the ID of the root templates\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of the root templates\n   * @return string\n   *\/"
        },
        "getPermissionsTemplateId": {
            "name": "getPermissionsTemplateId",
            "summary": "Returns the ID of the 'plugin > permissions' template",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPermissionsTemplateId()\n  {\n    if (!$this->magicPermissionsTemplateId && $this->check()) {\n      $this->magicPermissionsTemplateId = $this->fromCode('permissions', $this->getMagicPluginTemplateId());\n    }\n\n    return $this->magicPermissionsTemplateId;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 72,
            "endLine": 79,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getPermissionsTemplateId",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the ID of the 'plugin > permissions' template\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of the 'plugin > permissions' template\n   * @return string\n   *\/"
        },
        "getMagicOptionsTemplateId": {
            "name": "getMagicOptionsTemplateId",
            "summary": "Returns the ID of the 'plugin > options' template",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMagicOptionsTemplateId()\n  {\n    if (!$this->magicOptionsTemplateId && $this->check()) {\n      $this->magicOptionsTemplateId = $this->fromCode('options', $this->getMagicPluginTemplateId());\n    }\n\n    return $this->magicOptionsTemplateId;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 86,
            "endLine": 93,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getMagicOptionsTemplateId",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the ID of the 'plugin > options' template\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of the 'plugin > options' template\n   * @return string\n   *\/"
        },
        "getMagicPluginTemplateId": {
            "name": "getMagicPluginTemplateId",
            "summary": "Returns the ID of the 'plugin' template",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMagicPluginTemplateId()\n  {\n    if (!$this->magicPluginTemplateId && $this->check()) {\n      $this->magicPluginTemplateId = $this->fromCode('plugin', 'templates', $this->getRoot());\n    }\n\n    return $this->magicPluginTemplateId;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 100,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getMagicPluginTemplateId",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the ID of the 'plugin' template\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of the 'plugin' template\n   * @return string\n   *\/"
        },
        "getMagicSubpluginTemplateId": {
            "name": "getMagicSubpluginTemplateId",
            "summary": "Returns the ID of the 'subplugin' template i.e. plugins in plugin",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMagicSubpluginTemplateId()\n  {\n    if (!$this->magicSubpluginTemplateId && $this->check()) {\n      $this->magicSubpluginTemplateId = $this->fromCode('subplugin', 'templates', $this->getRoot());\n    }\n\n    return $this->magicSubpluginTemplateId;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 114,
            "endLine": 121,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getMagicSubpluginTemplateId",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the ID of the 'subplugin' template i.e. plugins in plugin\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of the 'subplugin' template i.e. plugins in plugin\n   * @return string\n   *\/"
        },
        "getMagicSubOptionsTemplateId": {
            "name": "getMagicSubOptionsTemplateId",
            "summary": "Returns the ID of the options template in the 'subplugin' template",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMagicSubOptionsTemplateId()\n  {\n    if (!$this->magicSubpluginTemplateId && $this->check()) {\n      $this->magicSubpluginTemplateId = $this->fromCode('options', $this->getMagicSubpluginTemplateId());\n    }\n\n    return $this->magicSubOptionsTemplateId;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 128,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getMagicSubOptionsTemplateId",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the ID of the options template in the 'subplugin' template\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of the options template in the 'subplugin' template\n   * @return string\n   *\/"
        },
        "getMagicSubPermissionsTemplateId": {
            "name": "getMagicSubPermissionsTemplateId",
            "summary": "Returns the ID of the options template in the 'subplugin' template",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMagicSubPermissionsTemplateId()\n  {\n    if (!$this->magicSubpluginTemplateId && $this->check()) {\n      $this->magicSubpluginTemplateId = $this->fromCode('permissions', $this->getMagicSubpluginTemplateId());\n    }\n\n    return $this->magicSubPermissionsTemplateId;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 142,
            "endLine": 149,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getMagicSubPermissionsTemplateId",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the ID of the options template in the 'subplugin' template\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of the options template in the 'subplugin' template\n   * @return string\n   *\/"
        },
        "getMagicTemplateTemplateId": {
            "name": "getMagicTemplateTemplateId",
            "summary": "Returns the ID of the 'plugin > template' template",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMagicTemplateTemplateId()\n  {\n    if (!$this->magicTemplateTemplateId && $this->check()) {\n      $this->magicTemplateTemplateId = $this->fromCode('templates', $this->getMagicPluginTemplateId());\n    }\n\n    return $this->magicTemplateTemplateId;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 156,
            "endLine": 163,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getMagicTemplateTemplateId",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the ID of the 'plugin > template' template\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of the 'plugin > template' template\n   * @return string\n   *\/"
        },
        "getMagicPluginsTemplateId": {
            "name": "getMagicPluginsTemplateId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMagicPluginsTemplateId()\n  {\n    if (!$this->magicPluginsTemplateId && $this->check()) {\n      $this->magicPluginsTemplateId = $this->fromCode('plugins', $this->getMagicPluginTemplateId());\n    }\n\n    return $this->magicPluginsTemplateId;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 166,
            "endLine": 173,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getMagicPluginsTemplateId",
            "returns": [],
            "arguments": []
        },
        "getMagicAppuiTemplateId": {
            "name": "getMagicAppuiTemplateId",
            "summary": "Returns the ID of the 'plugin > plugins > appui' template",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMagicAppuiTemplateId()\n  {\n    if (!$this->magicAppuiTemplateId && $this->check()) {\n      $this->magicAppuiTemplateId = $this->fromCode('appui', $this->getMagicPluginsTemplateId());\n    }\n\n    return $this->magicAppuiTemplateId;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 180,
            "endLine": 187,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getMagicAppuiTemplateId",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the ID of the 'plugin > plugins > appui' template\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the ID of the 'plugin > plugins > appui' template\n   * @return string\n   *\/"
        },
        "applyAllTemplates": {
            "name": "applyAllTemplates",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function applyAllTemplates(): ?int\n  {\n    $tot = 0;\n    $tids = $this->items($this->getMagicTemplateId());\n    foreach ($tids as $tid) {\n      foreach ($this->getAliasItems($tid) as $id) {\n        $tot += $this->applyTemplate($id);\n      }\n    }\n\n    $tids = $this->getAliasItems($this->getMagicTemplateTemplateId());\n    foreach ($tids as $tid) {\n      foreach ($this->getAliasItems($tid) as $id) {\n        $tot += $this->applyTemplate($id);\n      }\n    }\n\n    return $tot;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 190,
            "endLine": 208,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "applyAllTemplates",
            "returns": [
                null,
                "int"
            ],
            "arguments": []
        },
        "updateTemplate": {
            "name": "updateTemplate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateTemplate(string $id = null): ?int\n  {\n    if ($this->exists($id)) {\n      $res = 0;\n      \/\/ All the options referring to this template\n      $all = $this->getAliases($id);\n      if (\n        !empty($all)\n        && ($export = $this->export($id, 'sfull'))\n        && !empty($export['items'])\n      ) {\n        foreach ($all as $a) {\n          foreach ($this->import($export['items'], $a[$this->fields['id']]) as $num) {\n            $res += $num;\n          }\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 215,
            "endLine": 237,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "updateTemplate",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string|null $id\n   * @return int|null\n   *\/"
        },
        "updateAllTemplates": {
            "name": "updateAllTemplates",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateAllTemplates(): ?int\n  {\n    if ($id = $this->fromCode('list', 'templates')) {\n      $res = 0;\n      foreach ($this->itemsRef($id) ?? [] as $a) {\n        $res += (int)$this->updateTemplate($a);\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 243,
            "endLine": 255,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "updateAllTemplates",
            "returns": [
                null,
                "int"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return int|null\n   *\/"
        },
        "applyTemplate": {
            "name": "applyTemplate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function applyTemplate(string $id, bool $rootAlso = false): ?int\n  {\n    if (!($idAlias = $this->alias($id))) {\n      X::ddump($this->option($id));\n      throw new Exception(X::_(\"Impossible to apply a template, the option must be aliased\"));\n    }\n\n    $tot = 0;\n    $templateParent = $this->parent($idAlias);\n    if ($templateParent['id'] !== $this->getMagicTemplateId()) {\n      if (!$templateParent['id_alias']) {\n        throw new Exception(X::_(\"Impossible to apply a template, the template's parent must have an alias\"));\n      }\n\n      if ($templateParent['id_alias'] !== $this->getMagicTemplateTemplateId()) {\n        throw new Exception(X::_(\"Impossible to apply a template, the template's parent must be aliased with the templates' list\"));\n      }\n    }\n\n    if ($rootAlso) {\n      $opt = $this->option($id);\n      $topt = $this->option($idAlias);\n      unset($opt['id_alias'], $opt['alias']);\n      if ((json_encode($opt) !== json_encode($topt)) && $this->set($id, $topt)) {\n        $tot++;\n      }\n    }\n\n    foreach ($this->items($idAlias) as $tid) {\n      $tot += $this->applyChildTemplate($tid, $id);\n    }\n\n    return $tot;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 263,
            "endLine": 296,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "applyTemplate",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "rootAlso",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "lso"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$root",
                        "description": "lso"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @param bool $rootAlso\n   * @return int|null\n   *\/"
        },
        "applyChildTemplate": {
            "name": "applyChildTemplate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function applyChildTemplate($idSubtemplate, $target): int\n  {\n    $tot = 0;\n    $opt = $this->option($idSubtemplate);\n    $foptions = $this->fullOptions($target);\n    if (!($o = X::getRow($foptions, ['id_alias' => $idSubtemplate]))) {\n      if ($opt['code']) {\n        $o = X::getRow($foptions, ['code' => $opt['code']]);\n      } else {\n        $o = X::getRow($foptions, ['text' => $opt['text']]);\n      }\n\n      if ($o) {\n        $o['id_alias'] = $idSubtemplate;\n      }\n    }\n\n    $id = null;\n    $cfg = $this->getCfg($idSubtemplate);\n    if ($o) {\n      $id = $o['id'];\n      unset($opt['alias']);\n      $opt['id_alias'] = $idSubtemplate;\n      $ocfg = $this->getCfg($id);\n      $totDone = false;\n      if ((json_encode($opt) !== json_encode($o)) && $this->set($id, $opt)) {\n        $tot++;\n        $totDone = true;\n      }\n      if ((json_encode($cfg) !== json_encode($ocfg)) && $this->setCfg($id, $cfg) && !$totDone) {\n        $tot++;\n      }\n    } else {\n      $opt['id_parent'] = $target;\n      $opt['id_alias'] = $idSubtemplate;\n      if ($id = $this->add($opt)) {\n        $this->setCfg($id, $cfg);\n        $tot++;\n      }\n    }\n\n    foreach ($this->items($idSubtemplate) as $tid) {\n      $tot += $this->applyChildTemplate($tid, $id);\n    }\n\n    return $tot;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 298,
            "endLine": 344,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "applyChildTemplate",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "idSubtemplate",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "target",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "parentTemplate": {
            "name": "parentTemplate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function parentTemplate(string $id): ?string\n  {\n    if ($this->exists($id) && ($idAlias = $this->getIdAlias($id))) {\n      $idTemplate = $this->getMagicTemplateId();\n      $idParent = $idAlias;\n      while ($idParent) {\n        $id = $idParent;\n        if ($idParent === $idTemplate) {\n          return $id;\n        } else if ($this->getIdAlias($idParent) === $idTemplate) {\n          return $id;\n        }\n        $idParent = $this->getIdParent($idParent);\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 346,
            "endLine": 363,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "parentTemplate",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hasTemplate": {
            "name": "hasTemplate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasTemplate(string $id): bool\n  {\n    return (bool)$this->parentTemplate($id);\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 365,
            "endLine": 368,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "hasTemplate",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isInTemplate": {
            "name": "isInTemplate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isInTemplate(string $id): bool\n  {\n    $templateId = $this->getMagicTemplateId();\n    while ($idParent = $this->getIdParent($id)) {\n      if ($idParent === $templateId) {\n        return true;\n      }\n      if ($this->getIdAlias($idParent) === $templateId) {\n        return true;\n      }\n\n      $id = $idParent;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 371,
            "endLine": 386,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isInTemplate",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionTemplate": {
            "name": "getOptionTemplate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getOptionTemplate(string $id): ?array\n  {\n    if ($this->isInTemplate($id)) {\n      return $this->option($this->alias($id));\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 389,
            "endLine": 396,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionTemplate",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isApp": {
            "name": "isApp",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Template.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isApp(string $id): bool\n  {\n    return $this->isPlugin($id) && ($this->getIdParent($id) === $this->root);\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Template",
            "startLine": 399,
            "endLine": 402,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isApp",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "treeIds": {
            "name": "treeIds",
            "summary": "Returns a flat array of all IDs found in a hierarchical structure (except the top one)",
            "description": "The second parameter is private and should be left blank",
            "description_parts": [
                {
                    "type": "text",
                    "content": "The second parameter is private and should be left blank"
                },
                {
                    "type": "code",
                    "content": "X::dump($opt->treeIds(12));\n\/\/ array [12, 21, 22, 25, 27, 31, 32, 35, 37, 40, 41, 42, 44, 45, 43, 46, 47]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Tree.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function treeIds($id, &$res = []): ?array\n  {\n    if ($this->check() && $this->exists($id)) {\n      $res[] = $id;\n      if ($its = $this->items($id)) {\n        foreach ($its as $it){\n          $this->treeIds($it, $res);\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Tree",
            "startLine": 22,
            "endLine": 36,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "treeIds",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The end\/target of the path"
                },
                {
                    "name": "res",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": true,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The resulting array"
                }
            ],
            "doc": {
                "description": "Returns a flat array of all IDs found in a hierarchical structure (except the top one)\nThe second parameter is private and should be left blank\n\n```php\nX::dump($opt->treeIds(12));\n\/\/ array [12, 21, 22, 25, 27, 31, 32, 35, 37, 40, 41, 42, 44, 45, 43, 46, 47]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id",
                        "description": "The end\/target of the path"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$res",
                        "description": "The resulting array"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a flat array of all IDs found in a hierarchical structure (except the top one)\n   * The second parameter is private and should be left blank\n   *\n   * ```php\n   * X::dump($opt->treeIds(12));\n   * \/\/ array [12, 21, 22, 25, 27, 31, 32, 35, 37, 40, 41, 42, 44, 45, 43, 46, 47]\n   * ```\n   *\n   * @param int   $id  The end\/target of the path\n   * @param array $res The resulting array\n   * @return array|null\n   *\/"
        },
        "tree": {
            "name": "tree",
            "summary": "Returns a simple hierarchical structure with just text, id and items",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->tree(12));\n\/*\narray [\n ['id' => 1, 'text' => 'Hello', 'items' => [\n   ['id' => 7, 'text' => 'Hello from inside'],\n   ['id' => 8, 'text' => 'Hello 2 from inside']\n ],\n[\n  ['id' => 1, 'text' => 'World']\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Tree.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tree($code = null): ?array\n  {\n    $id = $this->fromCode(\\func_get_args());\n    if (Str::isUid($id) && ($text = $this->text($id))) {\n      $res = [\n        'id' => $id,\n        'text' => $text\n      ];\n      if ($opts = $this->items($id)) {\n        $res['items'] = [];\n        foreach ($opts as $o){\n          if ($t = $this->tree($o)) {\n            $res['items'][] = $t;\n          }\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Tree",
            "startLine": 58,
            "endLine": 79,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "tree",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns a simple hierarchical structure with just text, id and items\n\n```php\nX::dump($opt->tree(12));\n\/*\narray [\n ['id' => 1, 'text' => 'Hello', 'items' => [\n   ['id' => 7, 'text' => 'Hello from inside'],\n   ['id' => 8, 'text' => 'Hello 2 from inside']\n ],\n[\n  ['id' => 1, 'text' => 'World']\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a simple hierarchical structure with just text, id and items\n   *\n   * ```php\n   * X::dump($opt->tree(12));\n   * \/*\n   * array [\n   *  ['id' => 1, 'text' => 'Hello', 'items' => [\n   *    ['id' => 7, 'text' => 'Hello from inside'],\n   *    ['id' => 8, 'text' => 'Hello 2 from inside']\n   *  ],\n   * [\n   *   ['id' => 1, 'text' => 'World']\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null\n   *\/"
        },
        "fullTree": {
            "name": "fullTree",
            "summary": "Returns a full hierarchical structure of options from a given option",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->fullTree(12));\n\/*\narray [\n  'id' => 12,\n  'code' => \"bbn_ide\",\n  'text' => \"BBN's own IDE\",\n  'id_alias' => null,\n  'myProperty' => \"My property's value\",\n  'items' => [\n    [\n      'id' => 25,\n      'code' => \"test\",\n      'text' => \"Test\",\n      'id_alias' => null,\n      'myProperty' => \"My property's value\",\n    ],\n    [\n      'id' => 26,\n      'code' => \"test2\",\n      'text' => \"Test 2\",\n      'id_alias' => null,\n      'myProperty' => \"My property's value\",\n      'items' => [\n        [\n          'id' => 42,\n          'code' => \"test8\",\n          'text' => \"Test 8\",\n          'id_alias' => null,\n          'myProperty' => \"My property's value\",\n        ]\n      ]\n    ],\n  ]\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Tree.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullTree($code = null): ?array\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))\n        && ($res = $this->option($id))\n    ) {\n      if ($opts = $this->items($id)) {\n        $res['items'] = [];\n        foreach ($opts as $o){\n          if ($t = $this->fullTree($o)) {\n            $res['items'][] = $t;\n          }\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Tree",
            "startLine": 125,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "fullTree",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Returns a full hierarchical structure of options from a given option\n\n```php\nX::dump($opt->fullTree(12));\n\/*\narray [\n  'id' => 12,\n  'code' => \"bbn_ide\",\n  'text' => \"BBN's own IDE\",\n  'id_alias' => null,\n  'myProperty' => \"My property's value\",\n  'items' => [\n    [\n      'id' => 25,\n      'code' => \"test\",\n      'text' => \"Test\",\n      'id_alias' => null,\n      'myProperty' => \"My property's value\",\n    ],\n    [\n      'id' => 26,\n      'code' => \"test2\",\n      'text' => \"Test 2\",\n      'id_alias' => null,\n      'myProperty' => \"My property's value\",\n      'items' => [\n        [\n          'id' => 42,\n          'code' => \"test8\",\n          'text' => \"Test 8\",\n          'id_alias' => null,\n          'myProperty' => \"My property's value\",\n        ]\n      ]\n    ],\n  ]\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "Tree's array or false if the option cannot be found"
            },
            "comments": "  \/**\n   * Returns a full hierarchical structure of options from a given option\n   *\n   * ```php\n   * X::dump($opt->fullTree(12));\n   * \/*\n   * array [\n   *   'id' => 12,\n   *   'code' => \"bbn_ide\",\n   *   'text' => \"BBN's own IDE\",\n   *   'id_alias' => null,\n   *   'myProperty' => \"My property's value\",\n   *   'items' => [\n   *     [\n   *       'id' => 25,\n   *       'code' => \"test\",\n   *       'text' => \"Test\",\n   *       'id_alias' => null,\n   *       'myProperty' => \"My property's value\",\n   *     ],\n   *     [\n   *       'id' => 26,\n   *       'code' => \"test2\",\n   *       'text' => \"Test 2\",\n   *       'id_alias' => null,\n   *       'myProperty' => \"My property's value\",\n   *       'items' => [\n   *         [\n   *           'id' => 42,\n   *           'code' => \"test8\",\n   *           'text' => \"Test 8\",\n   *           'id_alias' => null,\n   *           'myProperty' => \"My property's value\",\n   *         ]\n   *       ]\n   *     ],\n   *   ]\n   * ]\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()}\n   * @return array|null Tree's array or false if the option cannot be found\n   *\/"
        },
        "add": {
            "name": "add",
            "summary": "Creates a new option or a new hierarchy by adding row(s) in the options' table",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->add([\n  'id_parent' => $opt->fromCode('bbn_ide'),\n  'text' => 'My new option',\n  'code' => 'new_opt',\n  'myProperty' => 'my value'\n]));\n\/\/ (int) 49  New ID\nX::dump($opt->add([\n  'id_parent' => $opt->fromCode('bbn_ide'),\n  'text' => 'My new option',\n  'code' => 'new_opt',\n  'myProperty' => 'my value'\n  'items' => [\n    [\n      'code' => \"test\",\n      'text' => \"Test\",\n      'myProperty' => \"My property's value\",\n    ],\n    [\n      'code' => \"test2\",\n      'text' => \"Test 2\",\n      'myProperty' => \"My property's value\",\n      'items' => [\n        [\n          'code' => \"test8\",\n          'text' => \"Test 8\",\n        ]\n      ]\n    ]\n  ]\n], true, true));\n\/\/ (int) 4 Number of inserted\/modified rows"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function add(array $it, $force = false, $return_num = false, $with_id = false)\n  {\n    if ($this->check()) {\n      $res   = $return_num ? 0 : null;\n      $items = !empty($it['items']) && \\is_array($it['items']) ? $it['items'] : false;\n      $id    = null;\n      try {\n        $this->_prepare($it);\n      }\n      catch (Exception $e) {\n        throw new Exception($e->getMessage());\n      }\n\n      if ($it) {\n\n        $c =& $this->fields;\n        if ($it[$c['code']]) {\n          $id = $this->db->selectOne(\n            $this->class_cfg['table'],\n            $c['id'],\n            [\n              $c['id_parent'] => $it[$c['id_parent']],\n              $c['code'] => $it[$c['code']]\n            ]\n          );\n        }\n        elseif (!empty($it[$c['id']])) {\n          $id = $this->db->selectOne(\n            $this->class_cfg['table'],\n            $c['id'],\n            [\n              $c['id'] => $it[$c['id']],\n              $c['code'] => null\n            ]\n          );\n        }\n\n        if ($id\n            && $force\n            && (null !== $it[$c['code']])\n        ) {\n          try {\n            $res = (int)$this->db->update(\n              $this->class_cfg['table'],\n              [\n                $c['text'] => $it[$c['text']],\n                $c['id_alias'] => $it[$c['id_alias']],\n                $c['value'] => $it[$c['value']],\n                $c['num'] => $it[$c['num']] ?? null,\n                $c['cfg'] => $it[$c['cfg']] ?? null\n              ],\n              [$c['id'] => $id]\n            );\n          }\n          catch (Exception $e) {\n            $this->log([X::_(\"Impossible to update the option\"), $it]);\n            throw new Exception(X::_(\"Impossible to update the option\"));\n          }\n        }\n\n        $values = [\n          $c['id_parent'] => $it[$c['id_parent']],\n          $c['text'] => $it[$c['text']],\n          $c['code'] => empty($it[$c['code']]) ? null : $it[$c['code']],\n          $c['id_alias'] => $it[$c['id_alias']],\n          $c['value'] => $it[$c['value']],\n          $c['num'] => $it[$c['num']] ?? null,\n          $c['cfg'] => $it[$c['cfg']] ?? null\n        ];\n\n        if (isset($it[$c['id']]) && !$this->exists($it[$c['id']])) {\n          $values[$c['id']] = $it[$c['id']];\n        }\n\n        if (!empty($it[$c['id']]) && $with_id) {\n          $values[$c['id']] = $it[$c['id']];\n        }\n\n        if (!$id) {\n          try {\n            $res = (int)$this->db->insert($this->class_cfg['table'], $values);\n          }\n          catch (Exception $e) {\n            X::log([X::_(\"Impossible to add the option\"), $values], 'OptionAddErrors');\n            throw new Exception(\n              X::_(\"Impossible to add the option\") . ':' . PHP_EOL . \n              X::getDump($values) . $e->getMessage()\n            );\n          }\n\n          $id = $this->db->lastId();\n        }\n\n        if ($res) {\n          $this->deleteCache($id);\n        }\n\n        if ($items && Str::isUid($id)) {\n          foreach ($items as $item){\n            $item[$c['id_parent']] = $id;\n            $res              += (int)$this->add($item, $force, $return_num, $with_id);\n          }\n        }\n      }\n      else {\n        X::log($it, 'OptionAddErrors');\n      }\n\n      return $return_num ? $res : $id;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Write",
            "startLine": 57,
            "endLine": 169,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "add",
            "returns": [],
            "arguments": [
                {
                    "name": "it",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The option configuration"
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "Determines if the option should be updated if it already exists"
                },
                {
                    "name": "return_num",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "num If set to true the function will return the number of rows inserted otherwise the ID of the newly created option"
                },
                {
                    "name": "with_id",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "id"
                }
            ],
            "doc": {
                "description": "Creates a new option or a new hierarchy by adding row(s) in the options' table\n\n```php\nX::dump($opt->add([\n  'id_parent' => $opt->fromCode('bbn_ide'),\n  'text' => 'My new option',\n  'code' => 'new_opt',\n  'myProperty' => 'my value'\n]));\n\/\/ (int) 49  New ID\nX::dump($opt->add([\n  'id_parent' => $opt->fromCode('bbn_ide'),\n  'text' => 'My new option',\n  'code' => 'new_opt',\n  'myProperty' => 'my value'\n  'items' => [\n    [\n      'code' => \"test\",\n      'text' => \"Test\",\n      'myProperty' => \"My property's value\",\n    ],\n    [\n      'code' => \"test2\",\n      'text' => \"Test 2\",\n      'myProperty' => \"My property's value\",\n      'items' => [\n        [\n          'code' => \"test8\",\n          'text' => \"Test 8\",\n        ]\n      ]\n    ]\n  ]\n], true, true));\n\/\/ (int) 4 Number of inserted\/modified rows\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$it",
                        "description": "The option configuration"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$force",
                        "description": "Determines if the option should be updated if it already exists"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$return",
                        "description": "num If set to true the function will return the number of rows inserted otherwise the ID of the newly created option"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates a new option or a new hierarchy by adding row(s) in the options' table\n   *\n   * ```php\n   * X::dump($opt->add([\n   *   'id_parent' => $opt->fromCode('bbn_ide'),\n   *   'text' => 'My new option',\n   *   'code' => 'new_opt',\n   *   'myProperty' => 'my value'\n   * ]));\n   * \/\/ (int) 49  New ID\n   * X::dump($opt->add([\n   *   'id_parent' => $opt->fromCode('bbn_ide'),\n   *   'text' => 'My new option',\n   *   'code' => 'new_opt',\n   *   'myProperty' => 'my value'\n   *   'items' => [\n   *     [\n   *       'code' => \"test\",\n   *       'text' => \"Test\",\n   *       'myProperty' => \"My property's value\",\n   *     ],\n   *     [\n   *       'code' => \"test2\",\n   *       'text' => \"Test 2\",\n   *       'myProperty' => \"My property's value\",\n   *       'items' => [\n   *         [\n   *           'code' => \"test8\",\n   *           'text' => \"Test 8\",\n   *         ]\n   *       ]\n   *     ]\n   *   ]\n   * ], true, true));\n   * \/\/ (int) 4 Number of inserted\/modified rows\n   * ```\n   *\n   * @param array   $it         The option configuration\n   * @param boolean $force      Determines if the option should be updated if it already exists\n   * @param boolean $return_num If set to true the function will return the number of rows inserted otherwise the ID of the newly created option\n   * @param bool $with_id\n   * @return int|string|null\n   *\/"
        },
        "set": {
            "name": "set",
            "summary": "Updates an option's row (without changing cfg)",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->set(12, [\n  'id_parent' => $opt->fromCode('bbn_ide'),\n  'text' => 'My new option',\n  'code' => 'new_opt',\n  'myProperty' => 'my value'\n  'cfg' => [\n    'sortable' => true,\n    'Description' => \"I am a cool option\"\n  ]\n]);\n\/\/ (int) 1"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function set($id, array $data)\n  {\n    if ($this->check() && $this->_prepare($data)) {\n      if (isset($data['id'])) {\n        unset($data['id']);\n      }\n\n      $c =& $this->fields;\n      \/\/ id_parent cannot be edited this way\n      if ($res = $this->db->update(\n        $this->class_cfg['table'],\n        [\n          $c['text'] => $data[$c['text']],\n          $c['code'] => !empty($data[$c['code']]) ? $data[$c['code']] : null,\n          $c['id_alias'] => !empty($data[$c['id_alias']]) ? $data[$c['id_alias']] : null,\n          $c['value'] => $data[$c['value']]\n        ],\n        [$c['id'] => $id]\n      )\n      ) {\n        $this->deleteCache($id);\n        return $res;\n      }\n\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Write",
            "startLine": 193,
            "endLine": 220,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "set",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Updates an option's row (without changing cfg)\n\n```php\nX::dump($opt->set(12, [\n  'id_parent' => $opt->fromCode('bbn_ide'),\n  'text' => 'My new option',\n  'code' => 'new_opt',\n  'myProperty' => 'my value'\n  'cfg' => [\n    'sortable' => true,\n    'Description' => \"I am a cool option\"\n  ]\n]);\n\/\/ (int) 1\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates an option's row (without changing cfg)\n   *\n   * ```php\n   * X::dump($opt->set(12, [\n   *   'id_parent' => $opt->fromCode('bbn_ide'),\n   *   'text' => 'My new option',\n   *   'code' => 'new_opt',\n   *   'myProperty' => 'my value'\n   *   'cfg' => [\n   *     'sortable' => true,\n   *     'Description' => \"I am a cool option\"\n   *   ]\n   * ]);\n   * \/\/ (int) 1\n   * ```\n   *\n   * @param string   $id\n   * @param array $data\n   * @return int\n   *\/"
        },
        "merge": {
            "name": "merge",
            "summary": "Updates an option's row by merging the data and cfg.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->merge(12, [\n  'id_parent' => $opt->fromCode('bbn_ide'),\n  'text' => 'My new option',\n  'code' => 'new_opt',\n  'myProperty' => 'my value'\n  'cfg' => [\n    'sortable' => true,\n    'Description' => \"I am a cool option\"\n  ]\n]);\n\/\/ (int) 1"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function merge(string $id, array $data, array $cfg = null)\n  {\n    if ($this->check()\n        && ($o = $this->option($id))\n    ) {\n      $c =& $this->fields;\n      $o[$c['text']] = $this->rawText($o[$c['id']]);\n      if (!empty($data)) {\n        $data = array_merge($o, $data);\n        $this->_prepare($data);\n        if (isset($data[$c['id']])) {\n          unset($data[$c['id']]);\n        }\n      }\n\n      if ($cfg) {\n        $ocfg        = $this->getRawCfg($id);\n        $data[$c['cfg']] = json_encode(array_merge($ocfg ? json_decode($ocfg, true) : [], $cfg));\n      }\n\n      \/\/ id_parent cannot be edited this way\n      if ($res = $this->db->update(\n        $this->class_cfg['table'],\n        $data,\n        [$c['id'] => $id]\n      )\n      ) {\n        $this->deleteCache($id);\n        return $res;\n      }\n\n      return 0;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Write",
            "startLine": 246,
            "endLine": 281,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "merge",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 2,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Updates an option's row by merging the data and cfg.\n\n```php\nX::dump($opt->merge(12, [\n  'id_parent' => $opt->fromCode('bbn_ide'),\n  'text' => 'My new option',\n  'code' => 'new_opt',\n  'myProperty' => 'my value'\n  'cfg' => [\n    'sortable' => true,\n    'Description' => \"I am a cool option\"\n  ]\n]);\n\/\/ (int) 1\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Updates an option's row by merging the data and cfg.\n   *\n   * ```php\n   * X::dump($opt->merge(12, [\n   *   'id_parent' => $opt->fromCode('bbn_ide'),\n   *   'text' => 'My new option',\n   *   'code' => 'new_opt',\n   *   'myProperty' => 'my value'\n   *   'cfg' => [\n   *     'sortable' => true,\n   *     'Description' => \"I am a cool option\"\n   *   ]\n   * ]);\n   * \/\/ (int) 1\n   * ```\n   *\n   * @param string $id\n   * @param array $data\n   * @param array|null $cfg\n   * @return int|null\n   * @throws Exception\n   *\/"
        },
        "remove": {
            "name": "remove",
            "summary": "Deletes a row from the options table, deletes the cache and fix order if needed",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->remove(12));\n\/\/ (int) 12 Number of options deleted\nX::dump($opt->remove(12));\n\/\/ (null) The option doesn't exist anymore"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function remove(...$codes)\n  {\n    if (Str::isUid($id = $this->fromCode(...$codes))\n        && ($id !== $this->default)\n        && ($id !== $this->root)\n        && Str::isUid($id_parent = $this->getIdParent($id))\n    ) {\n      $num = 0;\n      if ($items = $this->items($id)) {\n        foreach ($items as $it){\n          $num += (int)$this->remove($it);\n        }\n      }\n\n      $this->deleteCache($id);\n      $this->db->update(\n        $this->class_cfg['table'], [\n          $this->fields['code'] => null\n        ], [\n          $this->fields['id'] => $id\n        ]\n      );\n      $num += (int)$this->db->delete(\n        $this->class_cfg['table'], [\n          $this->fields['id'] => $id\n        ]\n      );\n      if ($this->isSortable($id_parent)) {\n        $this->fixOrder($id_parent);\n      }\n\n      return $num;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Write",
            "startLine": 297,
            "endLine": 332,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "remove",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()}"
                }
            ],
            "doc": {
                "description": "Deletes a row from the options table, deletes the cache and fix order if needed\n\n```php\nX::dump($opt->remove(12));\n\/\/ (int) 12 Number of options deleted\nX::dump($opt->remove(12));\n\/\/ (null) The option doesn't exist anymore\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()}"
                    }
                ],
                "return": "The number of affected rows or null if option not found"
            },
            "comments": "  \/**\n   * Deletes a row from the options table, deletes the cache and fix order if needed\n   *\n   * ```php\n   * X::dump($opt->remove(12));\n   * \/\/ (int) 12 Number of options deleted\n   * X::dump($opt->remove(12));\n   * \/\/ (null) The option doesn't exist anymore\n   * ```\n   *\n   * @param string $code Any option(s) accepted by {@link fromCode()}\n   * @return int|null The number of affected rows or null if option not found\n   *\/"
        },
        "removeFull": {
            "name": "removeFull",
            "summary": "Deletes an option row with all it's hierarchical structure from the options table and deletes the cache.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->removeFull(12));\n\/\/ (int) 12 Number of options deleted\nX::dump($opt->removeFull(12));\n\/\/ (null) The option doesn't exist anymore"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeFull($code)\n  {\n    if (Str::isUid($id = $this->fromCode(\\func_get_args()))\n        && ($id !== $this->default)\n        && ($id !== $this->root)\n    ) {\n      $res = 0;\n      $this->deleteCache($id);\n      $all = $this->treeIds($id);\n\n      $has_history = History::isEnabled() && History::isLinked($this->class_cfg['table']);\n      foreach (array_reverse($all) as $a){\n        if ($has_history) {\n          $res += (int)$this->db->delete('bbn_history_uids', ['bbn_uid' => $a]);\n        }\n        else{\n          $res += (int)$this->db->delete($this->class_cfg['table'], [$this->fields['id'] => $a]);\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Write",
            "startLine": 348,
            "endLine": 372,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeFull",
            "returns": [],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Any option(s) accepted by {@link fromCode()} or the uid"
                }
            ],
            "doc": {
                "description": "Deletes an option row with all it's hierarchical structure from the options table and deletes the cache.\n\n```php\nX::dump($opt->removeFull(12));\n\/\/ (int) 12 Number of options deleted\nX::dump($opt->removeFull(12));\n\/\/ (null) The option doesn't exist anymore\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$code",
                        "description": "Any option(s) accepted by {@link fromCode()} or the uid"
                    }
                ],
                "return": "The number of affected rows or null if option not found"
            },
            "comments": "  \/**\n   * Deletes an option row with all it's hierarchical structure from the options table and deletes the cache.\n   *\n   * ```php\n   * X::dump($opt->removeFull(12));\n   * \/\/ (int) 12 Number of options deleted\n   * X::dump($opt->removeFull(12));\n   * \/\/ (null) The option doesn't exist anymore\n   * ```\n   *\n   * @param mixed $code Any option(s) accepted by {@link fromCode()} or the uid\n   * @return int|null The number of affected rows or null if option not found\n   *\/"
        },
        "setAlias": {
            "name": "setAlias",
            "summary": "Sets the alias of an option",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->setAlias(26, 32));\n\/\/ (int) 1"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setAlias($id, $alias = null)\n  {\n    $res = null;\n    if ($this->check()) {\n      $res = $this->db->updateIgnore(\n        $this->class_cfg['table'], [\n        $this->fields['id_alias'] => $alias ?: null\n        ], [\n        $this->fields['id'] => $id\n        ]\n      );\n      if ($res) {\n        $this->deleteCache($id);\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Write",
            "startLine": 387,
            "endLine": 404,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setAlias",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The ID of the option to be updated"
                },
                {
                    "name": "alias",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The alias' option ID"
                }
            ],
            "doc": {
                "description": "Sets the alias of an option\n\n```php\nX::dump($opt->setAlias(26, 32));\n\/\/ (int) 1\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The ID of the option to be updated"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$alias",
                        "description": "The alias' option ID"
                    }
                ],
                "return": "The number of affected rows"
            },
            "comments": "  \/**\n   * Sets the alias of an option\n   *\n   * ```php\n   * X::dump($opt->setAlias(26, 32));\n   * \/\/ (int) 1\n   * ```\n   *\n   * @param string      $id    The ID of the option to be updated\n   * @param string|null $alias The alias' option ID\n   * @return int The number of affected rows\n   *\/"
        },
        "setText": {
            "name": "setText",
            "summary": "Sets the text of an option",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->setText(26, \"Hello world!\"));\n\/\/ (int) 1"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setText($id, ?string $text)\n  {\n    $res = null;\n    if ($this->check()) {\n      $res = $this->db->updateIgnore(\n        $this->class_cfg['table'], [\n        $this->fields['text'] => $text\n        ], [\n          $this->fields['id'] => $id\n        ]\n      );\n      if ($res) {\n        $this->deleteCache($id);\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Write",
            "startLine": 419,
            "endLine": 436,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setText",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The ID of the option to be updated"
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The new text"
                }
            ],
            "doc": {
                "description": "Sets the text of an option\n\n```php\nX::dump($opt->setText(26, \"Hello world!\"));\n\/\/ (int) 1\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id",
                        "description": "The ID of the option to be updated"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$text",
                        "description": "The new text"
                    }
                ],
                "return": "The number of affected rows"
            },
            "comments": "  \/**\n   * Sets the text of an option\n   *\n   * ```php\n   * X::dump($opt->setText(26, \"Hello world!\"));\n   * \/\/ (int) 1\n   * ```\n   *\n   * @param int    $id   The ID of the option to be updated\n   * @param string $text The new text\n   * @return int The number of affected rows\n   *\/"
        },
        "setCode": {
            "name": "setCode",
            "summary": "Sets the code of an option",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->setCode(26, \"HWD\"));\n\/\/ (int) 1"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setCode($id, string $code = null)\n  {\n    if ($this->check()) {\n      return $this->db->updateIgnore(\n        $this->class_cfg['table'], [\n        $this->fields['code'] => $code ?: null\n        ], [\n        $this->fields['id'] => $id\n        ]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Write",
            "startLine": 451,
            "endLine": 464,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setCode",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The ID of the option to be updated"
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The new code"
                }
            ],
            "doc": {
                "description": "Sets the code of an option\n\n```php\nX::dump($opt->setCode(26, \"HWD\"));\n\/\/ (int) 1\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id",
                        "description": "The ID of the option to be updated"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$code",
                        "description": "The new code"
                    }
                ],
                "return": "The number of affected rows"
            },
            "comments": "  \/**\n   * Sets the code of an option\n   *\n   * ```php\n   * X::dump($opt->setCode(26, \"HWD\"));\n   * \/\/ (int) 1\n   * ```\n   *\n   * @param int $id The ID of the option to be updated\n   * @param string|null $code The new code\n   * @return int|null The number of affected rows\n   *\/"
        },
        "setValue": {
            "name": "setValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setValue(array $value, $id): ?int\n  {\n    if ($this->check() && $this->dbTraitExists($id)) {\n      $c =& $this->class_cfg;\n      $f =& $this->fields;\n      $this->cacheDelete($id);\n      return $this->db->update(\n        $c['table'],\n        [$f['value'] => json_encode($value)],\n        [$f['id'] => $id]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Write",
            "startLine": 473,
            "endLine": 487,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setValue",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "value",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$value"
                    },
                    {
                        "tag": "param",
                        "type": "$id"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param array $value\n   * @param $id\n   * @return int|null\n   * @throws Exception\n   *\/"
        },
        "setProp": {
            "name": "setProp",
            "summary": "Updates option's properties derived from the value column",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->setProp(12, 'myProperty', \"78%\"));\n\/\/ (int) 1\nX::dump($opt->setProp(12, ['myProperty' => \"78%\"]));\n\/\/ (int) 0 Already updated, no change done\nX::dump($opt->setProp(9654, ['myProperty' => \"78%\"]));\n\/\/ (bool) false Option not found\nX::dump($opt->setProp(12, ['myProperty' => \"78%\", 'myProperty2' => \"42%\"]));\n\/\/ (int) 1\nX::dump($opt->option(12));\n\/*\nBefore\narray [\n  'id' => 12,\n  'id_parent' => 0,\n  'code' => 'bbn_ide',\n  'text' => 'BBN's own IDE',\n  'myOtherProperty' => \"Hello\",\n]\nAfter\narray [\n  'id' => 12,\n  'id_parent' => 0,\n  'code' => 'bbn_ide',\n  'text' => 'BBN's own IDE',\n  'myProperty' => \"78%\",\n  'myProperty2' => \"42%\",\n  'myOtherProperty' => \"Hello\",\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setProp($id, $prop)\n  {\n    if (!empty($id) && !empty($prop) && ($o = $this->optionNoAlias($id))) {\n      $args = \\func_get_args();\n      if (\\is_string($prop) && isset($args[2])) {\n        $prop = [$prop => $args[2]];\n      }\n\n      if (\\is_array($prop)) {\n        X::log([$o, $prop], \"set_prop\");\n        $change = false;\n        foreach ($prop as $k => $v){\n          if (!isset($o[$k]) || ($o[$k] !== $v)) {\n            $change = true;\n            $o[$k]  = $v;\n          }\n\n        }\n\n        if ($change) {\n          return $this->set($id, $o);\n        }\n      }\n\n      return 0;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Write",
            "startLine": 527,
            "endLine": 555,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setProp",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The option to update's ID"
                },
                {
                    "name": "prop",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "An array of properties and values, or a string with the property's name adding as next argument the new value"
                }
            ],
            "doc": {
                "description": "Updates option's properties derived from the value column\n\n```php\nX::dump($opt->setProp(12, 'myProperty', \"78%\"));\n\/\/ (int) 1\nX::dump($opt->setProp(12, ['myProperty' => \"78%\"]));\n\/\/ (int) 0 Already updated, no change done\nX::dump($opt->setProp(9654, ['myProperty' => \"78%\"]));\n\/\/ (bool) false Option not found\nX::dump($opt->setProp(12, ['myProperty' => \"78%\", 'myProperty2' => \"42%\"]));\n\/\/ (int) 1\nX::dump($opt->option(12));\n\/*\nBefore\narray [\n  'id' => 12,\n  'id_parent' => 0,\n  'code' => 'bbn_ide',\n  'text' => 'BBN's own IDE',\n  'myOtherProperty' => \"Hello\",\n]\nAfter\narray [\n  'id' => 12,\n  'id_parent' => 0,\n  'code' => 'bbn_ide',\n  'text' => 'BBN's own IDE',\n  'myProperty' => \"78%\",\n  'myProperty2' => \"42%\",\n  'myOtherProperty' => \"Hello\",\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id",
                        "description": "The option to update's ID"
                    },
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$prop",
                        "description": "An array of properties and values, or a string with the property's name adding as next argument the new value"
                    }
                ],
                "return": "the number of affected rows or null if no argument or option not found"
            },
            "comments": "  \/**\n   * Updates option's properties derived from the value column\n   *\n   * ```php\n   * X::dump($opt->setProp(12, 'myProperty', \"78%\"));\n   * \/\/ (int) 1\n   * X::dump($opt->setProp(12, ['myProperty' => \"78%\"]));\n   * \/\/ (int) 0 Already updated, no change done\n   * X::dump($opt->setProp(9654, ['myProperty' => \"78%\"]));\n   * \/\/ (bool) false Option not found\n   * X::dump($opt->setProp(12, ['myProperty' => \"78%\", 'myProperty2' => \"42%\"]));\n   * \/\/ (int) 1\n   * X::dump($opt->option(12));\n   * \/*\n   * Before\n   * array [\n   *   'id' => 12,\n   *   'id_parent' => 0,\n   *   'code' => 'bbn_ide',\n   *   'text' => 'BBN's own IDE',\n   *   'myOtherProperty' => \"Hello\",\n   * ]\n   * After\n   * array [\n   *   'id' => 12,\n   *   'id_parent' => 0,\n   *   'code' => 'bbn_ide',\n   *   'text' => 'BBN's own IDE',\n   *   'myProperty' => \"78%\",\n   *   'myProperty2' => \"42%\",\n   *   'myOtherProperty' => \"Hello\",\n   * ]\n   * ```\n   *\n   * @param int          $id   The option to update's ID\n   * @param array|string $prop An array of properties and values, or a string with the property's name adding as next argument the new value\n   * @return int|null the number of affected rows or null if no argument or option not found\n   *\/"
        },
        "unsetProp": {
            "name": "unsetProp",
            "summary": "Unset option's properties taken from the value column",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->unsetProp(12, 'myProperty'));\n\/\/ (int) 1\nX::dump($opt->unsetProp(12, ['myProperty']));\n\/\/ (int) 0 Already updated, no change done\nX::dump($opt->unsetProp(9654, ['myProperty']));\n\/\/ (bool) false Option not found\nX::dump($opt->unsetProp(12, ['myProperty', 'myProperty2']));\n\/\/ (int) 1\nX::dump($opt->option(12));\n\/*\nBefore\narray [\n  'id' => 12,\n  'id_parent' => 0,\n  'code' => 'bbn_ide',\n  'text' => 'BBN's own IDE',\n  'myProperty' => \"78%\",\n  'myProperty2' => \"42%\",\n  'myOtherProperty' => \"Hello\",\n]\nAfter\narray [\n  'id' => 12,\n  'id_parent' => 0,\n  'code' => 'bbn_ide',\n  'text' => 'BBN's own IDE',\n  'myOtherProperty' => \"Hello\",\n]"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unsetProp($id, $prop)\n  {\n    if (!empty($prop) && Str::isUid($id) && ($o = $this->optionNoAlias($id))) {\n      if (\\is_string($prop)) {\n        $prop = [$prop];\n      }\n\n      if (\\is_array($prop)) {\n        $change = false;\n        foreach ($prop as $k){\n          if (!\\in_array($k, $this->fields, true) && array_key_exists($k, $o)) {\n            $change = true;\n            unset($o[$k]);\n          }\n        }\n\n        if ($change) {\n          return $this->set($id, $o);\n        }\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Write",
            "startLine": 596,
            "endLine": 619,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "unsetProp",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The option to update's ID"
                },
                {
                    "name": "prop",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "An array of properties and values, or a string with the property's name adding as next argument the new value"
                }
            ],
            "doc": {
                "description": "Unset option's properties taken from the value column\n\n```php\nX::dump($opt->unsetProp(12, 'myProperty'));\n\/\/ (int) 1\nX::dump($opt->unsetProp(12, ['myProperty']));\n\/\/ (int) 0 Already updated, no change done\nX::dump($opt->unsetProp(9654, ['myProperty']));\n\/\/ (bool) false Option not found\nX::dump($opt->unsetProp(12, ['myProperty', 'myProperty2']));\n\/\/ (int) 1\nX::dump($opt->option(12));\n\/*\nBefore\narray [\n  'id' => 12,\n  'id_parent' => 0,\n  'code' => 'bbn_ide',\n  'text' => 'BBN's own IDE',\n  'myProperty' => \"78%\",\n  'myProperty2' => \"42%\",\n  'myOtherProperty' => \"Hello\",\n]\nAfter\narray [\n  'id' => 12,\n  'id_parent' => 0,\n  'code' => 'bbn_ide',\n  'text' => 'BBN's own IDE',\n  'myOtherProperty' => \"Hello\",\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The option to update's ID"
                    },
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$prop",
                        "description": "An array of properties and values, or a string with the property's name adding as next argument the new value"
                    }
                ],
                "return": "the number of affected rows or null if no argument or option not found"
            },
            "comments": "  \/**\n   * Unset option's properties taken from the value column\n   *\n   * ```php\n   * X::dump($opt->unsetProp(12, 'myProperty'));\n   * \/\/ (int) 1\n   * X::dump($opt->unsetProp(12, ['myProperty']));\n   * \/\/ (int) 0 Already updated, no change done\n   * X::dump($opt->unsetProp(9654, ['myProperty']));\n   * \/\/ (bool) false Option not found\n   * X::dump($opt->unsetProp(12, ['myProperty', 'myProperty2']));\n   * \/\/ (int) 1\n   * X::dump($opt->option(12));\n   * \/*\n   * Before\n   * array [\n   *   'id' => 12,\n   *   'id_parent' => 0,\n   *   'code' => 'bbn_ide',\n   *   'text' => 'BBN's own IDE',\n   *   'myProperty' => \"78%\",\n   *   'myProperty2' => \"42%\",\n   *   'myOtherProperty' => \"Hello\",\n   * ]\n   * After\n   * array [\n   *   'id' => 12,\n   *   'id_parent' => 0,\n   *   'code' => 'bbn_ide',\n   *   'text' => 'BBN's own IDE',\n   *   'myOtherProperty' => \"Hello\",\n   * ]\n   * ```\n   *\n   * @param string       $id   The option to update's ID\n   * @param array|string $prop An array of properties and values, or a string with the property's name adding as next argument the new value\n   * @return int|null the number of affected rows or null if no argument or option not found\n   *\/"
        },
        "setCfg": {
            "name": "setCfg",
            "summary": "Sets the cfg column of a given option in the table through an array",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->getCfg('bbn_ide'));\n\/\/ array ['sortable' => true]\nX::dump($opt->setCfg(12, [\n  'desc' => \"I am a cool option\",\n  'sortable' => true\n]));\n\/\/ (int) 1\nX::dump($opt->getCfg('bbn_ide'));\n\/\/ array ['desc' => \"I am a cool option\", 'sortable' => true];"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setCfg($id, array $cfg, bool $merge = false): ?int\n  {\n    if ($this->check() && $this->exists($id)) {\n      if (isset($cfg['inherited_from'])) {\n        unset($cfg['inherited_from']);\n      }\n\n      if (isset($cfg[$this->fields['id']])) {\n        unset($cfg[$this->fields['id']]);\n      }\n\n      if (isset($cfg['permissions']) && !in_array($cfg['permissions'], ['single', 'cascade', 'all', 'children'])) {\n        unset($cfg['permissions']);\n      }\n\n      if ($merge && ($old_cfg = $this->getCfg($id))) {\n        $cfg = array_merge($old_cfg, $cfg);\n      }\n\n      $c =& $this->class_cfg;\n      if ($res = $this->db->update(\n        $c['table'], [\n        $this->fields['cfg'] => $cfg ? json_encode($cfg) : null\n        ], [\n          $this->fields['id'] => $id\n        ]\n      )\n      ) {\n        if ((isset($old_cfg['inheritance'], $cfg['inheritance'])\n            && ($old_cfg['inheritance'] !== $cfg['inheritance']))\n          || (isset($old_cfg['i18n_inheritance'], $cfg['i18n_inheritance'])\n            && ($old_cfg['i18n_inheritance'] !== $cfg['i18n_inheritance']))\n        ) {\n          $this->deleteCache($id, true);\n        }\n        else{\n          $this->deleteCache($id);\n        }\n\n        return $res;\n      }\n\n      return 0;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Write",
            "startLine": 642,
            "endLine": 688,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "setCfg",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The option ID"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The config value"
                },
                {
                    "name": "merge",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the cfg column of a given option in the table through an array\n\n```php\nX::dump($opt->getCfg('bbn_ide'));\n\/\/ array ['sortable' => true]\nX::dump($opt->setCfg(12, [\n  'desc' => \"I am a cool option\",\n  'sortable' => true\n]));\n\/\/ (int) 1\nX::dump($opt->getCfg('bbn_ide'));\n\/\/ array ['desc' => \"I am a cool option\", 'sortable' => true];\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|int",
                        "name": "$id",
                        "description": "The option ID"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The config value"
                    }
                ],
                "return": "number of affected rows"
            },
            "comments": "  \/**\n   * Sets the cfg column of a given option in the table through an array\n   *\n   * ```php\n   * X::dump($opt->getCfg('bbn_ide'));\n   * \/\/ array ['sortable' => true]\n   * X::dump($opt->setCfg(12, [\n   *   'desc' => \"I am a cool option\",\n   *   'sortable' => true\n   * ]));\n   * \/\/ (int) 1\n   * X::dump($opt->getCfg('bbn_ide'));\n   * \/\/ array ['desc' => \"I am a cool option\", 'sortable' => true];\n   * ```\n   *\n   * @param string|int   $id  The option ID\n   * @param array       $cfg The config value\n   * @return int|null number of affected rows\n   *\/"
        },
        "unsetCfg": {
            "name": "unsetCfg",
            "summary": "Unsets the cfg column (sets it to null)",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($opt->getCfg('bbn_ide'));\n\/\/ array ['desc' => \"I am a cool option\", 'sortable' => true];"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unsetCfg($id)\n  {\n    $res = false;\n    if ($this->check() && $this->exists($id)) {\n      $res = $this->db->update(\n        $this->class_cfg['table'], [\n        $this->fields['cfg'] => null\n        ], [\n        $this->fields['id'] => $id\n        ]\n      );\n      if ($res) {\n        $this->deleteCache($id);\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Write",
            "startLine": 702,
            "endLine": 719,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "unsetCfg",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The option ID"
                }
            ],
            "doc": {
                "description": "Unsets the cfg column (sets it to null)\n\n```php\nX::dump($opt->getCfg('bbn_ide'));\n\/\/ array ['desc' => \"I am a cool option\", 'sortable' => true];\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|int",
                        "name": "$id",
                        "description": "The option ID"
                    }
                ],
                "return": "Number of affected rows or false if not found"
            },
            "comments": "  \/**\n   * Unsets the cfg column (sets it to null)\n   *\n   * ```php\n   * X::dump($opt->getCfg('bbn_ide'));\n   * \/\/ array ['desc' => \"I am a cool option\", 'sortable' => true];\n   * ```\n   *\n   * @param string|int $id The option ID\n   * @return int|false Number of affected rows or false if not found\n   *\/"
        },
        "fusion": {
            "name": "fusion",
            "summary": "Merges an option $src into an existing option $dest",
            "description": "Children will change id_parent and references in the same database will be updated\nThe config will remain the one from the destination",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Children will change id_parent and references in the same database will be updated\nThe config will remain the one from the destination"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fusion($src, $dest)\n  {\n    if ($this->check()) {\n      $o_src  = $this->option($src);\n      $o_dest = $this->option($dest);\n      $num    = 0;\n      $cf     =& $this->fields;\n      if ($o_dest && $o_src) {\n        $o_dest[$cf['text']] = $this->rawText($o_dest[$cf['id']]);\n        $o_src[$cf['text']] = $this->rawText($o_src[$cf['id']]);\n        $o_final = X::mergeArrays($o_src, $o_dest);\n        \/\/ Order remains the dest one\n        $o_final[$cf['num']] = $o_dest[$cf['num']];\n        $tables              = $this->db->getForeignKeys($cf['id'], $this->class_cfg['table']);\n        foreach ($tables as $table => $cols){\n          foreach ($cols as $c){\n            $num += (int)$this->db->update($table, [$c => $dest], [$c => $src]);\n          }\n        }\n\n        if ($opt = $this->options($src)) {\n          \/\/ Moving children\n          foreach ($opt as $id => $text){\n            $num += (int)$this->move($id, $dest);\n          }\n        }\n\n        $num += (int)$this->set($dest, $o_final);\n        $num += (int)$this->remove($src);\n\n        $this->deleteCache($o_final[$cf['id_parent']], true);\n        $this->deleteCache($o_src[$cf['id_parent']], true);\n\n        if ($this->isSortable($o_src[$cf['id_parent']])) {\n          $this->fixOrder($o_src[$cf['id_parent']]);\n        }\n\n        if ($this->isSortable($o_final[$cf['id_parent']])) {\n          $this->fixOrder($o_final[$cf['id_parent']]);\n        }\n      }\n\n      return $num;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Write",
            "startLine": 744,
            "endLine": 790,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "fusion",
            "returns": [],
            "arguments": [
                {
                    "name": "src",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Source option ID, will be"
                },
                {
                    "name": "dest",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Destination option ID, will remain after the fusion"
                }
            ],
            "doc": {
                "description": "Merges an option $src into an existing option $dest\nChildren will change id_parent and references in the same database will be updated\nThe config will remain the one from the destination\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$src",
                        "description": "Source option ID, will be"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$dest",
                        "description": "Destination option ID, will remain after the fusion"
                    }
                ],
                "return": "Number of affected rows",
                "todo": {
                    "tag": "todo",
                    "text": "Finish the example\n```php\nX::dump($opt->option(20), $opt->option(30));\nX::dump($opt->fusion(30, 20));\nX::dump($opt->option(20));\n\/\/ (int) 7\n\/* The expression before would have returned\narray []\narray []\nAnd the resulting option would be\narray []\n```"
                }
            },
            "comments": "  \/**\n   * Merges an option $src into an existing option $dest\n   * Children will change id_parent and references in the same database will be updated\n   * The config will remain the one from the destination\n   *\n   * @todo Finish the example\n   * ```php\n   * X::dump($opt->option(20), $opt->option(30));\n   * X::dump($opt->fusion(30, 20));\n   * X::dump($opt->option(20));\n   * \/\/ (int) 7\n   * \/* The expression before would have returned\n   * array []\n   * array []\n   * And the resulting option would be\n   * array []\n   * ```\n   *\n   * @param int $src  Source option ID, will be\n   * @param int $dest Destination option ID, will remain after the fusion\n   * @return null|int Number of affected rows\n   *\/"
        },
        "move": {
            "name": "move",
            "summary": "Changes the id_parent of an option",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($this->getIdParent(21));\n\/\/ (int) 13\nX::dump($this->move(21, 12));\n\/\/ (int) 1\nX::dump($this->getIdParent(21));\n\/\/ (int) 12"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function move($id, $id_parent)\n  {\n    $res = null;\n    if (($o = $this->option($id))\n        && ($target = $this->option($id_parent))\n    ) {\n      $upd = [$this->fields['id_parent'] => $id_parent];\n      if ($this->isSortable($id_parent)) {\n        $upd[$this->fields['num']] = empty($target['num_children']) ? 1 : $target['num_children'] + 1;\n      }\n\n      $res = $this->db->update(\n        $this->class_cfg['table'], $upd, [\n        $this->fields['id'] => $id\n        ]\n      );\n      $this->deleteCache($id_parent);\n      $this->deleteCache($id);\n      $this->deleteCache($o[$this->fields['id_parent']]);\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Write",
            "startLine": 809,
            "endLine": 831,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "move",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The option's ID"
                },
                {
                    "name": "id_parent",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "parent The new id_parent"
                }
            ],
            "doc": {
                "description": "Changes the id_parent of an option\n\n```php\nX::dump($this->getIdParent(21));\n\/\/ (int) 13\nX::dump($this->move(21, 12));\n\/\/ (int) 1\nX::dump($this->getIdParent(21));\n\/\/ (int) 12\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id",
                        "description": "The option's ID"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id",
                        "description": "parent The new id_parent"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Changes the id_parent of an option\n   *\n   * ```php\n   * X::dump($this->getIdParent(21));\n   * \/\/ (int) 13\n   * X::dump($this->move(21, 12));\n   * \/\/ (int) 1\n   * X::dump($this->getIdParent(21));\n   * \/\/ (int) 12\n   * ```\n   *\n   * @param int $id        The option's ID\n   * @param int $id_parent The new id_parent\n   * @return int|null\n   *\/"
        },
        "fixOrder": {
            "name": "fixOrder",
            "summary": "Sets the order configuration for each option of a sortable given parent",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fixOrder($id, $deep = false)\n  {\n    if ($this->check() && $this->isSortable($id) && $its = $this->fullOptions($id)) {\n      $cf  =& $this->class_cfg;\n      $p   = 1;\n      foreach ($its as $it) {\n        if ($it[$this->fields['num']] !== $p) {\n          $this->db->update(\n            $cf['table'], [\n            $this->fields['num'] => $p\n            ], [\n            $this->fields['id'] => $it[$this->fields['id']]\n            ]\n          );\n          $this->deleteCache($it[$this->fields['id']]);\n        }\n\n        $p++;\n        if ($deep) {\n          $this->fixOrder($it[$this->fields['id']]);\n        }\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Write",
            "startLine": 841,
            "endLine": 866,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "fixOrder",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "deep",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the order configuration for each option of a sortable given parent\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$deep"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the order configuration for each option of a sortable given parent\n   *\n   * @param int     $id\n   * @param boolean $deep\n   * @return $this\n   *\/"
        },
        "_prepare": {
            "name": "_prepare",
            "summary": "Transforms an array of parameters into valid option array",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _prepare(array &$it): bool\n  {\n    \/\/ The table's columns\n    $c =& $this->fields;\n\n    \/\/ If id_parent is undefined it uses the default\n    if (!isset($it[$c['id_parent']])) {\n      $it[$c['id_parent']] = $this->default;\n    }\n    elseif (is_array($it[$c['id_parent']])) {\n      if ($id_parent = $this->fromCode(...$it[$c['id_parent']])) {\n        $it[$c['id_parent']] = $id_parent;\n      }\n      else {\n        throw new Exception(X::_(\"Impossible to find the parent\"));\n      }\n    }\n    elseif (!isset($it[$c['id_parent']]) || !$this->exists($it[$c['id_parent']])) {\n      throw new Exception(X::_(\"Impossible to find the parent\"));\n    }\n\n    if (empty($it[$c['id_alias']])) {\n      $it[$c['id_alias']] = null;\n    }\n    elseif (is_array($it[$c['id_alias']])) {\n      if ($id_alias = $this->fromCode(...$it[$c['id_alias']])) {\n        $it[$c['id_alias']] = $id_alias;\n      }\n      else {\n        throw new Exception(X::_(\"Impossible to find the alias\"));\n      }\n    }\n    elseif (!$this->exists($it[$c['id_alias']])) {\n      throw new Exception(X::_(\"Impossible to find the alias %s\", $it[$c['id_alias']]));\n    }\n\n    if (array_key_exists($c['id'], $it) && empty($it[$c['id']])) {\n      unset($it[$c['id']]);\n    }\n\n    if (isset($it[$c['cfg']])) {\n      if (!is_array($it[$c['cfg']]) && Str::isJson($it[$c['cfg']])) {\n        $it[$c['cfg']] = json_decode($it[$c['cfg']], true);\n      }\n\n      $cfg =& $it[$c['cfg']];\n      if (is_array($cfg) && !empty($cfg['id_root_alias'])) {\n        if (is_array($cfg['id_root_alias'])) {\n          if ($id_root_alias = $this->fromCode(...$cfg['id_root_alias'])) {\n            $cfg['id_root_alias'] = $id_root_alias;\n          }\n          else {\n            throw new Exception(X::_(\"Impossible to find the root alias\"));\n          }\n        }\n        elseif (!$this->exists($cfg['id_root_alias'])) {\n          throw new Exception(X::_(\"Impossible to find the root alias\"));\n        }\n      }\n    }\n\n    \/\/ Text is required and parent exists\n    if (!empty($it[$c['id_parent']])\n        && (!empty($it[$c['text']]) || !empty($it[$c['id_alias']]) || !empty($it[$c['code']]))\n        && ($parent = $this->option($it[$c['id_parent']]))\n    ) {\n      \/\/ If the id_parent property is a code or a sequence of codes have to set it as uid\n      $it[$c['id_parent']] = $parent[$c['id']];\n\n      \/\/ If code is empty it MUST be null\n      if (empty($it[$c['code']])) {\n        $it[$c['code']] = null;\n      }\n\n      \/\/ If text is empty it MUST be null\n      if (empty($it[$c['text']])) {\n        $it[$c['text']] = null;\n      }\n\n      \/\/ Unsetting computed values\n      if (isset($it[$c['value']]) && Str::isJson($it[$c['value']])) {\n        $this->_set_value($it);\n      }\n\n      if (array_key_exists('alias', $it)) {\n        unset($it['alias']);\n      }\n\n      if (array_key_exists('num_children', $it)) {\n        unset($it['num_children']);\n      }\n\n      if (array_key_exists('items', $it)) {\n        unset($it['items']);\n      }\n\n      \/\/ Taking care of user-defined properties (contained in value)\n      $value = [];\n      foreach ($it as $k => $v){\n        if (!\\in_array($k, $c, true)) {\n          $value[$k] = $v;\n          unset($it[$k]);\n        }\n      }\n\n      if (!empty($value)) {\n        $it[$c['value']] = json_encode($value);\n      }\n      else {\n        if (empty($it[$c['value']])) {\n          $it[$c['value']] = null;\n        }\n        else{\n          if (\\is_array($it[$c['value']])) {\n            $it[$c['value']] = json_encode($it[$c['value']]);\n          }\n        }\n      }\n\n      \/\/ Taking care of the config\n      if (isset($it[$c['cfg']])) {\n        if (is_array($it[$c['cfg']]) && !empty($it[$c['cfg']])) {\n          $it[$c['cfg']] = json_encode($it[$c['cfg']]);\n        }\n\n        if (!Str::isJson($it[$c['cfg']]) || in_array($it[$c['cfg']], ['{}', '[]'], true)) {\n          $it[$c['cfg']] = null;\n        }\n      }\n\n      $is_sortable = $this->isSortable($parent[$c['id']]);\n      \/\/ If parent is sortable and order is not defined we define it as last\n      if (isset($it[$c['num']]) && !$is_sortable) {\n        unset($it[$c['num']]);\n      }\n      elseif ($is_sortable && empty($it[$c['num']])) {\n        $it[$c['num']] = ($parent['num_children'] ?? 0) + 1;\n      }\n\n      return true;\n    }\n\n    throw new Exception(\n      X::_(\"Impossible to make an option out of it...\")\n      .PHP_EOL.json_encode($it, JSON_PRETTY_PRINT)\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Write",
            "startLine": 875,
            "endLine": 1021,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_prepare",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "it",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": true,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Transforms an array of parameters into valid option array\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$it"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Transforms an array of parameters into valid option array\n   * @param array $it\n   * @return bool\n   * @throws Exception\n   *\/"
        },
        "_set_value": {
            "name": "_set_value",
            "summary": "Gives to option's database row array each of the column value's JSON properties",
            "description": "Only if value is an associative array value itself will be unset",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Only if value is an associative array value itself will be unset"
                }
            ],
            "class": "bbn\\Appui\\Option",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Option\/Write.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _set_value(array &$opt): ?array\n  {\n    if (!empty($opt[$this->fields['value']]) && Str::isJson($opt[$this->fields['value']])) {\n      $val = json_decode($opt[$this->fields['value']], true);\n      if (X::isAssoc($val)) {\n        foreach ($val as $k => $v){\n          if (!isset($opt[$k])) {\n            $opt[$k] = $v;\n          }\n        }\n\n        unset($opt[$this->fields['value']]);\n      }\n      else{\n        $opt[$this->fields['value']] = $val;\n      }\n    }\n\n    return $opt;\n  }",
            "parent": false,
            "trait": "bbn\\Appui\\Option\\Write",
            "startLine": 1030,
            "endLine": 1049,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_set_value",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "opt",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": true,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gives to option's database row array each of the column value's JSON properties\nOnly if value is an associative array value itself will be unset\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$opt"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gives to option's database row array each of the column value's JSON properties\n   * Only if value is an associative array value itself will be unset\n   * @param array $opt\n   * @return array|bool\n   *\/"
        }
    },
    "properties": {
        "default_class_cfg": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Appui\\Option",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": {
                "errors": [],
                "table": "bbn_options",
                "tables": {
                    "options": "bbn_options"
                },
                "arch": {
                    "options": {
                        "id": "id",
                        "id_parent": "id_parent",
                        "id_alias": "id_alias",
                        "num": "num",
                        "text": "text",
                        "code": "code",
                        "value": "value",
                        "cfg": "cfg"
                    }
                }
            }
        },
        "is_init": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Appui\\Option",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": false
        },
        "non_selected": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Appui\\Option",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": [
                "cfg"
            ]
        },
        "class_cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Db"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Db",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "dbClass"
                    }
                ]
            },
            "parent": {
                "name": "db",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Db"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Db",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "dbClass"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "retriever_instance": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Retriever",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "self",
                        "description": "An instance of the current class."
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "retriever_exists": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Retriever",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Will be true from the moment an instance exists."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "_cache_prefix": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Cache",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "cache_engine": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Cache",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "_isInitClassCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var bool",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "fields": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_table": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_table_index": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "rootFilterCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Configuration for the root filter."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "dbTraitRelations": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Cached relations for the current table."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "dbTraitStructure": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Cached relations for the current table."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "_local_cache": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Appui\\Option\\Cache",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "A store for parameters sent to methods that utilize caching.\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "root": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Appui\\Option\\Root",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var int The root ID of the options in the table",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "default": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Appui\\Option\\Root",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var int The default ID as parent",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "templateIds": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Appui\\Option\\Template",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": []
        },
        "magicTemplateId": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Appui\\Option\\Template",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "magicOptionsTemplateId": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Appui\\Option\\Template",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "magicPermissionsTemplateId": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Appui\\Option\\Template",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "magicPluginTemplateId": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Appui\\Option\\Template",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "magicSubpluginTemplateId": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Appui\\Option\\Template",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "magicSubOptionsTemplateId": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Appui\\Option\\Template",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "magicSubPermissionsTemplateId": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Appui\\Option\\Template",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "magicTemplateTemplateId": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Appui\\Option\\Template",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "magicAppuiTemplateId": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Appui\\Option\\Template",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "magicPluginsTemplateId": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Option"
            },
            "declaring_trait": "bbn\\Appui\\Option\\Template",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "default_class_cfg": {
            "errors": [],
            "table": "bbn_options",
            "tables": {
                "options": "bbn_options"
            },
            "arch": {
                "options": {
                    "id": "id",
                    "id_parent": "id_parent",
                    "id_alias": "id_alias",
                    "num": "num",
                    "text": "text",
                    "code": "code",
                    "value": "value",
                    "cfg": "cfg"
                }
            }
        },
        "retriever_instance": {},
        "retriever_exists": true
    },
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "bbn\\Db": "Db",
        "bbn\\Str": "Str",
        "bbn\\X": "X",
        "bbn\\Models\\Tts\\Retriever": "Retriever",
        "bbn\\Models\\Tts\\Cache": "Cache",
        "bbn\\Models\\Tts\\DbActions": "DbActions",
        "bbn\\Models\\Cls\\Db": "DbCls"
    },
    "dummyComments": [
        "\/**\n * @package appui\n *\/",
        "\/**\n * An all-in-one hierarchical options management system\n *\n * This class allows to manage a hierarchical table of options, including retrieving, editing, adding, and removing options.\n * It also provides functionality for grabbing a whole tree, applying functions on groups of options, and adding user-defined properties.\n *\n * @author Thomas Nabet <thomas.nabet@gmail.com>\n * @copyright BBN Solutions\n * @since Oct 28, 2015, 10:23:55 +0000\n * @category Appui x\n * @license http:\/\/opensource.org\/licenses\/MIT MIT\n * @version 0.2\n *\/"
    ],
    "summary": "An all-in-one hierarchical options management system",
    "description": "This class allows to manage a hierarchical table of options, including retrieving, editing, adding, and removing options.\nIt also provides functionality for grabbing a whole tree, applying functions on groups of options, and adding user-defined properties.",
    "description_parts": [
        {
            "type": "text",
            "content": "This class allows to manage a hierarchical table of options, including retrieving, editing, adding, and removing options.\nIt also provides functionality for grabbing a whole tree, applying functions on groups of options, and adding user-defined properties."
        }
    ]
}