{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Dashboard",
    "namespace": true,
    "realName": "Dashboard",
    "realNamespace": "bbn\\Appui",
    "traits": [
        "bbn\\Models\\Tts\\Optional"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Dashboard.php",
    "startLine": 21,
    "endLine": 1201,
    "numMethods": 63,
    "numProperties": 24,
    "numConstants": 0,
    "numStaticProperties": 2,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Basic",
    "isSubclassOf": false,
    "defaultProperties": {
        "optional_is_init": false,
        "option_root_id": null,
        "opt": null,
        "user": null,
        "perm": null,
        "pref": null,
        "db": null,
        "archOpt": null,
        "archPref": null,
        "cfgPref": null,
        "archBits": null,
        "id": null,
        "code": null,
        "idList": null,
        "idWidgets": null,
        "nativeWidgetFields": [
            "component",
            "itemComponent",
            "icon",
            "closable",
            "observe",
            "limit",
            "buttonsRight",
            "buttonsLeft",
            "options",
            "cache"
        ],
        "widgetFields": [],
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": [],
        "options": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Dashboard",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "dashboard constructor.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(string $id = '')\n  {\n    $this->opt      = Option::getInstance();\n    $this->user     = User::getInstance();\n    $this->perm     = Permissions::getInstance();\n    $this->pref     = Preferences::getInstance();\n    $this->db       = Db::getInstance();\n    $this->cfgPref  = $this->pref->getClassCfg();\n    $this->archOpt  = $this->opt->getClassCfg()['arch']['options'];\n    $this->archPref = $this->cfgPref['arch']['user_options'];\n    $this->archBits = $this->cfgPref['arch']['user_options_bits'];\n    self::optionalInit();\n    $this->widgetFields       = \\array_merge($this->nativeWidgetFields, \\array_values($this->archBits));\n    $this->nativeWidgetFields = \\array_merge($this->nativeWidgetFields, \\array_values($this->archOpt));\n    $this->idList             = $this->getOptionId('list');\n    if (!Str::isUid($this->idList)) {\n      throw new Exception(_(\"Unable to load the option 'list'\"));\n    }\n\n    $this->idWidgets = $this->getOptionId('widgets');\n    if (!Str::isUid($this->idWidgets)) {\n      throw new Exception(_(\"Unable to load the option 'widgets'\"));\n    }\n\n    if (!empty($id)) {\n      $this->setCurrent($id);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 86,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "dashboard constructor.",
                "tags": []
            },
            "comments": "  \/**\n   * dashboard constructor.\n   *\/"
        },
        "exists": {
            "name": "exists",
            "summary": "Returns true if the given code corresoponds to an existing",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function exists(string $code)\n  {\n    return (bool)$this->getId($code);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 123,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "exists",
            "returns": [],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns true if the given code corresoponds to an existing\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "[type]",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the given code corresoponds to an existing \n   *\n   * @param [type] $code\n   *\n   * @return void\n   *\/"
        },
        "setCurrent": {
            "name": "setCurrent",
            "summary": "Sets the current dashboard by setting code and id properies.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setCurrent($id): bool\n  {\n    if (!empty($id)) {\n      if (Str::isUid($id)) {\n        if (!($this->code = $this->getCode($id))) {\n          throw new Exception(sprintf(_(\"Unable to load the dashboard code using identifier: %s\"), $id));\n        }\n\n        $this->id = $id;\n      } else {\n        if (!($this->id = $this->getId($id))) {\n          throw new Exception(sprintf(_(\"Unable to load the dashboard using identifier: %s\"), $id));\n        }\n\n        $this->code = $id;\n      }\n\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 132,
            "endLine": 153,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setCurrent",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the current dashboard by setting code and id properies.",
                "tags": []
            },
            "comments": "  \/** \n   * Sets the current dashboard by setting code and id properies.\n   *\/"
        },
        "getCurrent": {
            "name": "getCurrent",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCurrent()\n  {\n    return $this->id;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 155,
            "endLine": 158,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCurrent",
            "returns": [],
            "arguments": []
        },
        "insert": {
            "name": "insert",
            "summary": "Creates a new dashboard",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insert(array $d): ?string\n  {\n    if (empty($d['code'])) {\n      throw new Exception(_(\"The dashboard's code is mandatory\"));\n    }\n\n    if (empty($d[$this->archPref['text']])) {\n      throw new Exception(_(\"The dashboard's text is mandatory\"));\n    }\n\n    if ($this->db->insert(\n      $this->cfgPref['table'],\n      [\n        $this->archPref['id_option'] => $this->idList,\n        $this->archPref['num'] => $d[$this->archPref['num']] ?? null,\n        $this->archPref['text'] => $d[$this->archPref['text']],\n        $this->archPref['id_link'] => !empty($d[$this->archPref['id_link']]) ? $d[$this->archPref['id_link']] : null,\n        $this->archPref['id_alias'] => !empty($d[$this->archPref['id_alias']]) ? $d[$this->archPref['id_alias']] : null,\n        $this->archPref['id_user'] => !empty($d[$this->archPref['id_user']]) ? $d[$this->archPref['id_user']] : null,\n        $this->archPref['id_group'] => !empty($d[$this->archPref['id_group']]) ? $d[$this->archPref['id_group']] : null,\n        $this->archPref['public'] => empty($d[$this->archPref['public']]) ? 0 : 1,\n        $this->archPref['cfg'] => ($cfg = $this->pref->getCfg(false, $d)) ? json_encode($cfg) : null\n      ]\n    )) {\n      return $this->db->lastId();\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 166,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "insert",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "d",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "the dashboard fields"
                }
            ],
            "doc": {
                "description": "Creates a new dashboard\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$d",
                        "description": "the dashboard fields"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates a new dashboard\n   * @param array $d the dashboard fields\n   * @return string|null\n   *\/"
        },
        "update": {
            "name": "update",
            "summary": "Updates the current dashboard",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function update(array $d): bool\n  {\n    if ($this->_check()) {\n      if (empty($d['code'])) {\n        throw new Exception(_(\"The dashboard's code is mandatory\"));\n      }\n\n      if (empty($d[$this->archPref['text']])) {\n        throw new Exception(_(\"The dashboard's text is mandatory\"));\n      }\n\n      $t                            = &$this;\n      $data                         = \\array_filter(\n        $d,\n        function ($f) use ($t) {\n          return \\in_array($f, \\array_values($t->archPref), true);\n        },\n        ARRAY_FILTER_USE_KEY\n      );\n      $data[$this->archPref['cfg']] = ($cfg = $this->pref->getCfg(false, $d)) ? json_encode($cfg) : null;\n      unset($data[$this->archPref['id']]);\n      return (bool)$this->db->update($this->cfgPref['table'], $data, [$this->archPref['id'] => $this->id]);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 202,
            "endLine": 225,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "update",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "d",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "the dashboard fields"
                }
            ],
            "doc": {
                "description": "Updates the current dashboard\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$d",
                        "description": "the dashboard fields"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates the current dashboard\n   * @param array $d the dashboard fields\n   * @return bool\n   *\/"
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes the current dashboard",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function delete(): bool\n  {\n    if ($this->_check()) {\n      return (bool)$this->pref->delete($this->id);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 232,
            "endLine": 239,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "delete",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Deletes the current dashboard\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the current dashboard\n   * @return bool\n   *\/"
        },
        "addWidget": {
            "name": "addWidget",
            "summary": "Adds a widget to the current dashboard",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addWidget(string $id): ?string\n  {\n    if ($this->_check()) {\n      if (!Str::isUid($id)) {\n        throw new Exception(_(\"The id must be a uuid\"));\n      }\n\n      if (!($text = $this->opt->text($id))) {\n        throw new Exception(sprintf(_(\"No text for the widget with id %s\"), $id));\n      }\n\n      return $this->pref->addBit(\n        $this->id,\n        [\n          $this->archBits['id_option'] => $id,\n          $this->archBits['text'] => $text,\n          $this->archBits['num'] => $this->pref->getMaxBitNum($this->id, null, true) ?: 1\n        ]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 247,
            "endLine": 269,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "addWidget",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The native widget's ID"
                }
            ],
            "doc": {
                "description": "Adds a widget to the current dashboard\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The native widget's ID"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Adds a widget to the current dashboard\n   * @param string $id The native widget's ID\n   * @return string|null\n   *\/"
        },
        "updateWidget": {
            "name": "updateWidget",
            "summary": "Updates a widget (Bit)",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateWidget(string $id, array $widget): bool\n  {\n    if (!Str::isUid($id)) {\n      throw new Exception(_(\"The id must be a uuid\"));\n    }\n\n    if (!($opt = $this->getWidgetOption($id, true))) {\n      throw new Exception(sprintf(_(\"No option found with this id %s\"), $id));\n    }\n\n    $d1                              = $this->pref->getBitCfg(null, $this->_prepareWidget($widget));\n    $d2                              = $this->pref->getBitCfg(null, $this->_prepareWidget($opt));\n    $toSave                          = \\array_filter(\n      $d1,\n      function ($v, $k) use ($d2) {\n        return $d2[$k] != $v;\n      },\n      ARRAY_FILTER_USE_BOTH\n    );\n    $toSave[$this->archBits['text']] = $widget[$this->archBits['text']];\n    return (bool)$this->pref->updateBit($id, $toSave);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 278,
            "endLine": 299,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "updateWidget",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The widget's ID (bit)"
                },
                {
                    "name": "widget",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The widget data"
                }
            ],
            "doc": {
                "description": "Updates a widget (Bit)\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The widget's ID (bit)"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$widget",
                        "description": "The widget data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates a widget (Bit)\n   * @param string $id     The widget's ID (bit)\n   * @param array  $widget The widget data\n   * @return bool\n   *\/"
        },
        "deleteWidget": {
            "name": "deleteWidget",
            "summary": "Removes a widget (Bit)",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteWidget(string $id): bool\n  {\n    if (!Str::isUid($id)) {\n      throw new Exception(_(\"The id must be a uuid\"));\n    }\n\n    $res = false;\n    if ($this->_check() && $this->pref->deleteBit($id)) {\n      $res = true;\n      if ($alias = $this->db->selectAll($this->cfgPref['table'], [], [$this->archPref['id_alias'] => $this->id])) {\n        foreach ($alias as $a) {\n          if (($cfg = \\json_decode($a->{$this->archPref['cfg']}, true))\n            && isset($cfg['widget'], $cfg['widget'][$id])\n          ) {\n            unset($cfg['widget'][$id]);\n            if (!$this->pref->setCfg($a->${$this->archPref['id']}, $cfg)) {\n              $res = false;\n            }\n          }\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 307,
            "endLine": 331,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteWidget",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The widget's ID (bit)"
                }
            ],
            "doc": {
                "description": "Removes a widget (Bit)\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The widget's ID (bit)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Removes a widget (Bit)\n   * @param string $id The widget's ID (bit)\n   * @return bool\n   *\/"
        },
        "setOrderWidget": {
            "name": "setOrderWidget",
            "summary": "Set the widget's order number property",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setOrderWidget(string $id, int $num): bool\n  {\n    if (!Str::isUid($id)) {\n      throw new Exception(_(\"The id must be a uuid\"));\n    }\n\n    if (!($bit = $this->pref->getBit($id, false))) {\n      throw new Exception(sprintf(_(\"No widget found withe\u00ec the id %s\"), $id));\n    }\n\n    if ((int)$bit[$this->archBits['num']] === $num) {\n      return true;\n    }\n\n    return (bool)$this->db->update(\n      $this->cfgPref['tables']['user_options_bits'],\n      [\n        $this->archBits['num'] => $num\n      ],\n      [\n        $this->archBits['id'] => $id\n      ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 340,
            "endLine": 363,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setOrderWidget",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The widget's ID (bit)"
                },
                {
                    "name": "num",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The new order number"
                }
            ],
            "doc": {
                "description": "Set the widget's order number property\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The widget's ID (bit)"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$num",
                        "description": "The new order number"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Set the widget's order number property\n   * @param string $id  The widget's ID (bit)\n   * @param int    $num The new order number\n   * @return bool\n   *\/"
        },
        "addNativeWidget": {
            "name": "addNativeWidget",
            "summary": "Adds a native widget",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addNativeWidget(array $widget): ?string\n  {\n    if (($id = $this->opt->add($this->_prepareNativeWidget($widget)))) {\n      $this->perm->createFromId($id);\n      return $id;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 371,
            "endLine": 379,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "addNativeWidget",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "widget",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds a native widget\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$widget"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Adds a native widget\n   * @param array $widget\n   * @return string!null\n   *\/"
        },
        "updateNativeWidget": {
            "name": "updateNativeWidget",
            "summary": "Updates a native widget",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateNativeWidget(string $id, array $widget): bool\n  {\n    if (!Str::isUid($id)) {\n      throw new Exception(_(\"The id must be a uuid\"));\n    }\n\n    return (bool)$this->opt->set($id, $this->_prepareNativeWidget($widget));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 388,
            "endLine": 395,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "updateNativeWidget",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The native widget's ID"
                },
                {
                    "name": "widget",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The native widget's data"
                }
            ],
            "doc": {
                "description": "Updates a native widget\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The native widget's ID"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$widget",
                        "description": "The native widget's data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates a native widget\n   * @param string $id     The native widget's ID\n   * @param array  $widget The native widget's data\n   * @return bool\n   *\/"
        },
        "deleteNativeWidget": {
            "name": "deleteNativeWidget",
            "summary": "Deletes a native widget",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteNativeWidget(string $id): bool\n  {\n    if (!Str::isUid($id)) {\n      throw new Exception(_(\"The id must be a uuid\"));\n    }\n\n    $idPerm = $this->perm->optionToPermission($id);\n    if ($this->opt->remove($id)) {\n      if ($idPerm) {\n        $this->opt->remove($idPerm);\n      }\n\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 403,
            "endLine": 419,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteNativeWidget",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The widget's ID"
                }
            ],
            "doc": {
                "description": "Deletes a native widget\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The widget's ID"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a native widget\n   * @param string $id The widget's ID\n   * @return bool\n   *\/"
        },
        "moveNativeWidget": {
            "name": "moveNativeWidget",
            "summary": "Moves a native widget",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function moveNativeWidget(string $id, string $idParent): bool\n  {\n    if (!Str::isUid($id)) {\n      throw new Exception(_(\"The id must be a uuid\"));\n    }\n    if (!Str::isUid($idParent)) {\n      throw new Exception(_(\"The parent id must be a uuid\"));\n    }\n    return (bool)$this->opt->move($id, $idParent);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 428,
            "endLine": 437,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "moveNativeWidget",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The widget's ID"
                },
                {
                    "name": "idParent",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "arent The new widget's parent"
                }
            ],
            "doc": {
                "description": "Moves a native widget\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The widget's ID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "arent The new widget's parent"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Moves a native widget\n   * @param string $id The widget's ID\n   * @param string $idParent The new widget's parent\n   * @return bool\n   *\/"
        },
        "isPvtWidget": {
            "name": "isPvtWidget",
            "summary": "Checks if the given id is an user's private widget",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isPvtWidget(string $id): bool\n  {\n    if (!Str::isUid($id)) {\n      throw new Exception(_(\"The id must be a uuid\"));\n    }\n    return ($bit = $this->pref->getBit($id)) && \\is_null($bit[$this->archBits['id_option']]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 445,
            "endLine": 451,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isPvtWidget",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if the given id is an user's private widget\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the given id is an user's private widget\n   * @param string $id\n   * @return bool\n   *\/"
        },
        "addPvtWidget": {
            "name": "addPvtWidget",
            "summary": "Adds an user's private widget",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addPvtWidget(array $widget, string $idDashboard = ''): ?string\n  {\n    if (empty($idDashboard) && empty($this->id)) {\n      throw new Exception(_('The dashboard ID is mandatory'));\n    }\n    if (empty($widget[$this->archBits['text']])) {\n      throw new Exception(_('The widget name is mandatory'));\n    }\n    $idDashboard = $idDashboard ?: $this->id;\n    $userDash = $this->getUserDashboard($idDashboard);\n    if (empty($userDash)) {\n      if ($this->pref->shareWithUser($idDashboard, $this->user->getId())) {\n        $userDash = $this->getUserDashboard($idDashboard);\n      }\n    }\n    if (!empty($userDash)) {\n      $widget[$this->archBits['num']] = $this->pref->getMaxBitNum($idDashboard, null, true) ?: 1;\n      if ($this->pref->addBit($userDash['id'], $widget)) {\n        return $this->db->lastId();\n      }\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 460,
            "endLine": 482,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "addPvtWidget",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "widget",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "idDashboard",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "ashboard"
                }
            ],
            "doc": {
                "description": "Adds an user's private widget\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$widget"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "ashboard"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Adds an user's private widget\n   * @param array $widget\n   * @param string $idDashboard\n   * @return null|string\n   *\/"
        },
        "getPvtWidget": {
            "name": "getPvtWidget",
            "summary": "Gets an user's private widget",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPvtWidget(string $id): ?array\n  {\n    if ($this->isPvtWidget($id)\n      && ($w = $this->pref->getBit($id))\n    ) {\n      $o = !empty($w['widget']) ? $w['widget'] : [];\n      $o = X::mergeArrays($o, [\n        $this->archBits['id'] => $w[$this->archBits['id']],\n        'key' => $w[$this->archBits['id']],\n        $this->archBits['text'] => $w[$this->archBits['text']],\n        $this->archBits['num'] => $w[$this->archBits['num']]\n      ]);\n      \/\/ Parse JSON properties\n      if (!empty($o['buttonsRight']) && Str::isJson($o['buttonsRight'])) {\n        $o['buttonsRight'] = \\json_decode($o['buttonsRight'], true);\n      }\n      if (!empty($o['buttonsLeft']) && Str::isJson($o['buttonsLeft'])) {\n        $o['buttonsLeft'] = \\json_decode($o['buttonsLeft'], true);\n      }\n      if (!empty($o['options']) && Str::isJson($o['options'])) {\n        $o['options'] = \\json_decode($o['options'], true);\n      }\n      \/\/ \"hidden\" property\n      if (!isset($o['hidden'])) {\n        $o['hidden'] = false;\n      }\n      return $o;\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 490,
            "endLine": 519,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPvtWidget",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets an user's private widget\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets an user's private widget\n   * @param string $id\n   * @return null|array\n   *\/"
        },
        "deletePvtWidget": {
            "name": "deletePvtWidget",
            "summary": "Deletes an user's private widget",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deletePvtWidget(string $id): bool\n  {\n    return $this->isPvtWidget($id) && $this->pref->deleteBit($id);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 527,
            "endLine": 530,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "deletePvtWidget",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes an user's private widget\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes an user's private widget\n   * @param string $id\n   * @return bool\n   *\/"
        },
        "save": {
            "name": "save",
            "summary": "Saves the widget configuration",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function save(array $data)\n  {\n    if (\n      !empty($data[$this->archBits['id']])\n      && !empty($data[$this->archBits['cfg']])\n    ) {\n      $idWidget = $data[$this->archBits['id']];\n      $cfg      = Str::isJson($data[$this->archBits['cfg']]) ? json_decode(Str::isJson($data[$this->archBits['cfg']]), true) : (is_array($data[$this->archBits['cfg']]) ? $data[$this->archBits['cfg']] : []);\n      if ($dash = $this->getDashboardByWidget($idWidget)) {\n        $idDash = $dash[$this->archPref['id']];\n        if ($uDash = $this->getUserDashboard($idDash)) {\n          $uCfg = Str::isJson($uDash[$this->archPref['cfg']]) ? json_decode($uDash[$this->archPref['cfg']], true) : [];\n          if (!isset($uCfg['widgets'])) {\n            $uCfg['widgets'] = [];\n          }\n\n          $uCfg['widgets'][$idWidget] = X::mergeArrays($uCfg['widgets'][$idWidget] ?? [], $cfg);\n          return (bool)$this->pref->setCfg($uDash[$this->archPref['id']], $uCfg);\n        } elseif ($this->pref->shareWithUser($idDash, $this->user->getId())) {\n          $idUsrDash = $this->db->lastId();\n          if ($this->pref->setCfg(\n            $idUsrDash,\n            [\n              'widgets' => [\n                $idWidget => $cfg\n              ]\n            ]\n          )) {\n            return $idUsrDash;\n          }\n        }\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 538,
            "endLine": 573,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "save",
            "returns": [],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Saves the widget configuration\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Saves the widget configuration\n   * @param array $data\n   * @return string|bool\n   *\/"
        },
        "sort": {
            "name": "sort",
            "summary": "Sorts the widgets' order",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function sort(array $order): ?int\n  {\n    if (!empty($order) && (bool)$this->id) {\n      $changed = 0;\n      if ($uDash = $this->getUserDashboard($this->id)) {\n        $uCfg = Str::isJson($uDash[$this->archPref['cfg']]) ? json_decode($uDash[$this->archPref['cfg']], true) : [];\n        if (!isset($uCfg['widgets'])) {\n          $uCfg['widgets'] = [];\n        }\n\n        foreach ($order as $i => $k) {\n          if (!isset($uCfg['widgets'][$k])) {\n            $uCfg['widgets'][$k] = [];\n          }\n\n          if (!isset($uCfg['widgets'][$k][$this->archBits['num']])) {\n            $uCfg['widgets'][$k][$this->archBits['num']] = 0;\n          }\n\n          if ($uCfg['widgets'][$k][$this->archBits['num']] !== $i + 1) {\n            $uCfg['widgets'][$k][$this->archBits['num']] = $i + 1;\n            $changed++;\n          }\n        }\n\n        if ($changed && $this->pref->setCfg($uDash[$this->archPref['id']], $uCfg)) {\n          return $changed;\n        }\n      } else {\n        $cfg = ['widgets' => []];\n        foreach ($order as $i => $k) {\n          $cfg['widgets'][$k] = [$this->archBits['num'] => $i + 1];\n        }\n\n        if ($this->pref->shareWithUser($this->id, $this->user->getId())) {\n          $idUsrDash = $this->db->lastId();\n          if ($this->pref->setCfg($idUsrDash, $cfg)) {\n            return count($cfg['widgets']);\n          }\n        }\n      }\n\n      return $changed;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 581,
            "endLine": 627,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "sort",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "order",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The ordered keys list"
                }
            ],
            "doc": {
                "description": "Sorts the widgets' order\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The ordered keys list"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sorts the widgets' order\n   * @param array $order The ordered keys list\n   * @return int|null\n   *\/"
        },
        "get": {
            "name": "get",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function get()\n  {\n    return (bool)$this->id ? $this->pref->get($this->id) : null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 630,
            "endLine": 633,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "get",
            "returns": [],
            "arguments": []
        },
        "getUserWidgets": {
            "name": "getUserWidgets",
            "summary": "Gets the widgets list of a dashboard and the order list.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUserWidgets(string $url = ''): array\n  {\n    $widgets = $this->_getWidgets($url);\n    return [\n      'widgets' => $widgets,\n      'order' => $this->getOrder($widgets)\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 641,
            "endLine": 648,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getUserWidgets",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The url to set to the widget's property."
                }
            ],
            "doc": {
                "description": "Gets the widgets list of a dashboard and the order list.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url",
                        "description": "The url to set to the widget's property."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the widgets list of a dashboard and the order list.\n   * @param string $url The url to set to the widget's property.\n   * @return array\n   *\/"
        },
        "getOrder": {
            "name": "getOrder",
            "summary": "Gets an orderder array of the widgets' keys",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getOrder(array $widgets): array\n  {\n    $ret   = [];\n    $toend = [];\n    if (bbn\\X::isAssoc($widgets)) {\n      $widgets = \\array_values($widgets);\n    }\n\n    foreach ($widgets as $widget) {\n      if (\n        Str::isInteger($widget[$this->archOpt['num']])\n        && !\\array_key_exists($widget[$this->archOpt['num']], $ret)\n      ) {\n        $ret[$widget[$this->archOpt['num']]] = $widget['key'];\n      } else {\n        $toend[] = $widget['key'];\n      }\n    }\n\n    \\ksort($ret);\n    return \\array_values(\\array_merge($ret, $toend));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 656,
            "endLine": 677,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getOrder",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "widgets",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The list of widgets"
                }
            ],
            "doc": {
                "description": "Gets an orderder array of the widgets' keys\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$widgets",
                        "description": "The list of widgets"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets an orderder array of the widgets' keys\n   * @param array $widgets The list of widgets\n   * @return array\n   *\/"
        },
        "getUserWidgetsCode": {
            "name": "getUserWidgetsCode",
            "summary": "Gets an associative array of widgets by code",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUserWidgetsCode(string $url = ''): array\n  {\n    $widgets = $this->_getWidgets($url, true);\n    $ret     = [];\n    foreach ($widgets as $w) {\n      $ret[$w[$this->archOpt['code']]] = $w;\n    }\n\n    \\ksort($ret);\n    return $ret;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 685,
            "endLine": 695,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getUserWidgetsCode",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets an associative array of widgets by code\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets an associative array of widgets by code\n   * @param string $url\n   * @return array\n   *\/"
        },
        "getUserDashboards": {
            "name": "getUserDashboards",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUserDashboards(): ?array\n  {\n    if ($id_list = $this->getOptionId('list')) {\n      return $this->pref->getAll($id_list);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 698,
            "endLine": 705,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getUserDashboards",
            "returns": [
                null,
                "array"
            ],
            "arguments": []
        },
        "getDashboardByWidget": {
            "name": "getDashboardByWidget",
            "summary": "Gets the dashboard by a widget ID (bit)",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDashboardByWidget(string $id): ?array\n  {\n    if (Str::isUid($id)) {\n      return $this->pref->getByBit($id);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 713,
            "endLine": 720,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getDashboardByWidget",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The widget ID (bit)"
                }
            ],
            "doc": {
                "description": "Gets the dashboard by a widget ID (bit)\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The widget ID (bit)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the dashboard by a widget ID (bit)\n   * @param string $id The widget ID (bit)\n   * @return array|null\n   *\/"
        },
        "getWidgetOption": {
            "name": "getWidgetOption",
            "summary": "Gets the widget option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getWidgetOption(string $id, bool $full = false)\n  {\n    if (\n      Str::isUid($id)\n      && ($bit = $this->pref->getBit($id))\n      && !empty($bit[$this->archBits['id_option']])\n    ) {\n      return $full ? $this->opt->option($bit[$this->archBits['id_option']]) : $bit[$this->archBits['id_option']];\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 729,
            "endLine": 740,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getWidgetOption",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The widget ID (bit)"
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "false if you want only the option ID"
                }
            ],
            "doc": {
                "description": "Gets the widget option\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The widget ID (bit)"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "description": "false if you want only the option ID"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the widget option\n   * @param string                                    $id The widget ID (bit)\n   * @param bool false if you want only the option ID\n   * @return array|null|string\n   *\/"
        },
        "getUserDashboard": {
            "name": "getUserDashboard",
            "summary": "Gets the user's customized dashborad of the given id",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUserDashboard(string $id): ?array\n  {\n    return $this->db->rselect(\n      $this->cfgPref['tables']['user_options'],\n      [],\n      [\n        $this->archPref['id_alias'] => $id,\n        $this->archPref['id_user'] => $this->user->getId(),\n        $this->archPref['public'] => 0\n      ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 748,
            "endLine": 759,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getUserDashboard",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The dashboard id"
                }
            ],
            "doc": {
                "description": "Gets the user's customized dashborad of the given id\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The dashboard id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the user's customized dashborad of the given id\n   * @param string $id The dashboard id\n   * @return array|null\n   *\/"
        },
        "getDefault": {
            "name": "getDefault",
            "summary": "Gets the user's default dashboard",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDefault(): ?string\n  {\n    if (($id_opt = $this->getOptionId('default'))\n      && ($all = $this->pref->getAll($id_opt))\n    ) {\n      if ($by_id_user = \\array_filter(\n        $all,\n        function ($a) {\n          return !empty($a['id_user']) && !empty($a['id_alias']);\n        }\n      )) {\n        return $by_id_user[0]['id_alias'];\n      } elseif ($by_id_group = \\array_filter(\n        $all,\n        function ($a) {\n          return !empty($a['id_group']) && !empty($a['id_alias']);\n        }\n      )) {\n        return $by_id_group[0]['id_alias'];\n      } elseif ($by_public = \\array_filter(\n        $all,\n        function ($a) {\n          return !empty($a['public']) && !empty($a['id_alias']);\n        }\n      )) {\n        return $by_public[0]['id_alias'];\n      }\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 765,
            "endLine": 794,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDefault",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets the user's default dashboard\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the user's default dashboard\n   * @return string|null\n   *\/"
        },
        "getId": {
            "name": "getId",
            "summary": "Returns the dashboard id by its code",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getId(string $code): string\n  {\n    if (empty($code)) {\n      throw new Exception(_('A wrong argument value is passed'));\n    }\n\n    if (!Str::isUid($code)) {\n      return $this->db->selectOne(\n        [\n          'table' => $this->cfgPref['tables']['user_options'],\n          'fields' => [$this->archPref['id']],\n          'where' => [\n            'conditions' => [[\n              'field' => $this->archPref['id_option'],\n              'value' => $this->idList\n            ], [\n              'field' => 'JSON_UNQUOTE(JSON_EXTRACT(cfg, \\'$.code\\'))',\n              'value' => $code\n            ], [\n              'logic' => 'OR',\n              'conditions' => [[\n                'field' => $this->archPref['id_user'],\n                'value' => $this->user->getId()\n              ], [\n                'field' => $this->archPref['id_group'],\n                'value' => $this->user->getGroup()\n              ], [\n                'field' => $this->archPref['public'],\n                'value' => 1\n              ]]\n            ]]\n          ]\n        ]\n      );\n    }\n\n    return $code;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 802,
            "endLine": 839,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getId",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The dashboard code"
                }
            ],
            "doc": {
                "description": "Returns the dashboard id by its code\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code",
                        "description": "The dashboard code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the dashboard id by its code\n   * @param string $code The dashboard code\n   * @return string\n   *\/"
        },
        "getCode": {
            "name": "getCode",
            "summary": "Returns the dashboard code",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCode(string $id): ?string\n  {\n    if (empty($id)) {\n      throw new Exception(_('A wrong argument value is passed'));\n    }\n\n    if ($pref = $this->pref->get($id)) {\n      return $pref['code'] ?? null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 847,
            "endLine": 858,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getCode",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The dashboard code"
                }
            ],
            "doc": {
                "description": "Returns the dashboard code\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code",
                        "description": "The dashboard code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the dashboard code\n   * @param string $code The dashboard code\n   * @return string\n   *\/"
        },
        "getWidgets": {
            "name": "getWidgets",
            "summary": "Returns the dashboard's widgets",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getWidgets(string $url = ''): array\n  {\n    \/** @var array The final result *\/\n    $res = [];\n    if ($this->_check()) {\n      \/\/ Looking for the widgets\n      if ($widgets = $this->pref->getBits($this->id, false)) {\n        foreach ($widgets as $w) {\n          \/\/ Getting the option\n          if (\n            !empty($w[$this->archBits['id_option']])\n            && ($o = $this->opt->option($w[$this->archBits['id_option']]))\n          ) {\n            \/\/ Set \"text\" property coming from the bit\n            $o[$this->archOpt['text']] = $w[$this->archBits['text']];\n            \/\/ Set \"num\" property coming from the bit\n            $o[$this->archOpt['num']] = $w[$this->archBits['num']];\n            \/\/ Set \"id_option\" property coming from the option\n            $o[$this->archBits['id_option']] = $o[$this->archOpt['id']];\n            \/\/ Set \"id\" property coming from the bit\n            $o[$this->archBits['id']] = $w[$this->archBits['id']];\n            \/\/ Set \"cfg\" properties coming from the bit\n            if ($cfg = $this->pref->getBitCfg($w[$this->archBits['id']])) {\n              $o = X::mergeArrays($o, $cfg);\n            }\n\n            \/\/ Set the widget's url\n            if (!empty($o[$this->archOpt['code']])) {\n              $o['url'] = $url . $o[$this->archOpt['code']];\n            }\n\n            unset(\n              $o[$this->archOpt['id_alias']],\n              $o['num_children'],\n              $o[$this->archOpt['id_parent']]\n            );\n            $res[] = $o;\n          }\n        }\n      }\n    }\n\n    X::sortBy($res, $this->archOpt['num'], 'asc');\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 866,
            "endLine": 910,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getWidgets",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the dashboard's widgets\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the dashboard's widgets\n   * @param string $url\n   * @return array\n   *\/"
        },
        "_check": {
            "name": "_check",
            "summary": "Checks if the id property is set",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _check()\n  {\n    if (!Str::isUid($this->id)) {\n      throw new Exception(_(\"The dashboard's ID is mandatory\"));\n    }\n\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 917,
            "endLine": 924,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "_check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks if the id property is set\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the id property is set\n   * @return bool\n   *\/"
        },
        "_prepareNativeWidget": {
            "name": "_prepareNativeWidget",
            "summary": "Checks the native widget's properties",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _prepareNativeWidget(array $widget): array\n  {\n    if (empty($widget[$this->archOpt['text']])) {\n      throw new Exception(sprintf(_(\"The widget's '%s' property is mandatory\"), $this->archOpt['text']));\n    }\n\n    if (empty($widget[$this->archOpt['code']])) {\n      throw new Exception(_(\"The widget's 'code' property is mandatory\"));\n    }\n\n    if ((empty($widget['component']) && empty($widget['itemComponent']))) {\n      throw new Exception(_(\"The widget's 'component' or 'itemComponent' property is mandatory\"));\n    }\n\n    $widget[$this->archOpt['id_parent']] = empty($widget[$this->archOpt['id_parent']]) ? $this->idWidgets : $widget[$this->archOpt['id_parent']];\n    if (empty($widget[$this->archOpt['id_parent']])) {\n      throw new Exception(sprintf(_(\"The widget's '%s' property is mandatory\"), $this->archOpt['id_parent']));\n    }\n\n    $widget[$this->archOpt['id_alias']] = $widget[$this->archOpt['id_alias']] ?? null;\n    $widget['closable']                 = $widget['closable'] ?? false;\n    $widget['observe']                  = $widget['observe'] ?? false;\n    $widget['limit']                    = $widget['limit'] ?? 5;\n    $widget['buttonsRight']             = $widget['buttonsRight'] ?? [];\n    $widget['buttonsLeft']              = $widget['buttonsLeft'] ?? [];\n    $widget['options']                  = $widget['options'] ?? new \\stdClass();\n    $widget['cache']                    = $widget['cache'] ?? 0;\n    foreach ($widget as $field => $val) {\n      if (!\\in_array($field, $this->nativeWidgetFields)) {\n        unset($widget[$field]);\n      }\n    }\n\n    return $widget;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 932,
            "endLine": 966,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_prepareNativeWidget",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "widget",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks the native widget's properties\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$widget"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks the native widget's properties\n   * @param array $widget\n   * @return array\n   *\/"
        },
        "_prepareWidget": {
            "name": "_prepareWidget",
            "summary": "Checks the widget's properties",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _prepareWidget(array $widget): array\n  {\n    if (empty($widget[$this->archBits['text']])) {\n      throw new Exception(sprintf(_(\"The widget's '%s' property is mandatory\"), $this->archBits['text']));\n    }\n\n    foreach ($widget as $field => $val) {\n      if (!\\in_array($field, $this->widgetFields)) {\n        unset($widget[$field]);\n      }\n    }\n\n    return $widget;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 974,
            "endLine": 987,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_prepareWidget",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "widget",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks the widget's properties\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$widget"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks the widget's properties\n   * @param array $widget\n   * @return array\n   *\/"
        },
        "_getWidgets": {
            "name": "_getWidgets",
            "summary": "Gets the widgets list of a dashboard.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _getWidgets(string $url = '', bool $with_code = false): array\n  {\n    \/** @var array The final result *\/\n    $res = [];\n    \/** @var array The user's own preferences *\/\n    $widgetPrefs = [];\n    if ($this->id) {\n      \/\/ Looking for some preferences if he has some\n      $uDash = $this->getUserDashboard($this->id);\n      if (!empty($uDash)\n        && !empty($uDash[$this->archPref['cfg']])\n        && Str::isJson($uDash[$this->archPref['cfg']])\n        && ($uDashCfg = json_decode($uDash[$this->archPref['cfg']], true))\n        && !empty($uDashCfg['widgets'])\n      ) {\n        $widgetPrefs = $uDashCfg['widgets'];\n      }\n\n      \/\/ Looking for the widgets\n      if ($widgets = $this->pref->getBits($this->id, false)) {\n        $mvc = Mvc::getInstance();\n        foreach ($widgets as $w) {\n          \/\/ Getting the option\n          if (\n            !empty($w[$this->archBits['id_option']])\n            && ($o = $this->opt->option($w[$this->archBits['id_option']]))\n          ) {\n            if ($id_plugin = $this->opt->getParentPlugin($o[$this->archOpt['id']])) {\n              $plugin = $this->opt->option($id_plugin);\n              $plugin_name = $this->opt->getPluginName($plugin['id']);\n              if (($plugin_name !== constant('BBN_APP_NAME')) && !$mvc->hasPlugin($plugin_name)) {\n                continue;\n              }\n            }\n            \/\/ Checking the permission\n            if (($id_perm = $this->perm->optionToPermission($o[$this->archOpt['id']]))\n              && $this->perm->has($id_perm)\n            ) {\n              \/\/ Set \"text\" property coming from the bit\n              $o[$this->archOpt['text']] = $w[$this->archBits['text']];\n              \/\/ Set \"num\" property coming from the bit\n              $o[$this->archOpt['num']] = $w[$this->archBits['num']];\n              \/\/ Set \"cfg\" properties coming from the bit\n              if ($cfg = $this->pref->getBitCfg($w[$this->archBits['id']])) {\n                $o = X::mergeArrays($o, $cfg);\n              }\n\n              \/\/ Set the widget's key\n              $o['key'] = $w[$this->archBits['id']];\n              \/\/ Set the widget's url\n              if (!empty($o[$this->archOpt['code']])) {\n                $o['url'] = $url . $o[$this->archOpt['code']];\n              }\n\n              \/\/ Get the preferences of the single widget\n              if (!empty($widgetPrefs[$o['key']])) {\n                $o = X::mergeArrays($o, $widgetPrefs[$o['key']]);\n              }\n\n              \/\/ Parse JSON properties\n              if (!empty($o['buttonsRight']) && Str::isJson($o['buttonsRight'])) {\n                $o['buttonsRight'] = \\json_decode($o['buttonsRight'], true);\n              }\n              if (!empty($o['buttonsLeft']) && Str::isJson($o['buttonsLeft'])) {\n                $o['buttonsLeft'] = \\json_decode($o['buttonsLeft'], true);\n              }\n              if (!empty($o['options']) && Str::isJson($o['options'])) {\n                $o['options'] = \\json_decode($o['options'], true);\n              }\n\n              if (!isset($o['hidden'])) {\n                $o['hidden'] = false;\n              }\n\n              unset(\n                $o[$this->archOpt['id_alias']],\n                $o['num_children'],\n                $o[$this->archOpt['id']],\n                $o[$this->archOpt['id_parent']]\n              );\n              if (!$with_code) {\n                unset($o[$this->archOpt['code']]);\n              }\n\n              $res[] = $o;\n            }\n          }\n        }\n      }\n\n      \/\/X::ddump($res);\n      if (!empty($uDash)\n        && ($pvtWidgets = $this->pref->getBits($uDash[$this->archPref['id']], false))\n      ) {\n        foreach ($pvtWidgets as $w) {\n          if (\\is_null($w['id_option'])) {\n            $o = !empty($w['widget']) ? $w['widget'] : [];\n            $o = X::mergeArrays($o, [\n              $this->archBits['id'] => $w[$this->archBits['id']],\n              'key' => $w[$this->archBits['id']],\n              $this->archBits['text'] => $w[$this->archBits['text']],\n              $this->archBits['num'] => $w[$this->archBits['num']]\n            ]);\n            \/\/ Set the widget's url\n            if (!empty($o['code'])) {\n              $o['url'] = $url . $o['code'];\n            }\n            \/\/ Get the preferences of the single widget\n            if (!empty($widgetPrefs[$o['key']])) {\n              $o = X::mergeArrays($o, $widgetPrefs[$o['key']]);\n            }\n            \/\/ Parse JSON properties\n            if (!empty($o['buttonsRight']) && Str::isJson($o['buttonsRight'])) {\n              $o['buttonsRight'] = \\json_decode($o['buttonsRight'], true);\n            }\n            if (!empty($o['buttonsLeft']) && Str::isJson($o['buttonsLeft'])) {\n              $o['buttonsLeft'] = \\json_decode($o['buttonsLeft'], true);\n            }\n            if (!empty($o['options']) && Str::isJson($o['options'])) {\n              $o['options'] = \\json_decode($o['options'], true);\n            }\n            \/\/ \"hidden\" property\n            if (!isset($o['hidden'])) {\n              $o['hidden'] = false;\n            }\n            if (!$with_code) {\n              unset($o[$this->archOpt['code']]);\n            }\n            $res[] = $o;\n          }\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 997,
            "endLine": 1132,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "_getWidgets",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The url to set to the widget's property."
                },
                {
                    "name": "with_code",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "code If true the code property is also returned."
                }
            ],
            "doc": {
                "description": "Gets the widgets list of a dashboard.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url",
                        "description": "The url to set to the widget's property."
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "code If true the code property is also returned."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the widgets list of a dashboard.\n   *\n   * @param string $url       The url to set to the widget's property.\n   * @param bool   $with_code If true the code property is also returned.\n   * @return array\n   *\/"
        },
        "_filterByPermissions": {
            "name": "_filterByPermissions",
            "summary": "Filters the widgets by the user's permissions.",
            "description": "The widget should come as a dashboard's item linked to a widget option.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "The widget should come as a dashboard's item linked to a widget option."
                }
            ],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _filterByPermissions(array $widgets): array\n  {\n    $oa   = &$this->archOpt;\n    $perm = &$this->perm;\n    \/\/ Filter the widgets by user's permissions\n    return \\array_values(\n      \\array_filter(\n        $widgets,\n        function ($w) use (&$oa, &$perm) {\n          \/\/ The alias is the widget itself on which the permission should be set\n          return !empty($w[$oa['id_alias']]) &&\n            $perm->has($w[$oa['id_alias']]);\n        }\n      )\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1142,
            "endLine": 1157,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_filterByPermissions",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "widgets",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The list of widgets"
                }
            ],
            "doc": {
                "description": "Filters the widgets by the user's permissions.\nThe widget should come as a dashboard's item linked to a widget option.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$widgets",
                        "description": "The list of widgets"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Filters the widgets by the user's permissions.\n   * The widget should come as a dashboard's item linked to a widget option.\n   *\n   * @param array $widgets The list of widgets\n   * @return array\n   *\/"
        },
        "_getWidgetPref": {
            "name": "_getWidgetPref",
            "summary": "Get the personal user's widgets from the preferences.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Dashboard.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _getWidgetPref(): array\n  {\n    if ((bool)$this->id) {\n      $t = $this;\n      \/\/ Get the personal user's widgets\n      if (!$prefs = $this->pref->getAll($this->id)) {\n        $prefs = [];\n      }\n\n      \/\/ Fix the widget structure\n      return \\array_map(\n        function ($p) use ($t) {\n          return \\array_merge(\n            [\n              $t->archPref['id'] => $p[$t->archPref['id']],\n              $t->archPref['id_option'] => $p[$t->archPref['id_option']],\n              $t->archPref['text'] => $p[$t->archPref['text']],\n              $t->archPref['num'] => $p[$t->archPref['num']],\n              'hidden' => isset($p['hidden']) ? (bool)$p['hidden'] : false\n            ],\n            $p['widget']\n          );\n        },\n        \\array_values(\n          \\array_filter(\n            $prefs,\n            function ($p) {\n              return !empty($p['widget']);\n            }\n          )\n        )\n      );\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1165,
            "endLine": 1200,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "_getWidgetPref",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Get the personal user's widgets from the preferences.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Get the personal user's widgets from the preferences.\n   *\n   * @return array\n   *\/"
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 71,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        },
        "optionalInit": {
            "name": "optionalInit",
            "summary": "Returns the option's root ID for the current class based on {@link $option_root_code}",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function optionalInit(array $path = null)\n  {\n    if (!self::$optional_is_init) {\n      $opt = Option::getInstance();\n      if (!$opt) {\n        throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n      }\n\n      $justDefined = false;\n      if (!\\defined(\"BBN_APPUI\")) {\n        $justDefined = true;\n        \\define('BBN_APPUI', $opt->fromCode('appui', 'plugins'));\n      }\n\n      if (!$path) {\n        if (!BBN_APPUI) {\n          throw new Exception('Impossible to find the option appui for ' . __CLASS__ . ($justDefined ? '' : 'not') . ' defined ' . ($opt->fromCode('appui', 'plugins') ?: '') . ($opt->fromCode('appui') ?: '') . ' ' . $opt->getRoot() . ' ' . $opt->getDefault() . X::getDump($opt->option($opt->getRoot())));\n        }\n\n        $tmp                   = explode('\\\\', __CLASS__);\n        $cls                   = strtolower(end($tmp));\n        $path                  = [$cls, 'appui'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      if (!self::$option_root_id) {\n        if (!$cls) {\n          throw new Exception(\"Impossible to find the option \".json_encode($path).\" !!! for \".__CLASS__);\n        }\n        throw new Exception(\"Impossible to find the option $cls for \".__CLASS__);\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 41,
            "endLine": 75,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "optionalInit",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the option's root ID for the current class based on {@link $option_root_code}\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the option's root ID for the current class based on {@link $option_root_code}\n   *\n   * @return false|int\n   *\/"
        },
        "initOptionalGlobal": {
            "name": "initOptionalGlobal",
            "summary": "Sets only once all the constants used by the class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function initOptionalGlobal(Option $opt, array $path = null)\n  {\n    if (!self::$optional_is_init) {\n      if (!\\defined(\"BBN_APPUI\")) {\n        \\define('BBN_APPUI', $opt->fromCode('appui', 'plugins'));\n      }\n\n      if (!$path) {\n        if (!BBN_APPUI) {\n          X::log('Impossible to find the option appui for '.__CLASS__, 'errors');\n          return;\n        }\n\n        $tmp                   = explode('\\\\', __CLASS__);\n        $cls                   = end($tmp);\n        $path                  = [$cls, 'appui'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n            if (!self::$option_root_id) {\n        X::log(\"Impossible to find the option $cls for \".__CLASS__, 'errors');\n        return;\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 85,
            "endLine": 111,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "initOptionalGlobal",
            "returns": [],
            "arguments": [
                {
                    "name": "opt",
                    "position": 0,
                    "type": "bbn\\Appui\\Option",
                    "type_arr": [
                        "bbn\\Appui\\Option"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets only once all the constants used by the class.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Option",
                        "name": "$opt"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets only once all the constants used by the class.\n   *\n   * @param Option $opt\n   * @param array             $path\n   * @return void\n   *\/"
        },
        "initOptional": {
            "name": "initOptional",
            "summary": "Defines the options prop and launches the static init method.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initOptional(array $path = null)\n  {\n    $this->options = Option::getInstance();\n    if (!$this->options) {\n      throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n    }\n\n    self::initOptionalGlobal($this->options, $path);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 120,
            "endLine": 128,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initOptional",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Defines the options prop and launches the static init method.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Defines the options prop and launches the static init method.\n   *\n   * @param array $path\n   * @return void\n   *\/"
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionRoot()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 131,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionRoot",
            "returns": [],
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsObject(): Option\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 138,
            "endLine": 146,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsObject",
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionId()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 155,
            "endLine": 158,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionId",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns The option's ID of a category, i.e. direct children of option's root\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns The option's ID of a category, i.e. direct children of option's root\n   *\n   * @param string $code\n   * @return int|false\n   *\/"
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsIds(): array\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...self::_treat_args(func_get_args())),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 167,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsIds",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Undocumented function\n",
                "params": [],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Check it, it doesn't seem ok"
                }
            },
            "comments": "  \/**\n   * Undocumented function\n   *\n   * @todo Check it, it doesn't seem ok\n   * @return array\n   *\/"
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTree()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 180,
            "endLine": 183,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTree",
            "returns": [],
            "arguments": []
        },
        "getOptionsTreeRef": {
            "name": "getOptionsTreeRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTreeRef()\n  {\n    return ($tree = self::getOptionsObject()->fullTreeRef(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 186,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTreeRef",
            "returns": [],
            "arguments": []
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptions()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 192,
            "endLine": 195,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptions",
            "returns": [],
            "arguments": []
        },
        "getOptionsRef": {
            "name": "getOptionsRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsRef()\n  {\n    return self::getOptionsObject()->fullOptionsRef(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 198,
            "endLine": 201,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsRef",
            "returns": [],
            "arguments": []
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOption()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 204,
            "endLine": 207,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOption",
            "returns": [],
            "arguments": []
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValue()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 210,
            "endLine": 213,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTextValue",
            "returns": [],
            "arguments": []
        },
        "getOptionsTextValueRef": {
            "name": "getOptionsTextValueRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValueRef()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptionsRef($id) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 216,
            "endLine": 219,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTextValueRef",
            "returns": [],
            "arguments": []
        },
        "_treat_args": {
            "name": "_treat_args",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Dashboard",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function _treat_args(array $args, $appui = false): array\n  {\n    $hasUid = Str::isUid(end($args));\n    if (count($args) && !$hasUid) {\n      self::optionalInit();\n      if (!in_array($args[0], ['permissions', 'options', 'plugins'])) {\n        $args[] = 'options';\n      }\n    }\n\n    if (!$hasUid) {\n      $args[] = self::$option_root_id;\n    }\n\n    return $args;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 223,
            "endLine": 238,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_treat_args",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "appui",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "opt": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dashboard"
            },
            "declaring_trait": "bbn\\Appui\\Dashboard",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var \\bbn\\Appui\\Option",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "user": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dashboard"
            },
            "declaring_trait": "bbn\\Appui\\Dashboard",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var \\bbn\\User",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "perm": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dashboard"
            },
            "declaring_trait": "bbn\\Appui\\Dashboard",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var \\bbn\\User\\Permissions",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "pref": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dashboard"
            },
            "declaring_trait": "bbn\\Appui\\Dashboard",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var \\bbn\\User\\Preferences",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dashboard"
            },
            "declaring_trait": "bbn\\Appui\\Dashboard",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var \\bbn\\Db",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "archOpt": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dashboard"
            },
            "declaring_trait": "bbn\\Appui\\Dashboard",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "archPref": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dashboard"
            },
            "declaring_trait": "bbn\\Appui\\Dashboard",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "cfgPref": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dashboard"
            },
            "declaring_trait": "bbn\\Appui\\Dashboard",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "archBits": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dashboard"
            },
            "declaring_trait": "bbn\\Appui\\Dashboard",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "id": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dashboard"
            },
            "declaring_trait": "bbn\\Appui\\Dashboard",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "code": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dashboard"
            },
            "declaring_trait": "bbn\\Appui\\Dashboard",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "idList": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dashboard"
            },
            "declaring_trait": "bbn\\Appui\\Dashboard",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "idWidgets": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dashboard"
            },
            "declaring_trait": "bbn\\Appui\\Dashboard",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "nativeWidgetFields": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dashboard"
            },
            "declaring_trait": "bbn\\Appui\\Dashboard",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": [
                "component",
                "itemComponent",
                "icon",
                "closable",
                "observe",
                "limit",
                "buttonsRight",
                "buttonsLeft",
                "options",
                "cache"
            ]
        },
        "widgetFields": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dashboard"
            },
            "declaring_trait": "bbn\\Appui\\Dashboard",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": []
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "optional_is_init": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dashboard"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Set as true from the moment a first instance has been initiated and has defined the constants."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "option_root_id": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dashboard"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The ID of the root option"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "options": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Dashboard"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Option",
                        "description": "The Option object"
                    }
                ]
            },
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "optional_is_init": false,
        "option_root_id": null
    },
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "bbn": "bbn",
        "bbn\\X": "X",
        "bbn\\Str": "Str",
        "bbn\\Db": "Db",
        "bbn\\Mvc": "Mvc",
        "bbn\\User": "User",
        "bbn\\User\\Permissions": "Permissions",
        "bbn\\User\\Preferences": "Preferences",
        "bbn\\Appui\\Option": "Option",
        "bbn\\Models\\Cls\\Basic": "Basic"
    },
    "dummyComments": [
        "\/**\n * @package appui\n *\/"
    ],
    "summary": "",
    "description": "",
    "description_parts": []
}