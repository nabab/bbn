{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Task",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\References",
        "bbn\\Models\\Tts\\Optional"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Task.php",
    "startLine": 13,
    "endLine": 1305,
    "numMethods": 91,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 3,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\References",
        "bbn\\Models\\Tts\\Optional"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "optional_is_init": false,
        "option_root_id": null,
        "option_appui_id": null,
        "columns": null,
        "template": false,
        "id_user": null,
        "is_dev": null,
        "user": null,
        "date": false,
        "db": null,
        "errors": [],
        "error": false,
        "debug": false,
        "log": [],
        "references": null,
        "references_select": "",
        "references_join": "",
        "options": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Task",
    "contentConstructor": {
        "file": "bbn\\Appui\\Task",
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db)\n  {\n    self::optionalInit();\n    if ( $user = bbn\\User::getInstance() ){\n      $this->user = $user->getName();\n      $this->id_user = $user->getId();\n      $this->is_dev = $user->isDev();\n      $this->mgr = new bbn\\User\\Manager($user);\n      $this->_get_references();\n      \/\/die(var_dump(BBN_APP_PATH, $this->references));\n      if ( is_dir(\\bbn\\Mvc::getAppPath()) && is_file(\\bbn\\Mvc::getAppPath().'plugins\/appui-task\/reference.php') ){\n        $f = include(\\bbn\\Mvc::getAppPath().'plugins\/appui-task\/reference.php');\n        if ( is_callable($f) ){\n          $this->template = $f;\n        }\n      }\n    }\n    $this->columns = array_keys($this->db->getColumns('bbn_tasks'));\n  }",
            "startLine": 49,
            "endLine": 67,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Db",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bbn\\Db $db)\n  {\n    $this->db = $db;\n  }",
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ]
            },
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "catCorrespondances": {
            "name": "catCorrespondances",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n      $cats = self::getOptionsTree('cats');\n      $res = [];\n      $opt->map(function ($a) use (&$res){\n        $res[] = [\n          'value' => $a['id'],\n          'text' => $a['text']\n        ];\n        $a['is_parent'] = !empty($a['items']);\n        if ( $a['is_parent'] ){\n          $a['expanded'] = true;\n        }\n        return $a;\n      }, $cats, 1);\n      X::sortBy($res, 'text', 'ASC');\n      return $res;\n    }\n    return false;\n  }",
            "startLine": 69,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getTasksOptions": {
            "name": "getTasksOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n      ($states = self::getAppuiOptionsIds('states')) &&\n      ($roles = self::getAppuiOptionsIds('roles')) &&\n      ($cats = self::catCorrespondances())\n    ){\n      return [\n        'states' => $states,\n        'roles' => $roles,\n        'cats' => $cats\n      ];\n    }\n  }",
            "startLine": 90,
            "endLine": 102,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 104,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 64,
                "endLine": 71,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getTitle": {
            "name": "getTitle",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_task, $simple = false)\n  {\n      return (!empty($simple) ? (X::_(\"Task\").\" \") : '').$title;\n    }\n    return '';\n  }",
            "startLine": 108,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "simple",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "categories": {
            "name": "categories",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 115,
            "endLine": 117,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "actions": {
            "name": "actions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 119,
            "endLine": 121,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "states": {
            "name": "states",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 123,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "roles": {
            "name": "roles",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 127,
            "endLine": 129,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "idCat": {
            "name": "idCat",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($code)\n  {\n  }",
            "startLine": 131,
            "endLine": 133,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "idAction": {
            "name": "idAction",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($code)\n  {\n  }",
            "startLine": 135,
            "endLine": 137,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "idState": {
            "name": "idState",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($code)\n  {\n  }",
            "startLine": 139,
            "endLine": 141,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "idRole": {
            "name": "idRole",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($code)\n  {\n  }",
            "startLine": 143,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getMine": {
            "name": "getMine",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($parent = NULL, $order = 'priority', $dir = 'ASC', $limit = 50, $start = 0)\n  {\n  }",
            "startLine": 147,
            "endLine": 149,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "parent",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "priority",
                    "default_name": ""
                },
                {
                    "name": "dir",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "ASC",
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 50,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "translateLog": {
            "name": "translateLog",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $log)\n  {\n    $user = bbn\\User::getInstance();\n    if ( $opt && $user && isset($log['action'], $log['id_user']) ){\n      $type = explode('_', $opt->code($log['action']));\n      $action = $user->getName($this->mgr->getUser($log['id_user'])).' '.$opt->text($log['action']);\n\n      $log['value'] = empty($log['value']) ? [] : json_decode($log['value']);\n      if ( !empty($log['value']) ){\n        $values = [];\n        switch ( $type[0] ){\n          case 'deadline':\n            foreach ( $log['value'] as $v ){\n              array_push($values, bbn\\Date::format($v, 's'));\n            }\n            break;\n          case 'title':\n            $values = $log['value'];\n            break;\n          case 'comment':\n            array_push($values, bbn\\Str::cut($this->db->getOne(\"\n            SELECT content\n            FROM bbn_notes_versions\n            WHERE id_note = ?\n            ORDER BY version DESC\n            LIMIT 1\",\n              $log['value'][0]), 80));\n            break;\n          case 'role':\n            if ( ($user = bbn\\User::getInstance()) && isset($log['value'][0], $log['value'][1]) ){\n              $values[0] = $user->getName($this->mgr->getUser($log['value'][0]));\n              $values[1] = $opt->text($log['value'][1]);\n            }\n            break;\n          case 'priority':\n            $values = $log['value'];\n            break;\n          case 'price':\n          case 'approved':\n            foreach ( $log['value'] as $i => $v ){\n              $values[] = number_format((float)$v, 2, ',', '.');\n            }\n            break;\n          default:\n            foreach ( $log['value'] as $v ){\n              array_push($values, $opt->text($v));\n            }\n        }\n        if ( !empty($values) ){\n          foreach ( $values as $i => $v ){\n            $values[$i] = '<strong>'.$v.'<\/strong>';\n          }\n          array_unshift($values, $action);\n          return \\sprintf(...$values);\n        }\n      }\n      return $action;\n    }\n    return false;\n  }",
            "startLine": 151,
            "endLine": 210,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "log",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLog": {
            "name": "getLog",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    $res = [];\n    foreach ( $logs as $log ){\n      array_push($res, [\n        'action' => $this->translateLog($log),\n        'id_user' => $log['id_user'],\n        'chrono' => $log['chrono']\n      ]);\n    }\n    return $res;\n  }",
            "startLine": 212,
            "endLine": 223,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getAllLogs": {
            "name": "getAllLogs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($limit = 100, $start = 0)\n  {\n    $res = [];\n    foreach ( $logs as $log ){\n      array_push($res, [\n        'action' => $this->translateLog($log),\n        'id_user' => $log['id_user'],\n        'chrono' => $log['chrono']\n      ]);\n    }\n    return $res;\n  }",
            "startLine": 225,
            "endLine": 236,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "limit",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 100,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getApprovedLog": {
            "name": "getApprovedLog",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if (\n      $this->exists($id) &&\n      ($action = $this->idAction('price_approved'))\n    ){\n      return $this->db->rselect('bbn_tasks_logs', [], [\n        'id_task' => $id,\n        'action' => $action\n      ], ['chrono' => 'DESC']) ?: [];\n    }\n    return [];\n  }",
            "startLine": 238,
            "endLine": 250,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPriceLog": {
            "name": "getPriceLog",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if ($this->exists($id)\n      && ($action_ins = $this->idAction('price_insert'))\n      && ($action_upd = $this->idAction('price_update'))\n      && ($action_del = $this->idAction('price_delete'))\n    ){\n      return $this->db->rselect([\n        'table' => 'bbn_tasks_logs',\n        'where' => [\n          'conditions' => [[\n            'field' => 'id_task',\n            'value' => $id\n          ], [\n            'logic' => 'OR',\n            'conditions' => [[\n              'field' => 'action',\n              'value' => $action_ins\n            ], [\n              'field' => 'action',\n              'value' => $action_upd\n            ], [\n              'field' => 'action',\n              'value' => $action_del\n            ]]\n          ]]\n        ],\n        'order' => [[\n          'field' => 'chrono',\n          'dir' => 'DESC'\n        ]]\n      ]) ?: [];\n    }\n  }",
            "startLine": 252,
            "endLine": 285,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getList": {
            "name": "getList",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($parent = NULL, $status = 'opened|ongoing|holding', $id_user = false, $order = 'priority', $dir = 'ASC', $limit = 1000, $start = 0)\n  {\n      'id' => 'bbn_tasks.id',\n      'last' => 'last',\n      'first' => 'first',\n      'duration' => 'duration',\n      'num_children' => 'num_children',\n      'title' => 'title',\n      'num_notes' => 'num_notes',\n      'role' => 'role',\n      'state' => 'state',\n      'priority' => 'priority'\n    ];\n    if ( !isset($orders_ok[$order]) ||\n      !bbn\\Str::isInteger($limit, $start) ||\n      (!\\is_null($parent) && !bbn\\Str::isInteger($parent))\n    ){\n      return false;\n    }\n    $dir = strtolower($dir) === 'asc' ? 'ASC' : 'DESC';\n    if ( !$id_user ){\n      $id_user = $this->id_user;\n    }\n    $where = [];\n    if ( !empty($status) ){\n      $statuses = [];\n      $tmp = explode(\"|\", $status);\n      foreach ( $tmp as $s ){\n        if ( $t = $this->idState($s) ){\n          array_push($statuses, $t);\n          array_push($where, \"`bbn_tasks`.`state` = $t\");\n        }\n      }\n    }\n    $where = \\count($where) ? implode( \" OR \", $where) : '';\n    $sql = \"\n    SELECT `role`, bbn_tasks.*,\n    FROM_UNIXTIME(MIN(bbn_tasks_logs.chrono)) AS `first`,\n    FROM_UNIXTIME(MAX(bbn_tasks_logs.chrono)) AS `last`,\n    {$this->references_select}\n    COUNT(children.id) AS num_children,\n    COUNT(DISTINCT bbn_tasks_notes.id_note) AS num_notes,\n    MAX(bbn_tasks_logs.chrono) - MIN(bbn_tasks_logs.chrono) AS duration\n    FROM bbn_tasks_roles\n      JOIN bbn_tasks\n        ON bbn_tasks_roles.id_task = bbn_tasks.id\n      JOIN bbn_tasks_logs\n        ON bbn_tasks_logs.id_task = bbn_tasks_roles.id_task\n      LEFT JOIN bbn_tasks_notes\n        ON bbn_tasks_notes.id_task = bbn_tasks_roles.id_task\n      LEFT JOIN bbn_tasks AS children\n        ON bbn_tasks_roles.id_task = children.id_parent\n      {$this->references_join}\n    WHERE bbn_tasks_roles.id_user = ?\".\n      (empty($where) ? '' : \" AND ($where)\").\"\n    AND bbn_tasks.active = 1\n    AND bbn_tasks.id_alias IS NULL\n    AND bbn_tasks.id_parent \".( \\is_null($parent) ? \"IS NULL\" : \"= $parent\" ).\"\n    GROUP BY bbn_tasks_roles.id_task\n    LIMIT $start, $limit\";\n\n    $opt = bbn\\Appui\\Option::getInstance();\n    $res = $this->db->getRows($sql, $id_user);\n    foreach ( $res as $i => $r ){\n      $res[$i]['hasChildren'] = $r['num_children'] ? true : false;\n    }\n    \/*\n    foreach ( $res as $i => $r ){\n      $res[$i]['details'] = $this->info($r['id']);\n    }\n    *\/\n    X::sortBy($res, $order, $dir);\n    return $res;\n  }",
            "startLine": 287,
            "endLine": 360,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "parent",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "status",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "opened|ongoing|holding",
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "priority",
                    "default_name": ""
                },
                {
                    "name": "dir",
                    "position": 4,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "ASC",
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 5,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 1000,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 6,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getSlist": {
            "name": "getSlist",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($search, $order = 'last', $dir = 'DESC', $limit = 1000, $start = 0)\n  {\n      'id' => 'bbn_tasks.id',\n      'last' => 'last',\n      'first' => 'first',\n      'duration' => 'duration',\n      'num_children' => 'num_children',\n      'title' => 'title',\n      'num_notes' => 'num_notes',\n      'role' => 'role',\n      'state' => 'state',\n      'priority' => 'priority'\n    ];\n    if ( !isset($orders_ok[$order]) || !bbn\\Str::isInteger($limit, $start) ){\n      return false;\n    }\n    $dir = strtolower($dir) === 'asc' ? 'ASC' : 'DESC';\n    $sql = \"\n    SELECT bbn_tasks.*, role,\n    FROM_UNIXTIME(MAX(bbn_tasks_logs.chrono)) AS `last_action`,\n    {$this->references_select}\n    COUNT(children.id) AS num_children,\n    COUNT(DISTINCT bbn_tasks_notes.id_note) AS num_notes,\n    IF(bbn_tasks.`state`=\".$this->idState('closed').\", MAX(bbn_tasks_logs.chrono), UNIX_TIMESTAMP()) - MIN(bbn_tasks_logs.chrono) AS duration\n    FROM bbn_tasks\n      JOIN bbn_tasks_logs\n        ON bbn_tasks_logs.id_task = bbn_tasks.id\n      LEFT JOIN bbn_tasks_notes\n        ON bbn_tasks_notes.id_task = bbn_tasks.id\n      LEFT JOIN bbn_tasks_roles\n        ON bbn_tasks_roles.id_task = bbn_tasks.id\n        AND bbn_tasks_roles.id_user = {$this->id_user}\n      LEFT JOIN bbn_notes_versions\n        ON bbn_notes_versions.id_note = bbn_tasks_notes.id_note\n      LEFT JOIN bbn_tasks AS children\n        ON children.id = bbn_tasks.id\n      {$this->references_join}\n    WHERE (bbn_tasks.title LIKE ?\n    OR bbn_notes_versions.content LIKE ?)\n    AND bbn_tasks.active = 1\n    GROUP BY bbn_tasks.id\n    LIMIT $start, $limit\";\n\n    $opt = bbn\\Appui\\Option::getInstance();\n    $res = $this->db->getRows($sql, \"%$search%\");\n    \/*\n    foreach ( $res as $i => $r ){\n      $res[$i]['type'] = $opt->itext($r['type']);\n      $res[$i]['state'] = $opt->itext($r['state']);\n      $res[$i]['role'] = $opt->itext($r['role']);\n      $res[$i]['hasChildren'] = $r['num_children'] ? true : false;\n    }\n    foreach ( $res as $i => $r ){\n      $res[$i]['details'] = $this->info($r['id']);\n    }\n    *\/\n    X::sortBy($res, $order, $dir);\n    return [\n      'data' => $res,\n      'total' => \\count($res)\n    ];\n  }",
            "startLine": 362,
            "endLine": 423,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "search",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "last",
                    "default_name": ""
                },
                {
                    "name": "dir",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "DESC",
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 1000,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getTree": {
            "name": "getTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id = NULL, $closed = false)\n  {\n    $res = [];\n    $all = $this->getList($id ?: null, $statuses, 5000);\n    foreach ( $all as $a ){\n      array_push($res, [\n        'id' => $a['id'],\n        'text' => $a['title'].' ('.bbn\\Date::format($a['first']).'-'.bbn\\Date::format($a['last']).')',\n        'is_parent' => $a['num_children'] ? true : false\n      ]);\n    }\n    return $res;\n  }",
            "startLine": 425,
            "endLine": 437,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "closed",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "addLink": {
            "name": "addLink",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  }",
            "startLine": 443,
            "endLine": 445,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "info": {
            "name": "info",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id, $with_comments = false)\n  {\n      $info['first'] = $this->db->selectOne('bbn_tasks_logs', 'chrono', [\n        'id_task' => $id,\n        'action' => $this->idAction('insert')\n      ], ['chrono' => 'ASC']);\n      $info['last'] = $this->db->selectOne('bbn_tasks_logs', 'chrono', [\n        'id_task' => $id,\n      ], ['chrono' => 'DESC']);\n      $info['roles'] = $this->infoRoles($id);\n      $info['notes'] = $with_comments ? $this->getComments($id) : $this->getCommentsIds($id);\n      $info['children'] = $this->getChildren($id);\n      $info['aliases'] = $this->db->rselectAll('bbn_tasks', ['id', 'title'], ['id_alias' => $id, 'active' => 1]);\n      $info['num_children'] = \\count($info['children']);\n      $info['has_children'] = !empty($info['num_children']);\n      $info['reference'] = false;\n      if ( $this->references ){\n        foreach ( $this->references as $table => $ref ){\n          foreach ( $ref['refs'] as $j => $r ){\n            if ( $id_ref = $this->db->selectOne($table, $j, [$ref['column'] => $id]) ){\n              $info['reference'] = $this->template === false ? $id_ref : \\call_user_func($this->template, $this->db, $id_ref, $table);\n              break;\n            }\n          }\n          if ( $info['reference'] ){\n            break;\n          }\n        }\n      }\n      if (!empty($info['id_parent'])) {\n        $info['parent'] = $this->info($info['id_parent'], $with_comments);\n      }\n      return $info;\n    }\n  }",
            "startLine": 447,
            "endLine": 481,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "with_comments",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getChildren": {
            "name": "getChildren",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ($children = $this->db->rselectAll([\n      'table' => 'bbn_tasks',\n      'fields' => [],\n      'where' => [\n        'conditions' => [[\n          'field' => 'id_parent',\n          'value' => $id\n        ], [\n          'field' => 'active',\n          'value' => 1\n        ], [\n          'logic' => 'OR',\n          'conditions' => [[\n            'field' => 'private',\n            'value' => 0\n          ], [\n            'conditions' => [[\n              'field' => 'private',\n              'value' => 1\n            ], [\n              'field' => 'id_user',\n              'value' => $this->id_user\n            ]]\n          ]]\n        ]]\n      ],\n      'order' => [\n        'creation_date' => 'DESC'\n      ]\n    ])) {\n      foreach ($children as $i => $c) {\n        $children[$i]['num_children'] = $this->db->count('bbn_tasks', ['id_parent' => $c['id'], 'active' => 1]);\n        $children[$i]['roles'] = $this->infoRoles($c['id']);\n      }\n      return $children;\n    }\n    return [];\n  }",
            "startLine": 483,
            "endLine": 522,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getState": {
            "name": "getState",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n      return $this->db->selectOne('bbn_tasks', 'state', ['id' => $id]);\n    }\n  }",
            "startLine": 524,
            "endLine": 528,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCommentsIds": {
            "name": "getCommentsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_task)\n  {\n      SELECT bbn_tasks_notes.id_note\n      FROM bbn_tasks_notes\n        JOIN bbn_notes_versions\n          ON bbn_notes_versions.id_note = bbn_tasks_notes.id_note\n      WHERE id_task = ?\n      GROUP BY bbn_tasks_notes.id_note\n      ORDER BY MAX(bbn_notes_versions.creation)\",\n      hex2bin($id_task));\n  }",
            "startLine": 530,
            "endLine": 540,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "search": {
            "name": "search",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $where = [], $sort = [], $start = 0, $num = 25)\n  {\n    $fields = [\n      'ids' => [\n        'id_parent' => 'bbn_tasks.id_parent',\n        'id_user' => 'bbn_tasks.id_user',\n        'state' => 'bbn_tasks.state',\n        'role' => 'my_role.role',\n        'type' => 'bbn_tasks.type'\n      ],\n      'nums' => [\n        'num_notes' => 'num_notes',\n        'duration' => 'duration',\n        'priority' => 'bbn_tasks.priority'\n      ],\n      'dates' => [\n        'deadline' => 'bbn_tasks.deadline',\n        'creation_date' => 'creation_date',\n        'last_action' => 'last_action'\n      ],\n      'texts' => [\n        'title' => 'bbn_tasks.title',\n        'text' => 'bbn_notes_versions.content'\n      ],\n      'users' => [\n        'my_user' => '',\n        'my_group' => ''\n      ],\n      'refs' => [\n        'reference' => 'reference'\n      ]\n    ];\n    $query = '';\n    $join = '';\n    $having = '';\n    $order = '';\n    $args1 = [];\n    $args2 = [];\n    foreach ( $where as $i => $w ){\n      if ( isset($fields['ids'][$w[0]]) ){\n        \/\/ For id_parent, no other search for now\n        if ( $w[0] === 'id_parent' ){\n          $query = \"AND \".$fields['ids'][$w[0]].\" = ? \";\n          $args = [$w[2]];\n          break;\n        }\n        else if ( \\is_array($w[2]) ){\n          $query .= \"AND ( \";\n          foreach ( $w[2] as $j => $v ){\n            if ( $j ){\n              $query .= \" OR \";\n            }\n            $query .= $fields['ids'][$w[0]].\" = ? \";\n            array_push($args1, $v);\n          }\n          $query .= \") \";\n        }\n        else{\n          $query .= \" AND \".$fields['ids'][$w[0]].\" $w[1] ? \";\n          array_push($args1, $w[2]);\n        }\n      }\n      else if ( isset($fields['dates'][$w[0]]) ){\n        if ( strpos($w[1], 'IS ') === 0 ){\n          $query .= \" AND \".$fields['dates'][$w[0]].\" $w[1] \";\n        }\n        else if ( bbn\\Date::validateSQL($w[2]) ){\n          if ( $w[0] !== 'deadline' ){\n            $having .= \" AND DATE(\".$fields['dates'][$w[0]].\") $w[1] ? \";\n            array_push($args2, $w[2]);\n          }\n          else{\n            $query .= \" AND DATE(\".$fields['dates'][$w[0]].\") $w[1] ? \";\n            array_push($args1, $w[2]);\n          }\n        }\n      }\n      else if ( isset($fields['nums'][$w[0]]) ){\n        if ( \\is_int($w[2]) ){\n          $query .= \" AND \".$fields['nums'][$w[0]].\" $w[1] ? \";\n          array_push($args1, $w[2]);\n        }\n      }\n      else if ( isset($fields['texts'][$w[0]]) ){\n        if ( !empty($w[2]) ){\n          if ( $w[0] === 'title' ){\n            $query .= \" AND bbn_tasks.title LIKE ? \";\n            array_push($args1, \"%$w[2]%\");\n          }\n          else if ( $w[0] === 'text' ){\n            $query .= \" AND (bbn_tasks.title LIKE ? OR bbn_notes_versions.content LIKE ?) \";\n            array_push($args1, \"%$w[2]%\", \"%$w[2]%\");\n            $join .= \"\n        LEFT JOIN bbn_tasks_notes\n          ON bbn_tasks_notes.id_task = bbn_tasks.id\";\n          }\n        }\n      }\n      else if ( isset($fields['users'][$w[0]]) ){\n        if ( !empty($w[2]) ){\n          if ( $w[0] === 'my_user' ){\n            $query .= \" AND user_role.id_user = ?\";\n            array_push($args1, hex2bin($w[2]));\n            $join .= \"\n        JOIN bbn_tasks_roles AS user_role\n          ON user_role.id_task = bbn_tasks.id\";\n          }\n          else if ( ($w[0] === 'my_group') && ($usr = bbn\\User::getInstance()) ){\n            $usr_table = $usr->getTables()['users'];\n            $usr_fields = $usr->getFields('users');\n            $query .= \" AND `\".$usr_table.\"`.`\".$usr_fields['id_group'].\"` = ? \";\n            array_push($args1, hex2bin($w[2]));\n            $join .= \"\n        JOIN bbn_tasks_roles AS group_role\n          ON group_role.id_task = bbn_tasks.id\n        JOIN `\".$usr_table.\"`\n          ON bbn_tasks_roles.id_user = `\".$usr_table.\"`.`\".$usr_fields['id'].\"`\";\n          }\n        }\n      }\n      else if ( isset($fields['refs'][$w[0]]) ){\n        if ( \\is_int($w[2]) ){\n          $having .= \" AND \".$fields['refs'][$w[0]].\" $w[1] ? \";\n          array_push($args1, $w[2]);\n        }\n      }\n    }\n    foreach ( $fields as $i => $f ){\n      foreach ( $f as $n => $g ){\n        if ( isset($sort[$n]) ){\n          $order = '`'.$n.'`'.( strtolower($sort[$n]) === 'desc' ? ' DESC' : ' ASC').', ';\n        }\n      }\n    }\n    if ( !empty($order) ){\n      $order = \"ORDER BY \".substr($order, 0, -2);\n    }\n    $args0 = [\n      hex2bin($this->idState('closed')),\n      hex2bin($this->id_user)\n    ];\n    $sql = \"\n      SELECT my_role.role, bbn_tasks.*,\n      FROM_UNIXTIME(MAX(bbn_tasks_logs.chrono)) AS `last_action`,\n      COUNT(children.id) AS num_children,\n      COUNT(DISTINCT bbn_tasks_notes.id_note) AS num_notes,\n      {$this->references_select}\n      IF(bbn_tasks.`state` = ?, MAX(bbn_tasks_logs.chrono), UNIX_TIMESTAMP()) - MIN(bbn_tasks_logs.chrono) AS duration\n      FROM bbn_tasks\n        LEFT JOIN bbn_tasks_roles AS my_role\n          ON my_role.id_task = bbn_tasks.id\n          AND my_role.id_user = ?\n        LEFT JOIN bbn_tasks_roles\n          ON bbn_tasks_roles.id_task = bbn_tasks.id\n        JOIN bbn_tasks_logs\n          ON bbn_tasks_logs.id_task = bbn_tasks_roles.id_task\n        LEFT JOIN bbn_tasks_notes\n          ON bbn_tasks_notes.id_task = bbn_tasks.id\n        LEFT JOIN bbn_tasks AS children\n          ON bbn_tasks_roles.id_task = children.id_parent\n        $join\n        {$this->references_join}\n      WHERE bbn_tasks.active = 1\n      $query\n      GROUP BY bbn_tasks.id\n      HAVING 1\n      $having\n      $order\";\n    \/\/die(X::dump($sql));\n    if ( !isset($args) ){\n      $args = array_merge($args0, $args1, $args2);\n    }\n    $data = $this->db->getRows($sql.\" LIMIT $start, $num\", $args);\n    \/** @var bbn\\User $user *\/\n    $user = bbn\\User::getInstance();\n    foreach ( $data as $i => $d ){\n      if ( $this->template ){\n        if ( $d['reference'] ){\n          \/** @todo How do I get the t1able with the way I made the request??! *\/\n          $data[$i]['reference'] = \\call_user_func($this->template, $this->db, $d['reference'], '');\n        }\n      }\n    }\n    return [\n      'data' => $data,\n      'total' => $this->db->getOne(\"SELECT COUNT(*) FROM ($sql) AS t\", $args),\n      'start' => $start,\n      'limit' => $num\n    ];\n  }",
            "startLine": 558,
            "endLine": 747,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "sort",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 25,
                    "default_name": ""
                }
            ]
        },
        "searchInTask": {
            "name": "searchInTask",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n  }",
            "startLine": 749,
            "endLine": 751,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fullInfo": {
            "name": "fullInfo",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n  }",
            "startLine": 753,
            "endLine": 755,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "infoRoles": {
            "name": "infoRoles",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if (\n      ($opt = bbn\\Appui\\Option::getInstance()) &&\n      ($roles = self::getAppuiOptions('roles'))\n    ){\n      $all = $this->db->rselectAll(\n        'bbn_tasks_roles',\n        [],\n        ['id_task' => $id],\n        ['role' => 'ASC']);\n      $n = false;\n      foreach ( $all as $a ){\n        $code = X::getField($roles, ['id' => $a['role']], 'code');\n        if ( $n !== $code ){\n          $n = $code;\n          $r[$n] = [];\n        }\n        array_push($r[$n], $a['id_user']);\n      }\n    }\n    return $r;\n  }",
            "startLine": 757,
            "endLine": 779,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hasRole": {
            "name": "hasRole",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_task, $id_user)\n  {\n      $r = $this->db->selectOne('bbn_tasks_roles', 'role', ['id_task' => $id_task, 'id_user' => $id_user]);\n      if ( $r ){\n        return $opt->code($r);\n      }\n    }\n    return false;\n  }",
            "startLine": 781,
            "endLine": 789,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getComments": {
            "name": "getComments",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_task)\n  {\n      $note = new \\bbn\\Appui\\Note($this->db);\n      $ids = $this->getCommentsIds($id_task);\n      $r = [];\n      foreach ( $ids as $id_note ){\n        array_push($r, $note->get($id_note));\n      }\n      return $r;\n    }\n    return false;\n  }",
            "startLine": 791,
            "endLine": 802,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getComment": {
            "name": "getComment",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_task, $id_note)\n  {\n      $note = new \\bbn\\Appui\\Note($this->db);\n      return $note->get($id_note);\n    }\n    return false;\n  }",
            "startLine": 804,
            "endLine": 810,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_note",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUsers": {
            "name": "getUsers",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_task)\n  {\n  }",
            "startLine": 812,
            "endLine": 814,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getDeciders": {
            "name": "getDeciders",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_task)\n  {\n      $this->exists($id_task) &&\n      ($role = $this->idRole('deciders'))\n    ){\n      return $this->db->getColumnValues('bbn_tasks_roles', 'id_user', [\n        'id_task' => $id_task,\n        'role' => $role\n      ]);\n    }\n    return false;\n  }",
            "startLine": 816,
            "endLine": 827,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "comment": {
            "name": "comment",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_task, array $cfg)\n  {\n      $note = new \\bbn\\Appui\\Note($this->db);\n      $r = $note->insert(\n        (empty($cfg['title']) ? '' : $cfg['title']),\n        (empty($cfg['text']) ? '' : $cfg['text']),\n        \\bbn\\Appui\\Note::getAppuiOptionId('tasks', 'types')\n      );\n      if ( $r ){\n        $this->db->insert('bbn_tasks_notes', [\n          'id_note' => $r,\n          'id_task' => $id_task\n        ]);\n        if ( !empty($cfg['files']) ){\n          $filename = '';\n          $extension = '';\n          $length = 0;\n          foreach ( $cfg['files'] as $f ){\n            $ext = \\bbn\\Str::fileExt($f, true);\n            if (\n              (\\strlen($ext[0]) < $length) ||\n              ($ext[1] !== $extension) ||\n              (strpos($ext[0], $filename) !== 0) ||\n              !preg_match('\/_h[\\d]+\/i', substr($ext[0], $length))\n            ){\n              $filename = $ext[0];\n              $extension = $ext[1];\n              $length = \\strlen($filename);\n              $note->addMedia($r, $f);\n            }\n          }\n        }\n        if ( !empty($cfg['links']) ){\n          foreach ( $cfg['links'] as $f ){\n            $ext = \\bbn\\Str::fileExt($f['image'], true);\n            if ( !preg_match('\/_h[\\d]+\/i', substr($ext[0], 0)) ){\n              $note->addMedia(\n                $r,\n                $f['image'],\n                json_encode(['url' => $f['url'], 'description' => $f['desc']]),\n                $f['title'],\n                'link'\n              );\n            }\n          }\n        }\n        $this->addLog($id_task, 'comment_insert', [$this->id_user, empty($cfg['title']) ? $cfg['text'] : $cfg['title']]);\n      }\n      return $r;\n    }\n    return false;\n  }",
            "startLine": 829,
            "endLine": 880,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addLog": {
            "name": "addLog",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_task, $action, array $value = [])\n  {\n      $data = [\n        'id_task' => $id_task,\n        'id_user' => $this->id_user,\n        'action' => \\bbn\\Str::isUid($action) ? $action : $this->idAction($action),\n        'value' => empty($value) ? '' : json_encode($value),\n        'chrono' => empty($this->date) ? microtime(true) : number_format((float)strtotime($this->date), 4, '.', '')\n      ];\n      $this->notify($data);\n      return $this->db->insert('bbn_tasks_logs', $data);\n    }\n    return false;\n  }",
            "startLine": 882,
            "endLine": 895,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "action",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "notify": {
            "name": "notify",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $data)\n  {\n      $text = $this->translateLog($data);\n      $users = array_filter($this->getUsers($data['id_task']), function($a) use($data){\n        return $a !== $data['id_user'];\n      });\n      $notif = new bbn\\Appui\\Notification($this->db);\n      return $notif->insert($title, $text, null, $users);\n    }\n    return false;\n  }",
            "startLine": 897,
            "endLine": 907,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "exists": {
            "name": "exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_task)\n  {\n  }",
            "startLine": 909,
            "endLine": 911,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addRole": {
            "name": "addRole",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_task, $role, $id_user = NULL)\n  {\n      if ( !bbn\\Str::isUid($role) ){\n        \/*if ( substr($role, -1) !== 's' ){\n          $role .= 's';\n        }*\/\n        $role = $this->idRole($role);\n      }\n      if ( bbn\\Str::isUid($role) && ($id_user || $this->id_user) ){\n        if ( $this->db->insert('bbn_tasks_roles', [\n          'id_task' => $id_task,\n          'id_user' => $id_user ?: $this->id_user,\n          'role' => $role\n        ]) ){\n          $this->addLog($id_task, 'role_insert', [$id_user ?: $this->id_user, $role]);\n          return 1;\n        }\n      }\n    }\n    return 0;\n  }",
            "startLine": 913,
            "endLine": 933,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "role",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "removeRole": {
            "name": "removeRole",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_task, $id_user = NULL)\n  {\n      $role = $this->db->selectOne('bbn_tasks_roles', 'role', [\n        'id_task' => $id_task,\n        'id_user' => $id_user ?: $this->id_user\n      ]);\n      if ( $this->db->delete('bbn_tasks_roles', [\n        'id_task' => $id_task,\n        'id_user' => $id_user ?: $this->id_user\n      ]) ){\n        $this->addLog($id_task, 'role_delete', [$id_user ?: $this->id_user, $role]);\n        return 1;\n      }\n    }\n    return 0;\n  }",
            "startLine": 935,
            "endLine": 950,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "setDate": {
            "name": "setDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($date)\n  {\n    return $this;\n  }",
            "startLine": 952,
            "endLine": 955,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "date",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "unsetDate": {
            "name": "unsetDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this;\n  }",
            "startLine": 957,
            "endLine": 960,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "setUser": {
            "name": "setUser",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_user)\n  {\n      $this->id_user = $id_user;\n    }\n    return $this; \n  }",
            "startLine": 962,
            "endLine": 967,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "unsetUser": {
            "name": "unsetUser",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n      $this->id_user = $user->getId();\n    }\n    return $this;\n  }",
            "startLine": 969,
            "endLine": 974,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "insert": {
            "name": "insert",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n      if ( $this->db->insert('bbn_tasks', [\n        'title' => $cfg['title'],\n        'type' => $cfg['type'],\n        'priority' => $cfg['priority'] ?? 5,\n        'id_parent' => $cfg['id_parent'] ?? NULL,\n        'id_alias' => $cfg['id_alias'] ?? NULL,\n        'deadline' => $cfg['deadline'] ?? NULL,\n        'id_user' => $this->id_user ?: NULL,\n        'state' => $cfg['state'] ?? $this->idState('opened'),\n        'creation_date' => $this->date ?: date('Y-m-d H:i:s'),\n        'private' => $cfg['private'] ?? 0,\n        'cfg' => \\json_encode(['widgets' => []])\n      ]) ){\n        $id = $this->db->lastId();\n        $this->addLog($id, 'insert');\n        $this->addRole($id, 'managers');\n        \/*\n        $subject = \"Nouveau bug post\u00e9 par {$this->user}\";\n        $text = \"<p>{$this->user} a post\u00e9 un nouveau bug<\/p>\".\n          \"<p><strong>$title<\/strong><\/p>\".\n          \"<p>\".nl2br($text).\"<\/p>\".\n          \"<p><em>Rendez-vous dans votre interface APST pour lui r\u00e9pondre<\/em><\/p>\";\n        $this->email($id, $subject, $text);\n        *\/\n        return $id;\n      }\n    }\n    return false;\n  }",
            "startLine": 976,
            "endLine": 1006,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "update": {
            "name": "update",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_task, $prop, $value)\n  {\n      $ok = false;\n      if ( $prop === 'deadline' ){\n        $prev = $this->db->selectOne('bbn_tasks', 'deadline', ['id' => $id_task]);\n        if ( !$prev && $value ){\n          $this->addLog($id_task, 'deadline_insert', [$value]);\n          $ok = 1;\n        }\n        else if ( $prev && !$value ){\n          $this->addLog($id_task, 'deadline_delete', [$value]);\n          $ok = 1;\n        }\n        if ( $prev && $value && ($prev !== $value) ){\n          $this->addLog($id_task, 'deadline_update', [$prev, $value]);\n          $ok = 1;\n        }\n      }\n      else if ( $prop === 'price' ){\n        $prev = $this->db->selectOne('bbn_tasks', 'price', ['id' => $id_task]);\n        if ( !$prev && $value ){\n          $this->addLog($id_task, 'price_insert', [$value]);\n          $ok = 1;\n        }\n        else if ( $prev && !$value ){\n          $this->addLog($id_task, 'price_delete', [$prev]);\n          $ok = 1;\n        }\n        if ( $prev && $value && ($prev !== $value) ){\n          $this->addLog($id_task, 'price_update', [$prev, $value]);\n          $ok = 1;\n        }\n      }\n      else if ( $prop === 'state' ){\n        $states = $this->states();\n        switch ( $value ){\n          case $states['closed']:\n            $ok = 1;\n            $this->addLog($id_task, 'task_close');\n            $this->stopAllTracks($id_task);\n            break;\n          case $states['holding']:\n            $ok = 1;\n            $this->addLog($id_task, 'task_hold');\n            $this->stopAllTracks($id_task);\n            break;\n          case $states['ongoing']:\n            $ok = 1;\n            $this->addLog($id_task, 'task_start');\n            break;\n          case $states['opened']:\n            $ok = 1;\n            $this->addLog($id_task, 'task_reopen');\n            break;\n          case $states['unapproved']:\n            $this->addLog($id_task, 'task_unapproved');\n            $this->stopAllTracks($id_task);\n            $ok = 1;\n            break;\n        }\n      }\n      else if ( $prev = $this->db->selectOne('bbn_tasks', $prop, ['id' => $id_task]) ){\n        $ok = 1;\n        $this->addLog($id_task, $prop.'_update', [$prev, $value]);\n      }\n      if ( $ok ){\n        return $this->db->update('bbn_tasks', [$prop => $value], ['id' => $id_task]);\n      }\n    }\n    return false;\n  }",
            "startLine": 1008,
            "endLine": 1078,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "prop",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n      ($info = $this->info($id)) &&\n      $this->db->update('bbn_tasks', ['active' => 0], ['id' => $id]) \n    ){\n      $this->addLog($id, 'delete');\n      \/* $subject = \"Suppression du bug $info[title]\";\n      $text = \"<p>{$this->user} a supprim\u00e9 le bug<br><strong>$info[title]<\/strong><\/p>\";\n      $this->email($id, $subject, $text); *\/\n      return $id;\n    }\n  }",
            "startLine": 1080,
            "endLine": 1091,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "approve": {
            "name": "approve",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n      $this->exists($id) &&\n      ($info = $this->db->select('bbn_tasks', ['state', 'price'], ['id' => $id])) &&\n      ($unapproved = $this->idState('unapproved')) &&\n      ($deciders = $this->getDeciders($id)) &&\n      in_array($this->id_user, $deciders)\n    ){\n      return ($info->state === $unapproved) && $this->addLog($id, 'price_approved', [$info->price]);\n    }\n    return false;\n  }",
            "startLine": 1093,
            "endLine": 1104,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "up": {
            "name": "up",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n      return $this->update($id, $info['title'], $info['status'], $info['priority']-1, $info['deadline']);\n    }\n  }",
            "startLine": 1106,
            "endLine": 1110,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "down": {
            "name": "down",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n      return $this->update($id, $info['title'], $info['status'], $info['priority']+1, $info['deadline']);\n    }\n  }",
            "startLine": 1112,
            "endLine": 1116,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "subscribe": {
            "name": "subscribe",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n  }",
            "startLine": 1118,
            "endLine": 1120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "unsubscribe": {
            "name": "unsubscribe",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n  }",
            "startLine": 1122,
            "endLine": 1124,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "ping": {
            "name": "ping",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n  }",
            "startLine": 1126,
            "endLine": 1128,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "startTrack": {
            "name": "startTrack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_task, $id_user = false)\n  {\n      !$this->getActiveTrack($id_user) &&\n      ($ongoing = $this->idState('ongoing')) &&\n      ($ongoing === $this->getState($id_task)) &&\n      ($role = $this->hasRole($id_task, $id_user ?: $this->id_user)) &&\n      (($role === 'managers') || ($role === 'workers'))\n    ){\n      return $this->db->insert('bbn_tasks_sessions', [\n        'id_task' => $id_task,\n        'id_user' => $id_user ?: $this->id_user,\n        'start' => date('Y-m-d H:i:s')\n      ]);\n    }\n    return false;\n  }",
            "startLine": 1130,
            "endLine": 1145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "stopTrack": {
            "name": "stopTrack",
            "summary": "Stops a track.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_task, $message = false, $id_user = false)\n  {\n    $now = time();\n    if (\n      ($active_track = $this->getActiveTrack($id_user)) &&\n      ($active_track['id_task'] === $id_task)\n    ){\n      $ok = true;\n      if (\n        !empty($message) &&\n        !($id_note = $this->comment($id_task, [\n          'title' => X::_('Report tracker').' '.date('d M Y H:i', strtotime($active_track['start'])).' - '.date('d M Y H:i', $now),\n          'text' => $message\n        ]))\n      ){\n        $ok = false;\n      }\n      if ( $ok ){\n        $ok = $this->db->update('bbn_tasks_sessions', [\n          'length' => $now - strtotime($active_track['start']),\n          'id_note' => $id_note ?: NULL\n        ], [\n          'id' => $active_track['id']\n        ]);\n      }\n    }\n    return (bool)$ok;\n  }",
            "startLine": 1155,
            "endLine": 1182,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "task The task's ID"
                },
                {
                    "name": "message",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "The message to attach to track (optional)"
                },
                {
                    "name": "id_user",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "user The track's user. If you give 'false', it will use the current user"
                }
            ]
        },
        "stopAllTracks": {
            "name": "stopAllTracks",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n      UPDATE bbn_tasks_sessions\n      SET `length` = TO_SECONDS(NOW())-TO_SECONDS(start)\n      WHERE id_task = ?\n        AND `length` IS NULL\",\n      hex2bin($id)\n    );\n    return $this->db->getOne(\"\n      SELECT COUNT(*)\n      FROM bbn_tasks_sessions\n      WHERE id_task = ?\n        AND `length` IS NULL\",\n      hex2bin($id)\n    ) === 0;\n  }",
            "startLine": 1184,
            "endLine": 1199,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getActiveTrack": {
            "name": "getActiveTrack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_user = false)\n  {\n      SELECT *\n      FROM bbn_tasks_sessions\n      WHERE id_user = ?\n        AND length IS NULL\",\n      $id_user ? hex2bin($id_user) : hex2bin($this->id_user)\n    );\n  }",
            "startLine": 1201,
            "endLine": 1209,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getTrack": {
            "name": "getTrack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_task)\n  {\n      SELECT *\n      FROM bbn_tasks_sessions\n      WHERE id_user = ?\n        AND id_task = ?\n        AND length IS NULL\",\n      hex2bin($this->id_user),\n      hex2bin($id_task)\n    );\n  }",
            "startLine": 1211,
            "endLine": 1221,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTracks": {
            "name": "getTracks",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_task)\n  {\n      SELECT id_user, SUM(length) AS total_time, COUNT(id_note) as num_notes\n      FROM bbn_tasks_sessions\n      WHERE id_task = ?\n      GROUP BY id_user\",\n      hex2bin($id_task)\n    );\n  }",
            "startLine": 1223,
            "endLine": 1231,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTasksTracks": {
            "name": "getTasksTracks",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_user)\n  {\n      ($manager = $this->idRole('managers')) &&\n      ($worker = $this->idRole('workers')) &&\n      ($ongoing = $this->idState('ongoing'))\n    ){\n      return $this->db->getRows(\"\n        SELECT bbn_tasks.*\n        FROM bbn_tasks\n        \tJOIN bbn_tasks_roles\n        \t\tON bbn_tasks_roles.id_task = bbn_tasks.id\n        \t\tAND bbn_tasks_roles.id_user = ?\n        \t\tAND (\n              bbn_tasks_roles.role = ?\n        \t\t\tOR bbn_tasks_roles.role = ?\n        \t\t)\n        WHERE bbn_tasks.active = 1\n          AND bbn_tasks.state = ?\n        GROUP BY bbn_tasks.id\",\n        hex2bin($id_user),\n        hex2bin($manager),\n        hex2bin($worker),\n        hex2bin($ongoing)\n      );\n    }\n  }",
            "startLine": 1233,
            "endLine": 1258,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getInvoice": {
            "name": "getInvoice",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_task)\n  {\n      return $this->db->rselect('bbn_invoices', [], ['id' => $id_invoice]);\n    }\n    return false;\n  }",
            "startLine": 1260,
            "endLine": 1265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCfg": {
            "name": "getCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ($cfg = $this->db->selectOne('bbn_tasks', 'cfg', ['id' => $id])) {\n      return \\json_decode($cfg, true);\n    }\n    return [];\n  }",
            "startLine": 1267,
            "endLine": 1273,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setCfg": {
            "name": "setCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, array $cfg)\n  {\n    return (bool)$this->db->update('bbn_tasks', ['cfg' => \\json_encode($cfg)], ['id' => $id]);\n  }",
            "startLine": 1275,
            "endLine": 1278,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addWidget": {
            "name": "addWidget",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, string $code)\n  {\n    return $this->toggleWidget($id, $code);\n  }",
            "startLine": 1280,
            "endLine": 1283,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "removeWidget": {
            "name": "removeWidget",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, string $code)\n  {\n    return $this->toggleWidget($id, $code, false);\n  }",
            "startLine": 1285,
            "endLine": 1288,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setGit": {
            "name": "setGit",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, int $idGit)\n  {\n    return (bool)$this->db->update('bbn_tasks', ['id_git' => $idGit], ['id' => $id]);\n  }",
            "startLine": 1290,
            "endLine": 1293,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "idGit",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 50,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 50,
                "endLine": 57,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->error;\n  }",
            "startLine": 85,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 85,
                "endLine": 88,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 91,
            "endLine": 94,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 91,
                "endLine": 94,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 97,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 97,
                "endLine": 106,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 114,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 114,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getReferences": {
            "name": "getReferences",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return [\n      'select' => $this->references_select,\n      'join' => $this->references_join\n    ];\n  }",
            "startLine": 55,
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "startLine": 150,
            "endLine": 154,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getAppuiRoot": {
            "name": "getAppuiRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_appui_id;\n  }",
            "startLine": 157,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "startLine": 164,
            "endLine": 172,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "parent": false,
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 181,
            "endLine": 184,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...self::_treat_args(func_get_args())), function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 187,
            "endLine": 196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "startLine": 199,
            "endLine": 202,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 205,
            "endLine": 208,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 211,
            "endLine": 214,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 217,
            "endLine": 220,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionId": {
            "name": "getAppuiOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 229,
            "endLine": 232,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsIds": {
            "name": "getAppuiOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(\n          ...self::_treat_args(func_get_args(), true)\n        ),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 235,
            "endLine": 247,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTree": {
            "name": "getAppuiOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args(), true)) ) ? $tree['items'] : [];\n  }",
            "startLine": 250,
            "endLine": 253,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptions": {
            "name": "getAppuiOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 256,
            "endLine": 259,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOption": {
            "name": "getAppuiOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 262,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTextValue": {
            "name": "getAppuiOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui\\Task",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getAppuiOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 268,
            "endLine": 271,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        }
    },
    "properties": null,
    "staticProperties": {
        "optional_is_init": false,
        "option_root_id": null,
        "option_appui_id": null
    },
    "constants": null,
    "summary": "",
    "description": "",
    "description_parts": []
}