{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Appui\\Task",
    "namespace": true,
    "realName": "Task",
    "realNamespace": "bbn\\Appui",
    "traits": [
        "bbn\\Models\\Tts\\References",
        "bbn\\Models\\Tts\\Optional"
    ],
    "interfaces": [],
    "fileName": "\/Appui\/Task.php",
    "startLine": 14,
    "endLine": 2753,
    "numMethods": 141,
    "numProperties": 22,
    "numConstants": 0,
    "numStaticProperties": 2,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "optional_is_init": false,
        "option_root_id": null,
        "columns": null,
        "tokensConfig": null,
        "noteCls": null,
        "template": false,
        "id_user": null,
        "is_dev": null,
        "mgr": null,
        "user": null,
        "date": false,
        "db": null,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": [],
        "references": null,
        "references_select": "",
        "references_join": "",
        "options": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Appui",
    "shortName": "Task",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "email": {
            "name": "email",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function email($id_task, $subject, $text){\n    \/*\n    $users = array_unique(array_merge($this->get_ccs($id_task), $this->mgr->getUsers(1)));\n    foreach ( $users as $u ){\n      if ( ($u !== $this->id_user) && ($email = $this->mgr->getEmail($u)) ){\n        $this->db->insert('apst_accuses', [\n          'email' => $email,\n          'titre' => $subject,\n          'texte' => $text,\n          'etat' => 'pret'\n        ]);\n      }\n    }\n    *\/\n  }",
            "parent": false,
            "trait": false,
            "startLine": 34,
            "endLine": 48,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "email",
            "returns": [],
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "subject",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "options": {
            "name": "options",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function options(){\n    return \\bbn\\Appui\\Option::getInstance();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 50,
            "endLine": 52,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "options",
            "returns": [],
            "arguments": []
        },
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(bbn\\Db $db){\n    parent::__construct($db);\n    self::optionalInit();\n    if ( $user = bbn\\User::getInstance() ){\n      $this->user = $user->getName();\n      $this->id_user = $user->getId();\n      $this->is_dev = $user->isDev();\n      $this->mgr = new bbn\\User\\Manager($user);\n      $this->_get_references();\n      \/\/die(var_dump(BBN_APP_PATH, $this->references));\n      if ( is_dir(\\bbn\\Mvc::getAppPath()) && is_file(\\bbn\\Mvc::getAppPath().'plugins\/appui-task\/reference.php') ){\n        $f = include(\\bbn\\Mvc::getAppPath().'plugins\/appui-task\/reference.php');\n        if ( is_callable($f) ){\n          $this->template = $f;\n        }\n      }\n    }\n    $this->columns = array_keys($this->db->getColumns('bbn_tasks'));\n    $this->noteCls = new \\bbn\\Appui\\Note($this->db);\n  }",
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Db",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Db.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function __construct(dbClass $db)\n  {\n    $this->db = $db;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "__construct",
                "returns": [],
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "type_arr": [
                            "bbn\\Db"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ],
                "doc": {
                    "description": "Constructor.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "dbClass",
                            "name": "$db",
                            "description": "A database connection"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Constructor.\n   *\n   * @param dbClass $db A database connection\n   *\/"
            },
            "trait": false,
            "startLine": 54,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "catCorrespondances": {
            "name": "catCorrespondances",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function catCorrespondances(){\n    if ( $opt = bbn\\Appui\\Option::getInstance() ){\n      $cats = self::getOptionsTree('cats');\n      $res = [];\n      $opt->map(function ($a) use (&$res){\n        $res[] = [\n          'value' => $a['id'],\n          'text' => $a['text']\n        ];\n        $a['is_parent'] = !empty($a['items']);\n        if ( $a['is_parent'] ){\n          $a['expanded'] = true;\n        }\n        return $a;\n      }, $cats, 1);\n      X::sortBy($res, 'text', 'ASC');\n      return $res;\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 75,
            "endLine": 94,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "catCorrespondances",
            "returns": [],
            "arguments": []
        },
        "getTasksOptions": {
            "name": "getTasksOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getTasksOptions(){\n    if (\n      ($states = self::getOptionsIds('states')) &&\n      ($roles = self::getOptionsIds('roles')) &&\n      ($cats = self::catCorrespondances())\n    ){\n      return [\n        'states' => $states,\n        'roles' => $roles,\n        'cats' => $cats\n      ];\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 96,
            "endLine": 108,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getTasksOptions",
            "returns": [],
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check(){\n    return isset($this->user);\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 110,
            "endLine": 112,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": []
        },
        "getTitle": {
            "name": "getTitle",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTitle(string $idTask, bool $simple = false): string\n  {\n    if ($title = $this->db->selectOne([\n      'table' => 'bbn_tasks',\n      'fields' => ['bbn_notes_versions.title'],\n      'join' => [[\n        'table' => 'bbn_notes_versions',\n        'on' => [\n          'conditions' => [[\n            'field' => 'bbn_notes_versions.id_note',\n            'exp' => 'bbn_tasks.id_note'\n          ], [\n            'field' => 'bbn_notes_versions.latest',\n            'value' => 1\n          ]]\n        ]\n      ]],\n      'where' => [\n        'conditions' => [[\n          'field' => 'bbn_tasks.id',\n          'value' => $idTask\n        ]]\n      ]\n    ])) {\n      return (!empty($simple) ? (X::_(\"Task\").\" \") : '').$title;\n    }\n    return '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 114,
            "endLine": 141,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getTitle",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "idTask",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "simple",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "setTitle": {
            "name": "setTitle",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setTitle(string $idTask, string $title): bool\n  {\n    if (($idNote = $this->getIdNote($idTask))\n      && ($n = $this->noteCls->get($idNote))\n      && ($title !== $n['title'])\n    ) {\n      return (bool)$this->noteCls->insertVersion($idNote, $title, $n['content'], $this->noteCls->getExcerpt($title, $n['content']));\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 143,
            "endLine": 152,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setTitle",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "idTask",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getContent": {
            "name": "getContent",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getContent($id_task){\n    return $this->db->selectOne([\n      'table' => 'bbn_tasks',\n      'fields' => ['bbn_notes_versions.content'],\n      'join' => [[\n        'table' => 'bbn_notes_versions',\n        'on' => [\n          'conditions' => [[\n            'field' => 'bbn_notes_versions.id_note',\n            'exp' => 'bbn_tasks.id_note'\n          ], [\n            'field' => 'bbn_notes_versions.latest',\n            'value' => 1\n          ]]\n        ]\n      ]],\n      'where' => [\n        'conditions' => [[\n          'field' => 'bbn_tasks.id',\n          'value' => $id_task\n        ]]\n      ]\n    ]) ?: '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 154,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getContent",
            "returns": [],
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setContent": {
            "name": "setContent",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setContent(string $idTask, string $content): bool\n  {\n    if (($idNote = $this->getIdNote($idTask))\n      && ($n = $this->noteCls->get($idNote))\n      && ($content !== $n['content'])\n    ) {\n      return (bool)$this->noteCls->insertVersion($idNote, $n['title'], $content, $this->noteCls->getExcerpt($n['title'], $content));\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 179,
            "endLine": 188,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setContent",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "idTask",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getType": {
            "name": "getType",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getType(string $idTask): ?string\n  {\n    return $this->db->selectOne('bbn_tasks', 'type', ['id' => $idTask]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 190,
            "endLine": 193,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getType",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "idTask",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "categories": {
            "name": "categories",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function categories(){\n    return self::getOptionsTree('cats');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 195,
            "endLine": 197,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "categories",
            "returns": [],
            "arguments": []
        },
        "actions": {
            "name": "actions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function actions(){\n    return self::getOptionsIds('actions');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 199,
            "endLine": 201,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "actions",
            "returns": [],
            "arguments": []
        },
        "states": {
            "name": "states",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function states(){\n    return self::getOptionsIds('states');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 203,
            "endLine": 205,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "states",
            "returns": [],
            "arguments": []
        },
        "roles": {
            "name": "roles",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function roles(){\n    return self::getOptionsIds('roles');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 207,
            "endLine": 209,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "roles",
            "returns": [],
            "arguments": []
        },
        "idCat": {
            "name": "idCat",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function idCat($code){\n    return self::getOptionId($code, 'cats');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 211,
            "endLine": 213,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "idCat",
            "returns": [],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "idAction": {
            "name": "idAction",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function idAction($code){\n    return self::getOptionId($code, 'actions');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 215,
            "endLine": 217,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "idAction",
            "returns": [],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "idState": {
            "name": "idState",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function idState($code){\n    return self::getOptionId($code, 'states');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 219,
            "endLine": 221,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "idState",
            "returns": [],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "idRole": {
            "name": "idRole",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function idRole($code){\n    return self::getOptionId($code, 'roles');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 223,
            "endLine": 225,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "idRole",
            "returns": [],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "idPrivilege": {
            "name": "idPrivilege",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function idPrivilege($code){\n    return self::getOptionId($code, 'privileges');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 227,
            "endLine": 229,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "idPrivilege",
            "returns": [],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getMine": {
            "name": "getMine",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMine($parent = null, $order = 'priority', $dir = 'ASC', $limit = 50, $start = 0){\n    return $this->getList($parent, 'opened|ongoing|holding', $this->id_user, $order, $dir, $limit, $start);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 231,
            "endLine": 233,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "getMine",
            "returns": [],
            "arguments": [
                {
                    "name": "parent",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "priority",
                    "default_name": ""
                },
                {
                    "name": "dir",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "ASC",
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 50,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "translateLog": {
            "name": "translateLog",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function translateLog(array $log){\n    $opt = bbn\\Appui\\Option::getInstance();\n    $user = bbn\\User::getInstance();\n    if ( $opt && $user && isset($log['action'], $log['id_user']) ){\n      $type = explode('_', $opt->code($log['action']));\n      $action = $user->getName($this->mgr->getUser($log['id_user'])).' '.$opt->text($log['action']);\n\n      $log['value'] = empty($log['value']) ? [] : json_decode($log['value']);\n      if ( !empty($log['value']) ){\n        $values = [];\n        switch ( $type[0] ){\n          case 'deadline':\n            foreach ( $log['value'] as $v ){\n              array_push($values, bbn\\Date::format($v, 's'));\n            }\n            break;\n          case 'title':\n            $values = $log['value'];\n            break;\n          case 'content':\n            $values = $log['value'];\n            break;\n          case 'comment':\n            array_push($values, bbn\\Str::cut($this->db->getOne(\"\n            SELECT content\n            FROM bbn_notes_versions\n            WHERE id_note = ?\n            ORDER BY version DESC\n            LIMIT 1\",\n              $log['value'][0]), 80));\n            break;\n          case 'role':\n            if ( ($user = bbn\\User::getInstance()) && isset($log['value'][0], $log['value'][1]) ){\n              $values[0] = $user->getName($this->mgr->getUser($log['value'][0]));\n              $values[1] = $opt->text($log['value'][1]);\n            }\n            break;\n          case 'priority':\n            $values = $log['value'];\n            break;\n          case 'price':\n          case 'approved':\n            foreach ( $log['value'] as $i => $v ){\n              $values[] = number_format((float)$v, 2, ',', '.');\n            }\n            break;\n          default:\n            foreach ( $log['value'] as $v ){\n              array_push($values, $opt->text($v));\n            }\n        }\n        if ( !empty($values) ){\n          foreach ( $values as $i => $v ){\n            $values[$i] = '<strong>'.$v.'<\/strong>';\n          }\n          array_unshift($values, $action);\n          return \\sprintf(...$values);\n        }\n      }\n      return $action;\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 235,
            "endLine": 297,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "translateLog",
            "returns": [],
            "arguments": [
                {
                    "name": "log",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLog": {
            "name": "getLog",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLog($id){\n    $logs = $this->db->rselectAll('bbn_tasks_logs', [], ['id_task' => $id], ['chrono' => 'DESC']);\n    $res = [];\n    foreach ( $logs as $log ){\n      array_push($res, [\n        'action' => $this->translateLog($log),\n        'id_user' => $log['id_user'],\n        'chrono' => $log['chrono']\n      ]);\n    }\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 299,
            "endLine": 310,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getLog",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getAllLogs": {
            "name": "getAllLogs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAllLogs($limit = 100, $start = 0){\n    $logs = $this->db->rselectAll('bbn_tasks_logs', [], [], ['chrono' => 'DESC']);\n    $res = [];\n    foreach ( $logs as $log ){\n      array_push($res, [\n        'action' => $this->translateLog($log),\n        'id_user' => $log['id_user'],\n        'chrono' => $log['chrono']\n      ]);\n    }\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 312,
            "endLine": 323,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getAllLogs",
            "returns": [],
            "arguments": [
                {
                    "name": "limit",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 100,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getApprovedLog": {
            "name": "getApprovedLog",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getApprovedLog($id): array\n  {\n    if (\n      $this->exists($id) &&\n      ($action = $this->idAction('price_approved'))\n    ){\n      return $this->db->rselect('bbn_tasks_logs', [], [\n        'id_task' => $id,\n        'action' => $action\n      ], ['chrono' => 'DESC']) ?: [];\n    }\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 325,
            "endLine": 337,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getApprovedLog",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPriceLog": {
            "name": "getPriceLog",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPriceLog($id): array\n  {\n    if ($this->exists($id)\n      && ($action_ins = $this->idAction('price_insert'))\n      && ($action_upd = $this->idAction('price_update'))\n      && ($action_del = $this->idAction('price_delete'))\n    ){\n      return $this->db->rselect([\n        'table' => 'bbn_tasks_logs',\n        'where' => [\n          'conditions' => [[\n            'field' => 'id_task',\n            'value' => $id\n          ], [\n            'logic' => 'OR',\n            'conditions' => [[\n              'field' => 'action',\n              'value' => $action_ins\n            ], [\n              'field' => 'action',\n              'value' => $action_upd\n            ], [\n              'field' => 'action',\n              'value' => $action_del\n            ]]\n          ]]\n        ],\n        'order' => [[\n          'field' => 'chrono',\n          'dir' => 'DESC'\n        ]]\n      ]) ?: [];\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 339,
            "endLine": 372,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPriceLog",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPrice": {
            "name": "getPrice",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPrice(string $id){\n    return $this->db->selectOne('bbn_tasks', 'price', ['id' => $id]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 374,
            "endLine": 376,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPrice",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getApprovalInfo": {
            "name": "getApprovalInfo",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getApprovalInfo(string $id): ?array\n  {\n    $approved = null;\n    if (!empty($this->getPrice($id))) {\n      $lastChangePrice = $this->getPriceLog($id) ?: null;\n      if (!empty($lastChangePrice)\n        && \\bbn\\Str::isJson($lastChangePrice['value'])\n      ) {\n        $lastChangePrice['value'] = \\json_decode($lastChangePrice['value'], true);\n        if (\\is_array($lastChangePrice['value'])) {\n          $lastChangePrice['value'] = $lastChangePrice['value'][0];\n        }\n      }\n      $approved = $this->getApprovedLog($id) ?: null;\n      if (!empty($approved)\n        && \\bbn\\Str::isJson($approved['value'])\n      ) {\n        $approved['value'] = \\json_decode($approved['value'], true);\n        if (\\is_array($approved['value'])) {\n          $approved['value'] = $approved['value'][0];\n        }\n      }\n      if (!empty($lastChangePrice)\n        && !empty($approved)\n        && ($lastChangePrice['chrono'] > $approved['chrono'])\n      ){\n        $approved = null;\n      }\n    }\n    else if ($children = $this->getChildrenIds($id)) {\n      $fromChildren = [];\n      foreach ($children as $child) {\n        if ($c = $this->getApprovalInfo($child)) {\n          $fromChildren[] = $c;\n        }\n      }\n      if (!empty($fromChildren)) {\n        $fromChildren = X::sortBy($fromChildren, 'chrono', 'desc');\n        $approved = $fromChildren[0];\n      }\n    }\n    return $approved;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 378,
            "endLine": 420,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getApprovalInfo",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getList": {
            "name": "getList",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getList($parent = null, $status = 'opened|ongoing|holding', $id_user = false, $order = 'priority', $dir = 'ASC', $limit = 1000, $start = 0){\n    $orders_ok = [\n      'id' => 'bbn_tasks.id',\n      'last' => 'last',\n      'first' => 'first',\n      'duration' => 'duration',\n      'num_children' => 'num_children',\n      'title' => 'notevers.title',\n      'content' => 'notevers.content',\n      'num_notes' => 'num_notes',\n      'role' => 'role',\n      'state' => 'state',\n      'priority' => 'priority'\n    ];\n    if ( !isset($orders_ok[$order]) ||\n      !bbn\\Str::isInteger($limit, $start) ||\n      (!\\is_null($parent) && !bbn\\Str::isInteger($parent))\n    ){\n      return false;\n    }\n    $dir = strtolower($dir) === 'asc' ? 'ASC' : 'DESC';\n    if ( !$id_user ){\n      $id_user = $this->id_user;\n    }\n    $where = [];\n    if ( !empty($status) ){\n      $statuses = [];\n      $tmp = explode(\"|\", $status);\n      foreach ( $tmp as $s ){\n        if ( $t = $this->idState($s) ){\n          array_push($statuses, $t);\n          array_push($where, \"`bbn_tasks`.`state` = 0x$t\");\n        }\n      }\n    }\n    $where = \\count($where) ? implode( \" OR \", $where) : '';\n    $sql = \"\n    SELECT `role`, bbn_tasks.*,\n    notevers.title AS title,\n    notevers.content AS content,\n    FROM_UNIXTIME(MIN(bbn_tasks_logs.chrono)) AS `first`,\n    FROM_UNIXTIME(MAX(bbn_tasks_logs.chrono)) AS `last`,\n    {$this->references_select}\n    COUNT(children.id) AS num_children,\n    COUNT(DISTINCT bbn_tasks_notes.id_note) AS num_notes,\n    MAX(bbn_tasks_logs.chrono) - MIN(bbn_tasks_logs.chrono) AS duration\n    FROM bbn_tasks_roles\n      JOIN bbn_tasks\n        ON bbn_tasks_roles.id_task = bbn_tasks.id\n      JOIN bbn_notes_versions AS notevers\n        ON notevers.id_note = bbn_tasks.id_note\n        AND notevers.latest = 1\n      JOIN bbn_tasks_logs\n        ON bbn_tasks_logs.id_task = bbn_tasks_roles.id_task\n      LEFT JOIN bbn_tasks_notes\n        ON bbn_tasks_notes.id_task = bbn_tasks_roles.id_task\n        AND bbn_tasks_notes.active = 1\n      LEFT JOIN bbn_tasks AS children\n        ON bbn_tasks.id = children.id_parent\n        AND bbn_tasks.active = 1\n      {$this->references_join}\n    WHERE bbn_tasks_roles.id_user = ?\".\n      (empty($where) ? '' : \" AND ($where)\").\"\n    AND bbn_tasks.active = 1\n    AND bbn_tasks.id_alias IS NULL\n    AND bbn_tasks.id_parent \".( \\is_null($parent) ? \"IS NULL\" : \"= $parent\" ).\"\n    GROUP BY bbn_tasks_roles.id_task\n    LIMIT $start, $limit\";\n\n    $opt = bbn\\Appui\\Option::getInstance();\n    $res = $this->db->getRows($sql, hex2bin($id_user));\n    foreach ( $res as $i => $r ){\n      $res[$i]['hasChildren'] = $r['num_children'] ? true : false;\n    }\n    \/*\n    foreach ( $res as $i => $r ){\n      $res[$i]['details'] = $this->info($r['id']);\n    }\n    *\/\n    X::sortBy($res, $order, $dir);\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 422,
            "endLine": 503,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 0,
            "shortName": "getList",
            "returns": [],
            "arguments": [
                {
                    "name": "parent",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "status",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "opened|ongoing|holding",
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "priority",
                    "default_name": ""
                },
                {
                    "name": "dir",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "ASC",
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 5,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 1000,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 6,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getSlist": {
            "name": "getSlist",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSlist($search, $order = 'last', $dir = 'DESC', $limit = 1000, $start = 0){\n    $orders_ok = [\n      'id' => 'bbn_tasks.id',\n      'last' => 'last',\n      'first' => 'first',\n      'duration' => 'duration',\n      'num_children' => 'num_children',\n      'title' => 'notevers.title',\n      'content' => 'notevers.content',\n      'num_notes' => 'num_notes',\n      'role' => 'role',\n      'state' => 'state',\n      'priority' => 'priority'\n    ];\n    if ( !isset($orders_ok[$order]) || !bbn\\Str::isInteger($limit, $start) ){\n      return false;\n    }\n    $dir = strtolower($dir) === 'asc' ? 'ASC' : 'DESC';\n    $sql = \"\n    SELECT bbn_tasks.*, role,\n    notevers.title AS title,\n    notevers.content AS content,\n    FROM_UNIXTIME(MAX(bbn_tasks_logs.chrono)) AS `last_action`,\n    {$this->references_select}\n    COUNT(children.id) AS num_children,\n    COUNT(DISTINCT bbn_tasks_notes.id_note) AS num_notes,\n    IF(bbn_tasks.`state`=\".$this->idState('closed').\", MAX(bbn_tasks_logs.chrono), UNIX_TIMESTAMP()) - MIN(bbn_tasks_logs.chrono) AS duration\n    FROM bbn_tasks\n      JOIN bbn_notes_versions AS notevers\n        ON notevers.id_note = bbn_tasks.id_note\n        AND notevers.latest = 1\n      JOIN bbn_tasks_logs\n        ON bbn_tasks_logs.id_task = bbn_tasks.id\n      LEFT JOIN bbn_tasks_notes\n        ON bbn_tasks_notes.id_task = bbn_tasks.id\n      LEFT JOIN bbn_tasks_roles\n        ON bbn_tasks_roles.id_task = bbn_tasks.id\n        AND bbn_tasks_roles.id_user = {$this->id_user}\n      LEFT JOIN bbn_notes_versions\n        ON bbn_notes_versions.id_note = bbn_tasks_notes.id_note\n        AND bbn_tasks_notes.active =1\n      LEFT JOIN bbn_tasks AS children\n        ON children.id = bbn_tasks.id\n        AND children.active = 1\n      {$this->references_join}\n    WHERE (notevers.title LIKE ?\n    OR notevers.content LIKE ?\n    OR bbn_notes_versions.content LIKE ?)\n    AND bbn_tasks.active = 1\n    GROUP BY bbn_tasks.id\n    LIMIT $start, $limit\";\n\n    $opt = bbn\\Appui\\Option::getInstance();\n    $res = $this->db->getRows($sql, \"%$search%\");\n    \/*\n    foreach ( $res as $i => $r ){\n      $res[$i]['type'] = $opt->itext($r['type']);\n      $res[$i]['state'] = $opt->itext($r['state']);\n      $res[$i]['role'] = $opt->itext($r['role']);\n      $res[$i]['hasChildren'] = $r['num_children'] ? true : false;\n    }\n    foreach ( $res as $i => $r ){\n      $res[$i]['details'] = $this->info($r['id']);\n    }\n    *\/\n    X::sortBy($res, $order, $dir);\n    return [\n      'data' => $res,\n      'total' => \\count($res)\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 505,
            "endLine": 575,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "getSlist",
            "returns": [],
            "arguments": [
                {
                    "name": "search",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "last",
                    "default_name": ""
                },
                {
                    "name": "dir",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "DESC",
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 1000,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getTree": {
            "name": "getTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTree($id = null, $closed = false){\n    $statuses = empty($closed) ? 'opened|ongoing|holding' : false;\n    $res = [];\n    $all = $this->getList($id ?: null, $statuses, 5000);\n    foreach ( $all as $a ){\n      array_push($res, [\n        'id' => $a['id'],\n        'text' => $a['title'].' ('.bbn\\Date::format($a['first']).'-'.bbn\\Date::format($a['last']).')',\n        'is_parent' => $a['num_children'] ? true : false\n      ]);\n    }\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 577,
            "endLine": 589,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getTree",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "closed",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "addNote": {
            "name": "addNote",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function addNote($type, $value, $title){\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 591,
            "endLine": 593,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "addNote",
            "returns": [],
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "title",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addLink": {
            "name": "addLink",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addLink(){\n    return $this->addNote(null, null, null);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 595,
            "endLine": 597,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "addLink",
            "returns": [],
            "arguments": []
        },
        "info": {
            "name": "info",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function info(string $id, bool $withComments = false, bool $withChildren = true): ?array\n  {\n    if ($info = $this->db->rselect('bbn_tasks', [], ['id' => $id])) {\n      $info['title'] = $this->getTitle($id);\n      $info['content'] = $this->getContent($id);\n      $info['first'] = $this->db->selectOne('bbn_tasks_logs', 'chrono', [\n        'id_task' => $id,\n        'action' => $this->idAction('insert')\n      ], ['chrono' => 'ASC']);\n      $info['last'] = $this->db->selectOne('bbn_tasks_logs', 'chrono', [\n        'id_task' => $id,\n      ], ['chrono' => 'DESC']);\n      $info['last_action'] = !empty($info['last']) ? date('Y-m-d H:i:s', $info['last']) : $info['creation_date'];\n      $info['roles'] = $this->infoRoles($id);\n      $roleCode = $this->hasRole($id, $this->id_user);\n      $info['role'] = !empty($roleCode) ? $this->idRole($roleCode) : null;\n      $info['notes'] = $withComments ? $this->getComments($id) : $this->getCommentsIds($id);\n      $info['children'] = $withChildren ? $this->getChildren($id) : $this->getChildrenIds($id);\n      $info['children_price'] = $this->getChildrenPrices($id);\n      $info['children_noprice'] = $this->getChildrenNoPrice($id);\n      $info['num_children_noprice'] = count($info['children_noprice']);\n      $info['parent_has_price'] = $this->parentHasPrice($id, true);\n      $info['parent_unapproved'] = $this->parentIsUnapproved($id, true);\n      $info['approved'] = $this->getApprovalInfo($id);\n      $info['aliases'] = $this->db->rselectAll([\n        'table' => 'bbn_tasks',\n        'fields' => [\n          'bbn_tasks.id',\n          'bbn_notes_versions.title'\n        ],\n        'join' => [[\n          'table' => 'bbn_notes_versions',\n          'on' => [\n            'conditions' => [[\n              'field' => 'bbn_notes_versions.id_note',\n              'exp' => 'bbn_tasks.id_note'\n            ], [\n              'field' => 'bbn_notes_versions.latest',\n              'value' => 1\n            ]]\n          ]\n        ]],\n        'where' => [\n          'bbn_tasks.id_alias' => $id,\n          'bbn_tasks.active' => 1\n        ]\n      ]);\n      $info['num_notes'] = \\count($info['notes']);\n      $info['num_children'] = \\count($info['children']);\n      $info['has_children'] = !empty($info['num_children']);\n      $info['reference'] = null;\n      if ( $this->references ){\n        foreach ( $this->references as $table => $ref ){\n          foreach ( $ref['refs'] as $j => $r ){\n            if ( $id_ref = $this->db->selectOne($table, $j, [$ref['column'] => $id]) ){\n              $info['reference'] = $this->template === false ? $id_ref : \\call_user_func($this->template, $this->db, $id_ref, $table);\n              break;\n            }\n          }\n          if ( $info['reference'] ){\n            break;\n          }\n        }\n      }\n      if (!empty($info['id_parent'])) {\n        $info['parent'] = $this->info($info['id_parent'], $withComments, false);\n      }\n\n      $info['tokens_category'] = $this->getTokensCategory($id);\n      return $info;\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 599,
            "endLine": 671,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "info",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "withComments",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "withChildren",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "getChildrenIds": {
            "name": "getChildrenIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getChildrenIds(string $id, bool $includeDeleted = false): ?array\n  {\n    $where = [[\n      'field' => 'id_parent',\n      'value' => $id\n    ], [\n      'logic' => 'OR',\n      'conditions' => [[\n        'field' => 'private',\n        'value' => 0\n      ], [\n        'conditions' => [[\n          'field' => 'private',\n          'value' => 1\n        ], [\n          'field' => 'id_user',\n          'value' => $this->id_user\n        ]]\n      ]]\n    ]];\n    if (!$includeDeleted) {\n      $where[] = [\n        'field' => 'active',\n        'value' => 1\n      ];\n    }\n    return $this->db->getColumnValues([\n      'table' => 'bbn_tasks',\n      'fields' => ['id'],\n      'where' => [\n        'conditions' => $where\n      ],\n      'order' => [\n        'creation_date' => 'DESC'\n      ]\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 673,
            "endLine": 709,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getChildrenIds",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "includeDeleted",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getChildren": {
            "name": "getChildren",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getChildren(string $id, bool $includeDeleted = false): array\n  {\n    if ($children = $this->getChildrenIds($id, $includeDeleted)) {\n      $t = $this;\n      return \\array_map(function($cid) use($t){\n        return $t->info($cid);\n      }, $children);\n    }\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 711,
            "endLine": 720,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getChildren",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "includeDeleted",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getChildrenPrices": {
            "name": "getChildrenPrices",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getChildrenPrices(string $id, bool $deep = true): float\n  {\n    $total = 0;\n    if ($children = $this->getChildrenIds($id)) {\n      foreach ($children as $child) {\n        if ($p = $this->getPrice($child)){\n          $total += $p;\n        }\n        else if ($deep && ($subChildren = $this->getChildrenIds($child))) {\n          foreach ($subChildren as $sc) {\n            if ($scp = $this->getPrice($sc)) {\n              $total += $scp;\n            }\n            else if ($this->getChildrenIds($sc)) {\n              $total += $this->getChildrenPrices($sc);\n            }\n          }\n        }\n      }\n    }\n    return $total;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 722,
            "endLine": 743,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getChildrenPrices",
            "returns": [
                "float"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "deep",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "getChildrenNoPrice": {
            "name": "getChildrenNoPrice",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getChildrenNoPrice(string $id, bool $deep = true): array\n  {\n    $res = [];\n    if (!$this->getPrice($id)\n      && ($children = $this->getChildrenIds($id))\n    ) {\n      $hasPrice = false;\n      foreach ($children as $child) {\n        if ($this->getPrice($child) || $this->getChildrenPrices($child, $deep)) {\n          $hasPrice = true;\n        }\n      }\n      if ($hasPrice) {\n        foreach ($children as $child) {\n          if (!$deep) {\n            if (!$this->getPrice($child)) {\n              $res[] = $child;\n            }\n          }\n          else {\n            if (!$this->getPrice($child) && !$this->getChildrenPrices($child)) {\n              $res[] = $child;\n            }\n          }\n        }\n      }\n    }\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 745,
            "endLine": 773,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getChildrenNoPrice",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "deep",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "getUnapprovedChildrenIds": {
            "name": "getUnapprovedChildrenIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUnapprovedChildrenIds(string $id): ?array\n  {\n    if (!($idState = $this->idState('unapproved'))) {\n      throw new \\Exception(X::_('No state found with the code unapproved'));\n    }\n    return $this->db->getColumnValues('bbn_tasks', 'id', [\n      'id_parent' => $id,\n      'state' => $idState,\n      'active' => 1\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 775,
            "endLine": 785,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getUnapprovedChildrenIds",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "parentHasPrice": {
            "name": "parentHasPrice",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function parentHasPrice(string $id, bool $top = false)\n  {\n    if ($idParent = $this->getIdParent($id)) {\n      if ($this->getPrice($idParent)) {\n        return true;\n      }\n      if ($top) {\n        return $this->parentHasPrice($idParent, true);\n      }\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 787,
            "endLine": 798,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "parentHasPrice",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "top",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "parentIsUnapproved": {
            "name": "parentIsUnapproved",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function parentIsUnapproved(string $id, bool $top = false)\n  {\n    if ($idParent = $this->getIdParent($id)) {\n      if ($this->idState('unapproved') === $this->getState($idParent)) {\n        return true;\n      }\n      if ($top) {\n        return $this->parentIsUnapproved($idParent, true);\n      }\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 800,
            "endLine": 811,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "parentIsUnapproved",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "top",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getState": {
            "name": "getState",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getState($id){\n    if ( $this->exists($id) ){\n      return $this->db->selectOne('bbn_tasks', 'state', ['id' => $id]);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 813,
            "endLine": 817,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getState",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getIdParent": {
            "name": "getIdParent",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIdParent(string $id): ?string\n  {\n    return $this->db->selectOne('bbn_tasks', 'id_parent', ['id' => $id]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 819,
            "endLine": 822,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getIdParent",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getIdRoot": {
            "name": "getIdRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIdRoot(string $id): ?string\n  {\n    if ($idParent = $this->getIdParent($id)) {\n      return $this->getIdParent($idParent) ?: $idParent;\n    }\n    return $idParent;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 824,
            "endLine": 830,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getIdRoot",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCommentsIds": {
            "name": "getCommentsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCommentsIds($id_task){\n    return $this->db->getColArray(\"\n      SELECT bbn_tasks_notes.id_note\n      FROM bbn_tasks_notes\n        JOIN bbn_notes_versions\n          ON bbn_notes_versions.id_note = bbn_tasks_notes.id_note\n      WHERE id_task = ?\n      GROUP BY bbn_tasks_notes.id_note\n      ORDER BY MAX(bbn_notes_versions.creation)\",\n      hex2bin($id_task));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 832,
            "endLine": 842,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getCommentsIds",
            "returns": [],
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_format_where": {
            "name": "_format_where",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _format_where(array $cfg){\n    $res = [];\n    foreach ( $cfg as $i => $c ){\n      if (\\is_array($c)) {\n        array_push($res, $c);\n      }\n      else if (($i === 'text')\n        || ($i === 'title')\n        || ($i === 'content')\n      ) {\n        array_push($res, [$i, 'LIKE', \"%$c%\"]);\n      }\n      else{\n        array_push($res, [$i, '=', $c]);\n      }\n    }\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 844,
            "endLine": 861,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_format_where",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "search": {
            "name": "search",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function search(array $where = [], $sort = [], $start = 0, $num = 25){\n    $where = $this->_format_where($where);\n    $fields = [\n      'ids' => [\n        'id_parent' => 'bbn_tasks.id_parent',\n        'id_user' => 'bbn_tasks.id_user',\n        'state' => 'bbn_tasks.state',\n        'role' => 'my_role.role',\n        'type' => 'bbn_tasks.type'\n      ],\n      'nums' => [\n        'num_notes' => 'num_notes',\n        'duration' => 'duration',\n        'priority' => 'bbn_tasks.priority'\n      ],\n      'dates' => [\n        'deadline' => 'bbn_tasks.deadline',\n        'creation_date' => 'creation_date',\n        'last_action' => 'last_action'\n      ],\n      'texts' => [\n        'title' => 'bbn_notes_versions.title',\n        'content' => 'bbn_notes_versions.content',\n        'text' => 'notever.content'\n      ],\n      'users' => [\n        'my_user' => '',\n        'my_group' => ''\n      ],\n      'refs' => [\n        'reference' => 'reference'\n      ]\n    ];\n    $query = '';\n    $join = '';\n    $having = '';\n    $order = '';\n    $args1 = [];\n    $args2 = [];\n    foreach ( $where as $i => $w ){\n      if ( isset($fields['ids'][$w[0]]) ){\n        \/\/ For id_parent, no other search for now\n        if ( $w[0] === 'id_parent' ){\n          $query = \"AND \".$fields['ids'][$w[0]].\" = ? \";\n          $args = [$w[2]];\n          break;\n        }\n        else if ( \\is_array($w[2]) ){\n          $query .= \"AND ( \";\n          foreach ( $w[2] as $j => $v ){\n            if ( $j ){\n              $query .= \" OR \";\n            }\n            $query .= $fields['ids'][$w[0]].\" = ? \";\n            array_push($args1, $v);\n          }\n          $query .= \") \";\n        }\n        else{\n          $query .= \" AND \".$fields['ids'][$w[0]].\" $w[1] ? \";\n          array_push($args1, $w[2]);\n        }\n      }\n      else if ( isset($fields['dates'][$w[0]]) ){\n        if ( strpos($w[1], 'IS ') === 0 ){\n          $query .= \" AND \".$fields['dates'][$w[0]].\" $w[1] \";\n        }\n        else if ( bbn\\Date::validateSQL($w[2]) ){\n          if ( $w[0] !== 'deadline' ){\n            $having .= \" AND DATE(\".$fields['dates'][$w[0]].\") $w[1] ? \";\n            array_push($args2, $w[2]);\n          }\n          else{\n            $query .= \" AND DATE(\".$fields['dates'][$w[0]].\") $w[1] ? \";\n            array_push($args1, $w[2]);\n          }\n        }\n      }\n      else if ( isset($fields['nums'][$w[0]]) ){\n        if ( \\is_int($w[2]) ){\n          $query .= \" AND \".$fields['nums'][$w[0]].\" $w[1] ? \";\n          array_push($args1, $w[2]);\n        }\n      }\n      else if ( isset($fields['texts'][$w[0]]) ){\n        if ( !empty($w[2]) ){\n          if ( $w[0] === 'title' ){\n            $query .= \" AND bbn_notes_versions.title LIKE ? AND bbn_notes_versions.latest = 1 \";\n            array_push($args1, \"%$w[2]%\");\n          }\n          else if ( $w[0] === 'content' ){\n            $query .= \" AND bbn_notes_versions.content LIKE ? AND bbn_notes_versions.latest = 1 \";\n            array_push($args1, \"%$w[2]%\");\n          }\n          else if ( $w[0] === 'text' ){\n            $query .= \" AND ((bbn_notes_versions.title LIKE ? OR bbn_notes_versions.content LIKE ?) AND bbn_notes_versions.latest = 1 \";\n            array_push($args1, \"%$w[2]%\", \"%$w[2]%\");\n            $join .= \"\n        LEFT JOIN bbn_tasks_notes\n          ON bbn_tasks_notes.id_task = bbn_tasks.id\";\n          }\n        }\n      }\n      else if ( isset($fields['users'][$w[0]]) ){\n        if ( !empty($w[2]) ){\n          if ( $w[0] === 'my_user' ){\n            $query .= \" AND user_role.id_user = ?\";\n            array_push($args1, hex2bin($w[2]));\n            $join .= \"\n        JOIN bbn_tasks_roles AS user_role\n          ON user_role.id_task = bbn_tasks.id\";\n          }\n          else if ( ($w[0] === 'my_group') && ($usr = bbn\\User::getInstance()) ){\n            $usr_table = $usr->getTables()['users'];\n            $usr_fields = $usr->getFields('users');\n            $query .= \" AND `\".$usr_table.\"`.`\".$usr_fields['id_group'].\"` = ? \";\n            array_push($args1, hex2bin($w[2]));\n            $join .= \"\n        JOIN bbn_tasks_roles AS group_role\n          ON group_role.id_task = bbn_tasks.id\n        JOIN `\".$usr_table.\"`\n          ON bbn_tasks_roles.id_user = `\".$usr_table.\"`.`\".$usr_fields['id'].\"`\";\n          }\n        }\n      }\n      else if ( isset($fields['refs'][$w[0]]) ){\n        if (\\is_int($w[2]) || Str::isUid($w[2])) {\n          $having .= \" AND \".$fields['refs'][$w[0]].\" $w[1] ? \";\n          array_push($args1, $w[2]);\n        }\n      }\n    }\n    foreach ( $fields as $i => $f ){\n      foreach ( $f as $n => $g ){\n        if ( isset($sort[$n]) ){\n          $order = '`'.$n.'`'.( strtolower($sort[$n]) === 'desc' ? ' DESC' : ' ASC').', ';\n        }\n      }\n    }\n    if ( !empty($order) ){\n      $order = \"ORDER BY \".substr($order, 0, -2);\n    }\n    $args0 = [\n      hex2bin($this->idState('closed')),\n      hex2bin($this->id_user)\n    ];\n    $sql = \"\n      SELECT my_role.role,\n      bbn_tasks.*,\n      bbn_notes_versions.title,\n      bbn_notes_versions.content,\n      FROM_UNIXTIME(MAX(bbn_tasks_logs.chrono)) AS `last_action`,\n      COUNT(children.id) AS num_children,\n      COUNT(DISTINCT bbn_tasks_notes.id_note) AS num_notes,\n      {$this->references_select}\n      IF(bbn_tasks.`state` = ?, MAX(bbn_tasks_logs.chrono), UNIX_TIMESTAMP()) - MIN(bbn_tasks_logs.chrono) AS duration\n      FROM bbn_tasks\n        JOIN bbn_notes_versions\n          ON bbn_notes_versions.id_note = bbn_tasks.id_note\n          AND bbn_notes_versions.latest = 1\n        LEFT JOIN bbn_tasks_roles AS my_role\n          ON my_role.id_task = bbn_tasks.id\n          AND my_role.id_user = ?\n        LEFT JOIN bbn_tasks_roles\n          ON bbn_tasks_roles.id_task = bbn_tasks.id\n        JOIN bbn_tasks_logs\n          ON bbn_tasks_logs.id_task = bbn_tasks_roles.id_task\n        LEFT JOIN bbn_tasks_notes\n          ON bbn_tasks_notes.id_task = bbn_tasks.id\n          AND bbn_tasks_notes.active = 1\n        LEFT JOIN bbn_tasks AS children\n          ON bbn_tasks.id = children.id_parent\n          AND children.active = 1\n        $join\n        {$this->references_join}\n      WHERE bbn_tasks.active = 1\n      $query\n      GROUP BY bbn_tasks.id\n      HAVING 1\n      $having\n      $order\";\n    \/\/die(X::dump($sql));\n    if ( !isset($args) ){\n      $args = array_merge($args0, $args1, $args2);\n    }\n\n    if (!empty($num)) {\n      $sql .= \" LIMIT $start, $num\";\n    }\n\n    $data = $this->db->getRows($sql, $args);\n    \/** @var bbn\\User $user *\/\n    $user = bbn\\User::getInstance();\n    foreach ( $data as $i => $d ){\n      if ( $this->template ){\n        if ( $d['reference'] ){\n          \/** @todo How do I get the t1able with the way I made the request??! *\/\n          $data[$i]['reference'] = \\call_user_func($this->template, $this->db, $d['reference'], '');\n        }\n      }\n    }\n    return [\n      'data' => $data,\n      'total' => !empty($num) ? $this->db->getOne(\"SELECT COUNT(*) FROM ($sql) AS t\", $args) : count($data),\n      'start' => $start,\n      'limit' => $num\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 863,
            "endLine": 1070,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "shortName": "search",
            "returns": [],
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "sort",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 25,
                    "default_name": ""
                }
            ]
        },
        "searchLite": {
            "name": "searchLite",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function searchLite(array $where = [], $sort = [], $start = 0, $num = 25){\n    $where = $this->_format_where($where);\n    $fields = [\n      'ids' => [\n        'state' => 'bbn_tasks.state'\n      ],\n      'nums' => [],\n      'dates' => [],\n      'texts' => [\n        'title' => 'bbn_notes_versions.title'\n      ],\n      'users' => [],\n      'refs' => [\n        'reference' => 'reference'\n      ]\n    ];\n    $query = '';\n    $join = '';\n    $having = '';\n    $order = '';\n    $args1 = [];\n    $args2 = [];\n    foreach ( $where as $i => $w ){\n      if ( isset($fields['ids'][$w[0]]) ){\n        \/\/ For id_parent, no other search for now\n        if ( $w[0] === 'id_parent' ){\n          $query = \"AND \".$fields['ids'][$w[0]].\" = ? \";\n          $args = [$w[2]];\n          break;\n        }\n        else if ( \\is_array($w[2]) ){\n          $query .= \"AND ( \";\n          foreach ( $w[2] as $j => $v ){\n            if ( $j ){\n              $query .= \" OR \";\n            }\n            $query .= $fields['ids'][$w[0]].\" = ? \";\n            array_push($args1, $v);\n          }\n          $query .= \") \";\n        }\n        else{\n          $query .= \" AND \".$fields['ids'][$w[0]].\" $w[1] ? \";\n          array_push($args1, $w[2]);\n        }\n      }\n      else if ( isset($fields['dates'][$w[0]]) ){\n        if ( strpos($w[1], 'IS ') === 0 ){\n          $query .= \" AND \".$fields['dates'][$w[0]].\" $w[1] \";\n        }\n        else if ( bbn\\Date::validateSQL($w[2]) ){\n          if ( $w[0] !== 'deadline' ){\n            $having .= \" AND DATE(\".$fields['dates'][$w[0]].\") $w[1] ? \";\n            array_push($args2, $w[2]);\n          }\n          else{\n            $query .= \" AND DATE(\".$fields['dates'][$w[0]].\") $w[1] ? \";\n            array_push($args1, $w[2]);\n          }\n        }\n      }\n      else if ( isset($fields['nums'][$w[0]]) ){\n        if ( \\is_int($w[2]) ){\n          $query .= \" AND \".$fields['nums'][$w[0]].\" $w[1] ? \";\n          array_push($args1, $w[2]);\n        }\n      }\n      else if ( isset($fields['texts'][$w[0]]) ){\n        if ( !empty($w[2]) ){\n          if ( $w[0] === 'title' ){\n            $query .= \" AND bbn_notes_versions.title LIKE ? AND bbn_notes_versions.latest = 1 \";\n            array_push($args1, \"%$w[2]%\");\n          }\n          else if ( $w[0] === 'content' ){\n            $query .= \" AND bbn_notes_versions.content LIKE ? AND bbn_notes_versions.latest = 1 \";\n            array_push($args1, \"%$w[2]%\");\n          }\n          else if ( $w[0] === 'text' ){\n            $query .= \" AND ((bbn_notes_versions.title LIKE ? OR bbn_notes_versions.content LIKE ?) AND bbn_notes_versions.latest = 1 \";\n            array_push($args1, \"%$w[2]%\", \"%$w[2]%\");\n            $join .= \"\n        LEFT JOIN bbn_tasks_notes\n          ON bbn_tasks_notes.id_task = bbn_tasks.id\";\n          }\n        }\n      }\n      else if ( isset($fields['users'][$w[0]]) ){\n        if ( !empty($w[2]) ){\n          if ( $w[0] === 'my_user' ){\n            $query .= \" AND user_role.id_user = ?\";\n            array_push($args1, hex2bin($w[2]));\n            $join .= \"\n        JOIN bbn_tasks_roles AS user_role\n          ON user_role.id_task = bbn_tasks.id\";\n          }\n          else if ( ($w[0] === 'my_group') && ($usr = bbn\\User::getInstance()) ){\n            $usr_table = $usr->getTables()['users'];\n            $usr_fields = $usr->getFields('users');\n            $query .= \" AND `\".$usr_table.\"`.`\".$usr_fields['id_group'].\"` = ? \";\n            array_push($args1, hex2bin($w[2]));\n            $join .= \"\n        JOIN bbn_tasks_roles AS group_role\n          ON group_role.id_task = bbn_tasks.id\n        JOIN `\".$usr_table.\"`\n          ON bbn_tasks_roles.id_user = `\".$usr_table.\"`.`\".$usr_fields['id'].\"`\";\n          }\n        }\n      }\n      else if ( isset($fields['refs'][$w[0]]) ){\n        if ( \\is_int($w[2]) ){\n          $having .= \" AND \".$fields['refs'][$w[0]].\" $w[1] ? \";\n          array_push($args1, $w[2]);\n        }\n      }\n    }\n    foreach ( $fields as $i => $f ){\n      foreach ( $f as $n => $g ){\n        if ( isset($sort[$n]) ){\n          $order = '`'.$n.'`'.( strtolower($sort[$n]) === 'desc' ? ' DESC' : ' ASC').', ';\n        }\n      }\n    }\n    if ( !empty($order) ){\n      $order = \"ORDER BY \".substr($order, 0, -2);\n    }\n    $sql = \"\n      SELECT bbn_notes_versions.title,\n      {$this->references_select}\n      bbn_tasks.*\n      FROM bbn_tasks\n        JOIN bbn_notes_versions\n          ON bbn_notes_versions.id_note = bbn_tasks.id_note\n          AND bbn_notes_versions.latest = 1\n        {$this->references_join}\n      WHERE bbn_tasks.active = 1\n      $query\n      GROUP BY bbn_tasks.id\n      HAVING 1\n      $having\n      $order\";\n    \/\/die(X::dump($sql));\n    if ( !isset($args) ){\n      $args = array_merge($args1, $args2);\n    }\n\n    if (!empty($num)) {\n      $sql .= \" LIMIT $start, $num\";\n    }\n\n    $data = $this->db->getRows($sql, $args);\n    \/** @var bbn\\User $user *\/\n    $user = bbn\\User::getInstance();\n    foreach ( $data as $i => $d ){\n      if ( $this->template ){\n        if ( $d['reference'] ){\n          \/** @todo How do I get the t1able with the way I made the request??! *\/\n          $data[$i]['reference'] = \\call_user_func($this->template, $this->db, $d['reference'], '');\n        }\n      }\n    }\n    return [\n      'data' => $data,\n      'total' => !empty($num) ? $this->db->getOne(\"SELECT COUNT(*) FROM ($sql) AS t\", $args) : count($data),\n      'start' => $start,\n      'limit' => $num\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1072,
            "endLine": 1238,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "shortName": "searchLite",
            "returns": [],
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "sort",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 25,
                    "default_name": ""
                }
            ]
        },
        "searchInTask": {
            "name": "searchInTask",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function searchInTask($st){\n    return $this->db->rselectAll([\n      'table' => 'bbn_tasks',\n      'fields' => [\n        'bbn_tasks.id',\n        'bbn_notes_versions.title',\n        'bbn_notes_versions.content',\n        'bbn_tasks.creation_date'\n      ],\n      'join' => [[\n        'table' => 'bbn_notes_versions',\n        'on' => [\n          'conditions' => [[\n            'field' => 'bbn_notes_versions.id_note',\n            'exp' => 'bbn_tasks.id_note'\n          ], [\n            'field' => 'bbn_notes_versions.latest',\n            'value' => 1\n          ]]\n        ]\n      ]],\n      'where' => [\n        'conditions' => [[\n          'field' => 'bbn_tasks.active',\n          'value' => 1\n        ], [\n          'logic' => 'OR',\n          'conditions' => [[\n            'field' => 'bbn_notes_versions.title',\n            'operator' => 'contains',\n            'value' => $st\n          ], [\n            'field' => 'bbn_notes_versions.content',\n            'operator' => 'contains',\n            'value' => $st\n          ]]\n        ]]\n      ]\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1240,
            "endLine": 1279,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "searchInTask",
            "returns": [],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fullInfo": {
            "name": "fullInfo",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullInfo($id){\n\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1281,
            "endLine": 1283,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "fullInfo",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "infoRoles": {
            "name": "infoRoles",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function infoRoles($id){\n    $r = [];\n    if ($roles = self::getOptions('roles')) {\n      $userCfg = bbn\\User::getInstance()->getClassCfg();\n      $optCfg = bbn\\Appui\\Option::getInstance()->getClassCfg();\n      $all = $this->db->rselectAll([\n        'table' => 'bbn_tasks_roles',\n        'fields' => [],\n        'join' => [[\n          'table' => $optCfg['table'],\n          'on' => [\n            'conditions' => [[\n              'field' => $this->db->cfn($optCfg['arch']['options']['id'], $optCfg['table']),\n              'exp' => 'bbn_tasks_roles.role'\n            ]]\n          ]\n        ], [\n          'table' => $userCfg['table'],\n          'on' => [\n            'conditions' => [[\n              'field' => $this->db->cfn($userCfg['arch']['users']['id'], $userCfg['table']),\n              'exp' => 'bbn_tasks_roles.id_user'\n            ], [\n              'field' => $this->db->cfn($userCfg['arch']['users']['active'], $userCfg['table']),\n              'value' => 1\n            ]]\n          ]\n        ]],\n        'where' => ['id_task' => $id],\n        'order' => [$this->db->cfn($userCfg['arch']['users']['username'], $userCfg['table']) => 'asc']\n      ]);\n      foreach ( $all as $a ){\n        $code = X::getField($roles, ['id' => $a['role']], 'code');\n        if (!isset($r[$code])) {\n          $r[$code] = [];\n        }\n        $r[$code][] = $a['id_user'];;\n      }\n    }\n    return $r;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1285,
            "endLine": 1325,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "infoRoles",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hasRole": {
            "name": "hasRole",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasRole($id_task, $id_user){\n    if ( $opt = bbn\\Appui\\Option::getInstance() ){\n      $r = $this->db->selectOne('bbn_tasks_roles', 'role', ['id_task' => $id_task, 'id_user' => $id_user]);\n      if ( $r ){\n        return $opt->code($r);\n      }\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1327,
            "endLine": 1335,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "hasRole",
            "returns": [],
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getComments": {
            "name": "getComments",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getComments($id_task){\n    if ( $this->exists($id_task) ){\n      $note = new \\bbn\\Appui\\Note($this->db);\n      $ids = $this->getCommentsIds($id_task);\n      $r = [];\n      foreach ( $ids as $id_note ){\n        array_push($r, $note->get($id_note));\n      }\n      return $r;\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1337,
            "endLine": 1348,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getComments",
            "returns": [],
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getComment": {
            "name": "getComment",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getComment($id_task, $id_note){\n    if ( $this->exists($id_task) ){\n      $note = new \\bbn\\Appui\\Note($this->db);\n      return $note->get($id_note);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1350,
            "endLine": 1356,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getComment",
            "returns": [],
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_note",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUsers": {
            "name": "getUsers",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUsers($id_task){\n    return $this->db->getColumnValues('bbn_tasks_roles', 'id_user', ['id_task' => $id_task]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1358,
            "endLine": 1360,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getUsers",
            "returns": [],
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getDeciders": {
            "name": "getDeciders",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDeciders(string $idTask, bool $top = false): array\n  {\n    if ($this->exists($idTask)\n      && ($role = $this->idRole('deciders'))\n    ){\n      $deciders = $this->db->getColumnValues('bbn_tasks_roles', 'id_user', [\n        'id_task' => $idTask,\n        'role' => $role\n      ]) ?: [];\n      if ($top && ($idParent = $this->getIdParent($idTask))) {\n        $deciders = X::mergeArrays($deciders, $this->getDeciders($idParent, true));\n      }\n      return \\array_unique($deciders);\n    }\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1362,
            "endLine": 1377,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getDeciders",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "idTask",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "top",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "comment": {
            "name": "comment",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function comment($id_task, array $cfg){\n    if ( $this->exists($id_task) && !empty($cfg) ){\n      $note = new \\bbn\\Appui\\Note($this->db);\n      $r = $note->insert(\n        (empty($cfg['title']) ? '' : $cfg['title']),\n        (empty($cfg['text']) ? '' : $cfg['text']),\n        \\bbn\\Appui\\Note::getOptionId('tasks', 'types')\n      );\n      if ( $r ){\n        $this->db->insert('bbn_tasks_notes', [\n          'id_note' => $r,\n          'id_task' => $id_task\n        ]);\n        if ( !empty($cfg['files']) ){\n          $filename = '';\n          $extension = '';\n          $length = 0;\n          foreach ( $cfg['files'] as $f ){\n            $ext = \\bbn\\Str::fileExt($f, true);\n            if (\n              (\\strlen($ext[0]) < $length) ||\n              ($ext[1] !== $extension) ||\n              (strpos($ext[0], $filename) !== 0) ||\n              !preg_match('\/_h[\\d]+\/i', substr($ext[0], $length))\n            ){\n              $filename = $ext[0];\n              $extension = $ext[1];\n              $length = \\strlen($filename);\n              $note->addMedia($r, $f);\n            }\n          }\n        }\n        if ( !empty($cfg['links']) ){\n          foreach ( $cfg['links'] as $f ){\n            $ext = \\bbn\\Str::fileExt($f['image'], true);\n            if ( !preg_match('\/_h[\\d]+\/i', substr($ext[0], 0)) ){\n              $note->addMedia(\n                $r,\n                $f['image'],\n                ['url' => $f['url'], 'description' => $f['desc']],\n                $f['title'],\n                'link'\n              );\n            }\n          }\n        }\n        $this->addLog($id_task, 'comment_insert', [$this->id_user, empty($cfg['title']) ? $cfg['text'] : $cfg['title']]);\n      }\n      return $r;\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1379,
            "endLine": 1430,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "comment",
            "returns": [],
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addLog": {
            "name": "addLog",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addLog($id_task, $action, array $value = []){\n    if ( $this->id_user && $this->exists($id_task) ){\n      $data = [\n        'id_task' => $id_task,\n        'id_user' => $this->id_user,\n        'action' => \\bbn\\Str::isUid($action) ? $action : $this->idAction($action),\n        'value' => empty($value) ? '' : json_encode($value),\n        'chrono' => empty($this->date) ? microtime(true) : number_format((float)strtotime($this->date), 4, '.', '')\n      ];\n      \/\/$this->notify($data);\n      return $this->db->insert('bbn_tasks_logs', $data);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1432,
            "endLine": 1445,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "addLog",
            "returns": [],
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "action",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "notify": {
            "name": "notify",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function notify(array $data){\n    if ( isset($data['id_task'], $data['id_user'], $data['action']) && ($title = $this->getTitle($data['id_task'])) ){\n      $text = $this->translateLog($data);\n      $users = \\array_values(\\array_filter($this->getUsers($data['id_task']), function($a) use($data){\n        return $a !== $data['id_user'];\n      }));\n      if (!empty($users)) {\n        $notif = new bbn\\Appui\\Notification($this->db);\n        return $notif->insert($title, $text, null, $users, true);\n      }\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1447,
            "endLine": 1459,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "notify",
            "returns": [],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "exists": {
            "name": "exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function exists($id_task){\n    return $this->db->count('bbn_tasks', ['id' => $id_task]) ? true : false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1461,
            "endLine": 1463,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "exists",
            "returns": [],
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDeleted": {
            "name": "isDeleted",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDeleted(string $idTask): bool\n  {\n    return $this->exists($idTask)\n      && !$this->db->selectOne('bbn_tasks', 'active', ['id' => $idTask]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1465,
            "endLine": 1469,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isDeleted",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "idTask",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addRole": {
            "name": "addRole",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addRole($id_task, $role, $id_user = null){\n    if ( $this->exists($id_task) ){\n      if ( !bbn\\Str::isUid($role) ){\n        \/*if ( substr($role, -1) !== 's' ){\n          $role .= 's';\n        }*\/\n        $role = $this->idRole($role);\n      }\n      if ( bbn\\Str::isUid($role) && ($id_user || $this->id_user) ){\n        if ( $this->db->insert('bbn_tasks_roles', [\n          'id_task' => $id_task,\n          'id_user' => $id_user ?: $this->id_user,\n          'role' => $role\n        ]) ){\n          $this->addLog($id_task, 'role_insert', [$id_user ?: $this->id_user, $role]);\n          return 1;\n        }\n      }\n    }\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1471,
            "endLine": 1491,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "addRole",
            "returns": [],
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "role",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "removeRole": {
            "name": "removeRole",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeRole($id_task, $id_user = null){\n    if ( $this->exists($id_task) && ($id_user || $this->id_user) ){\n      $role = $this->db->selectOne('bbn_tasks_roles', 'role', [\n        'id_task' => $id_task,\n        'id_user' => $id_user ?: $this->id_user\n      ]);\n      if ( $this->db->delete('bbn_tasks_roles', [\n        'id_task' => $id_task,\n        'id_user' => $id_user ?: $this->id_user\n      ]) ){\n        $this->addLog($id_task, 'role_delete', [$id_user ?: $this->id_user, $role]);\n        return 1;\n      }\n    }\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1493,
            "endLine": 1508,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "removeRole",
            "returns": [],
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "setDate": {
            "name": "setDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDate($date){\n    $this->date = $date;\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1510,
            "endLine": 1513,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDate",
            "returns": [],
            "arguments": [
                {
                    "name": "date",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "unsetDate": {
            "name": "unsetDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unsetDate(){\n    $this->date = false;\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1515,
            "endLine": 1518,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "unsetDate",
            "returns": [],
            "arguments": []
        },
        "setUser": {
            "name": "setUser",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setUser(string $id_user){\n    if ( \\bbn\\Str::isUid($id_user) ){\n      $this->id_user = $id_user;\n    }\n    return $this; \n  }",
            "parent": false,
            "trait": false,
            "startLine": 1520,
            "endLine": 1525,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setUser",
            "returns": [],
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "unsetUser": {
            "name": "unsetUser",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unsetUser(){\n    if ( $user = bbn\\User::getInstance() ){\n      $this->id_user = $user->getId();\n    }\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1527,
            "endLine": 1532,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "unsetUser",
            "returns": [],
            "arguments": []
        },
        "insert": {
            "name": "insert",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insert(array $cfg, bool $addRole = true){\n    if (($opt = bbn\\Appui\\Option::getInstance())\n      && ($idType = $opt->fromCode('tasks', 'types', 'note', 'appui'))\n      && isset($cfg['title'], $cfg['type'])\n      && ($idNote = $this->noteCls->insert($cfg['title'], $cfg['content'] ?? '', $idType))\n    ) {\n      $creationDate = $this->date ?: date('Y-m-d H:i:s');\n      $max = $this->db->selectOne('bbn_tasks', 'MAX(easy_id)', ['YEAR(creation_date)' => date('Y', strtotime($creationDate))]);\n      $easyId = !empty($max) ? $max + 1 : 1;\n      if ( $this->db->insert('bbn_tasks', [\n        'id_note' => $idNote,\n        'type' => $cfg['type'],\n        'priority' => !empty($cfg['priority']) ? $cfg['priority'] : 3,\n        'id_parent' => !empty($cfg['id_parent']) ? $cfg['id_parent'] : null,\n        'id_alias' => !empty($cfg['id_alias']) ? $cfg['id_alias'] : null,\n        'deadline' => !empty($cfg['deadline']) ? $cfg['deadline'] : null,\n        'id_user' => $this->id_user ?: null,\n        'state' => !empty($cfg['state']) ? $cfg['state'] : $this->idState('opened'),\n        'creation_date' => $creationDate,\n        'easy_id' => $easyId,\n        'private' => !empty($cfg['private']) ? 1 : 0\n      ]) ){\n        $id = $this->db->lastId();\n        $this->addLog($id, 'insert');\n        if ($addRole) {\n          $this->addRole($id, 'managers');\n        }\n        \/*\n        $subject = \"Nouveau bug post\u00e9 par {$this->user}\";\n        $text = \"<p>{$this->user} a post\u00e9 un nouveau bug<\/p>\".\n          \"<p><strong>$title<\/strong><\/p>\".\n          \"<p>\".nl2br($text).\"<\/p>\".\n          \"<p><em>Rendez-vous dans votre interface APST pour lui r\u00e9pondre<\/em><\/p>\";\n        $this->email($id, $subject, $text);\n        *\/\n        return $id;\n      }\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1534,
            "endLine": 1573,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "insert",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "addRole",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "update": {
            "name": "update",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function update($idTask, $prop, $value){\n    if ( $this->exists($idTask) ){\n      $ok = false;\n      $toDelete = false;\n      $states = $this->states();\n      switch ($prop) {\n        case 'deadline':\n          $prev = $this->db->selectOne('bbn_tasks', 'deadline', ['id' => $idTask]);\n          if ( !$prev && $value ){\n            $this->addLog($idTask, 'deadline_insert', [$value]);\n            $ok = 1;\n          }\n          else if ( $prev && !$value ){\n            $this->addLog($idTask, 'deadline_delete', [$value]);\n            $ok = 1;\n          }\n          if ( $prev && $value && ($prev !== $value) ){\n            $this->addLog($idTask, 'deadline_update', [$prev, $value]);\n            $ok = 1;\n          }\n          break;\n        case 'price':\n          $prev = $this->db->selectOne('bbn_tasks', 'price', ['id' => $idTask]);\n          if ( !$prev && $value ){\n            $this->addLog($idTask, 'price_insert', [$value]);\n            $ok = 1;\n          }\n          else if ( $prev && !$value ){\n            $this->addLog($idTask, 'price_delete', [$prev]);\n            $ok = 1;\n          }\n          if ( $prev && $value && ($prev !== $value) ){\n            $this->addLog($idTask, 'price_update', [$prev, $value]);\n            $ok = 1;\n          }\n          if ($ok) {\n            $oldState = $this->getState($idTask);\n          }\n          break;\n        case 'state':\n          switch ( $value ){\n            case $states['closed']:\n              $ok = 1;\n              $this->addLog($idTask, 'task_close');\n              $this->stopAllTracks($idTask);\n              break;\n            case $states['holding']:\n              $ok = 1;\n              $this->addLog($idTask, 'task_hold');\n              $this->stopAllTracks($idTask);\n              break;\n            case $states['ongoing']:\n              $ok = 1;\n              $this->addLog($idTask, 'task_start');\n              break;\n            case $states['opened']:\n              $ok = 1;\n              $this->addLog($idTask, 'task_reopen');\n              break;\n            case $states['unapproved']:\n              $this->addLog($idTask, 'task_unapproved');\n              $this->stopAllTracks($idTask);\n              $ok = 1;\n              break;\n            case $states['canceled']:\n              $this->addLog($idTask, 'task_cancel');\n              $this->stopAllTracks($idTask);\n              $ok = 1;\n              break;\n            case $states['deleted']:\n              $this->stopAllTracks($idTask);\n              $ok = 1;\n              $toDelete = 1;\n              break;\n          }\n          break;\n        case 'title':\n        case 'content':\n          if (($idNote = $this->getIdNote($idTask))\n            && ($n = $this->noteCls->get($idNote))\n          ) {\n            $title = $n['title'];\n            $content = $n['content'];\n            $log = '_update';\n            $vals = [];\n            if (($prop === 'title')\n              && ($title !== $value)\n            ) {\n              $vals = [$title, $value];\n              $title = $value;\n            }\n            else if (($prop === 'content')\n              && ($content !== $value)\n            ) {\n              $prev = $content;\n              if (empty($prev)) {\n                $log = '_insert';\n                $vals = [$value];\n              }\n              else if (empty($value)) {\n                $log = '_delete';\n              }\n              else {\n                $vals = [$content, $value];\n              }\n              $content = $value;\n            }\n            if ($this->noteCls->insertVersion($idNote, $title, $content, $this->noteCls->getExcerpt($title, $content))) {\n              $this->addLog($idTask, $prop.$log, $vals);\n              return true;\n            }\n          }\n          break;\n        default:\n          if ( $prev = $this->db->selectOne('bbn_tasks', $prop, ['id' => $idTask]) ){\n            $ok = 1;\n            $this->addLog($idTask, $prop.'_update', [$prev, $value]);\n          }\n          break;\n      }\n      if ($ok && $this->db->update('bbn_tasks', [$prop => $value], ['id' => $idTask])) {\n        if ($prop === 'price') {\n          if (($idParent = $this->getIdParent($idTask))) {\n            if (!empty($value)\n              && ($this->getState($idParent) !== $states['unapproved'])\n            ) {\n              $this->update($idParent, 'state', $states['unapproved']);\n            }\n            else if (empty($value)\n              && ($this->getState($idParent) === $states['unapproved'])\n              && !$this->getUnapprovedChildrenIds($idParent)\n            ) {\n              $this->update($idParent, 'state', $states['opened']);\n            }\n          }\n          $this->update($idTask, 'state', empty($value) ? $states['opened'] : $states['unapproved']);\n        }\n        if ($prop === 'state') {\n          switch ($value) {\n            case $states['unapproved']:\n              if (!!$this->getPrice($idTask) && ($children = $this->getChildrenIds($idTask))) {\n                foreach ($children as $child) {\n                  $s = $this->getState($child);\n                  if (($s !== $states['unapproved'])\n                    && ($s !== $states['closed'])\n                  ) {\n                    $this->update($child, 'state', $states['unapproved']);\n                  }\n                }\n              }\n              if (($idParent = $this->getIdParent($idTask))\n                && ($this->getState($idParent) !== $states['unapproved'])\n              ) {\n                $this->update($idParent, 'state', $states['unapproved']);\n              }\n              break;\n\n            case $states['opened']:\n              if ($children = $this->getUnapprovedChildrenIds($idTask)) {\n                foreach ($children as $child) {\n                  $this->update($child, 'state', $states['opened']);\n                }\n              }\n              if (($idParent = $this->getIdParent($idTask))\n                && ($this->getState($idParent) === $states['unapproved'])\n                && !$this->getUnapprovedChildrenIds($idParent)\n              ) {\n                $this->update($idParent, 'state', $states['opened']);\n              }\n              break;\n\n            case $states['canceled']:\n            case $states['deleted']:\n              if ($children = $this->getChildrenIds($idTask)) {\n                foreach ($children as $child) {\n                  $this->update($child, 'state', $value);\n                }\n              }\n              break;\n          }\n        }\n        if ($toDelete) {\n          return $this->delete($idTask);\n        }\n        return true;\n      }\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1575,
            "endLine": 1763,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "update",
            "returns": [],
            "arguments": [
                {
                    "name": "idTask",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "prop",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function delete($id): bool\n  {\n    return (bool)$this->db->update('bbn_tasks', ['active' => 0], ['id' => $id])\n      && $this->addLog($id, 'delete');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1765,
            "endLine": 1769,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "delete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "approve": {
            "name": "approve",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function approve(string $id, bool $approveChildren = true, bool $approveParent = true){\n    if ($this->exists($id)\n      && ($perm = \\bbn\\User\\Permissions::getInstance())\n      && ($currentState = $this->getState($id))\n      && ($unapproved = $this->idState('unapproved'))\n      && ($currentState === $unapproved)\n      && ((($deciders = $this->getDeciders($id, true))\n          && \\in_array($this->id_user, $deciders))\n        || (($idFinancialManager = $this->idPrivilege('financial_manager'))\n          && ($idPermFM = $perm->optionToPermission($idFinancialManager))\n          && $perm->has($idPermFM))\n      )\n    ){\n      $price = $this->getPrice($id);\n      if (empty($price)) {\n        $price = $this->getChildrenPrices($id);\n      }\n      if (!($opened = $this->idState('opened'))) {\n        throw new \\Exception(X::_('No state found with the code opened'));\n      }\n      if ($approveChildren\n        && ($children = $this->getUnapprovedChildrenIds($id))\n      ) {\n        foreach ($children as $child) {\n          $this->approve($child, true, false);\n        }\n      }\n      if (!$this->getUnapprovedChildrenIds($id)\n        && (($this->getState($id) === $this->idState('opened'))\n          || $this->update($id, 'state', $opened))\n      ) {\n        if (!empty($price)) {\n          $this->addLog($id, 'price_approved', [$price]);\n        }\n        if ($approveParent\n          && ($parent = $this->getIdParent($id))\n          && ($this->getState($parent) === $unapproved)\n          && !$this->getUnapprovedChildrenIds($parent)\n        ) {\n          $this->approve($parent, false);\n        }\n        return true;\n      }\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1771,
            "endLine": 1816,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "approve",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "approveChildren",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                },
                {
                    "name": "approveParent",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "up": {
            "name": "up",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function up($id){\n    if ( $info = $this->info($id) ){\n      return $this->update($id, $info['title'], $info['status'], $info['priority']-1, $info['deadline']);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1818,
            "endLine": 1822,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "up",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "down": {
            "name": "down",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function down($id){\n    if ( $info = $this->info($id) ){\n      return $this->update($id, $info['title'], $info['status'], $info['priority']+1, $info['deadline']);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1824,
            "endLine": 1828,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "down",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "subscribe": {
            "name": "subscribe",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function subscribe($id){\n    return $this->db->insert('bbn_tasks_cc', ['id_user' => $this->id_user, 'id_task' => $id]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1830,
            "endLine": 1832,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "subscribe",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "unsubscribe": {
            "name": "unsubscribe",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unsubscribe($id){\n    return $this->db->delete('bbn_tasks_cc', ['id_user' => $this->id_user, 'id_task' => $id]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1834,
            "endLine": 1836,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "unsubscribe",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "ping": {
            "name": "ping",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function ping($id){\n    return $this->addLog($id, 'task_ping');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1838,
            "endLine": 1840,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "ping",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "startTrack": {
            "name": "startTrack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function startTrack(string $idTask, $idUser = false){\n    if (!$this->getActiveTrack($idUser)\n      && ($ongoing = $this->idState('ongoing'))\n      && ($ongoing === $this->getState($idTask))\n      && ($role = $this->hasRole($idTask, $idUser ?: $this->id_user))\n      && (($role === 'managers') || ($role === 'workers'))\n    ){\n      $start = date('Y-m-d H:i:s');\n      $tokens = null;\n      if ($this->isTokensActive()\n        && $this->getTokensCategory($idTask)\n        && ($tokensCfg = $this->getTokensCfg())\n        && !empty($tokensCfg['step'])\n      ) {\n        $type = !empty($tokensCfg['checkType']) ? $this->getType($idTask) : null;\n        $lastTrack = $this->getLastStoppedTrack($idUser, $type);\n        if (!empty($lastTrack)) {\n          $d = strtotime($start) - strtotime($lastTrack['end']);\n          if ($d < $tokensCfg['step']) {\n            $this->db->update('bbn_tasks_sessions', [\n              'length' => $lastTrack['length'] + $d\n            ], [\n              'id' => $lastTrack['id']\n            ]);\n            $lastTokens = $this->calcTokensRaw($lastTrack['id'], true);\n            $this->db->update('bbn_tasks_sessions', [\n              'tokens' => floor($lastTokens)\n            ], [\n              'id' => $lastTrack['id']\n            ]);\n            if ($lastTokens - floor($lastTokens)) {\n              $tokens = 1;\n            }\n          }\n        }\n      }\n\n      return $this->db->insert('bbn_tasks_sessions', [\n        'id_task' => $idTask,\n        'id_user' => $idUser ?: $this->id_user,\n        'start' => $start,\n        'tokens' => $tokens\n      ]);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1842,
            "endLine": 1888,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "startTrack",
            "returns": [],
            "arguments": [
                {
                    "name": "idTask",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "idUser",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "stopTrack": {
            "name": "stopTrack",
            "summary": "Stops a track.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function stopTrack($idTask, $message = false, $idUser = false){\n    $ok = false;\n    $now = time();\n    if (($activeTrack = $this->getActiveTrack($idUser))\n      && ($activeTrack['id_task'] === $idTask)\n    ) {\n      $ok = true;\n      if (!empty($message)\n        && !($idNote = $this->comment($idTask, [\n          'title' => X::_('Report tracker').' '.date('d M Y H:i', strtotime($activeTrack['start'])).' - '.date('d M Y H:i', $now),\n          'text' => $message\n        ]))\n      ) {\n        $ok = false;\n      }\n\n      if ($ok) {\n        $length = $now - strtotime($activeTrack['start']);\n        $tokens = null;\n        if ($this->isTokensActive()\n          && $this->getTokensCategory($idTask)\n        ) {\n          $tokens = ceil($this->calcTokens(\n            $activeTrack['id'],\n            $activeTrack['tokens'] === 1,\n            $activeTrack['start'],\n            date('Y-m-d H:i:s', $now)\n          ));\n        }\n\n        $ok = $this->db->update('bbn_tasks_sessions', [\n          'length' => $length,\n          'tokens' => $tokens,\n          'id_note' => !empty($idNote) ? $idNote : NULL\n        ], [\n          'id' => $activeTrack['id']\n        ]);\n      }\n    }\n\n    return (bool)$ok;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1898,
            "endLine": 1939,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "stopTrack",
            "returns": [],
            "arguments": [
                {
                    "name": "idTask",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ask The task's ID"
                },
                {
                    "name": "message",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "The message to attach to track (optional)"
                },
                {
                    "name": "idUser",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "ser The track's user. If you give 'false', it will use the current user"
                }
            ],
            "doc": {
                "description": "Stops a track.\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$id",
                        "description": "ask The task's ID"
                    },
                    {
                        "tag": "param",
                        "name": "$message",
                        "description": "The message to attach to track (optional)"
                    },
                    {
                        "tag": "param",
                        "name": "$id",
                        "description": "ser The track's user. If you give 'false', it will use the current user"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Stops a track.\n   *\n   * @param  string  $idTask The task's ID\n   * @param  boolean|string $message The message to attach to track (optional)\n   * @param  boolean|string $idUser The track's user. If you give 'false', it will use the current user\n   * @return boolean\n   *\/"
        },
        "editTrack": {
            "name": "editTrack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function editTrack(string $id, string $start, string $end, ?string $message = null): bool\n  {\n    if (strtotime($end) < strtotime($start)) {\n      throw new \\Exception(X::_('The end date must be greater than the start date'));\n    }\n\n    $currentData = $this->getTrack($id);\n    $idNote = $currentData['id_note'];\n    $ok = true;\n    \/\/ Message\n    if (empty($message) && !empty($idNote)) {\n      $this->noteCls->remove($idNote, true);\n      $idNote = null;\n    }\n    else if (!empty($message)) {\n      $title = X::_(\n        'Report tracker %s - %s',\n        date('d M Y H:i', strtotime($start)),\n        date('d M Y H:i', strtotime($end))\n      );\n      if (!empty($idNote)) {\n        $oldMessage = $this->noteCls->get($idNote);\n        if (($oldMessage['content'] !== $message)\n          || ($oldMessage['title'] !== $title)\n        ) {\n          $ok = $this->noteCls->update($idNote, $title, $message);\n        }\n      }\n      else {\n        $idNote = $this->comment($currentData['id_task'], [\n          'title' => $title,\n          'text' => $message\n        ]);\n        $ok = !empty($idNote);\n      }\n    }\n\n    if ($ok\n      && (($currentData['start'] !== $start)\n        || ($currentData['end'] !== $end)\n        || ($currentData['id_note'] !== $idNote))\n    ) {\n      $ok = (bool)$this->db->update('bbn_tasks_sessions', [\n        'id_note' => !empty($idNote) ? $idNote : null,\n        'start' => $start,\n        'length' => strtotime($end) - strtotime($start)\n      ], [\n        'id' => $id\n      ]);\n\n      if (!empty($ok)\n        && $this->isTokensActive()\n        && $this->getTokensCategory($currentData['id_task'])\n      ) {\n        $tokens = $this->calcTokens($id, true, $start, $end);\n        if ($tokens !== $currentData['tokens']) {\n          $ok = (bool)$this->db->update('bbn_tasks_sessions', [\n            'tokens' => $tokens\n          ], [\n            'id' => $id\n          ]);\n        }\n\n        \/\/ Tokens\n        $this->checkTokens($id, $currentData['start'], $currentData['end']);\n        $this->checkTokens($id, $start, $end);\n      }\n\n    }\n\n    return $ok;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1941,
            "endLine": 2012,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "editTrack",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "end",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "message",
                    "position": 3,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "deleteTrack": {
            "name": "deleteTrack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteTrack(string $id): bool\n  {\n    if ($track = $this->getTrack($id)) {\n      if ($track['id_user'] !== $this->id_user) {\n        return false;\n      }\n\n      \/\/ Message\n      if ($idNote = $this->getTrackIdNote($id)) {\n        $this->noteCls->remove($idNote, true);\n        $this->addLog($track['id_task'], 'comment_delete');\n      }\n\n      \/\/ Tokens\n      if ($this->isTokensActive()\n        && $this->getTokensCategory($track['id_task'])\n      ) {\n        $this->db->update('bbn_tasks_sessions', [\n          'start' => '0000-00-00 00:00:00',\n          'length' => null,\n        ], [\n          'id' => $id\n        ]);\n        $this->checkTokens($id, $track['start'], $track['end']);\n      }\n\n      return (bool)$this->db->delete('bbn_tasks_sessions', ['id' => $id]);\n    }\n\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2014,
            "endLine": 2044,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteTrack",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "stopAllTracks": {
            "name": "stopAllTracks",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function stopAllTracks($id){\n    if ($this->isTokensActive()\n      && $this->getTokensCategory($id)\n    ) {\n      if ($tracks = $this->db->getRows(\"\n        SELECT id, start\n        FROM bbn_tasks_sessions\n        WHERE id_task = ?\n          AND `length` IS NULL\",\n        hex2bin($id)\n      )) {\n        $now = time();\n        foreach ($tracks as $track) {\n          $this->db->query(\"\n            UPDATE bbn_tasks_sessions\n            SET `length` = ?\n            WHERE id = ?\n              AND `length` IS NULL\",\n            hex2bin($track['id']),\n            $now - strtotime($track['start'])\n          );\n          $this->checkTokens($track['id']);\n        }\n      }\n    }\n    else {\n      $this->db->query(\"\n        UPDATE bbn_tasks_sessions\n        SET `length` = TO_SECONDS(NOW())-TO_SECONDS(start)\n        WHERE id_task = ?\n          AND `length` IS NULL\",\n        hex2bin($id)\n      );\n    }\n\n    return $this->db->getOne(\"\n      SELECT COUNT(*)\n      FROM bbn_tasks_sessions\n      WHERE id_task = ?\n        AND `length` IS NULL\",\n      hex2bin($id)\n    ) === 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2046,
            "endLine": 2088,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "stopAllTracks",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "switchTracker": {
            "name": "switchTracker",
            "summary": "Switch the tracker from a task to another.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function switchTracker($idTask, $idNewTask, $message = false, $idUser = false): bool\n  {\n    if ($this->stopTrack($idTask, $message, $idUser)) {\n      sleep(1);\n      return $this->startTrack($idNewTask, $idUser);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2099,
            "endLine": 2107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "switchTracker",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "idTask",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ask The current task's ID"
                },
                {
                    "name": "idNewTask",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ewTask The new task's ID"
                },
                {
                    "name": "message",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "The message to attach to track (optional)"
                },
                {
                    "name": "idUser",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "ser The track's user. If you give 'false', it will use the current user"
                }
            ],
            "doc": {
                "description": "Switch the tracker from a task to another.\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$id",
                        "description": "ask The current task's ID"
                    },
                    {
                        "tag": "param",
                        "name": "$id",
                        "description": "ewTask The new task's ID"
                    },
                    {
                        "tag": "param",
                        "name": "$message",
                        "description": "The message to attach to track (optional)"
                    },
                    {
                        "tag": "param",
                        "name": "$id",
                        "description": "ser The track's user. If you give 'false', it will use the current user"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Switch the tracker from a task to another.\n   *\n   * @param  string  $idTask The current task's ID\n   * @param  string  $idNewTask The new task's ID\n   * @param  boolean|string $message The message to attach to track (optional)\n   * @param  boolean|string $idUser The track's user. If you give 'false', it will use the current user\n   * @return boolean\n   *\/"
        },
        "getActiveTrack": {
            "name": "getActiveTrack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getActiveTrack($id_user = false, ?string $idTask = null): ?array\n  {\n    $where = [\n      'id_user' => $id_user ?: $this->id_user,\n      'length' => null\n    ];\n    if (!empty($idTask)) {\n      $where['id_task'] = $idTask;\n    }\n\n    return $this->db->rselect('bbn_tasks_sessions', [], $where);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2109,
            "endLine": 2120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getActiveTrack",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "idTask",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getLastStoppedTrack": {
            "name": "getLastStoppedTrack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastStoppedTrack(?string $idUser = null, ?string $taskType = null): ?array\n  {\n    return $this->db->rselect([\n      'table' => 'bbn_tasks_sessions',\n      'fields' => [\n        'bbn_tasks_sessions.id',\n        'bbn_tasks_sessions.end',\n        'bbn_tasks_sessions.length',\n        'bbn_tasks_sessions.tokens',\n        'bbn_tasks.type'\n      ],\n      'join' => [[\n        'table' => 'bbn_tasks',\n        'on' => [[\n          'field' => 'bbn_tasks.id',\n          'exp' => 'bbn_tasks_sessions.id_task'\n        ]]\n      ]],\n      'where' => [[\n        'field' => 'bbn_tasks_sessions.id_user',\n        'value' => $idUser ?: $this->id_user\n      ], [\n        'field' => 'bbn_tasks.active' ,\n        'value' => 1\n      ], [\n        'field' => 'bbn_tasks_sessions.end',\n        'operator' => 'isnotnull'\n      ], [\n        'field' => 'bbn_tasks.type',\n        !empty($taskType) ? 'value' : 'operator' => !empty($taskType) ? $taskType : 'isnotnull',\n      ]],\n      'order' => [\n        'bbn_tasks_sessions.end' => 'DESC'\n      ],\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2122,
            "endLine": 2157,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getLastStoppedTrack",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "idUser",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "taskType",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getTrack": {
            "name": "getTrack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTrack(string $id): ?array\n  {\n    return $this->db->rselect('bbn_tasks_sessions', [], ['id' => $id]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2159,
            "endLine": 2162,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTrack",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTracks": {
            "name": "getTracks",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTracks($id_task){\n    return $this->db->getRows(\"\n      SELECT id_user, SUM(length) AS total_time, COUNT(id_note) as num_notes, SUM(tokens) as total_tokens\n      FROM bbn_tasks_sessions\n      WHERE id_task = ?\n      GROUP BY id_user\",\n      hex2bin($id_task)\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2164,
            "endLine": 2172,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTracks",
            "returns": [],
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTracksByDates": {
            "name": "getTracksByDates",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTracksByDates(string $start, string $end, ?string $idUser = null): ?array\n  {\n    return $this->db->rselectAll([\n      'table' => 'bbn_tasks_sessions',\n      'fields' => $this->db->getFieldsList('bbn_tasks_sessions'),\n      'join' => [[\n        'table' => 'bbn_tasks',\n        'on' => [[\n          'field' => 'bbn_tasks.id',\n          'exp' => 'bbn_tasks_sessions.id_task'\n        ]]\n      ]],\n      'where' => [\n        'conditions' => [[\n          'field' => 'bbn_tasks_sessions.start',\n          'operator' => '<',\n          'value' => $end\n        ], [\n          'field' => 'bbn_tasks_sessions.end',\n          'operator' => '>',\n          'value' => $start\n        ], [\n          'field' => 'bbn_tasks_sessions.id_user',\n          'value' => $idUser ?: $this->id_user\n        ], [\n          'field' => 'bbn_tasks_sessions.length',\n          'operator' => 'isnotnull'\n        ], [\n          'logic' => 'OR',\n          'conditions' => [[\n            'field' => 'bbn_tasks_sessions.start',\n            'operator' => '>=',\n            'value' => $start\n          ], [\n            'field' => 'bbn_tasks_sessions.end',\n            'operator' => '<=',\n            'value' => $end\n          ]]\n        ]]\n      ],\n      'order' => [\n        'bbn_tasks_sessions.start' => 'ASC'\n      ]\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2174,
            "endLine": 2218,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "getTracksByDates",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "start",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "end",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "idUser",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getTrackStart": {
            "name": "getTrackStart",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTrackStart(string $idTrack): ?string\n  {\n    return $this->db->selectOne('bbn_tasks_sessions', 'start', ['id' => $idTrack]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2220,
            "endLine": 2223,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTrackStart",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "idTrack",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTrackEnd": {
            "name": "getTrackEnd",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTrackEnd(string $idTrack): ?string\n  {\n    return $this->db->selectOne('bbn_tasks_sessions', 'end', ['id' => $idTrack]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2225,
            "endLine": 2228,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTrackEnd",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "idTrack",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTrackLength": {
            "name": "getTrackLength",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTrackLength(string $idTrack): ?string\n  {\n    return $this->db->selectOne('bbn_tasks_sessions', 'length', ['id' => $idTrack]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2230,
            "endLine": 2233,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTrackLength",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "idTrack",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTrackIdNote": {
            "name": "getTrackIdNote",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTrackIdNote(string $idTrack): ?string\n  {\n    return $this->db->selectOne('bbn_tasks_sessions', 'id_note', ['id' => $idTrack]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2235,
            "endLine": 2238,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTrackIdNote",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "idTrack",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTrackNote": {
            "name": "getTrackNote",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTrackNote(string $idTrack): ?array\n  {\n    if ($idNote = $this->getTrackIdNote($idTrack)) {\n      return $this->noteCls->get($idNote);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2240,
            "endLine": 2247,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTrackNote",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "idTrack",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTasksTracks": {
            "name": "getTasksTracks",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTasksTracks(?string $idUser = null){\n    if (\n      ($manager = $this->idRole('managers')) &&\n      ($worker = $this->idRole('workers')) &&\n      ($ongoing = $this->idState('ongoing'))\n    ){\n      return $this->db->getRows(\"\n        SELECT bbn_tasks.*, bbn_notes_versions.title, bbn_notes_versions.content\n        FROM bbn_tasks\n          JOIN bbn_notes_versions\n            ON bbn_notes_versions.id_note = bbn_tasks.id_note\n            AND bbn_notes_versions.latest = 1\n        \tJOIN bbn_tasks_roles\n        \t\tON bbn_tasks_roles.id_task = bbn_tasks.id\n        \t\tAND bbn_tasks_roles.id_user = ?\n        \t\tAND (\n              bbn_tasks_roles.role = ?\n        \t\t\tOR bbn_tasks_roles.role = ?\n        \t\t)\n        WHERE bbn_tasks.active = 1\n          AND bbn_tasks.state = ?\n        GROUP BY bbn_tasks.id\",\n        hex2bin($idUser ?: $this->id_user),\n        hex2bin($manager),\n        hex2bin($worker),\n        hex2bin($ongoing)\n      );\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2249,
            "endLine": 2277,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getTasksTracks",
            "returns": [],
            "arguments": [
                {
                    "name": "idUser",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "moveTrack": {
            "name": "moveTrack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function moveTrack(string $idTrack, string $idTask): bool\n  {\n    if ($track = $this->getTrack($idTrack)) {\n      if ($track['id_user'] !== $this->id_user) {\n        return false;\n      }\n\n      if ($this->db->update('bbn_tasks_sessions', ['id_task' => $idTask], ['id' => $idTrack])) {\n        if (!empty($track['id_note'])) {\n          if ($this->db->update('bbn_tasks_notes', ['id_task' => $idTask], [\n            'id_note' => $track['id_note'],\n            'id_task' => $track['id_task']\n          ])) {\n            $this->addLog($track['id_task'], 'comment_delete');\n            $this->addLog($idTask, 'comment_insert');\n          }\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2279,
            "endLine": 2302,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "moveTrack",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "idTrack",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "idTask",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getInvoice": {
            "name": "getInvoice",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getInvoice($id_task){\n    if ( $id_invoice = $this->db->selectOne('bbn_tasks_invoices', 'id_invoice', ['id_task' => $id_task]) ){\n      return $this->db->rselect('bbn_invoices', [], ['id' => $id_invoice]);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2304,
            "endLine": 2309,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getInvoice",
            "returns": [],
            "arguments": [
                {
                    "name": "id_task",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCfg": {
            "name": "getCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCfg(string $id): array\n  {\n    if ($cfg = $this->db->selectOne('bbn_tasks', 'cfg', ['id' => $id])) {\n      return \\json_decode($cfg, true);\n    }\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2311,
            "endLine": 2317,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setCfg": {
            "name": "setCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setCfg(string $id, array $cfg): bool\n  {\n    return (bool)$this->db->update('bbn_tasks', ['cfg' => \\json_encode($cfg)], ['id' => $id]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2319,
            "endLine": 2322,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setCfg",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isTokensActive": {
            "name": "isTokensActive",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isTokensActive(): bool\n  {\n    if ($cfg = $this->getTokensCfg()) {\n      return !empty($cfg['enabled']);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2324,
            "endLine": 2331,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isTokensActive",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "getTokensCfg": {
            "name": "getTokensCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTokensCfg(): ?array\n  {\n    if (empty($this->tokensConfig)) {\n      $this->tokensConfig = self::getOption('config', 'tokens');\n    }\n\n    return $this->tokensConfig;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2333,
            "endLine": 2340,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getTokensCfg",
            "returns": [
                null,
                "array"
            ],
            "arguments": []
        },
        "getTokensBillingPeriod": {
            "name": "getTokensBillingPeriod",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTokensBillingPeriod(): ?array\n  {\n    if ($cfg = $this->getTokensCfg()) {\n      return $cfg['billing'];\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2342,
            "endLine": 2349,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getTokensBillingPeriod",
            "returns": [
                null,
                "array"
            ],
            "arguments": []
        },
        "getTokensCurrentBillingPeriod": {
            "name": "getTokensCurrentBillingPeriod",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTokensCurrentBillingPeriod(): ?array\n  {\n    if (($billingPeriod = $this->getTokensBillingPeriod())\n      && !empty($billingPeriod['day'])\n      && !empty($billingPeriod['month'])\n      && !empty($billingPeriod['months'])\n    ) {\n      $currentDate = time();\n      $startPeriod = strtotime(date('Y-').$billingPeriod['month'].'-'.$billingPeriod['day']);\n      $n = 12 \/ $billingPeriod['months'];\n      $start = $startPeriod;\n      for ($i = 1; $i <= $n; $i++) {\n        $end = strtotime(date('Y-m-d', $startPeriod).' +'.$i.' month');\n        if ((date('Y-m-d H:i:s', $currentDate) >= date('Y-m-d 00:00:00', $start))\n          && (date('Y-m-d H:i:s', $currentDate) <= date('Y-m-d 23:59:59', $end))\n        ) {\n          return [\n            'start' => date('Y-m-d 00:00:00', $start),\n            'end' => date('Y-m-d 23:59:59', $end)\n          ];\n        }\n\n        $start = $end;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2351,
            "endLine": 2378,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getTokensCurrentBillingPeriod",
            "returns": [
                null,
                "array"
            ],
            "arguments": []
        },
        "getTokensCurrent": {
            "name": "getTokensCurrent",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTokensCurrent(?string $type = null, ?string $idUser = null): ?array\n  {\n    if (($tokenYear = $this->getTokensYear($type))\n      && ($currentBillingPeriod = $this->getTokensCurrentBillingPeriod())\n      && ($billingPeriod = $this->getTokensBillingPeriod())\n    ) {\n      $ret = [];\n      $where = [[\n        'field' => 'bbn_tasks_sessions.start',\n        'operator' => '>=',\n        'value' => $currentBillingPeriod['start']\n      ], [\n        'field' => 'bbn_tasks_sessions.start',\n        'operator' => '<=',\n        'value' => $currentBillingPeriod['end']\n      ], [\n        'field' => 'bbn_tasks_sessions.length',\n        'operator' => 'isnotnull'\n      ]];\n      if (!empty($idUser)) {\n        $where[] = [\n          'field' => 'bbn_tasks_sessions.id_user',\n          'value' => $idUser\n        ];\n      }\n\n      foreach ($tokenYear as $code => $tokens) {\n        $idOptionCat = self::getOptionId($code, self::getTokensCategoriesId());\n        $used = $this->db->selectOne([\n          'table' => 'bbn_tasks_sessions',\n          'fields' => 'SUM(bbn_tasks_sessions.tokens)',\n          'join' => [[\n            'table' => 'bbn_tasks',\n            'on' => [\n              'conditions' => [[\n                'field' => 'bbn_tasks_sessions.id_task',\n                'exp' => 'bbn_tasks.id'\n              ]]\n            ]\n          ], [\n            'table' => 'bbn_options',\n            'on' => [\n              'conditions' => [[\n                'field' => 'bbn_tasks.type',\n                'exp' => 'bbn_options.id'\n              ]]\n            ]\n          ]],\n          'where' => [\n            'conditions' => X::mergeArrays($where, [[\n              'field' => 'bbn_options.id_alias',\n              'value' => $idOptionCat\n            ]])\n          ]\n        ]) ?: 0;\n        $total = floor($tokens \/ (!empty($billingPeriod['months']) ? 12 \/ $billingPeriod['months'] : 1));\n        $ret[$code] = [\n          'total' => $total,\n          'used' => $used,\n          'available' => $total - $used,\n          'totalYear' => $tokens\n        ];\n      }\n\n      return !empty($ret) ? (!empty($type) ? \\array_values($ret)[0] : $ret) : null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2380,
            "endLine": 2448,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getTokensCurrent",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "idUser",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getTokensYear": {
            "name": "getTokensYear",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTokensYear(?string $type = null): ?array\n  {\n    if (!empty($type)) {\n      if (!Str::isUid($type)) {\n        $type = self::getOption($type, self::getTokensCategoriesId());\n      }\n\n      if ($opt = self::getOption($type)) {\n        return [\n          $opt['code'] => !empty($opt['tokensYear']) ? $opt['tokensYear'] : 0\n        ];\n      }\n    }\n    elseif ($cats = $this->getTokensCategories()) {\n      $ret = [];\n      foreach ($cats as $c) {\n        $ret[$c['code']] = !empty($c['tokensYear']) ? $c['tokensYear'] : 0;\n      }\n\n      return $ret;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2450,
            "endLine": 2473,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getTokensYear",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getTokens": {
            "name": "getTokens",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTokens(string $idTask): ?int\n  {\n    return $this->db->selectOne([\n      'table' => 'bbn_tasks_sessions',\n      'fields' => ['SUM(tokens)'],\n      'where' => [[\n        'field' => 'id_task',\n        'value' => $idTask\n      ], [\n        'field' => 'length',\n        'operator' => 'isnotnull'\n      ]]\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2475,
            "endLine": 2488,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTokens",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "idTask",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTokensCategory": {
            "name": "getTokensCategory",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTokensCategory(string $idTask): ?string\n  {\n    if ($cats = $this->getTokensCategories()) {\n      $w = [];\n      foreach ($cats as $c) {\n        $w[] = [\n          'field' => 'bbn_options.id_alias',\n          'value' => $c['id']\n        ];\n      }\n      return $this->db->selectOne([\n        'table' => 'bbn_tasks',\n        'fields' => ['bbn_options.id_alias'],\n        'join' => [[\n          'table' => 'bbn_options',\n          'on' => [\n            'conditions' => [[\n              'field' => 'bbn_tasks.type',\n              'exp' => 'bbn_options.id'\n            ]]\n          ]\n        ]],\n        'where' => [\n          'conditions' => [[\n            'field' => 'bbn_tasks.id',\n            'value' => $idTask\n          ], [\n            'logic' => 'OR',\n            'conditions' => $w\n          ]]\n        ]\n      ]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2490,
            "endLine": 2525,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTokensCategory",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "idTask",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTokensCategories": {
            "name": "getTokensCategories",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTokensCategories(): ?array\n  {\n    return self::getOptions(self::getTokensCategoriesId());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2527,
            "endLine": 2530,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getTokensCategories",
            "returns": [
                null,
                "array"
            ],
            "arguments": []
        },
        "getTrackTokens": {
            "name": "getTrackTokens",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTrackTokens(string $idTrack): ?int\n  {\n    return $this->db->selectOne('bbn_tasks_sessions', 'tokens', ['id' => $idTrack]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2532,
            "endLine": 2535,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTrackTokens",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "idTrack",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hasTrackNextLink": {
            "name": "hasTrackNextLink",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasTrackNextLink(string $idTrack): bool\n  {\n    if ($track = $this->getTrack($idTrack)) {\n      return (bool)$this->db->selectOne([\n        'table' => 'bbn_tasks_sessions',\n        'fields' => ['bbn_tasks_sessions.id'],\n        'join' => [[\n          'table' => 'bbn_tasks',\n          'on' => [[\n            'field' => 'bbn_tasks_sessions.id_task',\n            'exp' => 'bbn_tasks.id'\n          ]]\n        ]],\n        'where' => [\n          'bbn_tasks_sessions.start' => $track['end'],\n          'bbn_tasks_sessions.id_user' => $track['id_user'],\n          'bbn_tasks.active' => 1\n        ]\n      ]);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2537,
            "endLine": 2559,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "hasTrackNextLink",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "idTrack",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hasTrackPrevLink": {
            "name": "hasTrackPrevLink",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasTrackPrevLink(string $idTrack): bool\n  {\n    if ($track = $this->getTrack($idTrack)) {\n      return (bool)$this->db->selectOne([\n        'table' => 'bbn_tasks_sessions',\n        'fields' => ['bbn_tasks_sessions.id'],\n        'join' => [[\n          'table' => 'bbn_tasks',\n          'on' => [[\n            'field' => 'bbn_tasks_sessions.id_task',\n            'exp' => 'bbn_tasks.id'\n          ]]\n        ]],\n        'where' => [\n          'bbn_tasks_sessions.end' => $track['start'],\n          'bbn_tasks_sessions.id_user' => $track['id_user'],\n          'bbn_tasks.active' => 1\n        ]\n      ]);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2561,
            "endLine": 2583,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "hasTrackPrevLink",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "idTrack",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "calcTokens": {
            "name": "calcTokens",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function calcTokens(string $idTrack, bool $includeLinked = false, ?string $start = null, ?string $end = null): ?int\n  {\n    $tokens = $this->calcTokensRaw($idTrack, $includeLinked, $start, $end);\n    return \\is_null($tokens) ? null : (int)($this->hasTrackNextLink($idTrack) ? floor($tokens) : ceil($tokens));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2585,
            "endLine": 2589,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "calcTokens",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "idTrack",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "includeLinked",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "end",
                    "position": 3,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "calcTokensRaw": {
            "name": "calcTokensRaw",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function calcTokensRaw(string $idTrack, bool $includeLinked = false, ?string $start = null, ?string $end = null): ?float\n  {\n    $tokens = null;\n    if ($this->isTokensActive()\n      && ($tokensCfg = $this->getTokensCfg())\n      && !empty($tokensCfg['step'])\n      && ((($track = $this->getTrack($idTrack))\n          && $this->getTokensCategory($track['id_task']))\n        || (!empty($start) && !empty($end)))\n    ) {\n      $start = $start ?: $track['start'];\n      $end = $end ?: $track['end'];\n      $length = strtotime($end) - strtotime($start);\n      $tokens = $length \/ $tokensCfg['step'];\n      if (!empty($includeLinked)) {\n        $tokens += $this->calcLinkedTokens($idTrack, $start);\n      }\n    }\n\n    return $tokens;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2591,
            "endLine": 2611,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "calcTokensRaw",
            "returns": [
                null,
                "float"
            ],
            "arguments": [
                {
                    "name": "idTrack",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "includeLinked",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "end",
                    "position": 3,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "calcLinkedTokens": {
            "name": "calcLinkedTokens",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function calcLinkedTokens(string $idTrack, ?string $start = null): float\n  {\n    $tokens = 0;\n    if ($this->isTokensActive()\n      && ($tokensCfg = $this->getTokensCfg())\n      && ($track = $this->getTrack($idTrack))\n      && $this->getTokensCategory($track['id_task'])\n    ) {\n      $start = $start ?: $track['start'];\n      while (!empty($start)\n        && ($t = $this->db->select([\n          'table' => 'bbn_tasks_sessions',\n          'fields' => [\n            'bbn_tasks_sessions.start',\n            'bbn_tasks_sessions.end',\n            'bbn_tasks_sessions.length'\n          ],\n          'join' => [[\n            'table' => 'bbn_tasks',\n            'on' => [[\n              'field' => 'bbn_tasks_sessions.id_task',\n              'exp' => 'bbn_tasks.id'\n            ]]\n          ]],\n          'where' => [\n            'bbn_tasks_sessions.end' => $start,\n            'bbn_tasks_sessions.id_user' => $track['id_user'],\n            'bbn_tasks.active' => 1\n          ]\n        ]))\n      ) {\n        $start = $t->start;\n        $tok = $t->length \/ $tokensCfg['step'];\n        if ($tt = $tok - floor($tok)) {\n          $tokens += $tt;\n        }\n      }\n    }\n\n    return $tokens - floor($tokens);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2613,
            "endLine": 2653,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "calcLinkedTokens",
            "returns": [
                "float"
            ],
            "arguments": [
                {
                    "name": "idTrack",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "checkTokens": {
            "name": "checkTokens",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function checkTokens(string $idTrack, ?string $start = null, ?string $end = null)\n  {\n    if ($this->isTokensActive()\n      && ($linkedTracks = $this->getLinkedTracks($idTrack, $start, $end))\n    ) {\n      foreach( $linkedTracks as $lt) {\n        $tokens = $this->calcTokens($lt['id'], true);\n        if (($tokens !== $lt['tokens'])\n          && !$this->db->update('bbn_tasks_sessions', [\n            'tokens' => $tokens\n          ], [\n            'id' => $lt['id']\n          ])\n        ) {\n          throw new \\Exception(X::_('Error while updating tokens, trackID: %s, oldTokens: %s, newTokens: %s', $lt['id'], (string)$lt['tokens'], (string)$tokens));\n        }\n      }\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2655,
            "endLine": 2673,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "checkTokens",
            "returns": [],
            "arguments": [
                {
                    "name": "idTrack",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "end",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getLinkedTracks": {
            "name": "getLinkedTracks",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function getLinkedTracks(string $idTrack, ?string $start = null, ?string $end = null): array\n  {\n    $ret = [];\n    $current = $this->getTrack($idTrack);\n    $end = $end ?: $current['end'];\n    $start = $start ?: $current['start'];\n    if ($prev = $this->db->rselect([\n      'table' => 'bbn_tasks_sessions',\n      'fields' => $this->db->getFieldsList('bbn_tasks_sessions'),\n      'join' => [[\n        'table' => 'bbn_tasks',\n        'on' => [[\n          'field' => 'bbn_tasks_sessions.id_task',\n          'exp' => 'bbn_tasks.id'\n        ]]\n      ]],\n      'where' => [[\n        'field' => 'bbn_tasks_sessions.end',\n        'value' => $start\n      ], [\n        'field' => 'bbn_tasks_sessions.id_user',\n        'value' => $current['id_user']\n      ], [\n        'field' => 'bbn_tasks_sessions.id',\n        'operator' => '!=',\n        'value' => $idTrack\n      ], [\n        'field' => 'bbn_tasks.active',\n        'value' => 1\n      ]]\n    ])) {\n      $ret[] = $prev;\n    }\n\n    while (!empty($end)\n      && ($track = $this->db->rselect([\n        'table' => 'bbn_tasks_sessions',\n        'fields' => $this->db->getFieldsList('bbn_tasks_sessions'),\n        'join' => [[\n          'table' => 'bbn_tasks',\n          'on' => [[\n            'field' => 'bbn_tasks_sessions.id_task',\n            'exp' => 'bbn_tasks.id'\n          ]]\n        ]],\n        'where' => [[\n          'field' => 'bbn_tasks_sessions.start',\n          'value' => $end\n        ], [\n          'field' => 'bbn_tasks_sessions.id_user',\n          'value' => $current['id_user']\n        ], [\n          'field' => 'bbn_tasks_sessions.id',\n          'operator' => '!=',\n          'value' => $idTrack\n        ], [\n          'field' => 'bbn_tasks.active',\n          'value' => 1\n        ]]\n      ]))\n    ) {\n      $ret[] = $track;\n      $end = $track['end'];\n    }\n\n    return $ret;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2675,
            "endLine": 2741,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getLinkedTracks",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "idTrack",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "end",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getTokensCategoriesId": {
            "name": "getTokensCategoriesId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function getTokensCategoriesId(): ?string\n  {\n    return self::getOptionId('cats', 'tokens');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2743,
            "endLine": 2746,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getTokensCategoriesId",
            "returns": [
                null,
                "string"
            ],
            "arguments": []
        },
        "getIdNote": {
            "name": "getIdNote",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Appui\/Task.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function getIdNote(string $id): ?string\n  {\n    return $this->db->selectOne('bbn_tasks', 'id_note', ['id' => $id]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2748,
            "endLine": 2751,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getIdNote",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        },
        "_get_references": {
            "name": "_get_references",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/References.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_references(){\n    if ( \\is_null($this->references) ){\n      if ( $refs = $this->db->findRelations('bbn_tasks.id') ){\n        $this->references = array_filter($refs, function($a, $k){\n          return strpos($k, 'bbn_tasks') !== 0;\n        }, ARRAY_FILTER_USE_BOTH);\n      }\n      if ( empty($this->references) ){\n        $this->references = false;\n      }\n      else{\n        foreach ( $this->references as $table => $ref ){\n          foreach ( $ref['refs'] as $j => $r ){\n            $this->references_select = empty($this->references_select) ?\n              $this->db->cfn($j, $table, 1) :\n              \"IFNULL(\".$this->references_select.\", \".$this->db->cfn($j, $table, 1).\")\";\n\n            $this->references_join .= \"LEFT JOIN \".$this->db->tfn($table, 1).PHP_EOL.\n              \"ON \".$this->db->cfn($ref['column'], $table, 1).\" = bbn_tasks.id\".PHP_EOL;\n          }\n        }\n        if ( !empty($this->references_select) ){\n          $this->references_select .= \" AS reference,\".PHP_EOL;\n        }\n      }\n    }\n    return $this->references;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\References",
            "startLine": 26,
            "endLine": 53,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "_get_references",
            "returns": [],
            "arguments": []
        },
        "getReferences": {
            "name": "getReferences",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/References.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getReferences(){\n    $this->_get_references();\n    return [\n      'select' => $this->references_select,\n      'join' => $this->references_join\n    ];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\References",
            "startLine": 55,
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getReferences",
            "returns": [],
            "arguments": []
        },
        "optionalInit": {
            "name": "optionalInit",
            "summary": "Returns the option's root ID for the current class based on {@link $option_root_code}",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function optionalInit(array $path = null)\n  {\n    if (!self::$optional_is_init) {\n      $opt = Option::getInstance();\n      if (!$opt) {\n        throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n      }\n\n      $justDefined = false;\n      if (!\\defined(\"BBN_APPUI\")) {\n        $justDefined = true;\n        \\define('BBN_APPUI', $opt->fromCode('appui', 'plugins'));\n      }\n\n      if (!$path) {\n        if (!BBN_APPUI) {\n          throw new Exception('Impossible to find the option appui for ' . __CLASS__ . ($justDefined ? '' : 'not') . ' defined ' . ($opt->fromCode('appui', 'plugins') ?: '') . ($opt->fromCode('appui') ?: '') . ' ' . $opt->getRoot() . ' ' . $opt->getDefault() . X::getDump($opt->option($opt->getRoot())));\n        }\n\n        $tmp                   = explode('\\\\', __CLASS__);\n        $cls                   = strtolower(end($tmp));\n        $path                  = [$cls, 'appui'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      if (!self::$option_root_id) {\n        if (!$cls) {\n          throw new Exception(\"Impossible to find the option \".json_encode($path).\" !!! for \".__CLASS__);\n        }\n        throw new Exception(\"Impossible to find the option $cls for \".__CLASS__);\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 41,
            "endLine": 75,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "optionalInit",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the option's root ID for the current class based on {@link $option_root_code}\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the option's root ID for the current class based on {@link $option_root_code}\n   *\n   * @return false|int\n   *\/"
        },
        "initOptionalGlobal": {
            "name": "initOptionalGlobal",
            "summary": "Sets only once all the constants used by the class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function initOptionalGlobal(Option $opt, array $path = null)\n  {\n    if (!self::$optional_is_init) {\n      if (!\\defined(\"BBN_APPUI\")) {\n        \\define('BBN_APPUI', $opt->fromCode('appui', 'plugins'));\n      }\n\n      if (!$path) {\n        if (!BBN_APPUI) {\n          X::log('Impossible to find the option appui for '.__CLASS__, 'errors');\n          return;\n        }\n\n        $tmp                   = explode('\\\\', __CLASS__);\n        $cls                   = end($tmp);\n        $path                  = [$cls, 'appui'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n            if (!self::$option_root_id) {\n        X::log(\"Impossible to find the option $cls for \".__CLASS__, 'errors');\n        return;\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 85,
            "endLine": 111,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "initOptionalGlobal",
            "returns": [],
            "arguments": [
                {
                    "name": "opt",
                    "position": 0,
                    "type": "bbn\\Appui\\Option",
                    "type_arr": [
                        "bbn\\Appui\\Option"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets only once all the constants used by the class.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Option",
                        "name": "$opt"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets only once all the constants used by the class.\n   *\n   * @param Option $opt\n   * @param array             $path\n   * @return void\n   *\/"
        },
        "initOptional": {
            "name": "initOptional",
            "summary": "Defines the options prop and launches the static init method.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initOptional(array $path = null)\n  {\n    $this->options = Option::getInstance();\n    if (!$this->options) {\n      throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n    }\n\n    self::initOptionalGlobal($this->options, $path);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 120,
            "endLine": 128,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initOptional",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Defines the options prop and launches the static init method.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Defines the options prop and launches the static init method.\n   *\n   * @param array $path\n   * @return void\n   *\/"
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionRoot()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 131,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionRoot",
            "returns": [],
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsObject(): Option\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 138,
            "endLine": 146,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsObject",
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionId()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 155,
            "endLine": 158,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionId",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns The option's ID of a category, i.e. direct children of option's root\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns The option's ID of a category, i.e. direct children of option's root\n   *\n   * @param string $code\n   * @return int|false\n   *\/"
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsIds(): array\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...self::_treat_args(func_get_args())),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 167,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsIds",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Undocumented function\n",
                "params": [],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Check it, it doesn't seem ok"
                }
            },
            "comments": "  \/**\n   * Undocumented function\n   *\n   * @todo Check it, it doesn't seem ok\n   * @return array\n   *\/"
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTree()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 180,
            "endLine": 183,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTree",
            "returns": [],
            "arguments": []
        },
        "getOptionsTreeRef": {
            "name": "getOptionsTreeRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTreeRef()\n  {\n    return ($tree = self::getOptionsObject()->fullTreeRef(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 186,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTreeRef",
            "returns": [],
            "arguments": []
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptions()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 192,
            "endLine": 195,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptions",
            "returns": [],
            "arguments": []
        },
        "getOptionsRef": {
            "name": "getOptionsRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsRef()\n  {\n    return self::getOptionsObject()->fullOptionsRef(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 198,
            "endLine": 201,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsRef",
            "returns": [],
            "arguments": []
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOption()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 204,
            "endLine": 207,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOption",
            "returns": [],
            "arguments": []
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValue()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 210,
            "endLine": 213,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTextValue",
            "returns": [],
            "arguments": []
        },
        "getOptionsTextValueRef": {
            "name": "getOptionsTextValueRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValueRef()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptionsRef($id) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 216,
            "endLine": 219,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTextValueRef",
            "returns": [],
            "arguments": []
        },
        "_treat_args": {
            "name": "_treat_args",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Appui\\Task",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function _treat_args(array $args, $appui = false): array\n  {\n    $hasUid = Str::isUid(end($args));\n    if (count($args) && !$hasUid) {\n      self::optionalInit();\n      if (!in_array($args[0], ['permissions', 'options', 'plugins'])) {\n        $args[] = 'options';\n      }\n    }\n\n    if (!$hasUid) {\n      $args[] = self::$option_root_id;\n    }\n\n    return $args;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 223,
            "endLine": 238,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_treat_args",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "appui",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "columns": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Task"
            },
            "declaring_trait": "bbn\\Appui\\Task",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "tokensConfig": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Task"
            },
            "declaring_trait": "bbn\\Appui\\Task",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "noteCls": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Task"
            },
            "declaring_trait": "bbn\\Appui\\Task",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "template": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Task"
            },
            "declaring_trait": "bbn\\Appui\\Task",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": false
        },
        "id_user": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Task"
            },
            "declaring_trait": "bbn\\Appui\\Task",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "is_dev": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Task"
            },
            "declaring_trait": "bbn\\Appui\\Task",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "mgr": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Task"
            },
            "declaring_trait": "bbn\\Appui\\Task",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "user": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Task"
            },
            "declaring_trait": "bbn\\Appui\\Task",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "date": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Task"
            },
            "declaring_trait": "bbn\\Appui\\Task",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": false
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Db"
            },
            "declaring_trait": "bbn\\Models\\Tts\\References",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "dbClass"
                    }
                ]
            },
            "parent": {
                "name": "db",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Db"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Db",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "dbClass"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "references": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Task"
            },
            "declaring_trait": "bbn\\Models\\Tts\\References",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "references_select": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Task"
            },
            "declaring_trait": "bbn\\Models\\Tts\\References",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": ""
        },
        "references_join": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Task"
            },
            "declaring_trait": "bbn\\Models\\Tts\\References",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": ""
        },
        "optional_is_init": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Task"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Set as true from the moment a first instance has been initiated and has defined the constants."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "option_root_id": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Task"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The ID of the root option"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "options": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Appui\\Task"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Option",
                        "description": "The Option object"
                    }
                ]
            },
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "optional_is_init": false,
        "option_root_id": null
    },
    "constants": null,
    "uses": {
        "bbn": "bbn",
        "bbn\\X": "X",
        "bbn\\Str": "Str"
    },
    "dummyComments": [
        "\/**\n * Created by PhpStorm.\n * User: BBN\n * Date: 26\/01\/2015\n * Time: 05:45\n *\/"
    ],
    "summary": "",
    "description": "",
    "description_parts": []
}