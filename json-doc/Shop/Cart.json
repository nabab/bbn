{
    "doc": {
        "description": "Cart class\n",
        "tags": {
            "category": "Shop",
            "package": "Shop",
            "author": "BBN Solutions <info@bbn.solutions>",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.html MIT License",
            "link": "https:\/\/bbn.io\/bbn-php\/doc\/class\/Shop\/Cart"
        }
    },
    "name": "bbn\\Shop\\Cart",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\Dbconfig"
    ],
    "interfaces": [],
    "fileName": "\/Shop\/Cart.php",
    "startLine": 21,
    "endLine": 663,
    "numMethods": 37,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 1,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\Dbconfig"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "errors": [],
            "table": "bbn_shop_cart",
            "tables": {
                "cart": "bbn_shop_cart",
                "cart_products": "bbn_shop_cart_products"
            },
            "arch": {
                "cart": {
                    "id": "id",
                    "id_session": "id_session",
                    "id_client": "id_client",
                    "creation": "creation"
                },
                "cart_products": {
                    "id": "id",
                    "id_cart": "id_cart",
                    "id_product": "id_product",
                    "quantity": "quantity",
                    "amount": "amount",
                    "date_added": "date_added"
                }
            }
        },
        "idSession": null,
        "idUser": null,
        "productCls": null,
        "productClsCfg": null,
        "db": null,
        "errors": [],
        "error": false,
        "debug": false,
        "log": [],
        "_is_init_class_cfg": false,
        "fields": null,
        "class_cfg": null,
        "class_table": null,
        "class_table_index": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Shop",
    "shortName": "Cart",
    "contentConstructor": {
        "file": "bbn\\Shop\\Cart",
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Constructor",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db, array $cfg = NULL)\n  {\n    \/\/ The database connection\n    $this->db = $db;\n    \/\/ Setting up the class configuration\n    $this->_init_class_cfg($cfg);\n    if ($user = \\bbn\\User::getInstance()) {\n      $this->idSession = $user->getOsession('id_session');\n      $this->idUser = $user->getId();\n    }\n    $this->productCls = new Product($this->db);\n    $this->productClsCfg = $this->productCls->getClassCfg();\n  }",
            "startLine": 76,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Db",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bbn\\Db $db)\n  {\n    $this->db = $db;\n  }",
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ]
            },
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getCurrentCartID": {
            "name": "getCurrentCartID",
            "summary": "Gets the ID of the current cart",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (empty($this->idSession)) {\n      throw new \\Exception(_(\"No user's session found\"));\n    }\n    $sales = new Sales($this->db);\n    $salesCfg = $sales->getClassCfg();\n    $salesFields = $salesCfg['arch']['transactions'];\n    $where = [\n      'logic' => 'OR',\n      'conditions' => [[\n        'field' => $this->fields['id_session'],\n        'value' => $this->idSession\n      ]]\n    ];\n    if (!empty($this->idUser)) {\n      $clientCls = new Client($this->db);\n      if ($idClient = $clientCls->getIdByUser($this->idUser)) {\n        \\array_unshift($where['conditions'], [\n          'field' => $this->fields['id_client'],\n          'value' => $idClient\n        ]);\n      }\n    }\n    if ($idCart = $this->selectOne($this->fields['id'], $where, [$this->fields['creation'] => 'DESC'])) {\n      if ($this->db->selectOne([\n        'table' => $salesCfg['table'],\n        'fields' => $salesFields['id'],\n        'where' => [[\n          'field' => $salesFields['id_cart'],\n          'value' => $idCart\n        ], [\n          'field' => $salesFields['status'],\n          'operator' => '!=',\n          'value' => 'failed'\n        ], [\n          'field' => $salesFields['status'],\n          'operator' => '!=',\n          'value' => 'unpaid'\n        ]]\n      ])) {\n        return null;\n      }\n      return $idCart;\n    }\n    return null;\n  }",
            "startLine": 95,
            "endLine": 141,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "addProduct": {
            "name": "addProduct",
            "summary": "Adds a product to the current (or given) cart",
            "description": "It can also be used to add only quantities of product.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>It can also be used to add only quantities of product.<\/p>"
                }
            ],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProduct, int $quantity = 1, string $idCart = '')\n  {\n    if (!$this->productCls->isActive($idProduct)) {\n      throw new \\Exception(sprintf(_('The product with the id %s is not available'), $idProduct));\n    }\n    if (empty($idCart)\n      && !($idCart = $this->getCurrentCartID())\n    ) {\n      $idCart = $this->createCart();\n    }\n    if (!Str::isUid($idCart)) {\n      throw new \\Exception(_('The cart ID is an invalid UID'));\n    }\n    $pTable = $this->class_cfg['tables']['cart_products'];\n    $pFields = $this->class_cfg['arch']['cart_products'];\n    if ($p = $this->productExists($idCart, $idProduct)) {\n      return $this->setProductQuantity($idCart, $idProduct, $p[$pFields['quantity']] + $quantity);\n    }\n    else {\n      return (bool)$this->db->insert($pTable, [\n        $pFields['id_cart'] => $idCart,\n        $pFields['id_product'] => $idProduct,\n        $pFields['quantity'] => $quantity,\n        $pFields['amount'] => $this->getProductAmount($idProduct, $quantity),\n        $pFields['date_added'] => date('Y-m-d H:i:s')\n      ]);\n    }\n  }",
            "startLine": 152,
            "endLine": 179,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProduct",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roduct The product ID"
                },
                {
                    "name": "quantity",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": "",
                    "description": "The quantity"
                },
                {
                    "name": "idCart",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "art The cart ID (optional)"
                }
            ]
        },
        "removeProduct": {
            "name": "removeProduct",
            "summary": "Removes a product form the current (or given) cart.",
            "description": "It can also be used to remove only quantities of product.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>It can also be used to remove only quantities of product.<\/p>"
                }
            ],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idProduct, int $quantity = 0, string $idCart = '')\n  {\n    if (empty($idCart)) {\n      $idCart = $this->getCurrentCartID();\n    }\n    if (!Str::isUid($idCart)) {\n      throw new \\Exception(_('The cart ID is an invalid UID'));\n    }\n    $pTable = $this->class_cfg['tables']['cart_products'];\n    $pFields = $this->class_cfg['arch']['cart_products'];\n    if ($p = $this->productExists($idCart, $idProduct)) {\n      if (!$quantity || ($quantity >= $p[$pFields['quantity']])) {\n        return (bool)$this->db->delete($pTable, [$pFields['id'] => $p[$pFields['id']]]);\n      }\n      else {\n        return $this->setProductQuantity($idCart, $idProduct, $p[$pFields['quantity']] - $quantity);\n      }\n    }\n    return false;\n  }",
            "startLine": 189,
            "endLine": 208,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idProduct",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roduct The product ID"
                },
                {
                    "name": "quantity",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The quantity to remove"
                },
                {
                    "name": "idCart",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "art The cart ID"
                }
            ]
        },
        "setProductQuantity": {
            "name": "setProductQuantity",
            "summary": "Sets the quantity (and the relative amount) of a product on the cart",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idCart, string $idProduct, int $quantity)\n  {\n    $pTable = $this->class_cfg['tables']['cart_products'];\n    $pFields = $this->class_cfg['arch']['cart_products'];\n    return (bool)$this->db->update($pTable, [\n      $pFields['quantity'] => $quantity,\n      $pFields['amount'] => $this->getProductAmount($idProduct, $quantity),\n      $pFields['date_added'] => date('Y-m-d H:i:s')\n    ], [\n      $pFields['id_cart'] => $idCart,\n      $pFields['id_product'] => $idProduct\n    ]);\n  }",
            "startLine": 218,
            "endLine": 230,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idCart",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "art The cart ID"
                },
                {
                    "name": "idProduct",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "roduct The product ID"
                },
                {
                    "name": "quantity",
                    "position": 2,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The quantity to set"
                }
            ]
        },
        "getProducts": {
            "name": "getProducts",
            "summary": "Gets the products of the current (or given) cart",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idCart = '')\n  {\n    if (empty($idCart)) {\n      $idCart = $this->getCurrentCartID();\n    }\n    if (!Str::isUid($idCart)) {\n      throw new \\Exception(_('The cart ID is an invalid UID'));\n    }\n    $pTable = $this->class_cfg['tables']['cart_products'];\n    $pFields = $this->class_cfg['arch']['cart_products'];\n    return $this->db->rselectAll($pTable, [], [$pFields['id_cart'] => $idCart]);\n  }",
            "startLine": 238,
            "endLine": 249,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idCart",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "art The cart ID"
                }
            ]
        },
        "getProductsDetail": {
            "name": "getProductsDetail",
            "summary": "Gets the products of the current (or given) cart with the products details",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idCart = '')\n  {\n    if ($products = $this->getProducts($idCart)) {\n      $prodCls = new Product($this->db);\n      foreach ($products as $i => $p) {\n        $products[$i]['product'] = $prodCls->get($p[$this->class_cfg['arch']['cart_products']['id_product']]);\n      }\n    }\n    return $products;\n  }",
            "startLine": 257,
            "endLine": 266,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idCart",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "art The cart ID"
                }
            ]
        },
        "getProductsAmount": {
            "name": "getProductsAmount",
            "summary": "Gets the products amount of a cart",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idCart = '')\n  {\n    if (empty($idCart)) {\n      $idCart = $this->getCurrentCartID();\n    }\n    if (!Str::isUid($idCart)) {\n      throw new \\Exception(_('The cart ID is an invalid UID'));\n    }\n    $total = 0;\n    if ($products = $this->getProducts($idCart)) {\n      $pFields = $this->class_cfg['arch']['cart_products'];\n      foreach ($products as $product) {\n        $total += $product[$pFields['amount']];\n      }\n    }\n    return \\round($total, 2);\n  }",
            "startLine": 274,
            "endLine": 290,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "float"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idCart",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "art"
                }
            ]
        },
        "getProductsQuantity": {
            "name": "getProductsQuantity",
            "summary": "Gets the products number of a cart",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idCart = '')\n  {\n    if (empty($idCart)) {\n      $idCart = $this->getCurrentCartID();\n    }\n    if (!Str::isUid($idCart)) {\n      throw new \\Exception(_('The cart ID is an invalid UID'));\n    }\n    if ($prods = $this->getProducts($idCart)) {\n      return \\count($prods);\n    }\n    return 0;\n  }",
            "startLine": 298,
            "endLine": 310,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idCart",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "art"
                }
            ]
        },
        "checkProductsStock": {
            "name": "checkProductsStock",
            "summary": "Checks the availability of the products in the cart and return an array with \"id => quantity\"",
            "description": "of the products that are no longer available or with less than the requested quantity available",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>of the products that are no longer available or with less than the requested quantity available<\/p>"
                }
            ],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idCart = '')\n  {\n    if ($products = $this->getProducts($idCart)) {\n      $pCfg = $this->class_cfg['arch']['cart_products'];\n      $res = [];\n      foreach ($products as $product) {\n        $stock = $this->productCls->getStock($product[$pCfg['id_product']]);\n        if (!$stock || ($stock < $product[$pCfg['quantity']])) {\n          $res[$product[$pCfg['id_product']]] = $stock;\n        }\n      }\n      return !empty($res) ? $res : null;\n    }\n    return null;\n  }",
            "startLine": 319,
            "endLine": 333,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idCart",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "art"
                }
            ]
        },
        "getClient": {
            "name": "getClient",
            "summary": "Gets the client ID of the given cart",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idCart = '')\n  {\n    $idCart = empty($idCart) ? $this->getCurrentCartID() : $idCart;\n    if (!empty($idCart)) {\n      return $this->selectOne($this->fields['id_client'], $idCart);\n    }\n    return null;\n  }",
            "startLine": 341,
            "endLine": 348,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idCart",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "art"
                }
            ]
        },
        "setClient": {
            "name": "setClient",
            "summary": "Sets the client ID to the current cart",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idClient, string $idCart = '')\n  {\n    if (!Str::isUid($idClient)) {\n      throw new \\Exception(_('The client ID is an invalid UID'));\n    }\n    $idCart = empty($idCart) ? $this->getCurrentCartID() : $idCart;\n    if (!empty($idCart)) {\n      return $this->update($idCart, [$this->fields['id_client'] => $idClient]);\n    }\n    return false;\n  }",
            "startLine": 356,
            "endLine": 366,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idClient",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "lient The client ID"
                },
                {
                    "name": "idCart",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "art The cart ID"
                }
            ]
        },
        "total": {
            "name": "total",
            "summary": "Gets the total of the current (or given) cart for the given address",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idAddress, string $idCart = '')\n  {\n    if (empty($idCart)) {\n      $idCart = $this->getCurrentCartID();\n    }\n    if (!Str::isUid($idCart)) {\n      throw new \\Exception(_('The cart ID is an invalid UID'));\n    }\n    $total = $this->getProductsAmount($idCart) + ($this->shippingCost($idAddress, $idCart) ?: 0);\n    return \\round($total, 2);\n  }",
            "startLine": 375,
            "endLine": 385,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "float"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idAddress",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ddress The address ID"
                },
                {
                    "name": "idCart",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "art The cart ID"
                }
            ]
        },
        "totalDetail": {
            "name": "totalDetail",
            "summary": "Gets the total of the current (or given) cart in detail for the given address",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idAddress, string $idCart = '')\n  {\n    if (empty($idCart)) {\n      $idCart = $this->getCurrentCartID();\n    }\n    if (!Str::isUid($idCart)) {\n      throw new \\Exception(_('The cart ID is an invalid UID'));\n    }\n    $productsAmount = $this->getProductsAmount($idCart);\n    $res = [\n      'products' => $productsAmount,\n      'shipping' => 0,\n      'total' => $productsAmount\n    ];\n    $res['shipping'] = $this->shippingCost($idAddress, $idCart);\n    $res['total'] += $res['shipping'];\n    foreach ($res as $i => $v) {\n      $res[$i] = \\round($v, 2);\n    }\n    return $res;\n  }",
            "startLine": 394,
            "endLine": 414,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idAddress",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ddress The address ID"
                },
                {
                    "name": "idCart",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "art The cart ID"
                }
            ]
        },
        "shippingCost": {
            "name": "shippingCost",
            "summary": "Gets the shipping cost for the given address",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idAddress, string $idCart = '')\n  {\n    $detail = $this->shippingCostDetail($idAddress, $idCart);\n    return \\in_array('disabled', \\array_values($detail)) ? null : $detail['total'];\n  }",
            "startLine": 423,
            "endLine": 427,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "float"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idAddress",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ddress The address ID"
                },
                {
                    "name": "idCart",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "art The cart ID"
                }
            ]
        },
        "shippingCostDetail": {
            "name": "shippingCostDetail",
            "summary": "Gets the shipping cost for the given address indexed by providers",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idAddress, string $idCart = '')\n  {\n    if (empty($idCart)) {\n      $idCart = $this->getCurrentCartID();\n    }\n    if (!Str::isUid($idCart)) {\n      throw new \\Exception(_('The cart ID is an invalid UID'));\n    }\n    $costs = [\n      'total' => 0\n    ];\n    if ($products = $this->getProducts($idCart)) {\n      $providersCosts = [];\n      $providersWeight = [];\n      $providersDefaults = [];\n      $pFields = $this->class_cfg['arch']['cart_products'];\n      foreach ($products as $product) {\n        if (!($provider = $this->productCls->getProvider($product[$pFields['id_product']]))) {\n          throw new \\Exception(sprintf(_('No provider found for the product %s'), $product[$pFields['id_product']]));\n        }\n        if (!isset($providersCosts[$provider])) {\n          $providersCosts[$provider] = $this->getProviderShippingCosts($provider, $idAddress);\n        }\n        if (!isset($costs[$provider])) {\n          $costs[$provider] = 0;\n        }\n        if (!empty($providersCosts[$provider]['disabled'])) {\n          $costs[$provider] = 'disabled';\n          continue;\n        }\n        if ($weight = $this->productCls->getWeight($product[$pFields['id_product']])) {\n          if (!isset($providersWeight[$provider])) {\n            $providersWeight[$provider] = $weight * $product[$pFields['quantity']];\n          }\n          else {\n            $providersWeight[$provider] += $weight * $product[$pFields['quantity']];\n          }\n        }\n        else if (!isset($providersDefaults[$provider])\n          && !empty($providersCosts[$provider]['default'])\n        ) {\n          $providersDefaults[$provider] = $providersCosts[$provider]['default'];\n          $costs[$provider] = \\round($costs[$provider] + $providersCosts[$provider]['default'], 2);\n          $costs['total'] = \\round($costs['total'] + $providersCosts[$provider]['default'], 2);\n        }\n      }\n      foreach ($providersWeight as $p => $pw) {\n        $weights = \\array_keys($providersCosts[$p]['prices']);\n        $tmpw = $weights[0];\n        foreach ($weights as $i => $w) {\n          if ($w <= $pw) {\n            $tmpw = $w;\n          }\n          if (isset($weights[$i + 1]) && ($pw > $w)) {\n            $tmpw = $weights[$i + 1];\n          }\n        }\n        $costs[$p] = \\round($costs[$p] + $providersCosts[$p]['prices'][$tmpw], 2);\n        $diff = $pw - $tmpw;\n        if (($diff > 0) && count($providersCosts[$p]['surcharge'])) {\n          $gr = \\array_keys($providersCosts[$p]['surcharge'])[0];\n          $m = \\array_values($providersCosts[$p]['surcharge'])[0];\n          $num = $diff \/ $gr;\n          $num = \\round($num, 0) + ($num - round($num, 0) > 0 ? 1 : 0);\n          $costs[$p] = \\round($costs[$p] + ($m * $num), 2);\n        }\n        $costs['total'] = \\round($costs['total'] + $costs[$p], 2);\n      }\n    }\n    return $costs;\n  }",
            "startLine": 436,
            "endLine": 506,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idAddress",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ddress The address ID"
                },
                {
                    "name": "idCart",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "art The cart ID"
                }
            ]
        },
        "totalShippingWeight": {
            "name": "totalShippingWeight",
            "summary": "Gets the total weight of the shipping",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $idCart = '')\n  {\n    if (empty($idCart)) {\n      $idCart = $this->getCurrentCartID();\n    }\n    if (!Str::isUid($idCart)) {\n      throw new \\Exception(_('The cart ID is an invalid UID'));\n    }\n    $weight = 0;\n    $pFields = $this->class_cfg['arch']['cart_products'];\n    if ($products = $this->getProducts($idCart)) {\n      foreach ($products as $product) {\n        $prodWeight = $this->productCls->getWeight($product[$pFields['id_product']]);\n        if (\\is_int($prodWeight)) {\n          $weight += $prodWeight * $product[$pFields['quantity']];\n        }\n      }\n    }\n    return $weight;\n  }",
            "startLine": 514,
            "endLine": 533,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idCart",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "art The cart ID"
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 50,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 50,
                "endLine": 57,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 64,
            "endLine": 71,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 64,
                "endLine": 71,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->error;\n  }",
            "startLine": 85,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 85,
                "endLine": 88,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 91,
            "endLine": 94,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 91,
                "endLine": 94,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 97,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 97,
                "endLine": 106,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 114,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 114,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "exists": {
            "name": "exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($filter)\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (!empty($cfg) && $arr = $this->db->count(\n      $this->class_table,\n      $cfg\n    )) {\n      return true;\n    }\n\n    return false;\n  }",
            "startLine": 37,
            "endLine": 59,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the class configuration.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->class_cfg;\n  }",
            "startLine": 67,
            "endLine": 70,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the fields of the main table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->fields;\n  }",
            "startLine": 78,
            "endLine": 81,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "insert": {
            "name": "insert",
            "summary": "Inserts a new row in the table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $data)\n  {\n    if ($data = $this->prepare($data)) {\n      $ccfg = $this->getClassCfg();\n      if ($this->db->insert($ccfg['table'], $data)) {\n        return $this->db->lastId();\n      }\n    }\n\n    return null;\n  }",
            "startLine": 91,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes a single row from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ($data = $this->exists($id)) {\n      $ccfg = $this->getClassCfg();\n      $f = $ccfg['arch'][$this->class_table_index];\n      return (bool)$this->db->delete($ccfg['table'], [$f['id'] => $id]);\n    }\n\n    return false;\n  }",
            "startLine": 111,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "update": {
            "name": "update",
            "summary": "Updates a single row in the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, array $data, bool $addCfg = false)\n  {\n    if (!$this->exists($id)) {\n      throw new Exception(X::_(\"Impossible to find the given row\"));\n    }\n\n    if ($addCfg) {\n      $data = array_merge($this->rselect($id), $data);\n    }\n\n    if ($data = $this->prepare($data)) {\n      $ccfg = $this->getClassCfg();\n      $f = $ccfg['arch'][$this->class_table_index];\n      return (bool)$this->db->update($ccfg['table'], $data, [$f['id'] => $id]);\n    }\n\n    return false;\n  }",
            "startLine": 131,
            "endLine": 148,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "addCfg",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "selectOne": {
            "name": "selectOne",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $field, $filter, array $order = [])\n  {\n    if ($res = $this->dbConfigSingleSelection($filter, $order, false, [$field])) {\n      return $res[$field] ?? null;\n    }\n\n    return null;\n  }",
            "startLine": 159,
            "endLine": 166,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "select": {
            "name": "select",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($filter, array $order = [])\n  {\n    return $this->dbConfigSingleSelection($filter, $order, true);\n  }",
            "startLine": 177,
            "endLine": 180,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "stdClass"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "rselect": {
            "name": "rselect",
            "summary": "Retrieves a row as an array from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($filter, array $order = [])\n  {\n    return $this->dbConfigSingleSelection($filter, $order, false);\n  }",
            "startLine": 191,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "count": {
            "name": "count",
            "summary": "Returns the number of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $filter = [])\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    return $this->db->count($this->class_table, $filter);\n  }",
            "startLine": 204,
            "endLine": 211,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "selectAll": {
            "name": "selectAll",
            "summary": "Returns an array of rows as objects from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $filter, array $order = [], int $limit = 0, int $start = 0)\n  {\n    return $this->dbConfigSelection($filter, $order, $limit, $start, true);\n  }",
            "startLine": 224,
            "endLine": 227,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "rselectAll": {
            "name": "rselectAll",
            "summary": "Returns an array of rows as arrays from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Shop\\Cart",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $filter, array $order = [], int $limit = 0, int $start = 0)\n  {\n    return $this->dbConfigSelection($filter, $order, $limit, $start, false);\n  }",
            "startLine": 240,
            "endLine": 243,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": {
        "default_class_cfg": {
            "errors": [],
            "table": "bbn_shop_cart",
            "tables": {
                "cart": "bbn_shop_cart",
                "cart_products": "bbn_shop_cart_products"
            },
            "arch": {
                "cart": {
                    "id": "id",
                    "id_session": "id_session",
                    "id_client": "id_client",
                    "creation": "creation"
                },
                "cart_products": {
                    "id": "id",
                    "id_cart": "id_cart",
                    "id_product": "id_product",
                    "quantity": "quantity",
                    "amount": "amount",
                    "date_added": "date_added"
                }
            }
        }
    },
    "constants": null,
    "summary": "Cart class",
    "description": "",
    "description_parts": []
}