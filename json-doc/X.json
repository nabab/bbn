{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\X",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/X.php",
    "startLine": 23,
    "endLine": 3763,
    "numMethods": 86,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 4,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "_counters": [],
        "_last_curl": null,
        "_cli": null,
        "_textdomain": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn",
    "shortName": "X",
    "contentConstructor": null,
    "methods": {
        "increment": {
            "name": "increment",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $name = 'num', int $i = 1)\n  {\n    self::_init_count($name);\n    self::$_counters[$name] += $i;\n  }",
            "startLine": 49,
            "endLine": 53,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "num",
                    "default_name": ""
                },
                {
                    "name": "i",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ]
        },
        "decrement": {
            "name": "decrement",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $name = 'num', int $i = 1)\n  {\n    self::_init_count($name);\n    self::$_counters[$name] -= $i;\n  }",
            "startLine": 60,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "num",
                    "default_name": ""
                },
                {
                    "name": "i",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ]
        },
        "count": {
            "name": "count",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $name = 'num', bool $delete = false)\n  {\n    self::_init_count($name);\n    $tmp = self::$_counters[$name];\n    if ($delete) {\n      unset(self::$_counters[$name]);\n    }\n\n    return $tmp;\n  }",
            "startLine": 71,
            "endLine": 80,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "num",
                    "default_name": ""
                },
                {
                    "name": "delete",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "countAll": {
            "name": "countAll",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(bool $delete = false)\n  {\n    $tmp = self::$_counters;\n    if ($delete) {\n      self::$_counters = [];\n    }\n\n    return $tmp;\n  }",
            "startLine": 87,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "delete",
                    "position": 0,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "tDom": {
            "name": "tDom",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!self::$_textdomain) {\n      $td = 'bbn';\n      $f = self::dirname(__DIR__).'\/version.txt';\n      if (is_file($f)) {\n        $td .= file_get_contents($f);\n      }\n\n      self::$_textdomain = $td;\n    }\n\n    return self::$_textdomain;\n  }",
            "startLine": 101,
            "endLine": 114,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "_": {
            "name": "_",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $string)\n  {\n    $res = dgettext(X::tDom(), $string);\n    $args = func_get_args();\n    if (count($args) > 1) {\n      array_shift($args);\n      return sprintf($res, ...$args);\n    }\n\n    return $res;\n  }",
            "startLine": 121,
            "endLine": 131,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "string",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "microtime": {
            "name": "microtime",
            "summary": "Returns a microtime with 4 digit after the dot",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return round(\\microtime(true), 4);\n  }",
            "startLine": 138,
            "endLine": 141,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "float"
            ],
            "parent": false,
            "arguments": []
        },
        "isDefined": {
            "name": "isDefined",
            "summary": "Returns true if each string argument is defined as a constant",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $name)\n  {\n    foreach (func_get_args() as $a) {\n      if (!is_string($a) || !defined($a)) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
            "startLine": 150,
            "endLine": 159,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "log": {
            "name": "log",
            "summary": "Saves logs to a file.",
            "description": "```php\nX::log('My text', 'FileName');\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::log('My text', 'FileName');"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st, string $file = 'misc')\n  {\n    if (\\defined('BBN_DATA_PATH') && is_dir(BBN_DATA_PATH.'logs')) {\n      $log_file  = BBN_DATA_PATH.'logs\/'.$file.'.log';\n      $backtrace = array_filter(\n        debug_backtrace(), function ($a) {\n          return $a['function'] === 'log';\n        }\n      );\n      $i         = end($backtrace);\n      $r         = \"[\".date('d\/m\/Y H:i:s').\"]\\t\".$i['file'].\" - line \".$i['line'].\n        self::getDump($st).PHP_EOL;\n\n      if (php_sapi_name() === 'cli') {\n        global $argv;\n        if (isset($argv[2]) && ($argv[2] === 'log')) {\n          echo self::getDump($st).PHP_EOL;\n        }\n      }\n\n      if (file_exists($log_file) && filesize($log_file) > BBN_X_MAX_LOG_FILE) {\n        file_put_contents($log_file.'.old', file_get_contents($log_file), FILE_APPEND);\n        file_put_contents($log_file, $r);\n      }\n      else{\n        file_put_contents($log_file, $r, FILE_APPEND);\n      }\n    }\n  }",
            "startLine": 173,
            "endLine": 201,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Item to log."
                },
                {
                    "name": "file",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "misc",
                    "default_name": "",
                    "description": "Filename, default: \"misc\"."
                }
            ]
        },
        "logError": {
            "name": "logError",
            "summary": "Puts the PHP errors into a JSON file.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($errno, $errstr, $errfile, $errline)\n  {\n    if (\\defined('BBN_DATA_PATH') && is_dir(BBN_DATA_PATH.'logs')) {\n      $file      = BBN_DATA_PATH.'logs\/_php_error.json';\n      $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 20);\n      foreach ($backtrace as &$b) {\n        if (!empty($b['file'])) {\n          $b['file'] = str_replace(BBN_APP_PATH, '', $b['file']);\n        }\n      }\n\n      $r = false;\n      if (is_file($file)) {\n        $r = json_decode(file_get_contents($file), 1);\n      }\n\n      if (!$r) {\n        $r = [];\n      }\n\n      $t = date('Y-m-d H:i:s');\n      if (class_exists('\\\\bbn\\\\Mvc')) {\n        $mvc = Mvc::getInstance();\n      }\n\n      $errfile = str_replace(BBN_APP_PATH, '', $errfile);\n      $idx     = self::find(\n        $r, [\n        'type' => $errno,\n        'error' => $errstr,\n        'file' => $errfile,\n        'line' => $errline,\n        'request' => ''\n        ]\n      );\n      if ($idx !== null) {\n        $r[$idx]['count']++;\n        $r[$idx]['last_date'] = $t;\n        $r[$idx]['backtrace'] = $backtrace;\n      }\n      else{\n        $r[] = [\n          'first_date' => $t,\n          'last_date' => $t,\n          'count' => 1,\n          'type' => $errno,\n          'error' => $errstr,\n          'file' => $errfile,\n          'line' => $errline,\n          'backtrace' => $backtrace,\n          'request' => ''\n          \/\/'context' => $context\n        ];\n      }\n\n      self::sortBy($r, 'last_date', 'DESC');\n      file_put_contents($file, Json_encode($r, JSON_PRETTY_PRINT));\n    }\n  }",
            "startLine": 213,
            "endLine": 271,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "errno",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The text to save."
                },
                {
                    "name": "errstr",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The file's name, default: \"misc\"."
                },
                {
                    "name": "errfile",
                    "position": 2,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "errline",
                    "position": 3,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hasProp": {
            "name": "hasProp",
            "summary": "Check if an array or an object has the given property",
            "description": "```php\n\n$arr = [\n 'a' => 1,\n 'b' => '',\n 'c' => 0\n ];\n\nX::hasProp($arr, 'a');\n\/\/ (bool) true\n\nX::hasProp($arr, 'b');\n\/\/ (bool) true\n\nX::hasProp($arr, 'b', true);\n\/\/ (bool) false\n\nX::hasProp($arr, 'c');\n\/\/ (bool) true\n\nX::hasProp($arr, 'c', true);\n\/\/ (bool) false\n\nX::hasProp($arr, 'd');\n\/\/ (bool) false\n\nX::hasProp('string', 'd');\n\/\/ null\n\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$arr = [\n 'a' => 1,\n 'b' => '',\n 'c' => 0\n ];\n\nX::hasProp($arr, 'a');\n\/\/ (bool) true\n\nX::hasProp($arr, 'b');\n\/\/ (bool) true\n\nX::hasProp($arr, 'b', true);\n\/\/ (bool) false\n\nX::hasProp($arr, 'c');\n\/\/ (bool) true\n\nX::hasProp($arr, 'c', true);\n\/\/ (bool) false\n\nX::hasProp($arr, 'd');\n\/\/ (bool) false\n\nX::hasProp('string', 'd');\n\/\/ null"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($obj, string $prop, bool $check_empty = false)\n  {\n    if (is_array($obj)) {\n      return \\array_key_exists($prop, $obj) && (!$check_empty || !empty($obj[$prop]));\n    }\n    elseif (is_object($obj)) {\n      return \\property_exists($obj, $prop) && (!$check_empty || !empty($obj->$prop));\n    }\n\n    return null;\n  }",
            "startLine": 312,
            "endLine": 322,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                null,
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "obj",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "prop",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "check_empty",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "hasProps": {
            "name": "hasProps",
            "summary": "Check if an array or an object has the given properties",
            "description": "```php\n$arr = [\n   'a' => 1,\n   'b' => '',\n   'c' => 0\n ];\n\nX::hasProps($arr, ['a', 'b', 'c']);\n\/\/ (bool) true\n\nX::hasProps($arr, ['a', 'b', 'c'], true);\n\/\/ (bool) false\n\n* X::hasProps('string', ['a']);\n\/\/ null\n\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$arr = [\n   'a' => 1,\n   'b' => '',\n   'c' => 0\n ];\n\nX::hasProps($arr, ['a', 'b', 'c']);\n\/\/ (bool) true\n\nX::hasProps($arr, ['a', 'b', 'c'], true);\n\/\/ (bool) false\n\n* X::hasProps('string', ['a']);\n\/\/ null"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($obj, array $props, bool $check_empty = false)\n  {\n    foreach ($props as $p) {\n      $test = self::hasProp($obj, $p, $check_empty);\n      if ($test === null) {\n        return null;\n      }\n      elseif (!$test) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
            "startLine": 350,
            "endLine": 363,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                null,
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "obj",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "props",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "check_empty",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "hasDeepProp": {
            "name": "hasDeepProp",
            "summary": "Check if an array or an object has the given property.",
            "description": "```php\n$arr = [\n   'a' => ['d' => [], 'e'],\n   'b' => 'g',\n   'c' => 0\n ];\n\nX::hasDeepProp($arr, ['a']);\n\/\/ (bool) true\n\nX::hasDeepProp($arr, ['a'], true);\n\/\/ (bool) true\n\nX::hasDeepProp($arr, ['a', 'd']);\n\/\/ (bool) true\n\nX::hasDeepProp($arr, ['a', 'd'], true);\n\/\/ (bool) false\n\nX::hasDeepProp($arr, ['a', 'e']);\n\/\/ (bool) false\n\nX::hasDeepProp($arr, ['b']);\n\/\/ (bool) true\n\nX::hasDeepProp($arr, ['b'], true);\n\/\/ (bool) true\n\nX::hasDeepProp($arr, ['b', 'g']);\n\/\/ (bool) false\n\nX::hasDeepProp($arr, ['c']);\n\/\/ (bool) true\n\nX::hasDeepProp($arr, ['c'], true);\n\/\/ (bool) false\n\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$arr = [\n   'a' => ['d' => [], 'e'],\n   'b' => 'g',\n   'c' => 0\n ];\n\nX::hasDeepProp($arr, ['a']);\n\/\/ (bool) true\n\nX::hasDeepProp($arr, ['a'], true);\n\/\/ (bool) true\n\nX::hasDeepProp($arr, ['a', 'd']);\n\/\/ (bool) true\n\nX::hasDeepProp($arr, ['a', 'd'], true);\n\/\/ (bool) false\n\nX::hasDeepProp($arr, ['a', 'e']);\n\/\/ (bool) false\n\nX::hasDeepProp($arr, ['b']);\n\/\/ (bool) true\n\nX::hasDeepProp($arr, ['b'], true);\n\/\/ (bool) true\n\nX::hasDeepProp($arr, ['b', 'g']);\n\/\/ (bool) false\n\nX::hasDeepProp($arr, ['c']);\n\/\/ (bool) true\n\nX::hasDeepProp($arr, ['c'], true);\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($obj, array $prop_path, bool $check_empty = false)\n  {\n      array $prop_path,\n      bool $check_empty = false\n  ): ?bool\n  {\n    $o =& $obj;\n    foreach ($prop_path as $p) {\n      if (is_array($o)) {\n        if (!\\array_key_exists($p, $o)) {\n          return false;\n        }\n\n        if ($check_empty && !$o[$p]) {\n          return false;\n        }\n\n        $o =& $o[$p];\n      }\n      elseif (\\is_object($o)) {\n        if (!\\property_exists($o, $p)) {\n          return false;\n        }\n\n        if ($check_empty && !$o->$p) {\n          return false;\n        }\n\n        $o =& $o->$p;\n      }\n      else {\n        return false;\n      }\n    }\n\n    return true;\n  }",
            "startLine": 413,
            "endLine": 449,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                null,
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "obj",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "prop_path",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "path"
                },
                {
                    "name": "check_empty",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "empty"
                }
            ]
        },
        "makeStoragePath": {
            "name": "makeStoragePath",
            "summary": "```php",
            "description": "X::makeStoragePath('foo\/bar', 'd\/m\/Y');\n\/\/ (string) \"\/foo\/bar\/27\/06\/2021\/1\/\"\n\n X::makeStoragePath('foo\/bar');\n\/\/ (string) \"\/foo\/bar\/2021\/06\/27\/1\/\"\n\nX::makeStoragePath('foo\/bar', 'Y\/m\/d', 1); \/\/ path contains a \"1\" dir which contains 2 dirs or files\n\/\/ (string) \"\/foo\/bar\/2021\/06\/27\/2\/\"\n\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>X::makeStoragePath('foo\/bar', 'd\/m\/Y');\n\/\/ (string) &quot;\/foo\/bar\/27\/06\/2021\/1\/&quot;<\/p>\n<p>X::makeStoragePath('foo\/bar');\n\/\/ (string) &quot;\/foo\/bar\/2021\/06\/27\/1\/&quot;<\/p>\n<p>X::makeStoragePath('foo\/bar', 'Y\/m\/d', 1); \/\/ path contains a &quot;1&quot; dir which contains 2 dirs or files\n\/\/ (string) &quot;\/foo\/bar\/2021\/06\/27\/2\/&quot;<\/p>\n<pre><code><\/code><\/pre>"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, $format = 'Y\/m\/d', $max = 100, bbn\\File\\System $fs = NULL)\n  {\n      $format = 'Y\/m\/d',\n      $max = 100,\n      File\\System $fs = null\n  ): ?string\n  {\n    if (empty($format)) {\n      $format = 'Y\/m\/d';\n    }\n\n    if (!$max) {\n      $max = 100;\n    }\n\n    if (!$fs) {\n      $fs = new File\\System();\n    }\n\n    \/\/ One dir per $format\n    $spath = date($format);\n    if ($spath) {\n      $path = $fs->createPath($path.(substr($path, -1) === '\/' ? '' : '\/').$spath);\n      if ($fs->isDir($path)) {\n        $num = count($fs->getDirs($path));\n        if ($num) {\n          \/\/ Dir or files\n          $num_files = count($fs->getFiles($path.'\/'.$num, true));\n          if ($num_files >= $max) {\n            $num++;\n          }\n        }\n        else {\n          $num = 1;\n        }\n\n        if ($fs->createPath($path.'\/'.$num)) {\n          return $path.'\/'.$num.'\/';\n        }\n      }\n    }\n\n    return null;\n  }",
            "startLine": 472,
            "endLine": 515,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "format",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "Y\/m\/d",
                    "default_name": ""
                },
                {
                    "name": "max",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 100,
                    "default_name": ""
                },
                {
                    "name": "fs",
                    "position": 3,
                    "type": "bbn\\File\\System",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "cleanStoragePath": {
            "name": "cleanStoragePath",
            "summary": "Deletes the for form the given path and date format if it's empty.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, $format = 'Y\/m\/d', bbn\\File\\System $fs = NULL)\n  {\n      $format = 'Y\/m\/d',\n      File\\System $fs = null\n  ): ?int\n  {\n    if (empty($format)) {\n      $format = 'Y\/m\/d';\n    }\n\n    if (!$fs) {\n      $fs = new File\\System();\n    }\n\n    if (!$fs->isDir($path)) {\n      return null;\n    }\n\n    $limit = count(self::split($format, '\/')) + 1;\n    $res   = 0;\n    while ($limit > 0) {\n      if (!$fs->getNumFiles($path) && $fs->delete($path)) {\n        $limit--;\n        $res++;\n        $path = self::dirname($path);\n      }\n      else{\n        break;\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 526,
            "endLine": 558,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "format",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "Y\/m\/d",
                    "default_name": ""
                },
                {
                    "name": "fs",
                    "position": 2,
                    "type": "bbn\\File\\System",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "mergeObjects": {
            "name": "mergeObjects",
            "summary": "Returns to a merged object from two or more objects.",
            "description": "Property values from later objects overwrite the previous objects.\n\n```php\nclass A {\n public $a = 10;\n public $b = 20;\n};\n\nclass B {\n public $c = 30;\n public $d = 40;\n};\n\n* class C {\n public $c = 35;\n public $e = 50;\n};\n\n$obj1 = new A;\n$obj2 = new B;\n$obj3 = new C;\n\nX::mergeObjects($obj1, $obj2, $obj3);\n\/\/ object {'a': 10, 'b': 20, 'c': 35, 'd': 40, 'e': 50}\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Property values from later objects overwrite the previous objects.<\/p>"
                },
                {
                    "type": "code",
                    "content": "class A {\n public $a = 10;\n public $b = 20;\n};\n\nclass B {\n public $c = 30;\n public $d = 40;\n};\n\n* class C {\n public $c = 35;\n public $e = 50;\n};\n\n$obj1 = new A;\n$obj2 = new B;\n$obj3 = new C;\n\nX::mergeObjects($obj1, $obj2, $obj3);\n\/\/ object {'a': 10, 'b': 20, 'c': 35, 'd': 40, 'e': 50}"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(object $o1, object $o2)\n  {\n    $args = \\func_get_args();\n\n    if (\\count($args) > 2) {\n      for ($i = \\count($args) - 1; $i > 1; $i--) {\n        if (!is_object($args[$i])) {\n          throw new Exception('The provided argument must be an object, ' . gettype($args[$i]) . ' given.');\n        }\n        $args[$i - 1] = self::mergeObjects($args[$i - 1], $args[$i]);\n      }\n\n      $o2 = $args[1];\n    }\n\n    $a1  = self::toArray($o1);\n    $a2  = self::toArray($o2);\n    $res = self::mergeArrays($a1, $a2);\n    return self::toObject($res);\n  }",
            "startLine": 594,
            "endLine": 613,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "stdClass"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "o1",
                    "position": 0,
                    "type": "object",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The first object to merge."
                },
                {
                    "name": "o2",
                    "position": 1,
                    "type": "object",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The second object to merge."
                }
            ]
        },
        "flatten": {
            "name": "flatten",
            "summary": "Flattens a multi-dimensional array for the given children index name.",
            "description": "```php\n\n$arr = [\n   [\n     'name'  => 'John Doe',\n     'age'   => '35',\n     'children' => [\n         ['name' => 'Carol', 'age' => '4'],\n         ['name' => 'Jack', 'age' => '6'],\n      ]\n   ],\n   [\n     'name'  => 'Paul',\n     'age'   => '33',\n     'children' => [\n         ['name' => 'Alan', 'age' => '8'],\n         ['name' => 'Allison 'age' => '2'],\n      ]\n   ],\n ];\n\nX::flatten($arr, 'children');\n\/* (array)\n[\n  ['name' => 'John Doe', 'age' => '35'],\n  ['name' => 'Paul', 'age' => '33'],\n  ['name' => 'Carol', 'age' => '4'],\n  ['name' => 'Jack', 'age' => '6'],\n  ['name' => 'Alan', 'age' => '8'],\n  ['name' => 'Allison', 'age' => '2']\n ]\n\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$arr = [\n   [\n     'name'  => 'John Doe',\n     'age'   => '35',\n     'children' => [\n         ['name' => 'Carol', 'age' => '4'],\n         ['name' => 'Jack', 'age' => '6'],\n      ]\n   ],\n   [\n     'name'  => 'Paul',\n     'age'   => '33',\n     'children' => [\n         ['name' => 'Alan', 'age' => '8'],\n         ['name' => 'Allison 'age' => '2'],\n      ]\n   ],\n ];\n\nX::flatten($arr, 'children');\n\/* (array)\n[\n  ['name' => 'John Doe', 'age' => '35'],\n  ['name' => 'Paul', 'age' => '33'],\n  ['name' => 'Carol', 'age' => '4'],\n  ['name' => 'Jack', 'age' => '6'],\n  ['name' => 'Alan', 'age' => '8'],\n  ['name' => 'Allison', 'age' => '2']\n ]"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $arr, string $children)\n  {\n    $toAdd = [];\n    $res = self::rmap(\n      function ($a) use (&$toAdd, $children) {\n        if (isset($a[$children]) && is_array($a[$children])) {\n          foreach ($a[$children] as &$c) {\n            $toAdd[] = $c;\n          }\n\n          unset($c);\n          unset($a[$children]);\n        }\n\n        return $a;\n      },\n      $arr,\n      $children\n    );\n    if (count($toAdd)) {\n      array_push($res, ...$toAdd);\n    }\n\n    return $res;\n  }",
            "startLine": 657,
            "endLine": 681,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "arr",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "children",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "mergeArrays": {
            "name": "mergeArrays",
            "summary": "Merges two or more arrays into one.",
            "description": "Values from later array overwrite the previous array.\n\n```php\nX::mergeArrays([1, 'Test'], [2, 'Example']);\n\/\/ array [1, 'Test', 2, 'Example']\n\n$arr1 = ['a' => 1, 'b' => 2];\n$arr2 = ['b' => 3, 'c' => 4, 'd' => 5];\n$arr3 = ['e' => 6, 'b' => 33];\n\nX::mergeArrays($arr1, $arr2, $arr3)\n\/\/ (array) ['a' => 1, 'b' => 33, 'c' => 4, 'd' => 5, 'e' => 6]\n\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Values from later array overwrite the previous array.<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::mergeArrays([1, 'Test'], [2, 'Example']);\n\/\/ array [1, 'Test', 2, 'Example']\n\n$arr1 = ['a' => 1, 'b' => 2];\n$arr2 = ['b' => 3, 'c' => 4, 'd' => 5];\n$arr3 = ['e' => 6, 'b' => 33];\n\nX::mergeArrays($arr1, $arr2, $arr3)\n\/\/ (array) ['a' => 1, 'b' => 33, 'c' => 4, 'd' => 5, 'e' => 6]"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $a1, array $a2)\n  {\n    $args = \\func_get_args();\n    if (\\count($args) > 2) {\n      for ($i = \\count($args) - 1; $i > 1; $i--) {\n        if (!is_array($args[$i])) {\n          throw new Exception('The provided argument must be an array, ' . gettype($args[$i]) . ' given.' );\n        }\n        $args[$i - 1] = self::mergeArrays($args[$i - 1], $args[$i]);\n      }\n\n      $a2 = $args[1];\n    }\n\n    if ((self::isAssoc($a1) || empty($a1)) && (self::isAssoc($a2) || empty($a2))) {\n      $keys = array_unique(array_merge(array_keys($a1), array_keys($a2)));\n      $r    = [];\n      foreach ($keys as $k) {\n        if (!array_key_exists($k, $a1) && !array_key_exists($k, $a2)) {\n          continue;\n        }\n        elseif (!array_key_exists($k, $a2)) {\n          $r[$k] = $a1[$k];\n        }\n        elseif (!array_key_exists($k, $a1) || !\\is_array($a2[$k]) || !\\is_array($a1[$k]) || is_numeric(key($a2[$k]))) {\n          $r[$k] = $a2[$k];\n        }\n        else{\n          $r[$k] = self::mergeArrays($a1[$k], $a2[$k]);\n        }\n      }\n    }\n    else{\n      $r = array_merge($a1, $a2);\n    }\n\n    return $r;\n  }",
            "startLine": 706,
            "endLine": 743,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "a1",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The first array to merge."
                },
                {
                    "name": "a2",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The second array to merge."
                }
            ]
        },
        "toObject": {
            "name": "toObject",
            "summary": "Converts a JSON string or an array into an object.",
            "description": "```php\nX::toObject([[1, 'Test'], [2, 'Example']]);\n\/\/ (object) {[1, 'Test'], [2, 'Example']}\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::toObject([[1, 'Test'], [2, 'Example']]);\n\/\/ (object) {[1, 'Test'], [2, 'Example']}"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($ar)\n  {\n    if (\\is_string($ar)) {\n      $ar = json_decode($ar);\n    }\n    elseif (\\is_array($ar)) {\n      $ar = json_decode(json_encode($ar));\n    }\n\n    return (object)$ar;\n  }",
            "startLine": 757,
            "endLine": 767,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "stdClass"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "ar",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The array or JSON to convert."
                }
            ]
        },
        "toArray": {
            "name": "toArray",
            "summary": "Converts a JSON string or an object into an array.",
            "description": "```php\n$file = new stdClass();\n$file->foo = \"bar\";\n$file->bar = \"foo\";\nX::toArray($file);\n\/* array [\n    'foo' => 'bar',\n    'bar' => 'foo'\n]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$file = new stdClass();\n$file->foo = \"bar\";\n$file->bar = \"foo\";\nX::toArray($file);\n\/* array [\n    'foo' => 'bar',\n    'bar' => 'foo'\n]"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($obj)\n  {\n    $obj = \\is_string($obj) ? $obj : json_encode($obj);\n    return json_decode($obj, true);\n  }",
            "startLine": 787,
            "endLine": 791,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "obj",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The object or JSON to convert."
                }
            ]
        },
        "jsObject": {
            "name": "jsObject",
            "summary": "Converts the provided iterable to a json string.",
            "description": "```php\n$arr = [\n   'a' => 1,\n   'b' => ['c' => 2,'d' => 3],\n   'c' => 'let data = \"{\"foo\":\"bar\"}\"'\n];\n\nX::jsObject($arr);\n\/* (string)\n{\n  \"a\": 1,\n  \"b\": {\n     \"c\": 2,\n     \"d\": 3\n     },\n  \"c\": \"let data = \\\"{\\\"foo\\\":\\\"bar\\\"}\\\"\"\n}\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$arr = [\n   'a' => 1,\n   'b' => ['c' => 2,'d' => 3],\n   'c' => 'let data = \"{\"foo\":\"bar\"}\"'\n];\n\nX::jsObject($arr);\n\/* (string)\n{\n  \"a\": 1,\n  \"b\": {\n     \"c\": 2,\n     \"d\": 3\n     },\n  \"c\": \"let data = \\\"{\\\"foo\\\":\\\"bar\\\"}\\\"\"\n}"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(iterable $obj)\n  {\n    $value_arr    = [];\n    $replace_keys = [];\n\n    \/\/$obj = X::convertUids($obj);\n    $transform = function ($o, $idx = 0) use (&$transform, &$value_arr, &$replace_keys) {\n      foreach($o as $key => &$value) {\n        $idx++;\n        if (\\is_array($value) || \\is_object($value)) {\n          $value = $transform($value, $idx);\n        }\n        elseif (\\is_string($value)\n            \/\/ Look for values starting with 'function('\n            && (strpos(trim($value), 'function(') === 0)\n        ) {\n          \/\/ Store function string.\n          $value_arr[] = $value;\n          \/\/ Replace function string in $foo with a \u2018unique\u2019 special key.\n          $value = \"%bbn%$key%bbn%$idx%bbn%\";\n          \/\/ Later on, we\u2019ll look for the value, and replace it.\n          $replace_keys[] = '\"'.$value.'\"';\n        }\n      }\n\n      return $o;\n    };\n    \/\/ Now encode the array to json format\n    $json = json_encode($transform($obj), JSON_PRETTY_PRINT);\n    \/* $json looks like:\n    {\n      \u201cnumber\u201d:1,\n      \u201cfloat\u201d:1.5,\n      \u201carray\u201d:[1,2],\n      \u201cstring\u201d:\u201dbar\u201d,\n      \u201cfunction\u201d:\u201d%bbn%function%bbn%5%bbn%\u201d\n    }\n    *\/\n    \/\/ Replace the special keys with the original string.\n    return \\count($replace_keys) ? str_replace($replace_keys, $value_arr, $json) : $json;\n  }",
            "startLine": 820,
            "endLine": 860,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "obj",
                    "position": 0,
                    "type": "iterable",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "indentJson": {
            "name": "indentJson",
            "summary": "Indents a flat JSON string to make it human-readable.",
            "description": "```php\necho X::indentJson('{\"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25}');\n\/*\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"isAlive\": true,\n  \"age\": 25\n}\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "echo X::indentJson('{\"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25}');\n\/*\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"isAlive\": true,\n  \"age\": 25\n}"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $json)\n  {\n    $result      = '';\n    $pos         = 0;\n    $strLen      = \\strlen($json);\n    $indentStr   = '  ';\n    $newLine     = \"\\n\";\n    $prevChar    = '';\n    $outOfQuotes = true;\n\n    for ($i = 0; $i <= $strLen; $i++) {\n      \/\/ Grab the next character in the string.\n      $char = substr($json, $i, 1);\n\n      \/\/ Are we inside a quoted string?\n      if ($char == '\"' && $prevChar != '\\\\') {\n        $outOfQuotes = !$outOfQuotes;\n\n        \/\/ If this character is the end of an element,\n        \/\/ output a new line and indent the next line.\n      } elseif(($char == '}' || $char == ']') && $outOfQuotes) {\n        $result .= $newLine;\n        $pos --;\n        for ($j = 0; $j < $pos; $j++) {\n          $result .= $indentStr;\n        }\n      }\n\n      \/\/ Add the character to the result string.\n      $result .= $char;\n\n      \/\/ If the last character was the beginning of an element,\n      \/\/ output a new line and indent the next line.\n      if (($char == ',' || $char == '{' || $char == '[') && $outOfQuotes) {\n        $result .= $newLine;\n        if ($char == '{' || $char == '[') {\n          $pos ++;\n        }\n\n        for ($j = 0; $j < $pos; $j++) {\n          $result .= $indentStr;\n        }\n      }\n\n      $prevChar = $char;\n    }\n\n    return $result;\n  }",
            "startLine": 880,
            "endLine": 928,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "json",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The original JSON string to process."
                }
            ]
        },
        "removeEmpty": {
            "name": "removeEmpty",
            "summary": "Returns an object or an array cleaned of all empty values.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($arr, $remove_space = false)\n  {\n    $isAssoc = X::isAssoc($arr);\n    foreach ($arr as $k => $v) {\n      if (\\is_object($arr)) {\n        if (\\is_array($v) || \\is_object($v)) {\n          $arr->$k = self::removeEmpty($v, $remove_space);\n        }\n        else {\n          if (empty($v)) {\n            if (isset($arr->$k)) {\n              unset($arr->$k);\n            }\n          }\n          else {\n            $arr->$k = $v;\n          }\n        }\n      }\n      else{\n        if (\\is_array($v) || \\is_object($v)) {\n          $arr[$k] = self::removeEmpty($v, $remove_space);\n        }\n        elseif ($remove_space && is_string($v)) {\n          $arr[$k] = trim($arr[$k]);\n        }\n\n        if (empty($arr[$k])) {\n          unset($arr[$k]);\n        }\n      }\n    }\n    if (!$isAssoc) {\n      $arr = array_values($arr);\n    }\n\n    return $arr;\n  }",
            "startLine": 947,
            "endLine": 984,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "arr",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "An object or array to clean."
                },
                {
                    "name": "remove_space",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "space If \"true\" the spaces are removed, default: \"false\"."
                }
            ]
        },
        "toGroups": {
            "name": "toGroups",
            "summary": "Converts an indexed array into a numeric array where the original index is a property.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $arr, $keyname = 'value', $valname = 'text')\n  {\n    $r = [];\n    foreach ($arr as $k => $v) {\n      $r[] = [$keyname => $k, $valname => $v];\n    }\n\n    return $r;\n  }",
            "startLine": 1004,
            "endLine": 1012,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "arr",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The original array."
                },
                {
                    "name": "keyname",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": "",
                    "description": "Alias for the index."
                },
                {
                    "name": "valname",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": "",
                    "description": "Alias for the value."
                }
            ]
        },
        "isAssoc": {
            "name": "isAssoc",
            "summary": "Checks if the given array is associative.",
            "description": "```php\n\\bbn\\\\X::isAssoc(['id' => 0, 'name' => 'Allison']);\n\n\\bbn\\\\X::isAssoc(['Allison', 'John', 'Bert']);\n\n\\bbn\\\\X::isAssoc([0 => \"Allison\", 1 => \"John\", 2 => \"Bert\"]);\n\n\\bbn\\\\X::isAssoc([0 => \"Allison\", 1 => \"John\", 3 => \"Bert\"]);\n\n\/\/ boolean true\n\/\/ boolean false\n\/\/ boolean false\n\/\/ boolean true\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\\\X::isAssoc(['id' => 0, 'name' => 'Allison']);\n\n\\bbn\\\\X::isAssoc(['Allison', 'John', 'Bert']);\n\n\\bbn\\\\X::isAssoc([0 => \"Allison\", 1 => \"John\", 2 => \"Bert\"]);\n\n\\bbn\\\\X::isAssoc([0 => \"Allison\", 1 => \"John\", 3 => \"Bert\"]);\n\n\/\/ boolean true\n\/\/ boolean false\n\/\/ boolean false\n\/\/ boolean true"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $r)\n  {\n    $keys = array_keys($r);\n    $c    = \\count($keys);\n    for ($i = 0; $i < $c; $i++) {\n      if ($keys[$i] !== $i) {\n        return 1;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 1036,
            "endLine": 1047,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "r",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The array to check."
                }
            ]
        },
        "isCli": {
            "name": "isCli",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n      if (!isset(self::$_cli)) {\n        self::$_cli = (php_sapi_name() === 'cli');\n      }\n\n      return self::$_cli;\n  }",
            "startLine": 1053,
            "endLine": 1060,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "getDump": {
            "name": "getDump",
            "summary": "Returns a dump of the given variable.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = \\func_get_args();\n    $st   = '';\n    foreach ($args as $a) {\n      $r = $a;\n      if (\\is_null($a)) {\n        $r = 'null';\n      }\n      elseif ($a === false) {\n        $r = 'false';\n      }\n      elseif ($a === true) {\n        $r = 'true';\n      }\n      elseif ($a === 0) {\n        $r = '0';\n      }\n      elseif ($a === '') {\n        $r = '\"\"';\n      }\n      elseif ($a === []) {\n        $r = '[]';\n      }\n      elseif (!$a) {\n        $r = '0';\n      }\n      elseif (!\\is_string($a) && \\is_callable($a)) {\n        $r = 'Function';\n      }\n      elseif (\\is_object($a)) {\n        $n = \\get_class($a);\n        if ($n === 'stdClass') {\n          $r = Str::export($a);\n        }\n        else{\n          $r = $n.' Object';\n        }\n      }\n      elseif (\\is_array($a)) {\n        $r = Str::export($a);\n      }\n      elseif (\\is_resource($a)) {\n        $r = 'Resource '.get_resource_type($a);\n      }\n      elseif (Str::isBuid($a)) {\n        $tmp = bin2hex($a);\n        if (strlen($tmp) === 32) {\n          $r = '0x'.bin2hex($a);\n        }\n      }\n\n      $st .= $r.PHP_EOL;\n    }\n\n    return PHP_EOL.$st;\n  }",
            "startLine": 1069,
            "endLine": 1125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getHdump": {
            "name": "getHdump",
            "summary": "Returns an HTML dump of the given variable.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return nl2br(str_replace(\"  \", \"&nbsp;&nbsp;\", htmlentities(self::getDump(...\\func_get_args()))), false);\n  }",
            "startLine": 1134,
            "endLine": 1137,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "dump": {
            "name": "dump",
            "summary": "Dumps the given variable.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    echo self::getDump(...\\func_get_args());\n  }",
            "startLine": 1147,
            "endLine": 1150,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": []
        },
        "ddump": {
            "name": "ddump",
            "summary": "Dumps the given variable and dies.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::dump(...\\func_get_args());\n    die();\n  }",
            "startLine": 1160,
            "endLine": 1164,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": []
        },
        "hdump": {
            "name": "hdump",
            "summary": "Dumps the given variable in HTML.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    echo self::getHdump(...\\func_get_args());\n  }",
            "startLine": 1173,
            "endLine": 1176,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": []
        },
        "hddump": {
            "name": "hddump",
            "summary": "Dumps the given variable in HTML and dies.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::hdump(...\\func_get_args());\n    die();\n  }",
            "startLine": 1185,
            "endLine": 1189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": []
        },
        "adump": {
            "name": "adump",
            "summary": "Adaptive dump, i.e. dumps in text if CLI, HTML otherwise.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::isCli() ? self::dump(...\\func_get_args()) : self::hdump(...\\func_get_args());\n  }",
            "startLine": 1198,
            "endLine": 1201,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": []
        },
        "pathinfo": {
            "name": "pathinfo",
            "summary": "Returns the pathinfo, working with multibytes strings.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, $options = NULL)\n  {\n    $ret = ['dirname' => '', 'basename' => '', 'extension' => '', 'filename' => ''];\n    $pathinfo = [];\n    if (preg_match('#^(.*?)[\\\\\\\\\/]*(([^\/\\\\\\\\]*?)(\\.([^.\\\\\\\\\/]+?)|))[\\\\\\\\\/.]*$#m', $path, $pathinfo)) {\n      if (array_key_exists(1, $pathinfo)) {\n        $ret['dirname'] = $pathinfo[1];\n      }\n\n      if (array_key_exists(2, $pathinfo)) {\n        $ret['basename'] = $pathinfo[2];\n      }\n\n      if (array_key_exists(5, $pathinfo)) {\n        $ret['extension'] = $pathinfo[5];\n      }\n\n      if (array_key_exists(3, $pathinfo)) {\n        $ret['filename'] = $pathinfo[3];\n      }\n    }\n    switch ($options) {\n      case PATHINFO_DIRNAME:\n      case 'dirname':\n        return $ret['dirname'];\n      case PATHINFO_BASENAME:\n      case 'basename':\n        return $ret['basename'];\n      case PATHINFO_EXTENSION:\n      case 'extension':\n        return $ret['extension'];\n      case PATHINFO_FILENAME:\n      case 'filename':\n        return $ret['filename'];\n      default:\n        return $ret;\n    }\n  }",
            "startLine": 1211,
            "endLine": 1248,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "options",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "basename": {
            "name": "basename",
            "summary": "Returns the basename, working with multibytes strings.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, string $suffix = '')\n  {\n    $res = '';\n    \/\/ works both in windows and unix\n    if (preg_match('@^.*[\\\\\\\\\/]([^\\\\\\\\\/]+)$@s', $path, $matches)) {\n      $res = $matches[1];\n    }\n    else if (preg_match('@^([^\\\\\\\\\/]+)$@s', $path, $matches)) {\n      $res = $matches[1];\n    }\n\n    if ($res && $suffix && (substr($res, - strlen($suffix)) === $suffix)) {\n      return substr($res, 0, - strlen($suffix));\n    }\n\n    return $res;\n  }",
            "startLine": 1258,
            "endLine": 1274,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "suffix",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dirname": {
            "name": "dirname",
            "summary": "Returns the dirname, working with multibytes strings.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $path)\n  {\n    return self::pathinfo($path, 'dirname');\n  }",
            "startLine": 1284,
            "endLine": 1287,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "extension": {
            "name": "extension",
            "summary": "Returns the extension of a path, working with multibytes strings.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $path)\n  {\n    return self::pathinfo($path, 'extension');\n  }",
            "startLine": 1297,
            "endLine": 1300,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "filename": {
            "name": "filename",
            "summary": "Returns the filename, working with multibytes strings.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $path)\n  {\n    return self::pathinfo($path, 'filename');\n  }",
            "startLine": 1310,
            "endLine": 1313,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "buildOptions": {
            "name": "buildOptions",
            "summary": "Returns the HTML code for creating the &lt;option&gt; tag(s) based on an array.",
            "description": "If the array is indexed, the index will be used as value\n\n```php\nX::buildOptions(['yes', 'no']);\n\/\/ string \"<option value=\"yes\">yes<\/option><option value=\"no\">no<\/option>\"\nX::buildOptions(['yes', 'no'], 'no');\n\/\/ string \"<option value=\"yes\">yes<\/option><option value=\"no\" selected=\"selected\">no<\/option>\"\nX::buildOptions(['yes', 'no'], 'no', 'LabelForEmpty');\n\/\/ string \"<option value=\"\">LabelForEmpty<\/option><option value=\"yes\">yes<\/option><option value=\"no\" selected=\"selected\">no<\/option>\"\nX::dump(X::buildOptions([3 => \"Allison\", 4 => \"Mike\", 5 => \"Andrew\"], 5, 'Who?'));\n\/\/ string \"<option  value=\"\">Who?<\/option><option  value=\"3\">Allison<\/option><option  value=\"4\">Mike<\/option><option  value=\"5\"  selected=\"selected\">Andrew<\/option>\"\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>If the array is indexed, the index will be used as value<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::buildOptions(['yes', 'no']);\n\/\/ string \"<option value=\"yes\">yes<\/option><option value=\"no\">no<\/option>\"\nX::buildOptions(['yes', 'no'], 'no');\n\/\/ string \"<option value=\"yes\">yes<\/option><option value=\"no\" selected=\"selected\">no<\/option>\"\nX::buildOptions(['yes', 'no'], 'no', 'LabelForEmpty');\n\/\/ string \"<option value=\"\">LabelForEmpty<\/option><option value=\"yes\">yes<\/option><option value=\"no\" selected=\"selected\">no<\/option>\"\nX::dump(X::buildOptions([3 => \"Allison\", 4 => \"Mike\", 5 => \"Andrew\"], 5, 'Who?'));\n\/\/ string \"<option  value=\"\">Who?<\/option><option  value=\"3\">Allison<\/option><option  value=\"4\">Mike<\/option><option  value=\"5\"  selected=\"selected\">Andrew<\/option>\""
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $values, $selected = '', $empty_label = false)\n  {\n    $r = '';\n    if ($empty_label !== false) {\n      $r .= '<option value=\"\">'.$empty_label.'<\/option>';\n    }\n\n    $is_assoc = self::isAssoc($values);\n    foreach ($values as $k => $v)\n    {\n      if (\\is_array($v) && \\count($v) == 2) {\n        $value = $v[0];\n        $title = $v[1];\n      }\n      elseif (!isset($values[0]) && $is_assoc) {\n        $value = $k;\n        $title = $v;\n      }\n      else {\n        $value = $title = $v;\n      }\n\n      if (isset($value,$title)) {\n        $r .= '<option value=\"'.$value.'\"'.\n          ($value == $selected ? ' selected=\"selected\"' : '').\n          '>'.$title.'<\/option>';\n      }\n\n      unset($value,$title);\n    }\n\n    return $r;\n  }",
            "startLine": 1336,
            "endLine": 1368,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "values",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The source array for the options"
                },
                {
                    "name": "selected",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The selected value"
                },
                {
                    "name": "empty_label",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "label A label for empty value"
                }
            ]
        },
        "toKeypair": {
            "name": "toKeypair",
            "summary": "Converts a numeric array into an associative one, alternating key and value.",
            "description": "```php\nX::toKeypair(['Test', 'TestFile', 'Example', 'ExampleFile']);\n\/\/ string ['Test' => 'TestFile', 'Example' => 'ExampleFile']\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::toKeypair(['Test', 'TestFile', 'Example', 'ExampleFile']);\n\/\/ string ['Test' => 'TestFile', 'Example' => 'ExampleFile']"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $arr, bool $protected = true)\n  {\n    $num = \\count($arr);\n    $res = [];\n    if (($num % 2) === 0) {\n      $i = 0;\n      while (isset($arr[$i])) {\n        if (!\\is_string($arr[$i]) || ($protected && preg_match('\/[^0-9A-Za-z\\-_]\/', Str::cast($arr[$i])))) {\n          return false;\n        }\n\n        $res[$arr[$i]] = $arr[$i + 1];\n        $i            += 2;\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1383,
            "endLine": 1400,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "arr",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The array. It must contain an even number of values"
                },
                {
                    "name": "protected",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "If false no index protection will be performed"
                }
            ]
        },
        "maxWithKey": {
            "name": "maxWithKey",
            "summary": "Returns the maximum value of a given property from a 2 dimensions array.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $ar, $key)\n  {\n    if (\\count($ar) == 0) {\n      return null;\n    }\n\n    $max = current($ar)[$key] ?? null;\n\n    if (!$max) {\n      return null;\n    }\n\n    foreach ($ar as $a) {\n      if (is_float($a[$key]) || is_float($max)) {\n        if (self::compareFloats($a[$key], $max, '>')) {\n          $max = $a[$key];\n        }\n      }\n      elseif ($a[$key] > $max) {\n        $max = $a[$key];\n      }\n    }\n\n    return $max;\n  }",
            "startLine": 1422,
            "endLine": 1446,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "ar",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "A multidimensional array"
                },
                {
                    "name": "key",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Where to check the property value from"
                }
            ]
        },
        "minWithKey": {
            "name": "minWithKey",
            "summary": "Returns the minimum value of an index from a multidimensional array.",
            "description": "```php\nX::minWithKey([\n ['age' => 1, 'name' => 'Michelle'],\n ['age' => 8, 'name' => 'John'],\n ['age' => 45, 'name' => 'Sarah'],\n ['age' => 45, 'name' => 'Camilla'],\n ['age' => 2, 'name' => 'Allison']\n], 'age');\n\/\/ int  1\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::minWithKey([\n ['age' => 1, 'name' => 'Michelle'],\n ['age' => 8, 'name' => 'John'],\n ['age' => 45, 'name' => 'Sarah'],\n ['age' => 45, 'name' => 'Camilla'],\n ['age' => 2, 'name' => 'Allison']\n], 'age');\n\/\/ int  1"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $array, $key)\n  {\n    if (\\count($array) == 0) {\n      return null;\n    }\n\n    $min = $array[0][$key] ?? null;\n\n    if (!$min) {\n      return null;\n    }\n\n    foreach($array as $a) {\n      if($a[$key] < $min) {\n        $min = $a[$key];\n      }\n    }\n\n    return $min;\n  }",
            "startLine": 1467,
            "endLine": 1486,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "array",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "A multidimensional array."
                },
                {
                    "name": "key",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The index where to search."
                }
            ]
        },
        "debug": {
            "name": "debug",
            "summary": "Gets the backtrace and dumps or logs it into a file.",
            "description": "```php\nX::dump(X::debug());\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(X::debug());"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($file = '')\n  {\n    $debug = array_map(\n      function ($a) {\n        if (isset($a['object'])) {\n          unset($a['object']);\n        }\n\n        return $a;\n      }, debug_backtrace()\n    );\n    if (empty($file)) {\n      self::hdump($debug);\n    }\n    else{\n      self::log($debug, $file);\n    }\n  }",
            "startLine": 1498,
            "endLine": 1515,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The file to debug"
                }
            ]
        },
        "map": {
            "name": "map",
            "summary": "Applies the given function at all levels of a multidimensional array (if defined param $item).",
            "description": "```php\n$ar = [\n       ['age' => 45,\n         'name' => 'John',\n         'children' => [\n           ['age' => 8, 'name' => 'Carol'],\n           ['age' => 24, 'name' => 'Jack'],\n         ]\n       ],\n       ['age' => 44, 'name' => 'Benjamin'],\n       ['age' => 60, 'name' => 'Paul', 'children' =>\n         [\n           ['age' => 36, 'name' => 'Mike'],\n           ['age' => 46, 'name' => 'Alan', 'children' =>\n             ['age' => 8, 'name' => 'Allison'],\n           ]\n         ]\n       ]\n     ];\nX::hdump(X::map(function($a) {\n if ($a['age']>20) {\n   $a['name'] = 'Mr. '.$a['name'];\n }\n return $a;\n}, $ar,'children'));\n\/* array [\n           [\n             \"age\"  =>  45,\n             \"name\"  =>  \"Mr.  John\",\n             \"children\"  =>  [\n               [\n                 \"age\"  =>  8,\n                 \"name\"  =>  \"Carol\",\n               ],\n               [\n                 \"age\"  =>  24,\n                 \"name\"  =>  \"Mr.  Jack\",\n               ],\n             ],\n           ],\n           [\n             \"age\"  =>  44,\n             \"name\"  =>  \"Mr.  Benjamin\",\n           ],\n           [\n             \"age\"  =>  60,\n             \"name\"  =>  \"Mr.  Paul\",\n             \"children\"  =>  [\n               [\n                 \"age\"  =>  36,\n                 \"name\"  =>  \"Mr.  Mike\",\n               ],\n               [\n                 \"age\"  =>  46,\n                 \"name\"  =>  \"Mr.  Alan\",\n                 \"children\"  =>  [\n                   \"age\"  =>  8,\n                   \"name\"  =>  \"Allison\",\n                 ],\n               ],\n           ],\n         ]\n\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$ar = [\n       ['age' => 45,\n         'name' => 'John',\n         'children' => [\n           ['age' => 8, 'name' => 'Carol'],\n           ['age' => 24, 'name' => 'Jack'],\n         ]\n       ],\n       ['age' => 44, 'name' => 'Benjamin'],\n       ['age' => 60, 'name' => 'Paul', 'children' =>\n         [\n           ['age' => 36, 'name' => 'Mike'],\n           ['age' => 46, 'name' => 'Alan', 'children' =>\n             ['age' => 8, 'name' => 'Allison'],\n           ]\n         ]\n       ]\n     ];\nX::hdump(X::map(function($a) {\n if ($a['age']>20) {\n   $a['name'] = 'Mr. '.$a['name'];\n }\n return $a;\n}, $ar,'children'));\n\/* array [\n           [\n             \"age\"  =>  45,\n             \"name\"  =>  \"Mr.  John\",\n             \"children\"  =>  [\n               [\n                 \"age\"  =>  8,\n                 \"name\"  =>  \"Carol\",\n               ],\n               [\n                 \"age\"  =>  24,\n                 \"name\"  =>  \"Mr.  Jack\",\n               ],\n             ],\n           ],\n           [\n             \"age\"  =>  44,\n             \"name\"  =>  \"Mr.  Benjamin\",\n           ],\n           [\n             \"age\"  =>  60,\n             \"name\"  =>  \"Mr.  Paul\",\n             \"children\"  =>  [\n               [\n                 \"age\"  =>  36,\n                 \"name\"  =>  \"Mr.  Mike\",\n               ],\n               [\n                 \"age\"  =>  46,\n                 \"name\"  =>  \"Mr.  Alan\",\n                 \"children\"  =>  [\n                   \"age\"  =>  8,\n                   \"name\"  =>  \"Allison\",\n                 ],\n               ],\n           ],\n         ]"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(callable $fn, array $ar, string $items = NULL)\n  {\n    $res = [];\n    foreach ($ar as $key => $a) {\n      $is_false = $a === false;\n      $r        = $fn($a, $key);\n      if ($is_false) {\n        $res[] = $r;\n      }\n      elseif ($r !== false) {\n        if (\\is_array($r) && $items && isset($r[$items]) && \\is_array($r[$items])) {\n          $r[$items] = self::map($fn, $r[$items], $items);\n        }\n\n        $res[] = $r;\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1590,
            "endLine": 1609,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The function to be applied to the items of the array"
                },
                {
                    "name": "ar",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "items",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "If null the function will be applied just to the item of the parent array"
                }
            ]
        },
        "rmap": {
            "name": "rmap",
            "summary": "Applies the given function at all levels of a multidimensional array after picking the items (if defined param $item).",
            "description": "```php\n$ar = [\n       ['age' => 45,\n         'name' => 'John',\n         'children' => [\n           ['age' => 8, 'name' => 'Carol'],\n           ['age' => 24, 'name' => 'Jack'],\n         ]\n       ],\n       ['age' => 44, 'name' => 'Benjamin'],\n       ['age' => 60, 'name' => 'Paul', 'children' =>\n         [\n           ['age' => 36, 'name' => 'Mike'],\n           ['age' => 46, 'name' => 'Alan', 'children' =>\n             ['age' => 8, 'name' => 'Allison'],\n           ]\n         ]\n       ]\n     ];\nX::hdump(X::map(function($a) {\n if ($a['age']>20) {\n   $a['name'] = 'Mr. '.$a['name'];\n }\n return $a;\n}, $ar,'children'));\n\/* array [\n           [\n             \"age\"  =>  45,\n             \"name\"  =>  \"Mr.  John\",\n             \"children\"  =>  [\n               [\n                 \"age\"  =>  8,\n                 \"name\"  =>  \"Carol\",\n               ],\n               [\n                 \"age\"  =>  24,\n                 \"name\"  =>  \"Mr.  Jack\",\n               ],\n             ],\n           ],\n           [\n             \"age\"  =>  44,\n             \"name\"  =>  \"Mr.  Benjamin\",\n           ],\n           [\n             \"age\"  =>  60,\n             \"name\"  =>  \"Mr.  Paul\",\n             \"children\"  =>  [\n               [\n                 \"age\"  =>  36,\n                 \"name\"  =>  \"Mr.  Mike\",\n               ],\n               [\n                 \"age\"  =>  46,\n                 \"name\"  =>  \"Mr.  Alan\",\n                 \"children\"  =>  [\n                   \"age\"  =>  8,\n                   \"name\"  =>  \"Allison\",\n                 ],\n               ],\n           ],\n         ]\n\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$ar = [\n       ['age' => 45,\n         'name' => 'John',\n         'children' => [\n           ['age' => 8, 'name' => 'Carol'],\n           ['age' => 24, 'name' => 'Jack'],\n         ]\n       ],\n       ['age' => 44, 'name' => 'Benjamin'],\n       ['age' => 60, 'name' => 'Paul', 'children' =>\n         [\n           ['age' => 36, 'name' => 'Mike'],\n           ['age' => 46, 'name' => 'Alan', 'children' =>\n             ['age' => 8, 'name' => 'Allison'],\n           ]\n         ]\n       ]\n     ];\nX::hdump(X::map(function($a) {\n if ($a['age']>20) {\n   $a['name'] = 'Mr. '.$a['name'];\n }\n return $a;\n}, $ar,'children'));\n\/* array [\n           [\n             \"age\"  =>  45,\n             \"name\"  =>  \"Mr.  John\",\n             \"children\"  =>  [\n               [\n                 \"age\"  =>  8,\n                 \"name\"  =>  \"Carol\",\n               ],\n               [\n                 \"age\"  =>  24,\n                 \"name\"  =>  \"Mr.  Jack\",\n               ],\n             ],\n           ],\n           [\n             \"age\"  =>  44,\n             \"name\"  =>  \"Mr.  Benjamin\",\n           ],\n           [\n             \"age\"  =>  60,\n             \"name\"  =>  \"Mr.  Paul\",\n             \"children\"  =>  [\n               [\n                 \"age\"  =>  36,\n                 \"name\"  =>  \"Mr.  Mike\",\n               ],\n               [\n                 \"age\"  =>  46,\n                 \"name\"  =>  \"Mr.  Alan\",\n                 \"children\"  =>  [\n                   \"age\"  =>  8,\n                   \"name\"  =>  \"Allison\",\n                 ],\n               ],\n           ],\n         ]"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(callable $fn, array $ar, string $items = NULL)\n  {\n    $res = [];\n    foreach ($ar as $key => $a) {\n      if (\\is_array($a) && $items && isset($a[$items]) && \\is_array($a[$items])) {\n        $a[$items] = self::map($fn, $a[$items], $items);\n      }\n      $is_false = $a === false;\n      $r        = $fn($a, $key);\n      if ($is_false) {\n        $res[] = $r;\n      }\n      elseif ($r !== false) {\n        $res[] = $r;\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1686,
            "endLine": 1704,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The function to be applied to the items of the array"
                },
                {
                    "name": "ar",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "items",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "If null the function will be applied just to the item of the parent array"
                }
            ]
        },
        "treatConditions": {
            "name": "treatConditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $where)\n  {\n    if (!isset($where['conditions'])) {\n      $where['conditions'] = $where;\n    }\n\n    if (isset($where['conditions']) && \\is_array($where['conditions'])) {\n      if (!isset($where['logic']) || (strtoupper($where['logic']) !== 'OR')) {\n        $where['logic'] = 'AND';\n      }\n\n      $res = [\n        'conditions' => [],\n        'logic' => $where['logic']\n      ];\n      foreach ($where['conditions'] as $key => $f) {\n        $is_array = \\is_array($f);\n        if ($is_array\n          && array_key_exists('conditions', $f)\n          && \\is_array($f['conditions'])\n        ) {\n          $res['conditions'][] = self::treatConditions($f);\n        }\n        else {\n          if (\\is_string($key)) {\n            \/\/ 'id_user' => [1, 2] Will do OR\n            if (!$is_array) {\n              if (null === $f) {\n                $f = [\n                  'field' => $key,\n                  'operator' => 'isnull'\n                ];\n              }\n              else{\n                $f = [\n                  'field' => $key,\n                  'operator' => is_string($f) && !Str::isUid($f) ? 'LIKE' : '=',\n                  'value' => $f\n                ];\n              }\n            }\n            elseif (isset($f[0])) {\n              $tmp = [\n                'conditions' => [],\n                'logic' => 'OR'\n              ];\n              foreach ($f as $v){\n                if (null === $v) {\n                  $tmp['conditions'][] = [\n                    'field' => $key,\n                    'operator' => 'isnull'\n                  ];\n                }\n                else{\n                  $tmp['conditions'][] = [\n                    'field' => $key,\n                    'operator' => is_string($f) && !Str::isUid($f) ? 'LIKE' : '=',\n                    'value' => $v\n                  ];\n                }\n              }\n\n              $res['conditions'][] = $tmp;\n            }\n          }\n          elseif ($is_array && !X::isAssoc($f) && count($f) >= 2) {\n            $tmp = [\n              'field' => $f[0],\n              'operator' => $f[1]\n            ];\n            if (isset($f[3])) {\n              $tmp['exp'] = $f[3];\n            }\n            elseif (array_key_exists(2, $f)) {\n              if (is_array($f[2])) {\n                $tmp = [\n                  'conditions' => [],\n                  'logic' => 'AND'\n                ];\n                foreach ($f[2] as $v){\n                  if (null === $v) {\n                    $tmp['conditions'][] = [\n                      'field' => $f[0],\n                      'operator' => 'isnotnull'\n                    ];\n                  }\n                  else{\n                    $tmp['conditions'][] = [\n                      'field' => $f[0],\n                      'operator' => $f[1],\n                      'value' => $v\n                    ];\n                  }\n                }\n\n                $res['conditions'][] = $tmp;\n              }\n              elseif ($f[2] === null) {\n                $tmp['operator'] = $f[2] === '!=' ? 'isnotnull' : 'isnull';\n              }\n              else{\n                $tmp['value'] = $f[2];\n              }\n            }\n\n            $f = $tmp;\n          }\n\n          if (isset($f['field'])) {\n            if (!isset($f['operator'])) {\n              $f['operator'] = 'eq';\n            }\n\n            $res['conditions'][] = $f;\n          }\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "startLine": 1712,
            "endLine": 1834,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "compare": {
            "name": "compare",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($v1, $v2, $operator)\n  {\n      case \"===\":\n      case \"=\":\n      case \"equal\":\n      case \"eq\":\n      case \"is\":\n        return $v1 === $v2;\n      case \"!==\":\n      case \"notequal\":\n      case \"neq\":\n      case \"isnot\":\n        return $v1 !== $v2;\n      case \"!=\":\n      case \"different\":\n        return $v1 != $v2;\n      case \"contains\":\n      case \"contain\":\n      case \"icontains\":\n      case \"icontain\":\n        if (empty($v1) || empty($v2)) {\n          return false;\n        }\n\n        $v1 = (string)$v1;\n        $v2 = (string)$v2;\n        return strpos(Str::changeCase(Str::removeAccents($v1), 'lower'), Str::changeCase(Str::removeAccents($v2), 'lower')) !== false;\n      case \"doesnotcontain\":\n      case \"donotcontain\":\n        if (empty($v1) || empty($v2)) {\n          return false;\n        }\n\n        $v1 = (string)$v1;\n        $v2 = (string)$v2;\n        return strpos(Str::changeCase(Str::removeAccents($v1), 'lower'), Str::changeCase(Str::removeAccents($v2), 'lower')) === false;\n      case \"starts\":\n      case \"start\":\n        if (empty($v1) || empty($v2)) {\n          return false;\n        }\n\n        $v1 = (string)$v1;\n        $v2 = (string)$v2;\n        return strpos($v1, $v2) === 0;\n      case \"startswith\":\n      case \"startsi\":\n      case \"starti\":\n      case \"istarts\":\n      case \"istart\":\n        if (empty($v1) || empty($v2)) {\n          return false;\n        }\n\n        $v1 = (string)$v1;\n        $v2 = (string)$v2;\n        return strpos(Str::changeCase(Str::removeAccents($v1), 'lower'), Str::changeCase(Str::removeAccents($v2), 'lower')) === 0;\n      case \"endswith\":\n      case \"endsi\":\n      case \"endi\":\n      case \"iends\":\n      case \"iend\":\n        if (empty($v1) || empty($v2)) {\n          return false;\n        }\n\n        $v1 = (string)$v1;\n        $v2 = (string)$v2;\n        return strrpos(Str::changeCase(Str::removeAccents($v1), 'lower'), Str::changeCase(Str::removeAccents($v2), 'lower')) === strlen($v1) - strlen($v2);\n      case \"like\":\n        if (empty($v1) || empty($v2)) {\n          return false;\n        }\n\n        $v1 = (string)$v1;\n        $v2 = (string)$v2;\n        return Str::changeCase(Str::removeAccents($v1), 'lower') === Str::changeCase(Str::removeAccents($v2), 'lower');\n      case \"gt\":\n      case \">\":\n        return $v1 > $v2;\n      case \"gte\":\n      case \">=\":\n        return $v1 >= $v2;\n      case \"lt\":\n      case \"<\":\n        return $v1 < $v2;\n      case \"lte\":\n      case \"<=\":\n        return $v1 <= $v2;\n      case \"isnull\":\n        return $v1 === null;\n      case \"isnotnull\":\n        return $v1 !== null;\n      case \"isempty\":\n        return $v1 === '';\n      case \"isnotempty\":\n        return $v1 !== '';\n      case '==':\n        return $v1 == $v2;\n      default:\n        return $v1 == $v2;\n    }\n  }",
            "startLine": 1837,
            "endLine": 1939,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "v1",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "v2",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "operator",
                    "position": 2,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "compareConditions": {
            "name": "compareConditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($data, $filter)\n  {\n      throw new Exception(X::_(\"Error in compareConditions: the filter should an abject with conditions and logic properties and conditions should be an array of arrays\"));\n    }\n\n    $ok = $filter['logic'] === 'AND' ? true : false;\n    foreach ($filter['conditions'] as $a) {\n      if (!is_array($a)) {\n        throw new Exception(X::_(\"Error in compareConditions: each condition should be an array\"));\n      }\n\n      if (!isset($a['field'])) {\n        throw new Exception(X::_(\"Field is mandatory in filter\"));\n      }\n\n      $compare = null;\n      if (isset($a['conditions']) && is_array($a['conditions'])) {\n        $compare = self::compareConditions($data, $a);\n      }\n      else {\n        $compare = self::compare($data[$a['field']] ?? null, $a['value'], $a['operator']);\n      }\n\n      if ($compare) {\n        if ($filter['logic'] === 'OR') {\n          $ok = true;\n          break;\n        }\n      }\n      elseif ($filter['logic'] === 'AND') {\n        $ok = false;\n        break;\n      }\n    }\n\n    return $ok;\n  }",
            "startLine": 1942,
            "endLine": 1978,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "find": {
            "name": "find",
            "summary": "Returns the array's first index, which satisfies the 'where' condition.",
            "description": "```php\nX::hdump(X::find([[\n   'id' => 1,\n   'name' => 'Andrew',\n   'fname' => 'Williams'\n   ], [\n  'id' => 2,\n   'name' => 'Albert',\n   'fname' => 'Taylor'\n   ], [\n   'id' => 3,\n   'name' => 'Mike',\n   'fname' => 'Smith'\n   ], [\n   'id' => 4,\n   'name' => 'John',\n   'fname' => 'White'\n   ]], ['id' => 4]));\n\/\/ int 3\nX::hdump(X::find([[\n   'id' => 1,\n   'name' => 'Andrew',\n   'fname' => 'Williams'\n   ], [\n  'id' => 2,\n   'name' => 'Albert',\n   'fname' => 'Taylor'\n   ], [\n   'id' => 3,\n   'name' => 'Mike',\n   'fname' => 'Smith'\n   ], [\n   'id' => 4,\n   'name' => 'John',\n   'fname' => 'White'\n   ]], ['name' => 'Albert', 'fname' => 'Taylor']));\n\/\/ int 1\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump(X::find([[\n   'id' => 1,\n   'name' => 'Andrew',\n   'fname' => 'Williams'\n   ], [\n  'id' => 2,\n   'name' => 'Albert',\n   'fname' => 'Taylor'\n   ], [\n   'id' => 3,\n   'name' => 'Mike',\n   'fname' => 'Smith'\n   ], [\n   'id' => 4,\n   'name' => 'John',\n   'fname' => 'White'\n   ]], ['id' => 4]));\n\/\/ int 3\nX::hdump(X::find([[\n   'id' => 1,\n   'name' => 'Andrew',\n   'fname' => 'Williams'\n   ], [\n  'id' => 2,\n   'name' => 'Albert',\n   'fname' => 'Taylor'\n   ], [\n   'id' => 3,\n   'name' => 'Mike',\n   'fname' => 'Smith'\n   ], [\n   'id' => 4,\n   'name' => 'John',\n   'fname' => 'White'\n   ]], ['name' => 'Albert', 'fname' => 'Taylor']));\n\/\/ int 1"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $ar, $where, int $from = 0)\n  {\n    if (!empty($where)) {\n      if (is_array($where)) {\n        $where = self::treatConditions($where);\n      }\n\n      foreach ($ar as $i => $v) {\n        if (!$from || ($i >= $from)) {\n          $ok = 1;\n          if (is_callable($where)) {\n            $ok = (bool)$where($v);\n          }\n          elseif (!is_array($where)) {\n            $ok = $v === $where;\n          }\n          else {\n            $v = (array)$v;\n            $ok = self::compareConditions($v, $where);\n          }\n\n          if ($ok) {\n            return $i;\n          }\n        }\n      }\n    }\n\n    return null;\n  }",
            "startLine": 2028,
            "endLine": 2057,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "ar",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The search within the array"
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The where condition"
                },
                {
                    "name": "from",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "filter": {
            "name": "filter",
            "summary": "Filters the given array which satisfies the 'where' condition.",
            "description": "```php\n$arr = [\n   ['id' => 1, 'first_name' => 'John', 'last_name' => 'Doe'],\n   ['id' => 11, 'first_name' => 'Andrew', 'last_name' => 'Williams'],\n   ['id' => 99, 'first_name' => 'Albert', 'last_name' => 'Taylor'],\n   ['id' => 550, 'first_name' => 'Mike', 'last_name' => 'Smith'],\n   ['id' => 7, 'first_name' => 'Mike', 'last_name' => 'Williams'],\n];\n\nX::filter($arr, ['first_name' => 'Mike']);\n\/\/ (array) [\n\/\/     ['id' => 550, 'first_name' => 'Mike', 'last_name' => 'Smith'],\n\/\/     ['id' => 7, 'first_name' => 'Mike', 'last_name' => 'Williams']\n\/\/ ]\n\nX::filter($arr, function ($item) {\n   return $item['first_name'] === 'Mike' && $item['last_name'] === 'Smith';\n});\n\/\/ (array) [['id' => 550, 'first_name' => 'Mike', 'last_name' => 'Smith']]\n\n\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$arr = [\n   ['id' => 1, 'first_name' => 'John', 'last_name' => 'Doe'],\n   ['id' => 11, 'first_name' => 'Andrew', 'last_name' => 'Williams'],\n   ['id' => 99, 'first_name' => 'Albert', 'last_name' => 'Taylor'],\n   ['id' => 550, 'first_name' => 'Mike', 'last_name' => 'Smith'],\n   ['id' => 7, 'first_name' => 'Mike', 'last_name' => 'Williams'],\n];\n\nX::filter($arr, ['first_name' => 'Mike']);\n\/\/ (array) [\n\/\/     ['id' => 550, 'first_name' => 'Mike', 'last_name' => 'Smith'],\n\/\/     ['id' => 7, 'first_name' => 'Mike', 'last_name' => 'Williams']\n\/\/ ]\n\nX::filter($arr, function ($item) {\n   return $item['first_name'] === 'Mike' && $item['last_name'] === 'Smith';\n});\n\/\/ (array) [['id' => 550, 'first_name' => 'Mike', 'last_name' => 'Smith']]"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $ar, $where)\n  {\n    $res = [];\n    $num = count($ar);\n    $i   = 0;\n    while ($i < $num) {\n      $idx = self::find($ar, $where, $i);\n      if ($idx === null) {\n        break;\n      }\n      else{\n        $res[] = $ar[$idx];\n        $i     = $idx + 1;\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 2090,
            "endLine": 2107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "ar",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getRows": {
            "name": "getRows",
            "summary": "Filters the given array which satisfies the 'where' condition.",
            "description": "```php\n$arr = [\n   ['id' => 1, 'first_name' => 'John', 'last_name' => 'Doe'],\n   ['id' => 11, 'first_name' => 'Andrew', 'last_name' => 'Williams'],\n   ['id' => 99, 'first_name' => 'Albert', 'last_name' => 'Taylor'],\n   ['id' => 550, 'first_name' => 'Mike', 'last_name' => 'Smith'],\n   ['id' => 7, 'first_name' => 'Mike', 'last_name' => 'Williams'],\n];\n\nX::getRows($arr, ['last_name' => 'Williams']);\n\/\/ (array) [\n\/\/     ['id' => 11, 'first_name' => 'Andrew', 'last_name' => 'Williams'],\n\/\/     ['id' => 7, 'first_name' => 'Mike', 'last_name' => 'Williams'],\n\/\/ ]\n\nX::getRows($arr, function ($item) {\n   return $item['first_name'] === 'Mike' && $item['last_name'] === 'Smith';\n});\n\/\/ (array) [['id' => 550, 'first_name' => 'Mike', 'last_name' => 'Smith']]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$arr = [\n   ['id' => 1, 'first_name' => 'John', 'last_name' => 'Doe'],\n   ['id' => 11, 'first_name' => 'Andrew', 'last_name' => 'Williams'],\n   ['id' => 99, 'first_name' => 'Albert', 'last_name' => 'Taylor'],\n   ['id' => 550, 'first_name' => 'Mike', 'last_name' => 'Smith'],\n   ['id' => 7, 'first_name' => 'Mike', 'last_name' => 'Williams'],\n];\n\nX::getRows($arr, ['last_name' => 'Williams']);\n\/\/ (array) [\n\/\/     ['id' => 11, 'first_name' => 'Andrew', 'last_name' => 'Williams'],\n\/\/     ['id' => 7, 'first_name' => 'Mike', 'last_name' => 'Williams'],\n\/\/ ]\n\nX::getRows($arr, function ($item) {\n   return $item['first_name'] === 'Mike' && $item['last_name'] === 'Smith';\n});\n\/\/ (array) [['id' => 550, 'first_name' => 'Mike', 'last_name' => 'Smith']]"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $ar, $where = NULL, array $order = NULL, int $limit = 0, int $start = 0)\n  {\n    $res = $ar;\n    if ($where) {\n      $res = self::filter($res, $where);\n    }\n\n    if ($order) {\n      self::sortBy($res, $order);\n    }\n\n    if ($start) {\n      array_splice($res, 0, $start);\n    }\n\n    if ($limit) {\n      return array_splice($res, 0, $limit);\n    }\n\n    return $res;\n  }",
            "startLine": 2138,
            "endLine": 2158,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "ar",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "sum": {
            "name": "sum",
            "summary": "Returns the sum of all values of the given field in the given array",
            "description": "Using an optional where condition to filter the result.\n\n```php\n$arr = [\n   ['age' => 19, 'first_name' => 'John', 'last_name' => 'Doe'],\n   ['age' => 11, 'first_name' => 'Andrew', 'last_name' => 'Williams'],\n   ['age' => 25, 'first_name' => 'Albert', 'last_name' => 'Taylor'],\n   ['age' => 36.5, 'first_name' => 'Mike', 'last_name' => 'Smith'],\n   ['age' => 33, 'first_name' => 'Andrew', 'last_name' => 'Smith'],\n];\n\nX::sum($arr, 'age');\n\/\/ (float) 19 + 11 + 25 + 36.5 + 33\n\nX::sum($arr, 'age', ['first_name' => 'Andrew']);\n\/\/ (float) 11 + 33\n\nX::sum($arr, 'age', function ($item) {\n    return $item['first_name'] === 'John' || $item['first_name'] === 'Mike';\n });\n\/\/ (float) 19 + 36.5\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Using an optional where condition to filter the result.<\/p>"
                },
                {
                    "type": "code",
                    "content": "$arr = [\n   ['age' => 19, 'first_name' => 'John', 'last_name' => 'Doe'],\n   ['age' => 11, 'first_name' => 'Andrew', 'last_name' => 'Williams'],\n   ['age' => 25, 'first_name' => 'Albert', 'last_name' => 'Taylor'],\n   ['age' => 36.5, 'first_name' => 'Mike', 'last_name' => 'Smith'],\n   ['age' => 33, 'first_name' => 'Andrew', 'last_name' => 'Smith'],\n];\n\nX::sum($arr, 'age');\n\/\/ (float) 19 + 11 + 25 + 36.5 + 33\n\nX::sum($arr, 'age', ['first_name' => 'Andrew']);\n\/\/ (float) 11 + 33\n\nX::sum($arr, 'age', function ($item) {\n    return $item['first_name'] === 'John' || $item['first_name'] === 'Mike';\n });\n\/\/ (float) 19 + 36.5"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $ar, string $field, $where = NULL)\n  {\n    $tot = 0;\n    if ($res = $where ? self::filter($ar, $where) : $ar) {\n      foreach ($res as $r) {\n        $r    = (array)$r;\n        $tot += (float)($r[$field]);\n      }\n    }\n\n    return $tot;\n  }",
            "startLine": 2191,
            "endLine": 2202,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "float"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "ar",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getRow": {
            "name": "getRow",
            "summary": "Returns the first row of an array that satisfies the where parameters ({@link find()).",
            "description": "```php\nX::dump(X::getRow([[\n   'id' => 1,\n   'name' => 'Andrew',\n   'fname' => 'Williams'\n   ], [\n  'id' => 2,\n   'name' => 'Albert',\n   'fname' => 'Taylor'\n   ], [\n   'id' => 3,\n   'name' => 'Mike',\n   'fname' => 'Smith'\n   ], [\n   'id' => 4,\n   'name' => 'John',\n   'fname' => 'White'\n   ]], ['name' => 'Albert']));\n\/\/ array [ \"id\" => 2, \"name\" => \"Albert\", \"fname\" => \"Taylor\", ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(X::getRow([[\n   'id' => 1,\n   'name' => 'Andrew',\n   'fname' => 'Williams'\n   ], [\n  'id' => 2,\n   'name' => 'Albert',\n   'fname' => 'Taylor'\n   ], [\n   'id' => 3,\n   'name' => 'Mike',\n   'fname' => 'Smith'\n   ], [\n   'id' => 4,\n   'name' => 'John',\n   'fname' => 'White'\n   ]], ['name' => 'Albert']));\n\/\/ array [ \"id\" => 2, \"name\" => \"Albert\", \"fname\" => \"Taylor\", ]"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $r, $where)\n  {\n    if (($res = self::find($r, $where)) !== null) {\n      return $r[$res];\n    }\n\n    return null;\n  }",
            "startLine": 2234,
            "endLine": 2241,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "r",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The array"
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The where condition"
                }
            ]
        },
        "getField": {
            "name": "getField",
            "summary": "Returns the first value of a specific field of an array that satisfies the where condition.",
            "description": "```php\nX::dump(X::getField([[\n   'id' => 1,\n   'name' => 'Andrew',\n   'fname' => 'Williams'\n   ], [\n  'id' => 2,\n   'name' => 'Albert',\n   'fname' => 'Taylor'\n   ], [\n   'id' => 3,\n   'name' => 'Mike',\n   'fname' => 'Smith'\n   ], [\n   'id' => 4,\n   'name' => 'John',\n   'fname' => 'White'\n   ]], ['name' => 'Albert'],'id'));\n\/\/ int 2\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(X::getField([[\n   'id' => 1,\n   'name' => 'Andrew',\n   'fname' => 'Williams'\n   ], [\n  'id' => 2,\n   'name' => 'Albert',\n   'fname' => 'Taylor'\n   ], [\n   'id' => 3,\n   'name' => 'Mike',\n   'fname' => 'Smith'\n   ], [\n   'id' => 4,\n   'name' => 'John',\n   'fname' => 'White'\n   ]], ['name' => 'Albert'],'id'));\n\/\/ int 2"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $r, $where, string $field)\n  {\n    if (($res = self::getRow($r, $where)) && isset($res[$field])) {\n      return $res[$field];\n    }\n\n    return false;\n  }",
            "startLine": 2273,
            "endLine": 2280,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "r",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The array"
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The where condition"
                },
                {
                    "name": "field",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The field where to look for"
                }
            ]
        },
        "pick": {
            "name": "pick",
            "summary": "Returns a reference to a subarray targeted by an array $keys.",
            "description": "```php\n$ar = [\n 'session' => [\n   'user' => [\n     'profile' => [\n       'admin' => [\n         'email' => 'test@test.com'\n       ]\n     ]\n   ]\n ]\n];\nX::hdump(X::pick($ar,['session', 'user', 'profile', 'admin', 'email']));\n\/\/ string test@test.com\n\nX::hdump(X::pick($ar,['session', 'user', 'profile', 'admin']));\n\/\/ [\"email\"  =>  \"test@test.com\",]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$ar = [\n 'session' => [\n   'user' => [\n     'profile' => [\n       'admin' => [\n         'email' => 'test@test.com'\n       ]\n     ]\n   ]\n ]\n];\nX::hdump(X::pick($ar,['session', 'user', 'profile', 'admin', 'email']));\n\/\/ string test@test.com\n\nX::hdump(X::pick($ar,['session', 'user', 'profile', 'admin']));\n\/\/ [\"email\"  =>  \"test@test.com\",]"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $ar, array $keys)\n  {\n    while (\\count($keys)) {\n      $r = array_shift($keys);\n      if (is_array($ar) && array_key_exists($r, $ar)) {\n        $ar = $ar[$r];\n        if (!count($keys)) {\n          return $ar;\n        }\n      }\n    }\n  }",
            "startLine": 2308,
            "endLine": 2319,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "ar",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The array"
                },
                {
                    "name": "keys",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The array's keys"
                }
            ]
        },
        "sort": {
            "name": "sort",
            "summary": "Sorts the items of an array.",
            "description": "```php\n$var = [3, 2, 5, 6, 1];\nX::sort($var);\nX::hdump($var);\n\/\/ array [1,2,3,5,6]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$var = [3, 2, 5, 6, 1];\nX::sort($var);\nX::hdump($var);\n\/\/ array [1,2,3,5,6]"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array &$ar, bool $backward = false)\n  {\n    usort(\n      $ar,\n      function ($a, $b) use ($backward) {\n        if (!Str::isNumber($a, $b)) {\n          $a = str_replace('.', '0', str_replace('_', '1', Str::changeCase($a, 'lower')));\n          $b = str_replace('.', '0', str_replace('_', '1', Str::changeCase($b, 'lower')));\n          return $backward ? strcmp($b, $a) : strcmp($a, $b);\n        }\n\n        if ($a > $b) {\n          return $backward ? -1 : 1;\n        }\n        elseif ($a == $b) {\n          return 0;\n        }\n\n        return $backward ? 1 : -1;\n      }\n    );\n  }",
            "startLine": 2335,
            "endLine": 2356,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "ar",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "array The reference of the array to sort"
                },
                {
                    "name": "backward",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "sortBy": {
            "name": "sortBy",
            "summary": "Sorts the items of an indexed array based on a given $key.",
            "description": "```php\n $v = [\n   ['age'=>10, 'name'=>'thomas'],\n   ['age'=>22, 'name'=>'John'],\n   ['age'=>37, 'name'=>'Michael']\n ];\n X::sortBy($v,'name','desc');\n X::hdump($v);\n X::sortBy($v,'name','asc');\n X::hdump($v);\n X::sortBy($v,'age','asc');\n X::hdump($v);\n X::sortBy($v,'age','desc');\n X::hdump($v);\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$v = [\n   ['age'=>10, 'name'=>'thomas'],\n   ['age'=>22, 'name'=>'John'],\n   ['age'=>37, 'name'=>'Michael']\n ];\n X::sortBy($v,'name','desc');\n X::hdump($v);\n X::sortBy($v,'name','asc');\n X::hdump($v);\n X::sortBy($v,'age','asc');\n X::hdump($v);\n X::sortBy($v,'age','desc');\n X::hdump($v);"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array &$ar, $key, $dir = '')\n  {\n    $blackOrder = [\n      false,\n      null,\n      0,\n      '',\n      []\n    ];\n\n    $args = \\func_get_args();\n    array_shift($args);\n    if (is_array($key)) {\n      $args = $key;\n      if (X::isAssoc($args)) {\n        $args = [$args];\n      }\n    }\n    elseif (\\is_string($key)) {\n      $args = [[\n        'key' => $key,\n        'dir' => $dir\n      ]];\n    }\n\n    usort(\n      $ar,\n      function ($a, $b) use ($args, $blackOrder) {\n        foreach ($args as $arg) {\n          if (!is_array($arg)) {\n            throw new Exception(X::_(\"the order must be made of arrays, not %s\", (string)$arg));\n          }\n\n          $key = $arg['key'] ?? $arg['field'] ?? null;\n          if (!$key) {\n            throw new Exception(X::_(\"the order must have a field or key and a dir key\"));\n          }\n\n          $dir = strtolower($arg['dir'] ?? 'asc');\n          if (!\\is_array($key)) {\n            $key = [$key];\n          }\n\n          $v1 = self::pick($a, $key);\n          $v2 = self::pick($b, $key);\n          if (!$v1) {\n            if ($v2) {\n              $v1 = -1;\n              $v2 = 1;\n            }\n            else {\n              $v1 = array_search($v1, $blackOrder);\n              $v2 = array_search($v2, $blackOrder);\n            }\n          }\n          elseif (!$v2) {\n            $v1 = 1;\n            $v2 = -1;\n          }\n          elseif (is_array($v1)) {\n            if (!is_array($v2)) {\n              $v1 = 1;\n              $v2 = -1;\n            }\n            else {\n              $v1 = json_encode($v1);\n              $v2 = json_encode($v2);\n            }\n          }\n          elseif (is_array($v2)) {\n            $v1 = -1;\n            $v2 = 1;\n          }\n          elseif (is_object($v1)) {\n            if (!is_object($v2)) {\n              $v1 = 1;\n              $v2 = -1;\n            }\n            else {\n              $v1 = json_encode($v1);\n              $v2 = json_encode($v2);\n            }\n          }\n          elseif (is_object($v2)) {\n            $v1 = -1;\n            $v2 = 1;\n          }\n\n          $a1 = $dir === 'desc' ? $v2 : $v1;\n          $a2 = $dir === 'desc' ? $v1 : $v2;\n          if (!Str::isNumber($v1, $v2)) {\n            $a1  = str_replace('.', '0', str_replace('_', '1', Str::changeCase($a1, 'lower')));\n            $a2  = str_replace('.', '0', str_replace('_', '1', Str::changeCase($a2, 'lower')));\n            $cmp = strcmp($a1, $a2);\n            if (!empty($cmp)) {\n              return $cmp;\n            }\n          }\n\n          if ($a1 > $a2) {\n            return 1;\n          }\n          elseif ($a1 < $a2) {\n            return -1;\n          }\n        }\n\n        return 0;\n      }\n    );\n    return $ar;\n  }",
            "startLine": 2383,
            "endLine": 2494,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "ar",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The array of data to sort"
                },
                {
                    "name": "key",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The key to sort by"
                },
                {
                    "name": "dir",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The direction of the sort ('asc'|'desc')"
                }
            ]
        },
        "isWindows": {
            "name": "isWindows",
            "summary": "Checks if the operating system, from which PHP is executed, is Windows or not.",
            "description": "```php\nX::dump(X::isWindows());\n\/\/ boolean false\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(X::isWindows());\n\/\/ boolean false"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return strtoupper(substr(PHP_OS, 0, 3)) == 'WIN';\n  }",
            "startLine": 2506,
            "endLine": 2509,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "curl": {
            "name": "curl",
            "summary": "Makes a Curl call towards a URL and returns the result as a string.",
            "description": "```php\n $url = 'https:\/\/www.omdbapi.com\/';\n $param = ['t'=>'la vita \u00e8 bella'];\n X::hdump(X::curl($url,$param, ['POST' => false]));\n\n\/\/ object {\n\/\/   \"Title\":\"La  vita  \u00e8  bella\",\n\/\/   \"Year\":\"1943\",\n\/\/   \"Rated\":\"N\/A\",\n\/\/   \"Released\":\"26  May  1943\",\n\/\/   \"Runtime\":\"76  min\",\n\/\/   \"Genre\":\"Comedy\"\n\/\/   \"imdbRating\":\"7.9\",\n\/\/   \"imdbVotes\":\"50\",\n\/\/   \"imdbID\":\"tt0036502\",\n\/\/   \"Type\":\"movie\",\n\/\/   \"Response\":\"True\"\n\/\/ }\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$url = 'https:\/\/www.omdbapi.com\/';\n $param = ['t'=>'la vita \u00e8 bella'];\n X::hdump(X::curl($url,$param, ['POST' => false]));\n\n\/\/ object {\n\/\/   \"Title\":\"La  vita  \u00e8  bella\",\n\/\/   \"Year\":\"1943\",\n\/\/   \"Rated\":\"N\/A\",\n\/\/   \"Released\":\"26  May  1943\",\n\/\/   \"Runtime\":\"76  min\",\n\/\/   \"Genre\":\"Comedy\"\n\/\/   \"imdbRating\":\"7.9\",\n\/\/   \"imdbVotes\":\"50\",\n\/\/   \"imdbID\":\"tt0036502\",\n\/\/   \"Type\":\"movie\",\n\/\/   \"Response\":\"True\"\n\/\/ }"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $url, $param = NULL, array $options = array (\n  'post' => 1,\n))\n  {\n    $ch               = curl_init();\n    self::$_last_curl = $ch;\n    $defined          = array_map('strtolower', array_keys($options));\n   \n    if (!in_array('returntransfer', $defined)) {\n      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    }\n\n    if (\\is_object($param)) {\n      $param = self::toArray($param);\n    }\n\n    if (\\defined('BBN_IS_SSL') && \\defined('BBN_IS_DEV') && BBN_IS_SSL && BBN_IS_DEV) {\n      if (!in_array('ssl_verifypeer', $defined)) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n      }\n\n      if (!in_array('ssl_verifyhost', $defined)) {\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n      }\n\n      \/\/curl_setopt($ch, CURLOPT_SAFE_UPLOAD, false);\n    }\n\n    $options = array_change_key_case($options, CASE_UPPER);\n    foreach ($options as $opt => $val) {\n      if (\\defined('CURLOPT_'.$opt)) {\n        curl_setopt($ch, constant('CURLOPT_'.$opt), $val);\n      }\n    }\n\n    if ($param) {\n      if (!empty($options['POST'])) {\n        if (!in_array('url', $defined)) {\n          curl_setopt($ch, CURLOPT_URL, $url);\n        }\n\n        if (!in_array('postfields', $defined)) {\n          curl_setopt($ch, CURLOPT_POSTFIELDS, $param);\n        }\n      }\n      elseif (!empty($options['DELETE'])) {\n        \/\/die($url.'?'.http_build_query($param));\n        if (!in_array('url', $defined)) {\n          curl_setopt($ch, CURLOPT_URL, $url.'?'.http_build_query($param));\n        }\n\n        if (!in_array('customrequest', $defined)) {\n          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        }\n      }\n      elseif (!in_array('url', $defined)) {\n        curl_setopt($ch, CURLOPT_URL, $url.'?'.http_build_query($param));\n      }\n    }\n    else{\n      if (!in_array('url', $defined)) {\n        curl_setopt($ch, CURLOPT_URL, $url);\n      }\n\n      if (!empty($options['DELETE']) && !in_array('customrequest', $defined)) {\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n      }\n    }\n\n    $r = curl_exec($ch);\n    \n    if (!$r) {\n      self::log([\"PROBLEME AVEC L'URL $url\", curl_error($ch), curl_getinfo($ch)], 'curl');\n    }\n\n    return $r;\n  }",
            "startLine": 2540,
            "endLine": 2614,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "param",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "options",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": {
                        "post": 1
                    },
                    "default_name": ""
                }
            ]
        },
        "lastCurlError": {
            "name": "lastCurlError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (self::$_last_curl) {\n      return curl_error(self::$_last_curl);\n    }\n\n    return null;\n  }",
            "startLine": 2617,
            "endLine": 2624,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "lastCurlCode": {
            "name": "lastCurlCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (self::$_last_curl) {\n      $infos = curl_getinfo(self::$_last_curl);\n      if ($infos) {\n        return $infos['http_code'];\n      }\n    }\n\n    return null;\n  }",
            "startLine": 2627,
            "endLine": 2637,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "lastCurlInfo": {
            "name": "lastCurlInfo",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (self::$_last_curl) {\n      return curl_getinfo(self::$_last_curl);\n    }\n\n    return null;\n  }",
            "startLine": 2640,
            "endLine": 2647,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getTree": {
            "name": "getTree",
            "summary": "Returns the given array or object as a tree structure ready for a JS tree.",
            "description": "```php\nX::hdump(X::getTree([['id' => 1,'name' => 'Andrew','fname' => 'Williams','children' =>[['name' => 'Emma','age' => 6],['name' => 'Giorgio','age' => 9]]], ['id' => 2,'name' => 'Albert','fname' => 'Taylor','children' =>[['name' => 'Esther','age' => 6],['name' => 'Paul','age' => 9]]], ['id' => 3,'name' => 'Mike','fname' => 'Smith','children' =>[['name' => 'Sara','age' => 6],['name' => 'Fred','age' => 9]]]]));\n\/* array [\n   [ \"text\" => 0, \"items\" => [ [ \"text\" => \"id: 1\", ], [ \"text\" => \"name: Andrew\", ], [ \"text\" => \"fname: Williams\", ], [ \"text\" => \"children\", \"items\" => [ [ \"text\" => 0, \"items\" => [ [ \"text\" => \"name: Emma\", ], [ \"text\" => \"age: 6\", ], ], ], [ \"text\" => 1, \"items\" => [ [ \"text\" => \"name: Giorgio\", ], [ \"text\" => \"age: 9\", ], ], ], ], ], ], ], [ \"text\" => 1, \"items\" => [ [ \"text\" => \"id: 2\", ], [ \"text\" => \"name: Albert\", ], [ \"text\" => \"fname: Taylor\", ], [ \"text\" => \"children\", \"items\" => [ [ \"text\" => 0, \"items\" => [ [ \"text\" => \"name: Esther\", ], [ \"text\" => \"age: 6\", ], ], ], [ \"text\" => 1, \"items\" => [ [ \"text\" => \"name: Paul\", ], [ \"text\" => \"age: 9\", ], ], ], ], ], ], ], [ \"text\" => 2, \"items\" => [ [ \"text\" => \"id: 3\", ], [ \"text\" => \"name: Mike\", ], [ \"text\" => \"fname: Smith\", ], [ \"text\" => \"children\", \"items\" => [ [ \"text\" => 0, \"items\" => [ [ \"text\" => \"name: Sara\", ], [ \"text\" => \"age: 6\", ], ], ], [ \"text\" => 1, \"items\" => [ [ \"text\" => \"name: Fred\", ], [ \"text\" => \"age: 9\", ], ], ], ], ], ], ], ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump(X::getTree([['id' => 1,'name' => 'Andrew','fname' => 'Williams','children' =>[['name' => 'Emma','age' => 6],['name' => 'Giorgio','age' => 9]]], ['id' => 2,'name' => 'Albert','fname' => 'Taylor','children' =>[['name' => 'Esther','age' => 6],['name' => 'Paul','age' => 9]]], ['id' => 3,'name' => 'Mike','fname' => 'Smith','children' =>[['name' => 'Sara','age' => 6],['name' => 'Fred','age' => 9]]]]));\n\/* array [\n   [ \"text\" => 0, \"items\" => [ [ \"text\" => \"id: 1\", ], [ \"text\" => \"name: Andrew\", ], [ \"text\" => \"fname: Williams\", ], [ \"text\" => \"children\", \"items\" => [ [ \"text\" => 0, \"items\" => [ [ \"text\" => \"name: Emma\", ], [ \"text\" => \"age: 6\", ], ], ], [ \"text\" => 1, \"items\" => [ [ \"text\" => \"name: Giorgio\", ], [ \"text\" => \"age: 9\", ], ], ], ], ], ], ], [ \"text\" => 1, \"items\" => [ [ \"text\" => \"id: 2\", ], [ \"text\" => \"name: Albert\", ], [ \"text\" => \"fname: Taylor\", ], [ \"text\" => \"children\", \"items\" => [ [ \"text\" => 0, \"items\" => [ [ \"text\" => \"name: Esther\", ], [ \"text\" => \"age: 6\", ], ], ], [ \"text\" => 1, \"items\" => [ [ \"text\" => \"name: Paul\", ], [ \"text\" => \"age: 9\", ], ], ], ], ], ], ], [ \"text\" => 2, \"items\" => [ [ \"text\" => \"id: 3\", ], [ \"text\" => \"name: Mike\", ], [ \"text\" => \"fname: Smith\", ], [ \"text\" => \"children\", \"items\" => [ [ \"text\" => 0, \"items\" => [ [ \"text\" => \"name: Sara\", ], [ \"text\" => \"age: 6\", ], ], ], [ \"text\" => 1, \"items\" => [ [ \"text\" => \"name: Fred\", ], [ \"text\" => \"age: 9\", ], ], ], ], ], ], ], ]"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($ar)\n  {\n    $res = [];\n    foreach ($ar as $k => $a) {\n      $r = ['text' => $k];\n      if (\\is_object($a)) {\n        $a = self::toArray($a);\n      }\n\n      if (\\is_array($a)) {\n        $r['items'] = self::getTree($a);\n      }\n      elseif (\\is_null($a)) {\n        $r['text'] .= ': null';\n      }\n      elseif ($a === false) {\n        $r['text'] .= ': false';\n      }\n      elseif ($a === true) {\n        $r['text'] .= ': true';\n      }\n      else {\n        $r['text'] .= ': '.(string)$a;\n      }\n\n      array_push($res, $r);\n    }\n\n    return $res;\n  }",
            "startLine": 2662,
            "endLine": 2691,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "ar",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "move": {
            "name": "move",
            "summary": "Moves an index in the given array to a new index.",
            "description": "```php\n$arr = [\n   ['a' => 1, 'b' => 2],\n   ['c' => 3, 'd' => 4],\n   ['e' => 5, 'f' => 6]\n];\n\nX::move($arr, 0, 2);\n\/\/ (array) [\n\/\/    ['c' => 3, 'd' => 4],\n\/\/    ['e' => 5, 'f' => 6],\n\/\/    ['a' => 1, 'b' => 2]\n\/\/ ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$arr = [\n   ['a' => 1, 'b' => 2],\n   ['c' => 3, 'd' => 4],\n   ['e' => 5, 'f' => 6]\n];\n\nX::move($arr, 0, 2);\n\/\/ (array) [\n\/\/    ['c' => 3, 'd' => 4],\n\/\/    ['e' => 5, 'f' => 6],\n\/\/    ['a' => 1, 'b' => 2]\n\/\/ ]"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array &$ar, int $old_index, int $new_index)\n  {\n    $out = array_splice($ar, $old_index, 1);\n    array_splice($ar, $new_index, 0, $out);\n  }",
            "startLine": 2715,
            "endLine": 2719,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "ar",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "old_index",
                    "position": 1,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "index"
                },
                {
                    "name": "new_index",
                    "position": 2,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "index"
                }
            ]
        },
        "makeTree": {
            "name": "makeTree",
            "summary": "Returns a view of an array or object as a JS tree.",
            "description": "```php\nX::dump(X::makeTree([['id' => 1,'name' => 'Andrew','fname' => 'Williams','children' =>[['name' => 'Emma','age' => 6],['name' => 'Giorgio','age' => 9]]], ['id' => 2,'name' => 'Albert','fname' => 'Taylor','children' =>[['name' => 'Esther','age' => 6],['name' => 'Paul','age' => 9]]], ['id' => 3,'name' => 'Mike','fname' => 'Smith','children' =>[['name' => 'Sara','age' => 6],['name' => 'Fred','age' => 9]]]]));\n\/* string\n   0\n     id: 1\n     name: Andrew\n     fname: Williams\n     children:\n       0\n         name: Emma\n         age: 6\n       1\n         name: Giorgio\n         age: 9\n   1\n     id: 2\n     name: Albert\n     fname: Taylor\n     children\n       0\n         name: Esther\n         age: 6\n       1\n         name: Paul\n         age: 9\n   2\n     id: 3\n     name: Mike\n     fname: Smith\n     children\n     0\n       name: Sara\n       age: 6\n     1\n       name: Fred\n       age: 9\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(X::makeTree([['id' => 1,'name' => 'Andrew','fname' => 'Williams','children' =>[['name' => 'Emma','age' => 6],['name' => 'Giorgio','age' => 9]]], ['id' => 2,'name' => 'Albert','fname' => 'Taylor','children' =>[['name' => 'Esther','age' => 6],['name' => 'Paul','age' => 9]]], ['id' => 3,'name' => 'Mike','fname' => 'Smith','children' =>[['name' => 'Sara','age' => 6],['name' => 'Fred','age' => 9]]]]));\n\/* string\n   0\n     id: 1\n     name: Andrew\n     fname: Williams\n     children:\n       0\n         name: Emma\n         age: 6\n       1\n         name: Giorgio\n         age: 9\n   1\n     id: 2\n     name: Albert\n     fname: Taylor\n     children\n       0\n         name: Esther\n         age: 6\n       1\n         name: Paul\n         age: 9\n   2\n     id: 3\n     name: Mike\n     fname: Smith\n     children\n     0\n       name: Sara\n       age: 6\n     1\n       name: Fred\n       age: 9"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $ar)\n  {\n    return \"<bbn-tree :source='\".\\bbn\\Str::escapeSquotes(json_encode(self::getTree($ar))).\"'><\/bbn-tree>\";\n  }",
            "startLine": 2766,
            "endLine": 2769,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "ar",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fromCsv": {
            "name": "fromCsv",
            "summary": "Formats a CSV line(s) and returns it as an array.",
            "description": "Adapted from http:\/\/us3.php.net\/manual\/en\/function.fputcsv.php#87120\n\n```php\n X::dump(X::fromCsv(\n     '\"141\";\"10\/11\/2002\";\"350.00\";\"1311742251\"\n     \"142\";\"12\/12\/2002\";\"349.00\";\"1311742258\"'\n));\n\/\/ [ [ \"141\", \"10\/11\/2002\", \"350.00\", \"1311742251\", ], [ \"142\", \"12\/12\/2002\", \"349.00\", \"1311742258\", ], ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Adapted from <a href=\"http:\/\/us3.php.net\/manual\/en\/function.fputcsv.php#87120\">http:\/\/us3.php.net\/manual\/en\/function.fputcsv.php#87120<\/a><\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump(X::fromCsv(\n     '\"141\";\"10\/11\/2002\";\"350.00\";\"1311742251\"\n     \"142\";\"12\/12\/2002\";\"349.00\";\"1311742258\"'\n));\n\/\/ [ [ \"141\", \"10\/11\/2002\", \"350.00\", \"1311742251\", ], [ \"142\", \"12\/12\/2002\", \"349.00\", \"1311742258\", ], ]"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $st, $del = ';', $enc = '\"', $sep = '\n')\n  {\n    $r     = [];\n    $lines = explode($sep, $st);\n    foreach ($lines as $line) {\n      $r[] = str_getcsv($line, $del, $enc);\n    }\n\n    return $r;\n  }",
            "startLine": 2790,
            "endLine": 2799,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The Csv string to format"
                },
                {
                    "name": "del",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": ";",
                    "default_name": "",
                    "description": "Deimiter"
                },
                {
                    "name": "enc",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "\"",
                    "default_name": "",
                    "description": "Enclosure"
                },
                {
                    "name": "sep",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "\n",
                    "default_name": "bbn\\PHP_EOL",
                    "description": "Separator"
                }
            ]
        },
        "toCsv": {
            "name": "toCsv",
            "summary": "Formats an array as a CSV string.",
            "description": "Adapted from http:\/\/us3.php.net\/manual\/en\/function.fputcsv.php#87120\n\n```php\nX::dump(X::toCsv([[\"John\", \"Mike\", \"David\", \"Clara\"],[\"White\", \"Red\", \"Green\", \"Blue\"]]));\n\/\/ John;Mike;David;Clara\n\/\/ White;Red;Green;Blue\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Adapted from <a href=\"http:\/\/us3.php.net\/manual\/en\/function.fputcsv.php#87120\">http:\/\/us3.php.net\/manual\/en\/function.fputcsv.php#87120<\/a><\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump(X::toCsv([[\"John\", \"Mike\", \"David\", \"Clara\"],[\"White\", \"Red\", \"Green\", \"Blue\"]]));\n\/\/ John;Mike;David;Clara\n\/\/ White;Red;Green;Blue"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $data, $delimiter = ';', $enclosure = '\"', $separator = '\n', $encloseAll = false, $nullToMysqlNull = false)\n  {\n    $delimiter_esc = preg_quote($delimiter, '\/');\n    $enclosure_esc = preg_quote($enclosure, '\/');\n\n    $lines = [];\n    foreach ($data as $d) {\n      $output = [];\n      foreach ($d as $field) {\n        if ($field === null && $nullToMysqlNull) {\n          $output[] = 'NULL';\n          continue;\n        }\n\n        \/\/ Enclose fields containing $delimiter, $enclosure or whitespace\n        if ($encloseAll || preg_match(\"\/(?:${delimiter_esc}|${enclosure_esc}|\\s)\/\", $field)) {\n          $output[] = $enclosure.str_replace($enclosure, '\\\\'.$enclosure, $field) . $enclosure;\n        }\n        else {\n          $output[] = $field;\n        }\n      }\n\n      $lines[] = implode($delimiter, $output);\n    }\n\n    return self::join($lines, $separator);\n  }",
            "startLine": 2822,
            "endLine": 2849,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The array to format"
                },
                {
                    "name": "delimiter",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": ";",
                    "default_name": ""
                },
                {
                    "name": "enclosure",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "\"",
                    "default_name": ""
                },
                {
                    "name": "separator",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "\n",
                    "default_name": "bbn\\PHP_EOL"
                },
                {
                    "name": "encloseAll",
                    "position": 4,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "ll"
                },
                {
                    "name": "nullToMysqlNull",
                    "position": 5,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "oMysqlNull"
                }
            ]
        },
        "isSame": {
            "name": "isSame",
            "summary": "Checks if two files are the same.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $file1, string $file2, $strict = false)\n  {\n    if (!is_file($file1) || !is_file($file2)) {\n      throw new Exception(\"Boo! One of the files given to the X::is_same function doesn't exist\");\n    }\n\n    $same = filesize($file1) === filesize($file2);\n    if (!$strict || !$same) {\n      return $same;\n    }\n\n    return filemtime($file1) === filemtime($file2);\n  }",
            "startLine": 2861,
            "endLine": 2873,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file1",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "file2",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "retrieveArrayVar": {
            "name": "retrieveArrayVar",
            "summary": "Retrieves values from the given array based on the given keys.",
            "description": "```php\n$arr = ['a' => ['e' => 33, 'f' => 'foo'], 'b' => 2, 'c' => 3, 'd' => ['g' => 11]];\n\nX::retrieveArrayVar(['a', 'e'], $arr);\n\/\/ (int) 33\n\nX::retrieveArrayVar(['a', 'f'], $arr);\n\/\/ (string) \"foo\"\n\nX::retrieveArrayVar(['d'], $arr);\n\/\/ (array) ['g' => 11]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$arr = ['a' => ['e' => 33, 'f' => 'foo'], 'b' => 2, 'c' => 3, 'd' => ['g' => 11]];\n\nX::retrieveArrayVar(['a', 'e'], $arr);\n\/\/ (int) 33\n\nX::retrieveArrayVar(['a', 'f'], $arr);\n\/\/ (string) \"foo\"\n\nX::retrieveArrayVar(['d'], $arr);\n\/\/ (array) ['g' => 11]"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $props, array &$ar)\n  {\n    $cur = &$ar;\n    foreach ($props as $p) {\n      if (\\is_array($cur) && array_key_exists($p, $cur)) {\n        $cur =& $cur[$p];\n      }\n      else{\n        throw new Exception(\"Impossible to find the value in the array\");\n      }\n    }\n\n    return $cur;\n  }",
            "startLine": 2897,
            "endLine": 2910,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "props",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ar",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "retrieveObjectVar": {
            "name": "retrieveObjectVar",
            "summary": "Retrieves values from the given object based on the given properties.",
            "description": "```php\n$obj = (object)['a' => (object)['e' => 33, 'f' => 'foo'], 'b' => 2, 'c' => 3, 'd' => (object)['g' => 11]];\n\n X::retrieveObjectVar(['a', 'e'], $obj);\n\/\/ (int) 33\n\nX::retrieveObjectVar(['a', 'f'], $obj);\n\/\/ (string) foo\n\nX::retrieveObjectVar(['d'], $obj);\n\/\/ (object) {'g' : 11}\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$obj = (object)['a' => (object)['e' => 33, 'f' => 'foo'], 'b' => 2, 'c' => 3, 'd' => (object)['g' => 11]];\n\n X::retrieveObjectVar(['a', 'e'], $obj);\n\/\/ (int) 33\n\nX::retrieveObjectVar(['a', 'f'], $obj);\n\/\/ (string) foo\n\nX::retrieveObjectVar(['d'], $obj);\n\/\/ (object) {'g' : 11}"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $props, object $obj)\n  {\n    $cur = $obj;\n    foreach ($props as $p) {\n      if (is_object($cur) && property_exists($cur, $p)) {\n        $cur = $cur->{$p};\n      }\n      else{\n        throw new Exception(\"Impossible to find the value in the object\");\n      }\n    }\n\n    return $cur;\n  }",
            "startLine": 2934,
            "endLine": 2947,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "props",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "obj",
                    "position": 1,
                    "type": "object",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "countProperties": {
            "name": "countProperties",
            "summary": "Counts the properties of an object.",
            "description": "```php\n$obj = (object)[\n     'a' => 1,\n     'b' => false,\n     'c' => null\n];\n\nX::countProperties($obj);\n\/\/ (int) 3\n\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$obj = (object)[\n     'a' => 1,\n     'b' => false,\n     'c' => null\n];\n\nX::countProperties($obj);\n\/\/ (int) 3"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(object $obj)\n  {\n    return \\count(get_object_vars($obj));\n  }",
            "startLine": 2968,
            "endLine": 2971,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "obj",
                    "position": 0,
                    "type": "object",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "toExcel": {
            "name": "toExcel",
            "summary": "Creates an Excel file from a given array.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $data, string $file, bool $with_titles = true, array $cfg = [])\n  {\n    if (!class_exists('\\\\PhpOffice\\\\PhpSpreadsheet\\\\Spreadsheet')) {\n      throw new Exception(X::_(\"You need the PhpOffice library to use this function\"));\n    }\n\n    $excel    = new \\PhpOffice\\PhpSpreadsheet\\Spreadsheet();\n    $sheet    = $excel->getActiveSheet();\n    $ow       = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx($excel);\n    $can_save = false;\n    if (empty($cfg)) {\n      $todo    = [];\n      $checked = false;\n      foreach ($data as $d) {\n        if (!$checked && self::isAssoc($d)) {\n          if ($with_titles) {\n            $line1 = [];\n            $line2 = [];\n            foreach ($d as $k => $v) {\n              $line1[] = $k;\n              $line2[] = '';\n            }\n\n            $todo[] = $line1;\n            $todo[] = $line2;\n          }\n\n          $checked = true;\n        }\n\n        $todo[] = array_values($d);\n      }\n\n      if (count($todo)) {\n        $sheet->fromArray($todo, null, 'A1');\n        $excel->getDefaultStyle()->getNumberFormat()->setFormatCode(\\PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat::FORMAT_TEXT);\n        $can_save = true;\n      }\n    }\n    else {\n      foreach ($cfg['fields'] as $i => $field) {\n        \/\/ Get cell object\n        $cell = $sheet->getCellByColumnAndRow($i + 1, 0);\n        \/\/ Get colum name\n        $col_idx = $cell->getColumn();\n        \/\/ Set auto width to the column\n        $sheet->getColumnDimension($col_idx)->setAutoSize(true);\n        \/\/ Cell style object\n        $style = $sheet->getStyle(\"$col_idx:$col_idx\");\n        \/\/ Get number format object\n        $format = $style->getNumberFormat();\n        \/\/ Set the vertical alignment to center\n        $style->getAlignment()->setVertical(\\PhpOffice\\PhpSpreadsheet\\Style\\Alignment::VERTICAL_TOP);\n        \/\/ Set the correct data type\n        switch ($field['type']) {\n          case 'integer':\n            \/\/ Set code's format to number\n            $format->setFormatCode(\\PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat::FORMAT_NUMBER);\n            break;\n          case 'decimal':\n            \/\/ Set code's format to decimal\n            $format->setFormatCode(\\PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat::FORMAT_NUMBER_00);\n            break;\n          case 'money':\n            \/\/ Set code's format to currency\n            $format->setFormatCode(\\PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat::FORMAT_CURRENCY_EUR_SIMPLE);\n            break;\n          case 'date':\n            \/\/ Set code's format to date\n            $format->setFormatCode('dd\/mm\/yyyy');\n            \/\/ Set the horizontal alignment to center\n            $style->getAlignment()->setHorizontal(\\PhpOffice\\PhpSpreadsheet\\Style\\Alignment::HORIZONTAL_CENTER);\n            break;\n          case 'datetime':\n            \/\/ Set code's format to datetime\n            $format->setFormatCode('dd\/mm\/yyyy hh:mm');\n            \/\/ Set the horizontal alignment to center\n            $style->getAlignment()->setHorizontal(\\PhpOffice\\PhpSpreadsheet\\Style\\Alignment::HORIZONTAL_CENTER);\n            break;\n          case 'boolean':\n            \/\/ Set the horizontal alignment to center\n            $style->getAlignment()->setHorizontal(\\PhpOffice\\PhpSpreadsheet\\Style\\Alignment::HORIZONTAL_CENTER);\n            break;\n          case 'phone':\n            \/\/ Set the custom format\n            $format->setFormatCode('+#');\n            break;\n          case 'string':\n          default:\n            \/\/ Set code's format to text\n            $format->setFormatCode(\\PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat::FORMAT_TEXT);\n            \/\/ Set wrap text\n            $style->getAlignment()->setWrapText(true);\n            break;\n        }\n\n        if ($with_titles) {\n          $cell  = $sheet->getCellByColumnAndRow($i + 1, 1);\n          $style = $cell->getStyle();\n          \/\/ Set code's format to text\n          $style->getNumberFormat()->setFormatCode(\\PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat::FORMAT_TEXT);\n          \/\/ Set the horizontal alignment to center\n          $style->getAlignment()->setHorizontal(\\PhpOffice\\PhpSpreadsheet\\Style\\Alignment::HORIZONTAL_CENTER);\n          \/\/ Set bold to true\n          $style->getFont()->setBold(true);\n          \/\/ Set the column's title\n          $cell->setValue($field['title'] ?? $field['field']);\n        }\n      }\n\n      if (isset($cfg['map'], $cfg['map']['callable'])\n          && is_callable($cfg['map']['callable'])\n      ) {\n        array_walk($data, $cfg['map']['callable'], is_array($cfg['map']['params']) ? $cfg['map']['params'] : []);\n      }\n\n      $sheet->fromArray($data, null, 'A' . ($with_titles ? '2' : '1'));\n      $can_save = true;\n    }\n\n    if ($can_save\n        && \\bbn\\File\\Dir::createPath(self::dirname($file))\n    ) {\n      $ow->save($file);\n      return \\is_file($file);\n    }\n\n    return false;\n  }",
            "startLine": 2985,
            "endLine": 3113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "file",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The file path"
                },
                {
                    "name": "with_titles",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "titles Set it to false if you don't want the columns titles. Default true"
                },
                {
                    "name": "cfg",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "makeUid": {
            "name": "makeUid",
            "summary": "Makes a UID.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($binary = false, $hyphens = false)\n  {\n    $tmp = sprintf(\n      $hyphens ? '%04x%04x-%04x-%04x-%04x-%04x%04x%04x' : '%04x%04x%04x%04x%04x%04x%04x%04x',\n      \/\/ 32 bits for \"time_low\"\n      mt_rand(0, 0xffff), mt_rand(0, 0xffff),\n      \/\/ 16 bits for \"time_mid\"\n      mt_rand(0, 0xffff),\n      \/\/ 16 bits for \"time_hi_and_version\",\n      \/\/ four most significant bits holds version number 4\n      mt_rand(0, 0x0fff) | 0x4000,\n      \/\/ 16 bits, 8 bits for \"clk_seq_hi_res\",\n      \/\/ 8 bits for \"clk_seq_low\",\n      \/\/ two most significant bits holds zero and one for variant DCE1.1\n      mt_rand(0, 0x3fff) | 0x8000,\n      \/\/ 48 bits for \"node\"\n      mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff)\n    );\n    return $binary ? hex2bin($tmp) : $tmp;\n  }",
            "startLine": 3123,
            "endLine": 3142,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "binary",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "Set it to true if you want a binary UID"
                },
                {
                    "name": "hyphens",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "Set it to true if you want hypens to seperate the UID"
                }
            ]
        },
        "convertUids": {
            "name": "convertUids",
            "summary": "Converts a hex UID to a binary UID. You can also give an array or an object to convert the array's items or the object's properties.",
            "description": "```php\n\nX::convertUids('b39e594c261e4bba85f4994bc08657dc');\n\/\/ (string) b\"\u00b3\u017eYL&\\x1EK\u00ba\u2026\u00f4\u2122K\u00c0\u2020W\u00dc\"\n\nX::convertUids(['b39e594c261e4bba85f4994bc08657dc, 'b39e594c261e4bba85f4994bc08657dc]);\n\/\/ (array) [b\"\u00b3\u017eYL&\\x1EK\u00ba\u2026\u00f4\u2122K\u00c0\u2020W\u00dc\", b\"\u00b3\u017eYL&\\x1EK\u00ba\u2026\u00f4\u2122K\u00c0\u2020W\u00dc\"]\n\nX::convertUids((object)['uid' => 'b39e594c261e4bba85f4994bc08657dc, 'uid2' => 'b39e594c261e4bba85f4994bc08657dc]);\n\/\/ (object) {'uid': b\"\u00b3\u017eYL&\\x1EK\u00ba\u2026\u00f4\u2122K\u00c0\u2020W\u00dc\", 'uid2': b\"\u00b3\u017eYL&\\x1EK\u00ba\u2026\u00f4\u2122K\u00c0\u2020W\u00dc\"}\n\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::convertUids('b39e594c261e4bba85f4994bc08657dc');\n\/\/ (string) b\"\u00b3\u017eYL&\\x1EK\u00ba\u2026\u00f4\u2122K\u00c0\u2020W\u00dc\"\n\nX::convertUids(['b39e594c261e4bba85f4994bc08657dc, 'b39e594c261e4bba85f4994bc08657dc]);\n\/\/ (array) [b\"\u00b3\u017eYL&\\x1EK\u00ba\u2026\u00f4\u2122K\u00c0\u2020W\u00dc\", b\"\u00b3\u017eYL&\\x1EK\u00ba\u2026\u00f4\u2122K\u00c0\u2020W\u00dc\"]\n\nX::convertUids((object)['uid' => 'b39e594c261e4bba85f4994bc08657dc, 'uid2' => 'b39e594c261e4bba85f4994bc08657dc]);\n\/\/ (object) {'uid': b\"\u00b3\u017eYL&\\x1EK\u00ba\u2026\u00f4\u2122K\u00c0\u2020W\u00dc\", 'uid2': b\"\u00b3\u017eYL&\\x1EK\u00ba\u2026\u00f4\u2122K\u00c0\u2020W\u00dc\"}"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    if (\\is_array($st) || \\is_object($st)) {\n      foreach ($st as &$s) {\n        $s = self::convertUids($s);\n      }\n    }\n    elseif (\\bbn\\Str::isUid($st)) {\n      $st = hex2bin($st);\n    }\n\n    return $st;\n  }",
            "startLine": 3164,
            "endLine": 3176,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "compareFloats": {
            "name": "compareFloats",
            "summary": "Compares two float numbers with the given operator.",
            "description": "```php\nX::compareFloats(2.0, 4.0, '<');\n\/\/ (bool) true\n\n X::compareFloats(2.56222223, 2.56222223, '<=')\n\/\/ (bool) true\n\nX::compareFloats(2.5623, 2.5623, '<')\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::compareFloats(2.0, 4.0, '<');\n\/\/ (bool) true\n\n X::compareFloats(2.56222223, 2.56222223, '<=')\n\/\/ (bool) true\n\nX::compareFloats(2.5623, 2.5623, '<')\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($v1, $v2, string $op = '===', int $pr = 4)\n  {\n    $v1 = round((float)$v1 * pow(10, $pr));\n    $v2 = round((float)$v2 * pow(10, $pr));\n    switch ($op) {\n      case '===':\n        return $v1 === $v2;\n      case '==':\n        return $v1 == $v2;\n      case '>=':\n        return $v1 >= $v2;\n      case '<=':\n        return $v1 <= $v2;\n      case '>':\n        return $v1 > $v2;\n      case '<':\n        return $v1 < $v2;\n    }\n\n    return false;\n  }",
            "startLine": 3199,
            "endLine": 3219,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "v1",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Value 1"
                },
                {
                    "name": "v2",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Value 2"
                },
                {
                    "name": "op",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "===",
                    "default_name": "",
                    "description": "Operator"
                },
                {
                    "name": "pr",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 4,
                    "default_name": "",
                    "description": "Precision"
                }
            ]
        },
        "fixJson": {
            "name": "fixJson",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($json)\n  {\n\n    $jsonLength = strlen($json);\n    $escaped = false;\n    $opened_b = 0;\n    $opened_cb = 0;\n    $unescaped = false;\n    $squotes = false;\n    $dquotes = false;\n    $current = '';\n    $end_value = false;\n    $end_prop = false;\n    $last_quotes = '';\n    $prop = false;\n    $last_char = '';\n    for ($i = 0; $i < $jsonLength; $i++) {\n      \/\/var_dump($a);\n      $add = '';\n      $a = $json[$i];\n      switch ($a) {\n        case '\\\\':\n          if ($escaped) {\n            $escaped = false;\n            $unescaped = true;\n          }\n          else {\n            $escaped = true;\n          }\n          break;\n        case '\"':\n          if (!$escaped && !$squotes) {\n            $dquotes = !$dquotes;\n            $last_quotes = '\"';\n          }\n          break;\n        case \"'\":\n          if (!$escaped && !$dquotes) {\n            $squotes = !$squotes;\n            $last_quotes = \"'\";\n          }\n          break;\n        case '{':\n          if (!$dquotes && !$squotes) {\n            $opened_cb++;\n            $last_quotes = \"\";\n          }\n          break;\n        case '}':\n          if (!$dquotes && !$squotes) {\n            $opened_cb--;\n            $end_value = true;\n            if ($last_char === ',') {\n              $newJSON = substr($newJSON, 0, -1);\n            }\n          }\n          break;\n        case '[':\n          if (!$dquotes && !$squotes) {\n            $opened_b++;\n            $last_quotes = \"\";\n          }\n          break;\n        case ']':\n          if (!$dquotes && !$squotes) {\n            $opened_b--;\n            $end_value = true;\n            if ($last_char === ',') {\n              $newJSON = substr($newJSON, 0, -1);\n            }\n          }\n          break;\n        case ':':\n          if (!$dquotes && !$squotes) {\n            $end_prop = true;\n          }\n          break;\n        case ',':\n          if (!$dquotes && !$squotes) {\n            $end_value = true;\n          }\n          break;\n        case '\/':\n          if ($last_char !== '\\\\') {\n            \/\/$current .= '\\\\';\n          }\n          break;\n        default:\n          if ($escaped) {\n            $escaped = false;\n          }\n          if ($unescaped) {\n            $unescaped = false;\n          }\n      }\n      if ($end_prop) {\n        if ($last_quotes === '\"') {\n          $add .= $current;\n        }\n        elseif ($last_quotes === \"'\") {\n          $current = trim($current);\n          $add .= '\"'.Str::escapeDquote(Str::unescapeSquote(substr($current, 1, -1))).'\":';\n        }\n        else {\n          $add .= '\"'.Str::escapeDquote($current).'\":';\n        }\n\n        $end_prop = false;\n      }\n      elseif ($end_value) {\n        if ($current) {\n          if ($last_quotes) {\n            $current = trim($current);\n            $add .= '\"'.Str::escapeDquote(substr($current, 1, -1)).'\"';\n          }\n          else {\n            $add .= Str::escapeDquote($current);\n          }\n\n          if ($a !== ' ') {\n            $add .= $a;\n          }\n        }\n        else {\n          $current .= $a;\n        }\n        $last_quotes = \"\";\n        $end_value = false;\n      }\n      elseif (!$dquotes && !$squotes && (($a === '[') || ($a === '{'))) {\n        $add .= $a;\n      }\n      elseif ($dquotes || $squotes || ($a !== ' ')) {\n        $current .= $a;\n      }\n\n      if ($add) {\n        $newJSON .= $add;\n        $current = '';\n      }\n\n      if ($a !== ' ') {\n        $last_char = $a;\n      }\n    }\n\n    if ($current) {\n      $newJSON .= $current;\n    }\n\n    return $newJSON;\n  }",
            "startLine": 3221,
            "endLine": 3372,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "json",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "jsonBase64Encode": {
            "name": "jsonBase64Encode",
            "summary": "Encodes an array's values to the base64 encoding scheme. You can also convert the resulting array into a JSON string (default).",
            "description": "```php\n\nX::jsonBase64Encode(['a' => 'Hello World!', 'b' => 2]);\n\/\/ (string) '{\"a\":\"SGVsbG8gV29ybGQh\",\"b\":2}'\n\nX::jsonBase64Encode(['a' => 'Hello World!'], false);\n\/\/ (array) ['a' => 'SGVsbG8gV29ybGQh']\n\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::jsonBase64Encode(['a' => 'Hello World!', 'b' => 2]);\n\/\/ (string) '{\"a\":\"SGVsbG8gV29ybGQh\",\"b\":2}'\n\nX::jsonBase64Encode(['a' => 'Hello World!'], false);\n\/\/ (array) ['a' => 'SGVsbG8gV29ybGQh']"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $arr, $json = true)\n  {\n    $res = [];\n    foreach ($arr as $i => $a) {\n      if (is_array($a)) {\n        $res[$i] = self::jsonBase64Encode($a, false);\n      }\n      elseif (is_string($a)) {\n        $res[$i] = base64_encode($a);\n      }\n      else{\n        $res[$i] = $a;\n      }\n    }\n\n    return $json ? json_encode($res) : $res;\n  }",
            "startLine": 3392,
            "endLine": 3408,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "arr",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "json",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "jsonBase64Decode": {
            "name": "jsonBase64Decode",
            "summary": "Decodes the base64 array's values. You can also give a JSON string of an array.",
            "description": "```php\n\nX::jsonBase64Decode(['a' => 'SGVsbG8gV29ybGQh', 'b' => ['c' => base64_encode('Rm9v')]]);\n\/\/ (array) ['a' => 'Hello World!', 'b' => ['c' => 'Foo']]\n\nX::jsonBase64Decode('{\"a\":\"SGVsbG8gV29ybGQh\",\"b\":{\"c\":\"Rm9v\"}}');\n\/\/ (array) ['a' => 'Hello World!', 'b' => ['c' => 'Foo']]\n\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::jsonBase64Decode(['a' => 'SGVsbG8gV29ybGQh', 'b' => ['c' => base64_encode('Rm9v')]]);\n\/\/ (array) ['a' => 'Hello World!', 'b' => ['c' => 'Foo']]\n\nX::jsonBase64Decode('{\"a\":\"SGVsbG8gV29ybGQh\",\"b\":{\"c\":\"Rm9v\"}}');\n\/\/ (array) ['a' => 'Hello World!', 'b' => ['c' => 'Foo']]"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    $res = \\is_string($st) ? json_decode($st, true) : $st;\n    if (\\is_array($res)) {\n      foreach ($res as $i => $a) {\n        if (\\is_array($a)) {\n          $res[$i] = self::jsonBase64Decode($a);\n        }\n        elseif (\\is_string($a)) {\n          $res[$i] = base64_decode($a);\n        }\n        else{\n          $res[$i] = $a;\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "startLine": 3427,
            "endLine": 3447,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "indexByFirstVal": {
            "name": "indexByFirstVal",
            "summary": "Creates an associative array based on the first array's value.",
            "description": "```php\n$arr = [\n         [\n           'a' => 'foo',\n           'b' => 'bar'\n         ],\n         [\n           'a' => 'foo2',\n           'b' => 'bar2'\n         ]\n       ];\n\nX::indexByFirstVal($arr);\n\/\/ (array) ['foo' => 'bar', 'foo2' => 'bar2']\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$arr = [\n         [\n           'a' => 'foo',\n           'b' => 'bar'\n         ],\n         [\n           'a' => 'foo2',\n           'b' => 'bar2'\n         ]\n       ];\n\nX::indexByFirstVal($arr);\n\/\/ (array) ['foo' => 'bar', 'foo2' => 'bar2']"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $ar)\n  {\n    if (empty($ar) || !isset($ar[0]) || !\\count($ar[0])) {\n      return $ar;\n    }\n\n    $cols     = array_keys($ar[0]);\n    $idx      = array_shift($cols);\n    $num_cols = \\count($cols);\n    $res      = [];\n    foreach ($ar as $d) {\n      $index = $d[$idx];\n      unset($d[$idx]);\n      $res[$index] = $num_cols > 1 ? $d : $d[$cols[0]];\n    }\n\n    return $res;\n  }",
            "startLine": 3472,
            "endLine": 3489,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "ar",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "join": {
            "name": "join",
            "summary": "Join array elements with a string",
            "description": "```php\n\nX::join(['foo', 'bar']);\n\/\/ (string) \"foobar\"\n\nX::join(['foo', 'bar'], ' ');\n\/\/ (string) \"foo bar\"\n\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::join(['foo', 'bar']);\n\/\/ (string) \"foobar\"\n\nX::join(['foo', 'bar'], ' ');\n\/\/ (string) \"foo bar\""
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $ar, string $glue = '')\n  {\n    return implode($glue, $ar);\n  }",
            "startLine": 3509,
            "endLine": 3512,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "ar",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "glue",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "concat": {
            "name": "concat",
            "summary": "Split a string by a string",
            "description": "```php\n\nX::concat('foo bar', ' ');\n\/\/ (array) ['foo', 'bar']\n\nX::concat('foo,bar', ',');\n\/\/ (array) ['foo', 'bar']\n\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::concat('foo bar', ' ');\n\/\/ (array) ['foo', 'bar']\n\nX::concat('foo,bar', ',');\n\/\/ (array) ['foo', 'bar']"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $st, string $separator)\n  {\n    return explode($separator, $st);\n  }",
            "startLine": 3532,
            "endLine": 3535,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "separator",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "split": {
            "name": "split",
            "summary": "Split a string by a string",
            "description": "```php\n\nX::split('foo bar', ' ');\n\/\/ (array) ['foo', 'bar']\n\nX::split('foo,bar', ',');\n\/\/ (array) ['foo', 'bar']\n\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::split('foo bar', ' ');\n\/\/ (array) ['foo', 'bar']\n\nX::split('foo,bar', ',');\n\/\/ (array) ['foo', 'bar']"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $st, string $separator)\n  {\n    return explode($separator, $st);\n  }",
            "startLine": 3555,
            "endLine": 3558,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "separator",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "indexOf": {
            "name": "indexOf",
            "summary": "Searches from start to end.",
            "description": "```php\n\nX::indexOf(['a', 'b', 'c'], 'b');\n\/\/ (int) 1\n\nX::indexOf(['a', 'b', 'c'], 'b', 2);\n\/\/ (int) -1\n\nX::indexOf('foobar', 'bar');\n\/\/ (int) 3\n\nX::indexOf('foobar', 'bar', 4);\n\/\/ (int) -1\n\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::indexOf(['a', 'b', 'c'], 'b');\n\/\/ (int) 1\n\nX::indexOf(['a', 'b', 'c'], 'b', 2);\n\/\/ (int) -1\n\nX::indexOf('foobar', 'bar');\n\/\/ (int) 3\n\nX::indexOf('foobar', 'bar', 4);\n\/\/ (int) -1"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($subject, $search, int $start = 0)\n  {\n    $res = false;\n    if (is_array($subject)) {\n      $i = 0;\n      foreach ($subject as $s) {\n        if (($i >= $start) && ($s === $search)) {\n          $res = $i;\n          break;\n        }\n        else{\n          $i++;\n        }\n      }\n    }\n    elseif (is_string($subject)) {\n      $res = strpos($subject, $search, $start);\n    }\n\n    return $res === false ? -1 : $res;\n  }",
            "startLine": 3585,
            "endLine": 3605,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "subject",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "search",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "lastIndexOf": {
            "name": "lastIndexOf",
            "summary": "Searches from end to start",
            "description": "```php\n\nX::lastIndexOf(['a', 'b', 'c', 'd'], 'c', 3);\n\/\/ (int) 1\n\nX::lastIndexOf('foobar', 'bar');\n\/\/ (int) 3\n\nX::lastIndexOf('foobar', 'bar', 4);\n\/\/ (int) -1\n\nX::lastIndexOf('foobarbar', 'bar');\n\/\/ (int) 6\n\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::lastIndexOf(['a', 'b', 'c', 'd'], 'c', 3);\n\/\/ (int) 1\n\nX::lastIndexOf('foobar', 'bar');\n\/\/ (int) 3\n\nX::lastIndexOf('foobar', 'bar', 4);\n\/\/ (int) -1\n\nX::lastIndexOf('foobarbar', 'bar');\n\/\/ (int) 6"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($subject, $search, int $start = NULL)\n  {\n    $res = false;\n    if (is_array($subject)) {\n      $i = count($subject) - 1;\n      if ($i) {\n        if ($start > 0) {\n          if ($start > $i) {\n            return -1;\n          }\n\n          $i = $start;\n        }\n        elseif ($start < 0) {\n          $i -= $start;\n          if ($i < 0) {\n            return -1;\n          }\n        }\n\n        foreach ($subject as $s) {\n          if (($i <= $start) && ($s === $search)) {\n            $res = $i;\n            break;\n          }\n          else{\n            $i--;\n          }\n        }\n      }\n    }\n    elseif (is_string($subject)) {\n      if ($start > 0) {\n        $start = strlen($subject) - (strlen($subject) - $start);\n      }\n\n      $res = strrpos($subject, $search, $start);\n    }\n\n    return $res === false ? -1 : $res;\n  }",
            "startLine": 3631,
            "endLine": 3671,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "subject",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "search",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "output": {
            "name": "output",
            "summary": "```php",
            "description": "X::output(1, true, null, 'foo', ['a', 'b'], (object)['a' => 1, 'b' => ['c' => 2, 'd' => 3]]);\n\/\/ (string)\n\/\/ \"1\n\/\/ true\n\/\/ null\n\/\/ foo\n\/\/\n\/\/ [\n\/\/   \"a\",\n\/\/   \"b\",\n\/\/ ]\n\/\/\n\/\/\n\/\/ {\n\/\/   \"a\": 1,\n\/\/   \"b\": {\n\/\/     \"c\": 2,\n\/\/     \"d\": 3,\n\/\/   },\n\/\/ }\n\n\n\"\n\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>X::output(1, true, null, 'foo', ['a', 'b'], (object)['a' =&gt; 1, 'b' =&gt; ['c' =&gt; 2, 'd' =&gt; 3]]);\n\/\/ (string)\n\/\/ &quot;1\n\/\/ true\n\/\/ null\n\/\/ foo\n\/\/\n\/\/ [\n\/\/   &quot;a&quot;,\n\/\/   &quot;b&quot;,\n\/\/ ]\n\/\/\n\/\/\n\/\/ {\n\/\/   &quot;a&quot;: 1,\n\/\/   &quot;b&quot;: {\n\/\/     &quot;c&quot;: 2,\n\/\/     &quot;d&quot;: 3,\n\/\/   },\n\/\/ }<\/p>\n<p>&quot;<\/p>\n<pre><code><\/code><\/pre>"
                }
            ],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $wrote = false;\n    foreach (func_get_args() as $a) {\n      if ($a === null) {\n        $st = 'null';\n      }\n      elseif ($a === true) {\n        $st = 'true';\n      }\n      elseif ($a === false) {\n        $st = 'false';\n      }\n      elseif (\\bbn\\Str::isNumber($a)) {\n        $st = $a;\n      }\n      elseif (!is_string($a)) {\n        $st = self::getDump($a);\n      }\n      else {\n        $st = $a;\n      }\n\n      if ($st) {\n        $wrote = true;\n        echo $st.PHP_EOL;\n      }\n    }\n\n    if ($wrote) {\n      \/\/ob_end_flush();\n    }\n  }",
            "startLine": 3703,
            "endLine": 3735,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "__callStatic": {
            "name": "__callStatic",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\X",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    if ((strpos($name, 'is_') === 0) && function_exists($name)) {\n      $res = null;\n      foreach ($arguments as $a) {\n        $res = $name($a);\n        if (!$res) {\n          return $res;\n        }\n      }\n\n      return $res;\n    }\n\n    if (!method_exists(self::class, $name)) {\n      throw new Exception(self::_(\"Undefined Method $name\"));\n    }\n  }",
            "startLine": 3743,
            "endLine": 3760,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": {
        "_counters": [],
        "_last_curl": null,
        "_cli": false,
        "_textdomain": null
    },
    "constants": null,
    "summary": "",
    "description": "",
    "description_parts": []
}