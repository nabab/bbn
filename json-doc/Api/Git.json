{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Api\\Git",
    "namespace": true,
    "realName": "Git",
    "realNamespace": "bbn\\Api",
    "traits": [],
    "interfaces": [],
    "fileName": "\/Api\/Git.php",
    "startLine": 26,
    "endLine": 345,
    "numMethods": 44,
    "numProperties": 2,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "CzProject\\GitPhp\\GitRepository",
    "isSubclassOf": false,
    "defaultProperties": {
        "repository": null,
        "runner": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Api",
    "shortName": "Git",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Git",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Git.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct($path)\n  {\n    $git = new GitParent;\n    $runner = $git->getRunner();\n    return parent::__construct($path, $runner);\n  }",
            "parent": {
                "name": "__construct",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function __construct($repository, IRunner $runner = NULL)\n\t\t{\n\t\t\tif (basename($repository) === '.git') {\n\t\t\t\t$repository = dirname($repository);\n\t\t\t}\n\n\t\t\t$path = realpath($repository);\n\n\t\t\tif ($path === FALSE) {\n\t\t\t\tthrow new GitException(\"Repository '$repository' not found.\");\n\t\t\t}\n\n\t\t\t$this->repository = $path;\n\t\t\t$this->runner = $runner !== NULL ? $runner : new Runners\\CliRunner;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 19,
                "endLine": 33,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "__construct",
                "returns": [],
                "arguments": [
                    {
                        "name": "repository",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "runner",
                        "position": 1,
                        "type": "null|CzProject\\GitPhp\\IRunner",
                        "type_arr": [
                            "null",
                            "CzProject\\GitPhp\\IRunner"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$repository"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * @param  string $repository\n\t\t * @throws GitException\n\t\t *\/"
            },
            "trait": false,
            "startLine": 29,
            "endLine": 34,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "listRemote": {
            "name": "listRemote",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Git",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Git.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function listRemote()\n  {\n    return $this->extractFromCommand(['git remote -v']);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 36,
            "endLine": 39,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "listRemote",
            "returns": [],
            "arguments": []
        },
        "getUrl": {
            "name": "getUrl",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Git",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Git.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUrl(): ?string\n  {\n    if ($remote = $this->listRemote()) {\n      foreach ($remote as $r) {\n        preg_match('\/^([^\\\\s]+)\\\\s+([^\\\\s]+)\\\\s+([^\\\\s]+)\/', $r, $bits);\n        if ((count($bits) === 4) && ($bits[1] === 'origin') && ($bits[3] === '(fetch)')) {\n          return $bits[2];\n        }\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 41,
            "endLine": 53,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getUrl",
            "returns": [
                null,
                "string"
            ],
            "arguments": []
        },
        "createRepositoryRemote": {
            "name": "createRepositoryRemote",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Git",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Git.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createRepositoryRemote(string $token, array $scope, string $api = \"\")\n  {\n    if (\n      $token &&\n      !empty($scope['name']) &&\n      (strlen($api) > 0)\n    ) {\n      \/\/todo ceck create repository remote with this api for github\n      try {\n        $res = X::curl($api, $scope, [\n          'post' => 1,\n          'HTTPHEADER' => ['Authorization: token  ' . $token]\n        ]);\n        return true;\n      } catch (Exception $e) {\n        return false;\n      }\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 56,
            "endLine": 74,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "createRepositoryRemote",
            "returns": [],
            "arguments": [
                {
                    "name": "token",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "scope",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "api",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "diff": {
            "name": "diff",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Git",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Git.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function diff()\n  {\n    if (is_dir($this->getRepositoryPath() . '\/.git')) {\n      $output = $this->extractFromCommand(['git status -s']);\n      if (is_array($output) && !empty($output)) {\n        $arr = [];\n\n        foreach ($output as $i => $val) {\n\n          $sigle = substr($val, 0, 2);\n\n          $element = [\n            'file' => false,\n            'folder' => false,\n            'action' => false,\n            'commit' => false,\n            'added' => (strpos($val, 'A') == 0) ? true : false,\n            'other' => false\n          ];\n\n          \/\/ for name file\n          if (strpos($val, '\"') == 3) {\n            if (substr($val, -1, 1) === \"\/\") {\n              $element['folder'] = substr($val, 4);\n            } else {\n              $element['file'] = substr($val, 4);\n            }\n          } else {\n            if (substr($val, -1, 1) === \"\/\") {\n              $element['folder'] = substr($val, 3);\n            } else {\n              $element['file'] = substr($val, 3);\n            }\n          }\n\n          \/\/for action and assign value for only file\n          switch ($sigle) {\n            case '??':\n              $element['action'] = 'untracked';\n              $element['commit'] = false;\n              $element['added'] = false;\n              break;\n            case 'D ':\n              $element['action'] = 'deleted';\n              $element['commit'] = true;\n              $element['added'] = true;\n              break;\n            case ' D':\n              $element['action'] = 'deleted';\n              $element['commit'] = false;\n              $element['added'] = false;\n              break;\n            case 'R ':\n              $files = explode(' -> ', $val);\n              $element['action'] = 'renamed';\n              $elemnt['old_file'] = $files[0];\n              $elemnt['new_file'] = $files[1];\n              $element['commit'] = true;\n              $element['added'] = true;\n              break;\n            case 'M ':\n              $element['action'] = 'updated';\n              $element['commit'] = true;\n              $element['added'] = true;\n              break;\n            case ' M':\n              $element['action'] = 'update';\n              $element['commit'] = false;\n              $element['added'] = false;\n              break;\n            default:\n              $element['other'] = $sigle === \"A \" ? \"'A ' (Only added)\" : $sigle;\n          }\n\n          $arr[] = $element;\n        }\n\n        return $arr;\n      }\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 76,
            "endLine": 157,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "diff",
            "returns": [],
            "arguments": []
        },
        "pushInRemoteT": {
            "name": "pushInRemoteT",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Git",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Git.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function pushInRemoteT(string $repository, string $user, string $token, string $server = \"github.com\")\n  {\n    if ($repository && $user && $passw && $server) {\n      $remote = NULL;\n      \/\/https:\/\/[USERNAME]:[NEW TOKEN]@github.com\/[USERNAME]\/[REPO].git\n      $params['--repo'] = 'https:\/\/' . $user . ':' . $token . '@' . $server . '\/' . $user . '\/' . $repository . '.git';\n      try {\n        $output = $this->begin()\n          ->run(\"git push $remote\", $params)\n          ->end();\n      } catch (Exception $e) {\n        die(var_dump($e->getMessage(), $params['--repo']));\n        return false;\n      }\n      return is_object($output);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 159,
            "endLine": 176,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "pushInRemoteT",
            "returns": [],
            "arguments": [
                {
                    "name": "repository",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "user",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "token",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "server",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "github.com",
                    "default_name": ""
                }
            ]
        },
        "pushInRemote": {
            "name": "pushInRemote",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Git",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Git.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function pushInRemote(string $repository, string $user, string $passw, string $server = \"github.com\")\n  {\n    if ($repository && $user && $passw && $server) {\n      $remote = NULL;\n      $params['--repo'] = 'https:\/\/' . $user . ':' . $passw . '@' . $server . '\/' . $user . '\/' . $repository . '.git';\n      try {\n        $output = $this->begin()\n          ->run(\"git push $remote\", $params)\n          ->end();\n      } catch (Exception $e) {\n        die(var_dump($e->getMessage(), $params['--repo']));\n        return false;\n      }\n      return is_object($output);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 180,
            "endLine": 196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "pushInRemote",
            "returns": [],
            "arguments": [
                {
                    "name": "repository",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "user",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "passw",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "server",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "github.com",
                    "default_name": ""
                }
            ]
        },
        "removeLocalBranch": {
            "name": "removeLocalBranch",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Git",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Git.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeLocalBranch(string $branch)\n  {\n    if ($branch &&  ($this->getCurrentBranchName() !== $branch)) {\n      try {\n        $output = $this->begin()\n          ->run(\"git branch -d $branch\")\n          ->end();\n      } catch (Exception $e) {\n        return false;\n      }\n      return is_object($output);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 198,
            "endLine": 211,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeLocalBranch",
            "returns": [],
            "arguments": [
                {
                    "name": "branch",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "removeRemoteBranch": {
            "name": "removeRemoteBranch",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Git",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Git.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeRemoteBranch(string $repository, string $branch, string $user, string $passw, string $server = \"github.com\")\n  {\n    if ($repository && $branch && $user && $passw && $server) {\n      $remote = 'https:\/\/' . $user . ':' . $passw . '@' . $server . '\/' . $repository . '.git';\n      try {\n        $output = $this->begin()\n          ->run(\"git push --delete $remote $branch\")\n          ->end();\n      } catch (Exception $e) {\n        return false;\n      }\n      return is_object($output);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 213,
            "endLine": 227,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 4,
            "shortName": "removeRemoteBranch",
            "returns": [],
            "arguments": [
                {
                    "name": "repository",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "branch",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "user",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "passw",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "server",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "github.com",
                    "default_name": ""
                }
            ]
        },
        "createRemoteRepository": {
            "name": "createRemoteRepository",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Git",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Git.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createRemoteRepository(string $repository, string $user, string $passw, string $localPath, string $server = \"github.com\")\n  {\n    if ($repository && $user && $passw && $server && $localPath) {\n      $rep = self::init($localPath);\n      if (is_object($rep)) {\n        $remote = 'https:\/\/' . $server . '\/' . $user . '\/' . $repository . '.git';\n        if (!empty($this->addRemote('origin', $remote))) {\n          file_put_contents($localPath . '\/README.md', '#README');\n          if (!empty($this->addAllChanges())) {\n            if (!empty($this->commit(\"New Repository\"))) {\n              return $this->pushInRemote($repository, $user, $passw, $server);\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 229,
            "endLine": 246,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 4,
            "shortName": "createRemoteRepository",
            "returns": [],
            "arguments": [
                {
                    "name": "repository",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "user",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "passw",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "localPath",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "server",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "github.com",
                    "default_name": ""
                }
            ]
        },
        "difference": {
            "name": "difference",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Git",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Git.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function difference()\n  {\n    $diff = $this->extractFromCommand(['git diff --word-diff']);\n    $arr = [];\n    $status = [\n      '@@ -1 +0,0 @@' => 'delete in local',\n      '@@ -1 +1 @@' => 'different',\n      '@@ +1 -1 @@' => 'different',\n      '@@ 0,0 -1 @@' => 'delete in remote',\n    ];\n\n    foreach ($diff as $i => $ele) {\n\n      $start = strpos($ele, '--git');\n\n      if ($start != 0) {\n        $idx = 0;\n        $file = substr($ele, $start + 5);\n        $file = substr($file, Strpos($file, 'a\/') + 2, Strpos($file, 'b\/') - 3);\n\n        $idx = $i + 5;\n\n        if (strpos($diff[$i + 5], '@@') === false) {\n          $idx--;\n        }\n        if (!empty($diff[$idx + 1])) {\n\n          $x = strpos($diff[$idx + 1], '-]{+') === false ? '-]' : '-]{+';\n\n          $remote_code = false;\n          $local_code = false;\n\n          \/\/for code remote\n          if ($x === '-]{+') {\n            $code = substr($diff[$idx + 1], strpos($diff[$idx + 1], $x) + 4);\n            $remote_code = substr($code, 0, Strpos($code, '+}'));\n          }\n\n          \/\/for code local\n          if (strpos($diff[$idx + 1], '[-') !== false) {\n            $code = substr($diff[$idx + 1],  strpos($diff[$idx + 1], '[-') + 2);\n            $local_code = substr($code, 0, Strpos($code, $x));\n          }\n          $arr[] = [\n            'file' => $file,\n            'status' => $status[$diff[$idx]],\n            'code' => [\n              'local' => $local_code,\n              'remote' => $remote_code\n            ]\n          ];\n        }\n      }\n    }\n    return $arr;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 250,
            "endLine": 305,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "difference",
            "returns": [],
            "arguments": []
        },
        "logs": {
            "name": "logs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Git",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Git.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function logs(int $start  = 0, int $limit = 0): array\n  {\n    \/*\n     for get info the commits\n      %n new line,\n      %an author,\n      %h hash commit abbrev.\n      %H hash commit\n      %ad date\n      %cN committer\n      %N note commit\n    *\/\n    $cmd = 'git log --pretty=format:\"%h%n%H%n%an%n%s%n%ae%n%ad%n%cN%n%N%n__commit__\" --date=format-local:\"%Y-%m-%d %H:%M:%S\" --skip=' . $start;\n\n    if ($limit > 0) {\n      $cmd .= ' --max-count=' . $limit;\n    }\n    $field = ['sha1', 'commit', 'author', 'title_commit', 'email_author', 'date', 'committer', 'notes'];\n    $commits = [];\n    $arr = [];\n    $i = 0;\n    $logs = $this->extractFromCommand([$cmd]);\n\n    foreach ($logs as $val) {\n      if ($val !== '__commit__') {\n        $arr[$field[$i]] = $val;\n        $i++;\n      } else {\n        $commits[] = $arr;\n        $i = 0;\n      }\n    }\n\n    return [\n      'commits' => $commits,\n      'total' => (int)$this->extractFromCommand(['git rev-list --all --count'])[0]\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 307,
            "endLine": 344,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "logs",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "start",
                    "position": 0,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getRepositoryPath": {
            "name": "getRepositoryPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function getRepositoryPath()\n\t\t{\n\t\t\treturn $this->repository;\n\t\t}",
            "parent": {
                "name": "getRepositoryPath",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function getRepositoryPath()\n\t\t{\n\t\t\treturn $this->repository;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 39,
                "endLine": 42,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getRepositoryPath",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n\t\t * @return string\n\t\t *\/"
            },
            "trait": false,
            "startLine": 39,
            "endLine": 42,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRepositoryPath",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n\t\t * @return string\n\t\t *\/"
        },
        "createTag": {
            "name": "createTag",
            "summary": "Creates a tag.",
            "description": "`git tag <name>`",
            "description_parts": [
                {
                    "type": "text",
                    "content": "`git tag <name>`"
                }
            ],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function createTag($name, $options = NULL)\n\t\t{\n\t\t\t$this->run('tag', $options, '--end-of-options', $name);\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "createTag",
                "summary": "Creates a tag.",
                "description": "`git tag <name>`",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "`git tag <name>`"
                    }
                ],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function createTag($name, $options = NULL)\n\t\t{\n\t\t\t$this->run('tag', $options, '--end-of-options', $name);\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 53,
                "endLine": 57,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "createTag",
                "returns": [],
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "options",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Creates a tag.\n`git tag <name>`\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$name"
                        },
                        {
                            "tag": "param",
                            "name": "$options"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Creates a tag.\n\t\t * `git tag <name>`\n\t\t * @param  string $name\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
            },
            "trait": false,
            "startLine": 53,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "createTag",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "options",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Creates a tag.\n`git tag <name>`\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$name"
                    },
                    {
                        "tag": "param",
                        "name": "$options"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Creates a tag.\n\t\t * `git tag <name>`\n\t\t * @param  string $name\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
        },
        "removeTag": {
            "name": "removeTag",
            "summary": "Removes tag.",
            "description": "`git tag -d <name>`",
            "description_parts": [
                {
                    "type": "text",
                    "content": "`git tag -d <name>`"
                }
            ],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function removeTag($name)\n\t\t{\n\t\t\t$this->run('tag', [\n\t\t\t\t'-d' => $name,\n\t\t\t]);\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "removeTag",
                "summary": "Removes tag.",
                "description": "`git tag -d <name>`",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "`git tag -d <name>`"
                    }
                ],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function removeTag($name)\n\t\t{\n\t\t\t$this->run('tag', [\n\t\t\t\t'-d' => $name,\n\t\t\t]);\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 67,
                "endLine": 73,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "removeTag",
                "returns": [],
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Removes tag.\n`git tag -d <name>`\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$name"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Removes tag.\n\t\t * `git tag -d <name>`\n\t\t * @param  string $name\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
            },
            "trait": false,
            "startLine": 67,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeTag",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Removes tag.\n`git tag -d <name>`\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$name"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Removes tag.\n\t\t * `git tag -d <name>`\n\t\t * @param  string $name\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
        },
        "renameTag": {
            "name": "renameTag",
            "summary": "Renames tag.",
            "description": "`git tag <new> <old>`\n`git tag -d <old>`",
            "description_parts": [
                {
                    "type": "text",
                    "content": "`git tag <new> <old>`\n`git tag -d <old>`"
                }
            ],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function renameTag($oldName, $newName)\n\t\t{\n\t\t\t\/\/ http:\/\/stackoverflow.com\/a\/1873932\n\t\t\t\/\/ create new as alias to old (`git tag NEW OLD`)\n\t\t\t$this->run('tag', '--end-of-options', $newName, $oldName);\n\t\t\t\/\/ delete old (`git tag -d OLD`)\n\t\t\t$this->removeTag($oldName);\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "renameTag",
                "summary": "Renames tag.",
                "description": "`git tag <new> <old>`\n`git tag -d <old>`",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "`git tag <new> <old>`\n`git tag -d <old>`"
                    }
                ],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function renameTag($oldName, $newName)\n\t\t{\n\t\t\t\/\/ http:\/\/stackoverflow.com\/a\/1873932\n\t\t\t\/\/ create new as alias to old (`git tag NEW OLD`)\n\t\t\t$this->run('tag', '--end-of-options', $newName, $oldName);\n\t\t\t\/\/ delete old (`git tag -d OLD`)\n\t\t\t$this->removeTag($oldName);\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 85,
                "endLine": 93,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "renameTag",
                "returns": [],
                "arguments": [
                    {
                        "name": "oldName",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "ame"
                    },
                    {
                        "name": "newName",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "ame"
                    }
                ],
                "doc": {
                    "description": "Renames tag.\n`git tag <new> <old>`\n`git tag -d <old>`\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$old",
                            "description": "ame"
                        },
                        {
                            "tag": "param",
                            "name": "$new",
                            "description": "ame"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Renames tag.\n\t\t * `git tag <new> <old>`\n\t\t * `git tag -d <old>`\n\t\t * @param  string $oldName\n\t\t * @param  string $newName\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
            },
            "trait": false,
            "startLine": 85,
            "endLine": 93,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "renameTag",
            "returns": [],
            "arguments": [
                {
                    "name": "oldName",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame"
                },
                {
                    "name": "newName",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame"
                }
            ],
            "doc": {
                "description": "Renames tag.\n`git tag <new> <old>`\n`git tag -d <old>`\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$old",
                        "description": "ame"
                    },
                    {
                        "tag": "param",
                        "name": "$new",
                        "description": "ame"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Renames tag.\n\t\t * `git tag <new> <old>`\n\t\t * `git tag -d <old>`\n\t\t * @param  string $oldName\n\t\t * @param  string $newName\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
        },
        "getTags": {
            "name": "getTags",
            "summary": "Returns list of tags in repo.",
            "description": "",
            "description_parts": [],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function getTags()\n\t\t{\n\t\t\treturn $this->extractFromCommand(['tag'], 'trim');\n\t\t}",
            "parent": {
                "name": "getTags",
                "summary": "Returns list of tags in repo.",
                "description": "",
                "description_parts": [],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function getTags()\n\t\t{\n\t\t\treturn $this->extractFromCommand(['tag'], 'trim');\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 101,
                "endLine": 104,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getTags",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Returns list of tags in repo.\n",
                    "params": [],
                    "return": "NULL => no tags",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Returns list of tags in repo.\n\t\t * @return string[]|NULL  NULL => no tags\n\t\t * @throws GitException\n\t\t *\/"
            },
            "trait": false,
            "startLine": 101,
            "endLine": 104,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getTags",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns list of tags in repo.\n",
                "params": [],
                "return": "NULL => no tags",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Returns list of tags in repo.\n\t\t * @return string[]|NULL  NULL => no tags\n\t\t * @throws GitException\n\t\t *\/"
        },
        "merge": {
            "name": "merge",
            "summary": "Merges branches.",
            "description": "`git merge <options> <name>`",
            "description_parts": [
                {
                    "type": "text",
                    "content": "`git merge <options> <name>`"
                }
            ],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function merge($branch, $options = NULL)\n\t\t{\n\t\t\t$this->run('merge', $options, '--end-of-options', $branch);\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "merge",
                "summary": "Merges branches.",
                "description": "`git merge <options> <name>`",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "`git merge <options> <name>`"
                    }
                ],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function merge($branch, $options = NULL)\n\t\t{\n\t\t\t$this->run('merge', $options, '--end-of-options', $branch);\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 115,
                "endLine": 119,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "merge",
                "returns": [],
                "arguments": [
                    {
                        "name": "branch",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "options",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Merges branches.\n`git merge <options> <name>`\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$branch"
                        },
                        {
                            "tag": "param",
                            "name": "$options"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Merges branches.\n\t\t * `git merge <options> <name>`\n\t\t * @param  string $branch\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
            },
            "trait": false,
            "startLine": 115,
            "endLine": 119,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "merge",
            "returns": [],
            "arguments": [
                {
                    "name": "branch",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "options",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Merges branches.\n`git merge <options> <name>`\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$branch"
                    },
                    {
                        "tag": "param",
                        "name": "$options"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Merges branches.\n\t\t * `git merge <options> <name>`\n\t\t * @param  string $branch\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
        },
        "createBranch": {
            "name": "createBranch",
            "summary": "Creates new branch.",
            "description": "`git branch <name>`\n(optionaly) `git checkout <name>`",
            "description_parts": [
                {
                    "type": "text",
                    "content": "`git branch <name>`\n(optionaly) `git checkout <name>`"
                }
            ],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function createBranch($name, $checkout = FALSE)\n\t\t{\n\t\t\t\/\/ git branch $name\n\t\t\t$this->run('branch', '--end-of-options', $name);\n\n\t\t\tif ($checkout) {\n\t\t\t\t$this->checkout($name);\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "createBranch",
                "summary": "Creates new branch.",
                "description": "`git branch <name>`\n(optionaly) `git checkout <name>`",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "`git branch <name>`\n(optionaly) `git checkout <name>`"
                    }
                ],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function createBranch($name, $checkout = FALSE)\n\t\t{\n\t\t\t\/\/ git branch $name\n\t\t\t$this->run('branch', '--end-of-options', $name);\n\n\t\t\tif ($checkout) {\n\t\t\t\t$this->checkout($name);\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 141,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "createBranch",
                "returns": [],
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "checkout",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": false,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Creates new branch.\n`git branch <name>`\n(optionaly) `git checkout <name>`\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$name"
                        },
                        {
                            "tag": "param",
                            "name": "$checkout"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Creates new branch.\n\t\t * `git branch <name>`\n\t\t * (optionaly) `git checkout <name>`\n\t\t * @param  string $name\n\t\t * @param  bool $checkout\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 141,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "createBranch",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "checkout",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Creates new branch.\n`git branch <name>`\n(optionaly) `git checkout <name>`\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$name"
                    },
                    {
                        "tag": "param",
                        "name": "$checkout"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Creates new branch.\n\t\t * `git branch <name>`\n\t\t * (optionaly) `git checkout <name>`\n\t\t * @param  string $name\n\t\t * @param  bool $checkout\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
        },
        "removeBranch": {
            "name": "removeBranch",
            "summary": "Removes branch.",
            "description": "`git branch -d <name>`",
            "description_parts": [
                {
                    "type": "text",
                    "content": "`git branch -d <name>`"
                }
            ],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function removeBranch($name)\n\t\t{\n\t\t\t$this->run('branch', [\n\t\t\t\t'-d' => $name,\n\t\t\t]);\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "removeBranch",
                "summary": "Removes branch.",
                "description": "`git branch -d <name>`",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "`git branch -d <name>`"
                    }
                ],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function removeBranch($name)\n\t\t{\n\t\t\t$this->run('branch', [\n\t\t\t\t'-d' => $name,\n\t\t\t]);\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 151,
                "endLine": 157,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "removeBranch",
                "returns": [],
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Removes branch.\n`git branch -d <name>`\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$name"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Removes branch.\n\t\t * `git branch -d <name>`\n\t\t * @param  string $name\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
            },
            "trait": false,
            "startLine": 151,
            "endLine": 157,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeBranch",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Removes branch.\n`git branch -d <name>`\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$name"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Removes branch.\n\t\t * `git branch -d <name>`\n\t\t * @param  string $name\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
        },
        "getCurrentBranchName": {
            "name": "getCurrentBranchName",
            "summary": "Gets name of current branch",
            "description": "`git branch` + magic",
            "description_parts": [
                {
                    "type": "text",
                    "content": "`git branch` + magic"
                }
            ],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function getCurrentBranchName()\n\t\t{\n\t\t\ttry {\n\t\t\t\t$branch = $this->extractFromCommand(['branch', '-a', '--no-color'], function($value) {\n\t\t\t\t\tif (isset($value[0]) && $value[0] === '*') {\n\t\t\t\t\t\treturn trim(substr($value, 1));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn FALSE;\n\t\t\t\t});\n\n\t\t\t\tif (is_array($branch)) {\n\t\t\t\t\treturn $branch[0];\n\t\t\t\t}\n\n\t\t\t} catch (GitException $e) {\n\t\t\t\t\/\/ nothing\n\t\t\t}\n\n\t\t\tthrow new GitException('Getting of current branch name failed.');\n\t\t}",
            "parent": {
                "name": "getCurrentBranchName",
                "summary": "Gets name of current branch",
                "description": "`git branch` + magic",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "`git branch` + magic"
                    }
                ],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function getCurrentBranchName()\n\t\t{\n\t\t\ttry {\n\t\t\t\t$branch = $this->extractFromCommand(['branch', '-a', '--no-color'], function($value) {\n\t\t\t\t\tif (isset($value[0]) && $value[0] === '*') {\n\t\t\t\t\t\treturn trim(substr($value, 1));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn FALSE;\n\t\t\t\t});\n\n\t\t\t\tif (is_array($branch)) {\n\t\t\t\t\treturn $branch[0];\n\t\t\t\t}\n\n\t\t\t} catch (GitException $e) {\n\t\t\t\t\/\/ nothing\n\t\t\t}\n\n\t\t\tthrow new GitException('Getting of current branch name failed.');\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 166,
                "endLine": 186,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getCurrentBranchName",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Gets name of current branch\n`git branch` + magic\n",
                    "params": [],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Gets name of current branch\n\t\t * `git branch` + magic\n\t\t * @return string\n\t\t * @throws GitException\n\t\t *\/"
            },
            "trait": false,
            "startLine": 166,
            "endLine": 186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCurrentBranchName",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Gets name of current branch\n`git branch` + magic\n",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Gets name of current branch\n\t\t * `git branch` + magic\n\t\t * @return string\n\t\t * @throws GitException\n\t\t *\/"
        },
        "getBranches": {
            "name": "getBranches",
            "summary": "Returns list of all (local & remote) branches in repo.",
            "description": "",
            "description_parts": [],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function getBranches()\n\t\t{\n\t\t\treturn $this->extractFromCommand(['branch', '-a', '--no-color'], function($value) {\n\t\t\t\treturn trim(substr($value, 1));\n\t\t\t});\n\t\t}",
            "parent": {
                "name": "getBranches",
                "summary": "Returns list of all (local & remote) branches in repo.",
                "description": "",
                "description_parts": [],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function getBranches()\n\t\t{\n\t\t\treturn $this->extractFromCommand(['branch', '-a', '--no-color'], function($value) {\n\t\t\t\treturn trim(substr($value, 1));\n\t\t\t});\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 194,
                "endLine": 199,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getBranches",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Returns list of all (local & remote) branches in repo.\n",
                    "params": [],
                    "return": "NULL => no branches",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Returns list of all (local & remote) branches in repo.\n\t\t * @return string[]|NULL  NULL => no branches\n\t\t * @throws GitException\n\t\t *\/"
            },
            "trait": false,
            "startLine": 194,
            "endLine": 199,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getBranches",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns list of all (local & remote) branches in repo.\n",
                "params": [],
                "return": "NULL => no branches",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Returns list of all (local & remote) branches in repo.\n\t\t * @return string[]|NULL  NULL => no branches\n\t\t * @throws GitException\n\t\t *\/"
        },
        "getRemoteBranches": {
            "name": "getRemoteBranches",
            "summary": "Returns list of remote branches in repo.",
            "description": "",
            "description_parts": [],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function getRemoteBranches()\n\t\t{\n\t\t\treturn $this->extractFromCommand(['branch', '-r', '--no-color'], function($value) {\n\t\t\t\treturn trim(substr($value, 1));\n\t\t\t});\n\t\t}",
            "parent": {
                "name": "getRemoteBranches",
                "summary": "Returns list of remote branches in repo.",
                "description": "",
                "description_parts": [],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function getRemoteBranches()\n\t\t{\n\t\t\treturn $this->extractFromCommand(['branch', '-r', '--no-color'], function($value) {\n\t\t\t\treturn trim(substr($value, 1));\n\t\t\t});\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 207,
                "endLine": 212,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getRemoteBranches",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Returns list of remote branches in repo.\n",
                    "params": [],
                    "return": "NULL => no branches",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Returns list of remote branches in repo.\n\t\t * @return string[]|NULL  NULL => no branches\n\t\t * @throws GitException\n\t\t *\/"
            },
            "trait": false,
            "startLine": 207,
            "endLine": 212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRemoteBranches",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns list of remote branches in repo.\n",
                "params": [],
                "return": "NULL => no branches",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Returns list of remote branches in repo.\n\t\t * @return string[]|NULL  NULL => no branches\n\t\t * @throws GitException\n\t\t *\/"
        },
        "getLocalBranches": {
            "name": "getLocalBranches",
            "summary": "Returns list of local branches in repo.",
            "description": "",
            "description_parts": [],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function getLocalBranches()\n\t\t{\n\t\t\treturn $this->extractFromCommand(['branch', '--no-color'], function($value) {\n\t\t\t\treturn trim(substr($value, 1));\n\t\t\t});\n\t\t}",
            "parent": {
                "name": "getLocalBranches",
                "summary": "Returns list of local branches in repo.",
                "description": "",
                "description_parts": [],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function getLocalBranches()\n\t\t{\n\t\t\treturn $this->extractFromCommand(['branch', '--no-color'], function($value) {\n\t\t\t\treturn trim(substr($value, 1));\n\t\t\t});\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 220,
                "endLine": 225,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getLocalBranches",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Returns list of local branches in repo.\n",
                    "params": [],
                    "return": "NULL => no branches",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Returns list of local branches in repo.\n\t\t * @return string[]|NULL  NULL => no branches\n\t\t * @throws GitException\n\t\t *\/"
            },
            "trait": false,
            "startLine": 220,
            "endLine": 225,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLocalBranches",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns list of local branches in repo.\n",
                "params": [],
                "return": "NULL => no branches",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Returns list of local branches in repo.\n\t\t * @return string[]|NULL  NULL => no branches\n\t\t * @throws GitException\n\t\t *\/"
        },
        "checkout": {
            "name": "checkout",
            "summary": "Checkout branch.",
            "description": "`git checkout <branch>`",
            "description_parts": [
                {
                    "type": "text",
                    "content": "`git checkout <branch>`"
                }
            ],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function checkout($name)\n\t\t{\n\t\t\tif (!is_string($name)) {\n\t\t\t\tthrow new InvalidArgumentException('Branch name must be string.');\n\t\t\t}\n\n\t\t\tif ($name === '') {\n\t\t\t\tthrow new InvalidArgumentException('Branch name cannot be empty.');\n\t\t\t}\n\n\t\t\tif ($name[0] === '-') {\n\t\t\t\tthrow new InvalidArgumentException('Branch name cannot be option name.');\n\t\t\t}\n\n\t\t\t$this->run('checkout', $name);\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "checkout",
                "summary": "Checkout branch.",
                "description": "`git checkout <branch>`",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "`git checkout <branch>`"
                    }
                ],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function checkout($name)\n\t\t{\n\t\t\tif (!is_string($name)) {\n\t\t\t\tthrow new InvalidArgumentException('Branch name must be string.');\n\t\t\t}\n\n\t\t\tif ($name === '') {\n\t\t\t\tthrow new InvalidArgumentException('Branch name cannot be empty.');\n\t\t\t}\n\n\t\t\tif ($name[0] === '-') {\n\t\t\t\tthrow new InvalidArgumentException('Branch name cannot be option name.');\n\t\t\t}\n\n\t\t\t$this->run('checkout', $name);\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 235,
                "endLine": 251,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "checkout",
                "returns": [],
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Checkout branch.\n`git checkout <branch>`\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$name"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Checkout branch.\n\t\t * `git checkout <branch>`\n\t\t * @param  string $name\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
            },
            "trait": false,
            "startLine": 235,
            "endLine": 251,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "checkout",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checkout branch.\n`git checkout <branch>`\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$name"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Checkout branch.\n\t\t * `git checkout <branch>`\n\t\t * @param  string $name\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
        },
        "removeFile": {
            "name": "removeFile",
            "summary": "Removes file(s).",
            "description": "`git rm <file>`",
            "description_parts": [
                {
                    "type": "text",
                    "content": "`git rm <file>`"
                }
            ],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function removeFile($file)\n\t\t{\n\t\t\tif (!is_array($file)) {\n\t\t\t\t$file = func_get_args();\n\t\t\t}\n\n\t\t\tforeach ($file as $item) {\n\t\t\t\t$this->run('rm', '-r', '--end-of-options', $item);\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "removeFile",
                "summary": "Removes file(s).",
                "description": "`git rm <file>`",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "`git rm <file>`"
                    }
                ],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function removeFile($file)\n\t\t{\n\t\t\tif (!is_array($file)) {\n\t\t\t\t$file = func_get_args();\n\t\t\t}\n\n\t\t\tforeach ($file as $item) {\n\t\t\t\t$this->run('rm', '-r', '--end-of-options', $item);\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 261,
                "endLine": 272,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "removeFile",
                "returns": [],
                "arguments": [
                    {
                        "name": "file",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Removes file(s).\n`git rm <file>`\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$file"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Removes file(s).\n\t\t * `git rm <file>`\n\t\t * @param  string|string[] $file\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
            },
            "trait": false,
            "startLine": 261,
            "endLine": 272,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeFile",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Removes file(s).\n`git rm <file>`\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$file"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Removes file(s).\n\t\t * `git rm <file>`\n\t\t * @param  string|string[] $file\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
        },
        "addFile": {
            "name": "addFile",
            "summary": "Adds file(s).",
            "description": "`git add <file>`",
            "description_parts": [
                {
                    "type": "text",
                    "content": "`git add <file>`"
                }
            ],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function addFile($file)\n\t\t{\n\t\t\tif (!is_array($file)) {\n\t\t\t\t$file = func_get_args();\n\t\t\t}\n\n\t\t\tforeach ($file as $item) {\n\t\t\t\tassert(is_string($item));\n\n\t\t\t\t\/\/ make sure the given item exists\n\t\t\t\t\/\/ this can be a file or an directory, git supports both\n\t\t\t\t$path = Helpers::isAbsolute($item) ? $item : ($this->getRepositoryPath() . DIRECTORY_SEPARATOR . $item);\n\n\t\t\t\tif (!file_exists($path)) {\n\t\t\t\t\tthrow new GitException(\"The path at '$item' does not represent a valid file.\");\n\t\t\t\t}\n\n\t\t\t\t$this->run('add', '--end-of-options', $item);\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "addFile",
                "summary": "Adds file(s).",
                "description": "`git add <file>`",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "`git add <file>`"
                    }
                ],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function addFile($file)\n\t\t{\n\t\t\tif (!is_array($file)) {\n\t\t\t\t$file = func_get_args();\n\t\t\t}\n\n\t\t\tforeach ($file as $item) {\n\t\t\t\tassert(is_string($item));\n\n\t\t\t\t\/\/ make sure the given item exists\n\t\t\t\t\/\/ this can be a file or an directory, git supports both\n\t\t\t\t$path = Helpers::isAbsolute($item) ? $item : ($this->getRepositoryPath() . DIRECTORY_SEPARATOR . $item);\n\n\t\t\t\tif (!file_exists($path)) {\n\t\t\t\t\tthrow new GitException(\"The path at '$item' does not represent a valid file.\");\n\t\t\t\t}\n\n\t\t\t\t$this->run('add', '--end-of-options', $item);\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 282,
                "endLine": 303,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "addFile",
                "returns": [],
                "arguments": [
                    {
                        "name": "file",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Adds file(s).\n`git add <file>`\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$file"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Adds file(s).\n\t\t * `git add <file>`\n\t\t * @param  string|string[] $file\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
            },
            "trait": false,
            "startLine": 282,
            "endLine": 303,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "addFile",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds file(s).\n`git add <file>`\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$file"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Adds file(s).\n\t\t * `git add <file>`\n\t\t * @param  string|string[] $file\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
        },
        "addAllChanges": {
            "name": "addAllChanges",
            "summary": "Adds all created, modified & removed files.",
            "description": "`git add --all`",
            "description_parts": [
                {
                    "type": "text",
                    "content": "`git add --all`"
                }
            ],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function addAllChanges()\n\t\t{\n\t\t\t$this->run('add', '--all');\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "addAllChanges",
                "summary": "Adds all created, modified & removed files.",
                "description": "`git add --all`",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "`git add --all`"
                    }
                ],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function addAllChanges()\n\t\t{\n\t\t\t$this->run('add', '--all');\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 312,
                "endLine": 316,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "addAllChanges",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Adds all created, modified & removed files.\n`git add --all`\n",
                    "params": [],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Adds all created, modified & removed files.\n\t\t * `git add --all`\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
            },
            "trait": false,
            "startLine": 312,
            "endLine": 316,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "addAllChanges",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Adds all created, modified & removed files.\n`git add --all`\n",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Adds all created, modified & removed files.\n\t\t * `git add --all`\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
        },
        "renameFile": {
            "name": "renameFile",
            "summary": "Renames file(s).",
            "description": "`git mv <file>`",
            "description_parts": [
                {
                    "type": "text",
                    "content": "`git mv <file>`"
                }
            ],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function renameFile($file, $to = NULL)\n\t\t{\n\t\t\tif (!is_array($file)) { \/\/ rename(file, to);\n\t\t\t\t$file = [\n\t\t\t\t\t$file => $to,\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tforeach ($file as $from => $to) {\n\t\t\t\t$this->run('mv', '--end-of-options', $from, $to);\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "renameFile",
                "summary": "Renames file(s).",
                "description": "`git mv <file>`",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "`git mv <file>`"
                    }
                ],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function renameFile($file, $to = NULL)\n\t\t{\n\t\t\tif (!is_array($file)) { \/\/ rename(file, to);\n\t\t\t\t$file = [\n\t\t\t\t\t$file => $to,\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tforeach ($file as $from => $to) {\n\t\t\t\t$this->run('mv', '--end-of-options', $from, $to);\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 327,
                "endLine": 340,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "renameFile",
                "returns": [],
                "arguments": [
                    {
                        "name": "file",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "from: array('from' => 'to', ...) || (from, to)"
                    },
                    {
                        "name": "to",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Renames file(s).\n`git mv <file>`\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$file",
                            "description": "from: array('from' => 'to', ...) || (from, to)"
                        },
                        {
                            "tag": "param",
                            "name": "$to"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Renames file(s).\n\t\t * `git mv <file>`\n\t\t * @param  string|string[] $file  from: array('from' => 'to', ...) || (from, to)\n\t\t * @param  string|NULL $to\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
            },
            "trait": false,
            "startLine": 327,
            "endLine": 340,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "renameFile",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "from: array('from' => 'to', ...) || (from, to)"
                },
                {
                    "name": "to",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Renames file(s).\n`git mv <file>`\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$file",
                        "description": "from: array('from' => 'to', ...) || (from, to)"
                    },
                    {
                        "tag": "param",
                        "name": "$to"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Renames file(s).\n\t\t * `git mv <file>`\n\t\t * @param  string|string[] $file  from: array('from' => 'to', ...) || (from, to)\n\t\t * @param  string|NULL $to\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
        },
        "commit": {
            "name": "commit",
            "summary": "Commits changes",
            "description": "`git commit <params> -m <message>`",
            "description_parts": [
                {
                    "type": "text",
                    "content": "`git commit <params> -m <message>`"
                }
            ],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function commit($message, $options = NULL)\n\t\t{\n\t\t\t$this->run('commit', $options, [\n\t\t\t\t'-m' => $message,\n\t\t\t]);\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "commit",
                "summary": "Commits changes",
                "description": "`git commit <params> -m <message>`",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "`git commit <params> -m <message>`"
                    }
                ],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function commit($message, $options = NULL)\n\t\t{\n\t\t\t$this->run('commit', $options, [\n\t\t\t\t'-m' => $message,\n\t\t\t]);\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 351,
                "endLine": 357,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "commit",
                "returns": [],
                "arguments": [
                    {
                        "name": "message",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "options",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Commits changes\n`git commit <params> -m <message>`\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$message"
                        },
                        {
                            "tag": "param",
                            "name": "$options"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Commits changes\n\t\t * `git commit <params> -m <message>`\n\t\t * @param  string $message\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
            },
            "trait": false,
            "startLine": 351,
            "endLine": 357,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "commit",
            "returns": [],
            "arguments": [
                {
                    "name": "message",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "options",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Commits changes\n`git commit <params> -m <message>`\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$message"
                    },
                    {
                        "tag": "param",
                        "name": "$options"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Commits changes\n\t\t * `git commit <params> -m <message>`\n\t\t * @param  string $message\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @throws GitException\n\t\t * @return static\n\t\t *\/"
        },
        "getLastCommitId": {
            "name": "getLastCommitId",
            "summary": "Returns last commit ID on current branch",
            "description": "`git log --pretty=format:\"%H\" -n 1`",
            "description_parts": [
                {
                    "type": "text",
                    "content": "`git log --pretty=format:\"%H\" -n 1`"
                }
            ],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function getLastCommitId()\n\t\t{\n\t\t\t$result = $this->run('log', '--pretty=format:%H', '-n', '1');\n\t\t\t$lastLine = $result->getOutputLastLine();\n\t\t\treturn new CommitId((string) $lastLine);\n\t\t}",
            "parent": {
                "name": "getLastCommitId",
                "summary": "Returns last commit ID on current branch",
                "description": "`git log --pretty=format:\"%H\" -n 1`",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "`git log --pretty=format:\"%H\" -n 1`"
                    }
                ],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function getLastCommitId()\n\t\t{\n\t\t\t$result = $this->run('log', '--pretty=format:%H', '-n', '1');\n\t\t\t$lastLine = $result->getOutputLastLine();\n\t\t\treturn new CommitId((string) $lastLine);\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 366,
                "endLine": 371,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getLastCommitId",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Returns last commit ID on current branch\n`git log --pretty=format:\"%H\" -n 1`\n",
                    "params": [],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Returns last commit ID on current branch\n\t\t * `git log --pretty=format:\"%H\" -n 1`\n\t\t * @return CommitId\n\t\t * @throws GitException\n\t\t *\/"
            },
            "trait": false,
            "startLine": 366,
            "endLine": 371,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLastCommitId",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns last commit ID on current branch\n`git log --pretty=format:\"%H\" -n 1`\n",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Returns last commit ID on current branch\n\t\t * `git log --pretty=format:\"%H\" -n 1`\n\t\t * @return CommitId\n\t\t * @throws GitException\n\t\t *\/"
        },
        "getLastCommit": {
            "name": "getLastCommit",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function getLastCommit()\n\t\t{\n\t\t\treturn $this->getCommit($this->getLastCommitId());\n\t\t}",
            "parent": {
                "name": "getLastCommit",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function getLastCommit()\n\t\t{\n\t\t\treturn $this->getCommit($this->getLastCommitId());\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 377,
                "endLine": 380,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getLastCommit",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n\t\t * @return Commit\n\t\t *\/"
            },
            "trait": false,
            "startLine": 377,
            "endLine": 380,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLastCommit",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n\t\t * @return Commit\n\t\t *\/"
        },
        "getCommit": {
            "name": "getCommit",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function getCommit($commitId)\n\t\t{\n\t\t\tif (!($commitId instanceof CommitId)) {\n\t\t\t\t$commitId = new CommitId($commitId);\n\t\t\t}\n\n\t\t\t\/\/ subject\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%s');\n\t\t\t$subject = rtrim($result->getOutputAsString());\n\n\t\t\t\/\/ body\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%b');\n\t\t\t$body = rtrim($result->getOutputAsString());\n\n\t\t\t\/\/ author email\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%ae');\n\t\t\t$authorEmail = rtrim($result->getOutputAsString());\n\n\t\t\t\/\/ author name\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%an');\n\t\t\t$authorName = rtrim($result->getOutputAsString());\n\n\t\t\t\/\/ author date\n\t\t\t$result = $this->run('log', '-1', $commitId, '--pretty=format:%ad', '--date=iso-strict');\n\t\t\t$authorDate = \\DateTimeImmutable::createFromFormat(\\DateTime::ATOM, (string) $result->getOutputLastLine());\n\n\t\t\tif (!($authorDate instanceof \\DateTimeImmutable)) {\n\t\t\t\tthrow new GitException('Failed fetching of commit author date.', 0, NULL, $result);\n\t\t\t}\n\n\t\t\t\/\/ committer email\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%ce');\n\t\t\t$committerEmail = rtrim($result->getOutputAsString());\n\n\t\t\t\/\/ committer name\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%cn');\n\t\t\t$committerName = rtrim($result->getOutputAsString());\n\n\t\t\t\/\/ committer date\n\t\t\t$result = $this->run('log', '-1', $commitId, '--pretty=format:%cd', '--date=iso-strict');\n\t\t\t$committerDate = \\DateTimeImmutable::createFromFormat(\\DateTime::ATOM, (string) $result->getOutputLastLine());\n\n\t\t\tif (!($committerDate instanceof \\DateTimeImmutable)) {\n\t\t\t\tthrow new GitException('Failed fetching of commit committer date.', 0, NULL, $result);\n\t\t\t}\n\n\t\t\treturn new Commit(\n\t\t\t\t$commitId,\n\t\t\t\t$subject,\n\t\t\t\t$body !== '' ? $body : NULL,\n\t\t\t\t$authorEmail,\n\t\t\t\t$authorName !== '' ? $authorName : NULL,\n\t\t\t\t$authorDate,\n\t\t\t\t$committerEmail,\n\t\t\t\t$committerName !== '' ? $committerName : NULL,\n\t\t\t\t$committerDate\n\t\t\t);\n\t\t}",
            "parent": {
                "name": "getCommit",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function getCommit($commitId)\n\t\t{\n\t\t\tif (!($commitId instanceof CommitId)) {\n\t\t\t\t$commitId = new CommitId($commitId);\n\t\t\t}\n\n\t\t\t\/\/ subject\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%s');\n\t\t\t$subject = rtrim($result->getOutputAsString());\n\n\t\t\t\/\/ body\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%b');\n\t\t\t$body = rtrim($result->getOutputAsString());\n\n\t\t\t\/\/ author email\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%ae');\n\t\t\t$authorEmail = rtrim($result->getOutputAsString());\n\n\t\t\t\/\/ author name\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%an');\n\t\t\t$authorName = rtrim($result->getOutputAsString());\n\n\t\t\t\/\/ author date\n\t\t\t$result = $this->run('log', '-1', $commitId, '--pretty=format:%ad', '--date=iso-strict');\n\t\t\t$authorDate = \\DateTimeImmutable::createFromFormat(\\DateTime::ATOM, (string) $result->getOutputLastLine());\n\n\t\t\tif (!($authorDate instanceof \\DateTimeImmutable)) {\n\t\t\t\tthrow new GitException('Failed fetching of commit author date.', 0, NULL, $result);\n\t\t\t}\n\n\t\t\t\/\/ committer email\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%ce');\n\t\t\t$committerEmail = rtrim($result->getOutputAsString());\n\n\t\t\t\/\/ committer name\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%cn');\n\t\t\t$committerName = rtrim($result->getOutputAsString());\n\n\t\t\t\/\/ committer date\n\t\t\t$result = $this->run('log', '-1', $commitId, '--pretty=format:%cd', '--date=iso-strict');\n\t\t\t$committerDate = \\DateTimeImmutable::createFromFormat(\\DateTime::ATOM, (string) $result->getOutputLastLine());\n\n\t\t\tif (!($committerDate instanceof \\DateTimeImmutable)) {\n\t\t\t\tthrow new GitException('Failed fetching of commit committer date.', 0, NULL, $result);\n\t\t\t}\n\n\t\t\treturn new Commit(\n\t\t\t\t$commitId,\n\t\t\t\t$subject,\n\t\t\t\t$body !== '' ? $body : NULL,\n\t\t\t\t$authorEmail,\n\t\t\t\t$authorName !== '' ? $authorName : NULL,\n\t\t\t\t$authorDate,\n\t\t\t\t$committerEmail,\n\t\t\t\t$committerName !== '' ? $committerName : NULL,\n\t\t\t\t$committerDate\n\t\t\t);\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 387,
                "endLine": 444,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getCommit",
                "returns": [],
                "arguments": [
                    {
                        "name": "commitId",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "d"
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$commit",
                            "description": "d"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n\t\t * @param  string|CommitId $commitId\n\t\t * @return Commit\n\t\t *\/"
            },
            "trait": false,
            "startLine": 387,
            "endLine": 444,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getCommit",
            "returns": [],
            "arguments": [
                {
                    "name": "commitId",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "d"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "name": "$commit",
                        "description": "d"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n\t\t * @param  string|CommitId $commitId\n\t\t * @return Commit\n\t\t *\/"
        },
        "hasChanges": {
            "name": "hasChanges",
            "summary": "Exists changes?",
            "description": "`git status` + magic",
            "description_parts": [
                {
                    "type": "text",
                    "content": "`git status` + magic"
                }
            ],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function hasChanges()\n\t\t{\n\t\t\t\/\/ Make sure the `git status` gets a refreshed look at the working tree.\n\t\t\t$this->run('update-index', '-q', '--refresh');\n\t\t\t$result = $this->run('status', '--porcelain');\n\t\t\treturn $result->hasOutput();\n\t\t}",
            "parent": {
                "name": "hasChanges",
                "summary": "Exists changes?",
                "description": "`git status` + magic",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "`git status` + magic"
                    }
                ],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function hasChanges()\n\t\t{\n\t\t\t\/\/ Make sure the `git status` gets a refreshed look at the working tree.\n\t\t\t$this->run('update-index', '-q', '--refresh');\n\t\t\t$result = $this->run('status', '--porcelain');\n\t\t\treturn $result->hasOutput();\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 453,
                "endLine": 459,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "hasChanges",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Exists changes?\n`git status` + magic\n",
                    "params": [],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Exists changes?\n\t\t * `git status` + magic\n\t\t * @return bool\n\t\t * @throws GitException\n\t\t *\/"
            },
            "trait": false,
            "startLine": 453,
            "endLine": 459,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "hasChanges",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Exists changes?\n`git status` + magic\n",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Exists changes?\n\t\t * `git status` + magic\n\t\t * @return bool\n\t\t * @throws GitException\n\t\t *\/"
        },
        "pull": {
            "name": "pull",
            "summary": "Pull changes from a remote",
            "description": "",
            "description_parts": [],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function pull($remote = NULL, array $options = NULL)\n\t\t{\n\t\t\t$this->run('pull', $options, '--end-of-options', $remote);\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "pull",
                "summary": "Pull changes from a remote",
                "description": "",
                "description_parts": [],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function pull($remote = NULL, array $options = NULL)\n\t\t{\n\t\t\t$this->run('pull', $options, '--end-of-options', $remote);\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 469,
                "endLine": 473,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 0,
                "shortName": "pull",
                "returns": [],
                "arguments": [
                    {
                        "name": "remote",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "options",
                        "position": 1,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Pull changes from a remote\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$remote"
                        },
                        {
                            "tag": "param",
                            "name": "$options"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Pull changes from a remote\n\t\t * @param  string|string[]|NULL $remote\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @return static\n\t\t * @throws GitException\n\t\t *\/"
            },
            "trait": false,
            "startLine": 469,
            "endLine": 473,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "pull",
            "returns": [],
            "arguments": [
                {
                    "name": "remote",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "options",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Pull changes from a remote\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$remote"
                    },
                    {
                        "tag": "param",
                        "name": "$options"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Pull changes from a remote\n\t\t * @param  string|string[]|NULL $remote\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @return static\n\t\t * @throws GitException\n\t\t *\/"
        },
        "push": {
            "name": "push",
            "summary": "Push changes to a remote",
            "description": "",
            "description_parts": [],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function push($remote = NULL, array $options = NULL)\n\t\t{\n\t\t\t$this->run('push', $options, '--end-of-options', $remote);\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "push",
                "summary": "Push changes to a remote",
                "description": "",
                "description_parts": [],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function push($remote = NULL, array $options = NULL)\n\t\t{\n\t\t\t$this->run('push', $options, '--end-of-options', $remote);\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 483,
                "endLine": 487,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 0,
                "shortName": "push",
                "returns": [],
                "arguments": [
                    {
                        "name": "remote",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "options",
                        "position": 1,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Push changes to a remote\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$remote"
                        },
                        {
                            "tag": "param",
                            "name": "$options"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Push changes to a remote\n\t\t * @param  string|string[]|NULL $remote\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @return static\n\t\t * @throws GitException\n\t\t *\/"
            },
            "trait": false,
            "startLine": 483,
            "endLine": 487,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "push",
            "returns": [],
            "arguments": [
                {
                    "name": "remote",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "options",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Push changes to a remote\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$remote"
                    },
                    {
                        "tag": "param",
                        "name": "$options"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Push changes to a remote\n\t\t * @param  string|string[]|NULL $remote\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @return static\n\t\t * @throws GitException\n\t\t *\/"
        },
        "fetch": {
            "name": "fetch",
            "summary": "Run fetch command to get latest branches",
            "description": "",
            "description_parts": [],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function fetch($remote = NULL, array $options = NULL)\n\t\t{\n\t\t\t$this->run('fetch', $options, '--end-of-options', $remote);\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "fetch",
                "summary": "Run fetch command to get latest branches",
                "description": "",
                "description_parts": [],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function fetch($remote = NULL, array $options = NULL)\n\t\t{\n\t\t\t$this->run('fetch', $options, '--end-of-options', $remote);\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 497,
                "endLine": 501,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 0,
                "shortName": "fetch",
                "returns": [],
                "arguments": [
                    {
                        "name": "remote",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "options",
                        "position": 1,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Run fetch command to get latest branches\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$remote"
                        },
                        {
                            "tag": "param",
                            "name": "$options"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Run fetch command to get latest branches\n\t\t * @param  string|string[]|NULL $remote\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @return static\n\t\t * @throws GitException\n\t\t *\/"
            },
            "trait": false,
            "startLine": 497,
            "endLine": 501,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "fetch",
            "returns": [],
            "arguments": [
                {
                    "name": "remote",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "options",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Run fetch command to get latest branches\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$remote"
                    },
                    {
                        "tag": "param",
                        "name": "$options"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Run fetch command to get latest branches\n\t\t * @param  string|string[]|NULL $remote\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @return static\n\t\t * @throws GitException\n\t\t *\/"
        },
        "addRemote": {
            "name": "addRemote",
            "summary": "Adds new remote repository",
            "description": "",
            "description_parts": [],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function addRemote($name, $url, array $options = NULL)\n\t\t{\n\t\t\t$this->run('remote', 'add', $options, '--end-of-options', $name, $url);\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "addRemote",
                "summary": "Adds new remote repository",
                "description": "",
                "description_parts": [],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function addRemote($name, $url, array $options = NULL)\n\t\t{\n\t\t\t$this->run('remote', 'add', $options, '--end-of-options', $name, $url);\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 512,
                "endLine": 516,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 2,
                "shortName": "addRemote",
                "returns": [],
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "url",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "options",
                        "position": 2,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Adds new remote repository\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$name"
                        },
                        {
                            "tag": "param",
                            "name": "$url"
                        },
                        {
                            "tag": "param",
                            "name": "$options"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Adds new remote repository\n\t\t * @param  string $name\n\t\t * @param  string $url\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @return static\n\t\t * @throws GitException\n\t\t *\/"
            },
            "trait": false,
            "startLine": 512,
            "endLine": 516,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "addRemote",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "url",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "options",
                    "position": 2,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds new remote repository\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$name"
                    },
                    {
                        "tag": "param",
                        "name": "$url"
                    },
                    {
                        "tag": "param",
                        "name": "$options"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Adds new remote repository\n\t\t * @param  string $name\n\t\t * @param  string $url\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @return static\n\t\t * @throws GitException\n\t\t *\/"
        },
        "renameRemote": {
            "name": "renameRemote",
            "summary": "Renames remote repository",
            "description": "",
            "description_parts": [],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function renameRemote($oldName, $newName)\n\t\t{\n\t\t\t$this->run('remote', 'rename', '--end-of-options', $oldName, $newName);\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "renameRemote",
                "summary": "Renames remote repository",
                "description": "",
                "description_parts": [],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function renameRemote($oldName, $newName)\n\t\t{\n\t\t\t$this->run('remote', 'rename', '--end-of-options', $oldName, $newName);\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 526,
                "endLine": 530,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "renameRemote",
                "returns": [],
                "arguments": [
                    {
                        "name": "oldName",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "ame"
                    },
                    {
                        "name": "newName",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "ame"
                    }
                ],
                "doc": {
                    "description": "Renames remote repository\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$old",
                            "description": "ame"
                        },
                        {
                            "tag": "param",
                            "name": "$new",
                            "description": "ame"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Renames remote repository\n\t\t * @param  string $oldName\n\t\t * @param  string $newName\n\t\t * @return static\n\t\t * @throws GitException\n\t\t *\/"
            },
            "trait": false,
            "startLine": 526,
            "endLine": 530,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "renameRemote",
            "returns": [],
            "arguments": [
                {
                    "name": "oldName",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame"
                },
                {
                    "name": "newName",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame"
                }
            ],
            "doc": {
                "description": "Renames remote repository\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$old",
                        "description": "ame"
                    },
                    {
                        "tag": "param",
                        "name": "$new",
                        "description": "ame"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Renames remote repository\n\t\t * @param  string $oldName\n\t\t * @param  string $newName\n\t\t * @return static\n\t\t * @throws GitException\n\t\t *\/"
        },
        "removeRemote": {
            "name": "removeRemote",
            "summary": "Removes remote repository",
            "description": "",
            "description_parts": [],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function removeRemote($name)\n\t\t{\n\t\t\t$this->run('remote', 'remove', '--end-of-options', $name);\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "removeRemote",
                "summary": "Removes remote repository",
                "description": "",
                "description_parts": [],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function removeRemote($name)\n\t\t{\n\t\t\t$this->run('remote', 'remove', '--end-of-options', $name);\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 539,
                "endLine": 543,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "removeRemote",
                "returns": [],
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Removes remote repository\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$name"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Removes remote repository\n\t\t * @param  string $name\n\t\t * @return static\n\t\t * @throws GitException\n\t\t *\/"
            },
            "trait": false,
            "startLine": 539,
            "endLine": 543,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeRemote",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Removes remote repository\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$name"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Removes remote repository\n\t\t * @param  string $name\n\t\t * @return static\n\t\t * @throws GitException\n\t\t *\/"
        },
        "setRemoteUrl": {
            "name": "setRemoteUrl",
            "summary": "Changes remote repository URL",
            "description": "",
            "description_parts": [],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function setRemoteUrl($name, $url, array $options = NULL)\n\t\t{\n\t\t\t$this->run('remote', 'set-url', $options, '--end-of-options', $name, $url);\n\t\t\treturn $this;\n\t\t}",
            "parent": {
                "name": "setRemoteUrl",
                "summary": "Changes remote repository URL",
                "description": "",
                "description_parts": [],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function setRemoteUrl($name, $url, array $options = NULL)\n\t\t{\n\t\t\t$this->run('remote', 'set-url', $options, '--end-of-options', $name, $url);\n\t\t\treturn $this;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 554,
                "endLine": 558,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 2,
                "shortName": "setRemoteUrl",
                "returns": [],
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "url",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "options",
                        "position": 2,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Changes remote repository URL\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$name"
                        },
                        {
                            "tag": "param",
                            "name": "$url"
                        },
                        {
                            "tag": "param",
                            "name": "$options"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Changes remote repository URL\n\t\t * @param  string $name\n\t\t * @param  string $url\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @return static\n\t\t * @throws GitException\n\t\t *\/"
            },
            "trait": false,
            "startLine": 554,
            "endLine": 558,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "setRemoteUrl",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "url",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "options",
                    "position": 2,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Changes remote repository URL\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$name"
                    },
                    {
                        "tag": "param",
                        "name": "$url"
                    },
                    {
                        "tag": "param",
                        "name": "$options"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Changes remote repository URL\n\t\t * @param  string $name\n\t\t * @param  string $url\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @return static\n\t\t * @throws GitException\n\t\t *\/"
        },
        "execute": {
            "name": "execute",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function execute(...$cmd)\n\t\t{\n\t\t\t$result = $this->run(...$cmd);\n\t\t\treturn $result->getOutput();\n\t\t}",
            "parent": {
                "name": "execute",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function execute(...$cmd)\n\t\t{\n\t\t\t$result = $this->run(...$cmd);\n\t\t\treturn $result->getOutput();\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 566,
                "endLine": 570,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": true,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "shortName": "execute",
                "returns": [],
                "arguments": [
                    {
                        "name": "cmd",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": true,
                        "reference": false,
                        "required": false,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$cmd"
                        }
                    ],
                    "return": "returns output",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * @param  mixed ...$cmd\n\t\t * @return string[]  returns output\n\t\t * @throws GitException\n\t\t *\/"
            },
            "trait": false,
            "startLine": 566,
            "endLine": 570,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "execute",
            "returns": [],
            "arguments": [
                {
                    "name": "cmd",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "name": "$cmd"
                    }
                ],
                "return": "returns output",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * @param  mixed ...$cmd\n\t\t * @return string[]  returns output\n\t\t * @throws GitException\n\t\t *\/"
        },
        "run": {
            "name": "run",
            "summary": "Runs command and returns result.",
            "description": "",
            "description_parts": [],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\t\tpublic function run(...$args)\n\t\t{\n\t\t\t$result = $this->runner->run($this->repository, $args);\n\n\t\t\tif (!$result->isOk()) {\n\t\t\t\tthrow new GitException(\"Command '{$result->getCommand()}' failed (exit-code {$result->getExitCode()}).\", $result->getExitCode(), NULL, $result);\n\t\t\t}\n\n\t\t\treturn $result;\n\t\t}",
            "parent": {
                "name": "run",
                "summary": "Runs command and returns result.",
                "description": "",
                "description_parts": [],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "\t\tpublic function run(...$args)\n\t\t{\n\t\t\t$result = $this->runner->run($this->repository, $args);\n\n\t\t\tif (!$result->isOk()) {\n\t\t\t\tthrow new GitException(\"Command '{$result->getCommand()}' failed (exit-code {$result->getExitCode()}).\", $result->getExitCode(), NULL, $result);\n\t\t\t}\n\n\t\t\treturn $result;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 579,
                "endLine": 588,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": true,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "shortName": "run",
                "returns": [],
                "arguments": [
                    {
                        "name": "args",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": true,
                        "reference": false,
                        "required": false,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Runs command and returns result.\n",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$args"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * Runs command and returns result.\n\t\t * @param  mixed ...$args\n\t\t * @return RunnerResult\n\t\t * @throws GitException\n\t\t *\/"
            },
            "trait": false,
            "startLine": 579,
            "endLine": 588,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "run",
            "returns": [],
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Runs command and returns result.\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$args"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * Runs command and returns result.\n\t\t * @param  mixed ...$args\n\t\t * @return RunnerResult\n\t\t * @throws GitException\n\t\t *\/"
        },
        "extractFromCommand": {
            "name": "extractFromCommand",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "CzProject\\GitPhp\\GitRepository",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "\t\tprotected function extractFromCommand(array $args, callable $filter = NULL)\n\t\t{\n\t\t\t$result = $this->run(...$args);\n\t\t\t$output = $result->getOutput();\n\n\t\t\tif ($filter !== NULL) {\n\t\t\t\t$newArray = [];\n\n\t\t\t\tforeach ($output as $line) {\n\t\t\t\t\t$value = $filter($line);\n\n\t\t\t\t\tif ($value === FALSE) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$newArray[] = (string) $value;\n\t\t\t\t}\n\n\t\t\t\t$output = $newArray;\n\t\t\t}\n\n\t\t\tif (empty($output)) {\n\t\t\t\treturn NULL;\n\t\t\t}\n\n\t\t\treturn $output;\n\t\t}",
            "parent": {
                "name": "extractFromCommand",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "CzProject\\GitPhp\\GitRepository",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/czproject\/git-php\/src\/GitRepository.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "\t\tprotected function extractFromCommand(array $args, callable $filter = NULL)\n\t\t{\n\t\t\t$result = $this->run(...$args);\n\t\t\t$output = $result->getOutput();\n\n\t\t\tif ($filter !== NULL) {\n\t\t\t\t$newArray = [];\n\n\t\t\t\tforeach ($output as $line) {\n\t\t\t\t\t$value = $filter($line);\n\n\t\t\t\t\tif ($value === FALSE) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$newArray[] = (string) $value;\n\t\t\t\t}\n\n\t\t\t\t$output = $newArray;\n\t\t\t}\n\n\t\t\tif (empty($output)) {\n\t\t\t\treturn NULL;\n\t\t\t}\n\n\t\t\treturn $output;\n\t\t}",
                "parent": false,
                "trait": false,
                "startLine": 596,
                "endLine": 622,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "extractFromCommand",
                "returns": [],
                "arguments": [
                    {
                        "name": "args",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "filter",
                        "position": 1,
                        "type": "null|callable",
                        "type_arr": [
                            "null",
                            "callable"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "name": "$args"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "GitException"
                    }
                },
                "comments": "  \/**\n\t\t * @param  array<mixed> $args\n\t\t * @return string[]|NULL\n\t\t * @throws GitException\n\t\t *\/"
            },
            "trait": false,
            "startLine": 596,
            "endLine": 622,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "extractFromCommand",
            "returns": [],
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "null|callable",
                    "type_arr": [
                        "null",
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "name": "$args"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "GitException"
                }
            },
            "comments": "  \/**\n\t\t * @param  array<mixed> $args\n\t\t * @return string[]|NULL\n\t\t * @throws GitException\n\t\t *\/"
        }
    },
    "properties": {
        "repository": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "CzProject\\GitPhp\\GitRepository"
            },
            "declaring_trait": "CzProject\\GitPhp\\GitRepository",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var  string",
                "tags": []
            },
            "parent": {
                "name": "repository",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "CzProject\\GitPhp\\GitRepository"
                },
                "declaring_trait": "CzProject\\GitPhp\\GitRepository",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "@var  string",
                    "tags": []
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "runner": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "CzProject\\GitPhp\\GitRepository"
            },
            "declaring_trait": "CzProject\\GitPhp\\GitRepository",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var IRunner",
                "tags": []
            },
            "parent": {
                "name": "runner",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "CzProject\\GitPhp\\GitRepository"
                },
                "declaring_trait": "CzProject\\GitPhp\\GitRepository",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "@var IRunner",
                    "tags": []
                },
                "parent": false,
                "value": null
            },
            "value": null
        }
    },
    "staticProperties": [],
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "bbn\\X": "X",
        "CzProject\\GitPhp\\Git": "GitCz",
        "CzProject\\GitPhp\\GitRepository": "GitRepoCz"
    },
    "dummyComments": [
        "\/**\n * Class RepositoryGit\n *\n *\n *\/"
    ],
    "summary": "",
    "description": "",
    "description_parts": []
}