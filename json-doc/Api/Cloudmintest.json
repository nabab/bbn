{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Api\\Cloudmintest",
    "namespace": true,
    "realName": "Cloudmintest",
    "realNamespace": "bbn\\Api",
    "traits": [],
    "interfaces": [],
    "fileName": "\/Api\/Cloudmintest.php",
    "startLine": 13,
    "endLine": 361,
    "numMethods": 12,
    "numProperties": 10,
    "numConstants": 1,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "user": null,
        "pass": null,
        "hostname": null,
        "mode": "cloudmin",
        "checked": false,
        "commands": false,
        "cacher": null,
        "last_action": false,
        "error": false,
        "message": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Api",
    "shortName": "Cloudmintest",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "virtualmin constructor.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Cloudmintest",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Cloudmintest.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(array $cfg){\n    if ( isset($cfg['user'], $cfg['pass']) ){\n      $this->user = $cfg['user'];\n      $this->pass = $cfg['pass'];\n      \/\/  TODO ho rimpiazzato\n      \/\/$this->mode = $cfg['mode'] === 'cloudmin' ? 'cloudmin' : 'virtualmin';\n      $this->mode = $mode;\n      $this->hostname = isset($cfg['host']) ? $cfg['host'] : 'localhost';\n      $this->checked = true;\n      \/\/ TODO tolto la cache  e this->commands = $this->fetch_commands\n\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 43,
            "endLine": 55,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "virtualmin constructor.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * virtualmin constructor.\n   * @param array $cfg\n   *\/"
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Cloudmintest",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Cloudmintest.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __call($name, $arguments){\n    if ( $this->checked ){\n      $cmd_name = str_replace('-', '_', $name);\n\n\n      \/\/ TODO ho tolto il controllo $this->commands[$cmd_name]\n      \/\/ if ( isset($this->commands[$cmd_name]) ){\n\n      \/\/Setting the last action performed\n      $this->last_action = $cmd_name;\n      \/\/Defining  the $url_part and the command to be executed\n      $url_part = $cmd_name;\n\n      if ( !empty($arguments[0]) ){\n        \/\/Prepping, processing and validating the create user parameters\n        $args = $this->processParameters($arguments[0]);\n\n        \/\/ TODO tolto i comandi, messo gli argomenti\n        foreach ( $args as $k => $v ){\n          if ( !empty($v['mandatory']) && !isset($args[$k]) ){\n            if ( (strpos($k, 'pass') === false) &&\n              (!isset($args['pass']) && !isset($args['encpass']) && !isset($args['passfile']))\n            ){\n              var_dump(\"Parameter $k mandatory for $name!\");\n              return false;\n            }\n          }\n          \/\/ TODO controlllo se questi valori sono boolean e se no  a true\n          if ( isset($v) ){\n            if ( is_bool($v['binary']) &&\n              ($v['binary'] == true)\n            ){\n              $url_part .= \"&$k\";\n            }\n            else if ( \\is_array($v) &&\n              is_bool($v['multiple']) &&\n              ($v['multiple'] == true)\n            ){\n              foreach ( $v as $w ){\n                $url_part .= \"&$k=$w\";\n              }\n            }\n            else{\n              $url_part .= \"&$k=\".$args[$k];\n            }\n          }\n        }\n        \/\/ }\n        \/\/Concatenating the closing single quote\n        $url_part .= \"'\";\n        \/\/Concatenating the header url and $url_part to create the full url to be executed\n        $url_part = $this->getHeaderUrl() . $url_part;\n        \/\/Calling shell_exec and returning the result array\n        return $this->callShellExec($url_part);\n      }\n      \/\/ We force even if we don't have the command in the list\n      else if ( !empty($arguments[1]) ){\n        $args = $this->processParameters($arguments[0]);\n        $url_part = $cmd_name;\n        foreach ( $args as $k => $v ){\n          if ( \\is_array($v) ){\n            foreach ( $v as $w ){\n              $url_part .= \"&$k=$w\";\n            }\n          }\n          else if ( $v === 1 ){\n            $url_part .= \"&$k\";\n          }\n          else{\n            $url_part .= \"&$k=$v\";\n          }\n        }\n        \/\/Concatenating the closing single quote\n        $url_part .= \"'\";\n        \/\/Concatenating the header url and $url_part to create the full url to be executed\n        $url_part = $this->getHeaderUrl() . $url_part;\n        \\bbn\\X::log($url_part, 'webmin');\n        \/\/Calling shell_exec and returning the result array\n        return $this->callShellExec($url_part);\n      }\n      else{\n        die(\"The command $name doesn't exist...\");\n      }\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 62,
            "endLine": 147,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "__call",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$name"
                    },
                    {
                        "tag": "param",
                        "type": "$arguments"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $name\n   * @param $arguments\n   * @return array|bool\n   *\/"
        },
        "fetchCommands": {
            "name": "fetchCommands",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Cloudmintest",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Cloudmintest.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function fetchCommands(){\n    if ( $this->checked ){\n      $raw_commands = $this->listCommands();\n      $commands = [];\n      foreach ( $raw_commands as $com ){\n        if ( $cmd = $this->getCommand($com['name']) ){\n          array_shift($cmd)['value'];\n          $args = [];\n          foreach ( $cmd as $cm ){\n            $args[$cm['name']] = [\n              'desc' => !empty($cm['values']['value']) ? $cm['values']['value'][0] : '',\n              'binary' => $cm['values']['binary'][0] === 'No' ? false : true,\n              'multiple' => $cm['values']['repeats'][0] === 'No' ? false : true,\n              'mandatory' => $cm['values']['optional'][0] === 'No' ? true : false,\n            ];\n          }\n          ksort($args);\n          $cm = [\n            'cat' => $com['values']['category'][0],\n            'desc' => $com['values']['description'][0],\n            'args' => $args,\n            'cmd' => $cmd\n          ];\n          $commands[$com['name']] = $cm;\n        }\n      }\n      ksort($commands);\n      $this->cacher->set(self::cache_name, $commands);\n      return $commands;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 152,
            "endLine": 182,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "fetchCommands",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return array\n   *\/"
        },
        "sanitize": {
            "name": "sanitize",
            "summary": "This function is used to sanitize the strings which are given as parameters",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Cloudmintest",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Cloudmintest.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function sanitize($st){\n    $st = trim((string)$st);\n    if ( strpos($st, ';') !== false ){\n      return '';\n    }\n    if ( strpos($st, '<') !== false ){\n      return '';\n    }\n    if ( strpos($st, '\"') !== false ){\n      return '';\n    }\n    if ( strpos($st, \"'\") !== false ){\n      return '';\n    }\n    return $st;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 189,
            "endLine": 204,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "sanitize",
            "returns": [],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This function is used to sanitize the strings which are given as parameters\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st"
                    }
                ],
                "return": "The the header url part to be executed"
            },
            "comments": "  \/**\n   * This function is used to sanitize the strings which are given as parameters\n   * @param string $st\n   * @return string The the header url part to be executed\n   *\/"
        },
        "getHeaderUrl": {
            "name": "getHeaderUrl",
            "summary": "This function is used to get the header url part to be executed",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Cloudmintest",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Cloudmintest.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function getHeaderUrl(){\n    return \"wget -O - --quiet --http-user=\" . $this->user . \" --http-passwd=\" . escapeshellarg($this->pass) . \" --no-check-certificate 'https:\/\/\" . $this->hostname . \":10000\/server-manager\/remote.cgi?json=1&multiline=&program=\";\n  }",
            "parent": false,
            "trait": false,
            "startLine": 219,
            "endLine": 221,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getHeaderUrl",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "This function is used to get the header url part to be executed\n",
                "params": [],
                "return": "The the header url part to be executed"
            },
            "comments": "  \/**\n   * This function is used to get the header url part to be executed\n   * @return string The the header url part to be executed\n   *\/"
        },
        "callShellExec": {
            "name": "callShellExec",
            "summary": "Executes the $request using shell_exec",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Cloudmintest",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Cloudmintest.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function callShellExec($request){\n    \/\/Executing the shell_exec\n    \/\/die(var_dump($this->mode, $request));\n    if ( $result = shell_exec($request) ){\n      \/\/Decoding the json result into an array\n      $result_array = json_decode($result, TRUE);\n      if ( isset($result_array['error']) ){\n        $this->error = $result_array['error'];\n      }\n      if ($result_array['status'] === 'success' ){\n        if (isset($result_array['data'])){\n          if ( isset($result_array['data'][0], $result_array['data'][0]['name']) &&\n            ($result_array['data'][0]['name'] === 'Warning') ){\n            $result_array['data'] = \\array_slice($result_array['data'], 1);\n          }\n          return $result_array['data'];\n        }\n        else if (isset($result_array['output'])){\n          return $result_array['output'];\n        }\n      }\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 228,
            "endLine": 251,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "callShellExec",
            "returns": [],
            "arguments": [
                {
                    "name": "request",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "the command to be excecuted"
                }
            ],
            "doc": {
                "description": "Executes the $request using shell_exec\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$request",
                        "description": "the command to be excecuted"
                    }
                ],
                "return": "an array with the execution status and message"
            },
            "comments": "  \/**\n   * Executes the $request using shell_exec\n   * @param string $request the command to be excecuted\n   * @return array an array with the execution status and message\n   *\/"
        },
        "processParameters": {
            "name": "processParameters",
            "summary": "Sanitize each parameter",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Cloudmintest",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Cloudmintest.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function processParameters($param){\n    foreach ($param as $key => $val){\n      \/\/$val is an array\n      if (\\is_array($val)){\n        $param[$key] = $this->processParameters($val);\n      }\n      else {\n        $param[$key] = $this->sanitize($val);\n      }\n    }\n    \/\/Return the processed parameters\n    return $param;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 258,
            "endLine": 270,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "processParameters",
            "returns": [],
            "arguments": [
                {
                    "name": "param",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "the raw parameters"
                }
            ],
            "doc": {
                "description": "Sanitize each parameter\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$param",
                        "description": "the raw parameters"
                    }
                ],
                "return": "the processed parameters"
            },
            "comments": "  \/**\n   * Sanitize each parameter\n   * @param array $param the raw parameters\n   * @return array the processed parameters\n   *\/"
        },
        "getArgs": {
            "name": "getArgs",
            "summary": "Returns the arguments description of a given command",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Cloudmintest",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Cloudmintest.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getArgs($name){\n    if ( $this->checked ){\n      $cmd_name = str_replace('_', '-', $name);\n      return isset($this->commands[$cmd_name], $this->commands[$cmd_name]['args']) ? $this->commands[$cmd_name]['args'] : [];\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 277,
            "endLine": 282,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getArgs",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The command name"
                }
            ],
            "doc": {
                "description": "Returns the arguments description of a given command\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$name",
                        "description": "The command name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the arguments description of a given command\n   * @param $name The command name\n   * @return array\n   *\/"
        },
        "getCommands": {
            "name": "getCommands",
            "summary": "Returns an array containing all the commands and their parameters",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Cloudmintest",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Cloudmintest.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCommands(){\n    if ( $this->checked ){\n      return $this->commands;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 288,
            "endLine": 292,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCommands",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns an array containing all the commands and their parameters\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array containing all the commands and their parameters\n   * @return array\n   *\/"
        },
        "listCommands": {
            "name": "listCommands",
            "summary": "Gets all the commands directly from the API",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Cloudmintest",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Cloudmintest.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function listCommands($param = []){\n    \/\/Prepping, processing and validating the create user parameters\n    $param = $this->processParameters($param);\n    \/\/Setting the last action performed\n    $this->last_action = \"list-commands\";\n\n    \/\/Defining  the $url_part and the command to be executed\n    $url_part = \"list-commands\";\n    if (isset($param['short'])){\/\/short parameter is set\n      $url_part .= \"&short\";\n    }\n\n    if (isset($param['nameonly'])){\/\/nameonly parameter is set\n      $url_part .= \"&nameonly\";\n    }\n    \/\/Concatenating the closing single quote\n    $url_part .=\"'\";\n    \/\/Concatenating the header url and $url_part to create the full url to be executed\n    $url_part = $this->getHeaderUrl() . $url_part;\n    \/\/Calling shell_exec and returning the result array\n    return $this->callShellExec($url_part);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 300,
            "endLine": 321,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "listCommands",
            "returns": [],
            "arguments": [
                {
                    "name": "param",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets all the commands directly from the API\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$param"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets all the commands directly from the API\n   * @param array $param\n   * @return array\n   *\/"
        },
        "getCommand": {
            "name": "getCommand",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Cloudmintest",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Cloudmintest.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCommand($command){\n    $command = str_replace('_', '-', $command);\n    \/\/Setting the last action performed\n    $this->last_action = \"get-command\";\n\n    \/\/Defining  the $url_part and the command to be executed\n    $url_part = \"get-command&command=\".$this->sanitize($command);\n    \/\/Concatenating the closing single quote\n    $url_part .=\"'\";\n    \/\/Concatenating the header url and $url_part to create the full url to be executed\n    $url_part = $this->getHeaderUrl() . $url_part;\n      \n    \/\/Calling shell_exec and returning the result array\n    return $this->callShellExec($url_part);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 327,
            "endLine": 341,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getCommand",
            "returns": [],
            "arguments": [
                {
                    "name": "command",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$command"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $command\n   * @return array\n   *\/"
        },
        "generate": {
            "name": "generate",
            "summary": "Returns a string of PHP code for executing a given command with all its possible parameters pre-populated",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Api\\Cloudmintest",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Api\/Cloudmintest.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function generate($command){\n    $perl_cmd = str_replace('_', '-', $command);\n    if ( isset($this->commands[$perl_cmd]) ){\n      $cmd = $this->commands[$perl_cmd];\n      $st = '$vm->'.$command.'(['.PHP_EOL;\n      foreach ( $cmd['args'] as $k => $v ){\n        $st .= \"'$k' => \".($v['binary'] ? '0' : \"''\").PHP_EOL;\n      }\n      $st .= ']);';\n      return $st;\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 348,
            "endLine": 360,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "generate",
            "returns": [],
            "arguments": [
                {
                    "name": "command",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a string of PHP code for executing a given command with all its possible parameters pre-populated\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$command"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a string of PHP code for executing a given command with all its possible parameters pre-populated\n   * @param $command\n   * @return bool|string\n   *\/"
        }
    },
    "properties": {
        "user": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Api\\Cloudmintest"
            },
            "declaring_trait": "bbn\\Api\\Cloudmintest",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var  Cloudmin username",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "pass": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Api\\Cloudmintest"
            },
            "declaring_trait": "bbn\\Api\\Cloudmintest",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var  Cloudmin password",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "hostname": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Api\\Cloudmintest"
            },
            "declaring_trait": "bbn\\Api\\Cloudmintest",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var  Cloudmin hostname",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "mode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Api\\Cloudmintest"
            },
            "declaring_trait": "bbn\\Api\\Cloudmintest",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string mode",
                "tags": []
            },
            "parent": false,
            "value": "cloudmin"
        },
        "checked": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Api\\Cloudmintest"
            },
            "declaring_trait": "bbn\\Api\\Cloudmintest",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var  Check instance existence",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "commands": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Api\\Cloudmintest"
            },
            "declaring_trait": "bbn\\Api\\Cloudmintest",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var  Array of all commands",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "cacher": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Api\\Cloudmintest"
            },
            "declaring_trait": "bbn\\Api\\Cloudmintest",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var cache",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "last_action": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Api\\Cloudmintest"
            },
            "declaring_trait": "bbn\\Api\\Cloudmintest",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": false,
            "value": false
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Api\\Cloudmintest"
            },
            "declaring_trait": "bbn\\Api\\Cloudmintest",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": false,
            "value": false
        },
        "message": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Api\\Cloudmintest"
            },
            "declaring_trait": "bbn\\Api\\Cloudmintest",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": false,
            "value": null
        }
    },
    "staticProperties": [],
    "constants": {
        "cache_name": {
            "name": "cache_name",
            "value": "bbn\/api\/cloudmintest",
            "class": "bbn\\Api\\Cloudmintest",
            "parent": false,
            "private": false,
            "protected": false,
            "public": true,
            "final": false,
            "doc": {
                "description": "",
                "tags": []
            }
        }
    },
    "uses": {
        "bbn": "bbn"
    },
    "dummyComments": [
        "\/**\n * Class virtualmin\n * @package appi  \n *\n * @author Edwin Mugendi <edwinmugendi@gmail.com>\n * @author Thomas Nabet <thomas.nabet@gmail.com>\n *\n *\/"
    ],
    "summary": "",
    "description": "",
    "description_parts": []
}