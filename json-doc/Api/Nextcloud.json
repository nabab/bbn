{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Api\\Nextcloud",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/Api\/Nextcloud.php",
    "startLine": 7,
    "endLine": 479,
    "numMethods": 26,
    "numProperties": 0,
    "numConstants": 1,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Basic",
    "isSubclassOf": false,
    "defaultProperties": {
        "obj": null,
        "path": null,
        "errors": [],
        "error": false,
        "debug": false,
        "log": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Api",
    "shortName": "Nextcloud",
    "contentConstructor": {
        "file": "bbn\\Api\\Nextcloud",
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Instantiate the class Nextcloud by connecting the given user to the given url",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Api\\Nextcloud",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    if ( isset($cfg['host'], $cfg['user'], $cfg['pass']) ){\n      $this->path = 'https:\/\/'.$cfg['host'].self::prefix;\n      $this->obj = new \\Sabre\\DAV\\Client([\n        'baseUri' => $this->path,\n        'userName' => $cfg['user'],\n        'password' => $cfg['pass']\n      ]);\n    }\n    if ( !$this->obj ){\n      $this->error = X::_(\"Missing parameters\");\n    }\n  }",
            "startLine": 18,
            "endLine": 31,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getSize": {
            "name": "getSize",
            "summary": "Returns the size of the given dir or file, if no path is given it returns the size of the root folder",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Api\\Nextcloud",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path = '')\n  {\n    $tmp = $path;\n    $path = $this->getRealPath($path);\n    $size = $this->getProps($tmp, array(\n      '{http:\/\/owncloud.org\/ns}size'\n    ));\n    if ($size) {\n      return (int)array_values($size)[0];\n    }\n\n    return null;\n  }",
            "startLine": 39,
            "endLine": 51,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes the given file or folder",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Api\\Nextcloud",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path)\n  {\n    $success = false;\n    \/\/die(var_dump($path));\n    if ( !empty($path) && $this->exists($path) && !empty($this->obj->request('DELETE', $path)) ){\n      $success = true;\n    }\n    return $success;\n  }",
            "startLine": 59,
            "endLine": 67,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "exists": {
            "name": "exists",
            "summary": "Returns true if the given $path exists",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Api\\Nextcloud",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path)\n  {\n    try {\n      if ( $this->getProps($path, [\n        '{DAV:}resourcetype',\n        '{DAV:}getcontenttype'\n      ], 0) ){\n        return true;\n      }\n    }\n    catch (\\Sabre\\HTTP\\ClientException $e) {\n      if (isset($e->getResponse) && is_callable($e->getResponse)) {\n        if ( $e->getResponse()->getStatus() !== 404 ){\n          $this->error = $e->getResponse()->getStatusText();\n        }\n      }\n      else {\n        $this->error = $e->getMessage();\n      }\n    }\n\n    if ($this->error) {\n      throw new \\Exception($this->error);\n    }\n\n    return false;\n  }",
            "startLine": 102,
            "endLine": 128,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "mkdir": {
            "name": "mkdir",
            "summary": "Creates a dir at the given path",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Api\\Nextcloud",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($dir)\n  {\n    if ( !$this->exists($dir) && !empty($this->obj->request('MKCOL', $dir)) ){\n      $success = true;\n    }\n    return $success;\n  }",
            "startLine": 136,
            "endLine": 142,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "copy": {
            "name": "copy",
            "summary": "Copies the given file or folder to the given destination, if the given destination already exists throws an error.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Api\\Nextcloud",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $source, string $dest)\n  {\n    \n    if ( $this->exists($source) ){\n      \n      if ( !empty($dest) ){\n        if ( !$this->exists($dest) ){\n          return (bool)$this->obj->request('COPY', $source, null, [\n            'Destination' => self::prefix.$dest\n          ]);\n        }\n        else {\n          $this->error = X::_(\"The given destination already exists\");\n          return false;\n        }\n      }\n    }\n  }",
            "startLine": 150,
            "endLine": 167,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "source",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dest",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "rename": {
            "name": "rename",
            "summary": "Renames files or folder from the $old name to the $new name-",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Api\\Nextcloud",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $old, string $new)\n  {\n    if ( $this->exists($old) ){\n      if ( !$this->exists($new) ){\n        return (bool)$this->obj->request('MOVE', $old, null, [\n          'Destination' => $new\n        ]);\n      }\n      else {\n        $this->error = X::_(\"The new name given already exists\");\n        return false;\n      }\n    }\n    else {\n      $this->error = X::_(\"The given path does not correspond to a file or a directory\");\n      return false;\n    }\n  }",
            "startLine": 174,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "old",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "new",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isFile": {
            "name": "isFile",
            "summary": "Returns true if the given $path corresponds to a file.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Api\\Nextcloud",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path)\n  {\n    return !empty(\n      $this->getProps(\n        $path,\n        ['{DAV:}getcontenttype'],\n        0\n      )\n    );\n  }",
            "startLine": 198,
            "endLine": 207,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDir": {
            "name": "isDir",
            "summary": "Returns true if the given $path corresponds to a directory.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Api\\Nextcloud",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path)\n  {\n\n    return $this->exists($path) &&\n        empty(\n          $this->getProps(\n            $path,\n            ['{DAV:}getcontenttype'],\n            0\n          )\n        );\n  }",
            "startLine": 214,
            "endLine": 225,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "filemtime": {
            "name": "filemtime",
            "summary": "Returns the date of last modification of the given path",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Api\\Nextcloud",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path)\n  {\n    if ( $this->exists($path) ){\n      $mtime = $this->getProps($path, [\n        '{DAV:}getlastmodified'\n      ]);\n      if ( !empty($mtime['{DAV:}getlastmodified']) ){\n        return $mtime['{DAV:}getlastmodified'];\n      }\n      else {\n        $this->error = X::_(\"The last modification date cannot be retrieved\");\n        return null;\n      }  \n    }\n    else {\n       $this->error = X::_(\"The given path doesn't exist\");\n    }\n  }",
            "startLine": 231,
            "endLine": 248,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getFile": {
            "name": "getFile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Api\\Nextcloud",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $file)\n  {\n    if ( $this->isFile($file) ){\n      return new \\bbn\\File(\\bbn\\Mvc::getTmpPath().X::basename($file));\n    }\n  }",
            "startLine": 250,
            "endLine": 255,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "bbn\\File"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "download": {
            "name": "download",
            "summary": "Download the given file",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Api\\Nextcloud",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $file)\n  {\n    if ($this->isFile($file)) {\n      \/\/the tmp file destination\n      $dest = \\bbn\\Mvc::getTmpPath().X::basename($file);\n      \/\/gets the content of the file\n      $res = $this->obj->request('GET', $this->path.self::fixURL($file));\n      if (!empty($res) && !empty($res['body'])) {\n        \/\/ the tmp file created\n        if (file_put_contents($dest, $res['body'])) {\n          \/\/ instantiates the new file to the class \\bbn\\File\n          $tmp = new \\bbn\\File($dest);\n          $tmp->download();\n          \/\/unlink($dest);\n        } \n      }\n    }\n  }",
            "startLine": 261,
            "endLine": 278,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getItems": {
            "name": "getItems",
            "summary": "Returns an array of items contained in the given path, if no path is given it returns the root content, if the argument $detailed is given includes details of size and last modification time in the item",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Api\\Nextcloud",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path = '', $type = 'both', bool $hidden = false, string $detailed = '')\n  {\n    if ( empty($path) || ($path === '.') ){\n      $path = self::prefix;\n    }\n   \/\/ $path = $this->getSystemPath($path);\n    if ($this->isDir($path)) {\n      $props = ['{DAV:}getcontenttype'];\n      if ($detailed) {\n        if (strpos($detailed, 's')) {\n          $props[] = '{http:\/\/owncloud.org\/ns}size';\n        }\n        if (strpos($detailed, 'm')) {\n          $props[] = '{DAV:}getlastmodified';\n        }\n      }\n\n      $collection = $this->getProps($path, $props, 1);\n      if ( !empty($collection) ){\n        \/\/arrayt_shift to remove the parent included in the array\n        $dirs = [];\n        $files = [];\n        $has_dir = in_array($type, ['both', 'dir']);\n        $has_file = in_array($type, ['both', 'file']);\n        $num = 0;\n        foreach ( $collection as $i => $c ){\n          $num++;\n          \/\/ The 2 first child are .. and .\n          if ($num < 3) {\n            continue;\n          }\n\n          $npath = $name = str_replace(self::prefix, '', $i);\n          \/\/ removing trailing slash\n          if (empty($c['{DAV:}getcontenttype'])) {\n            $name = substr($npath, 0, -1);\n          }\n\n          $tmp = [\n            'path' => $npath,\n            'dir' => empty($c['{DAV:}getcontenttype']) ? true : false,\n            'file' => empty($c['{DAV:}getcontenttype']) ? false : true,\n            'name' => urldecode(X::basename($name)),\n          ];\n          if ($detailed) {\n            if (strpos($detailed, 's')) {\n              $tmp['size'] = $c['{http:\/\/owncloud.org\/ns}size'];\n            }\n            if (strpos($detailed, 'm')) {\n              $props['mtime'] = $c['{DAV:}getlastmodified'];\n            }\n          }\n\n          if ($has_dir && $tmp['dir']) {\n            $dirs[] = $tmp;\n          }\n          else if ($has_file && $tmp['file']) {\n            $files[] = $tmp ;\n          }\n        }\n        \n        if ($type === 'dir') {\n          return $dirs;\n        }\n        \n        if ($type === 'file') {\n          return $files;\n        }\n\n        \/\/ both\n        return array_merge($dirs, $files);\n      }  \n    }\n    else {\n      $this->error = X::_(\"The path doesn't exists or it's not a directory\");\n    }\n  }",
            "startLine": 289,
            "endLine": 365,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "both",
                    "default_name": "",
                    "description": "(both, Files, Dirs)"
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getRealPath": {
            "name": "getRealPath",
            "summary": "Returns the real path.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Api\\Nextcloud",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path)\n  {\n    if ( strpos($path, self::prefix) !== 0 ){\n      return self::prefix.$path;\n    }\n    else {\n      return $path;\n    }\n  }",
            "startLine": 372,
            "endLine": 380,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getSystemPath": {
            "name": "getSystemPath",
            "summary": "Returns the system path.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Api\\Nextcloud",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $file, bool $is_absolute = true)\n  {\n    if ( strpos($file, self::prefix) === 0 ){\n      return substr($file, strlen(self::prefix) + ($is_absolute ? 0 : 1) -1 );\n    }\n    else {\n      return $path;\n    }\n  }",
            "startLine": 389,
            "endLine": 397,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "is_absolute",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "absolute"
                }
            ]
        },
        "getContents": {
            "name": "getContents",
            "summary": "Returns the content of the given file",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Api\\Nextcloud",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($file)\n  {\n    if ( $this->exists($file) && $this->isFile($file) ){\n    \/\/gets the content of the file\n      $res = $this->obj->request('GET', $this->getRealPath($file));\n      if ( !empty($res) && !empty($res['body']) ){\n        return $res['body'];\n      }\n    }\n  }",
            "startLine": 405,
            "endLine": 414,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getFiles": {
            "name": "getFiles",
            "summary": "Returns the fies contained in the given $path",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Api\\Nextcloud",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path = NULL, $including_dirs = false, $hidden = false, $filter = NULL, string $detailed = '')\n  {\n    \/\/exists and is_dir is checked $path in the function get_items\n    $is_absolute = strpos($path, '\/') === 0;\n    $type = $including_dirs ? 'both' : 'file';\n    \/\/die(var_dump($path, $filter , $type, $hidden, $detailed))\/\/die(var_dump($this->getItems('.', 'both', true, 't')));\n    return $this->getItems($path, $filter ?: $type, $hidden, $detailed);\n  }",
            "startLine": 426,
            "endLine": 433,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "including_dirs",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "dirs"
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 4,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "upload": {
            "name": "upload",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Api\\Nextcloud",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $files, string $path)\n  {\n    $success = false;\n    if ( !empty($files) && !empty($path) ){\n      if ( strpos($path, '.') === 0){\n        $path = '';\n      }\n      foreach ( $files as $f ){\n        if ( is_file($f['tmp_name']) && ($content = file_get_contents($f['tmp_name'])) ){\n          \/\/ wanted to put '%' instead of ' ' in the filename but not accepted\n          $full_name =  $path . (($path !== '') ? '\/' : '' ) . str_replace(' ', '_',$f['name']);\n          if (!$this->exists($full_name) ){\n            if ( $this->obj->request('PUT', $full_name, $content) ){\n              return $success = true;\n            }\n          }\n        }\n      }\n    }\n    return $success;\n  }",
            "startLine": 435,
            "endLine": 455,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "files",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 50,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 50,
                "endLine": 57,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 64,
            "endLine": 71,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 64,
                "endLine": 71,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->error;\n  }",
            "startLine": 85,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 85,
                "endLine": 88,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 91,
            "endLine": 94,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 91,
                "endLine": 94,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 97,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 97,
                "endLine": 106,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 114,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 114,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": [],
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": [],
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": [],
    "constants": [],
    "summary": "",
    "description": "",
    "description_parts": []
}